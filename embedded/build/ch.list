
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08005000 <_vectors>:
 8005000:	20001000 	.word	0x20001000
 8005004:	08005239 	.word	0x08005239
 8005008:	0800523b 	.word	0x0800523b
 800500c:	0800523a 	.word	0x0800523a
 8005010:	0800523a 	.word	0x0800523a
 8005014:	0800523a 	.word	0x0800523a
 8005018:	0800523a 	.word	0x0800523a
 800501c:	0800523a 	.word	0x0800523a
 8005020:	0800523a 	.word	0x0800523a
 8005024:	0800523a 	.word	0x0800523a
 8005028:	0800523a 	.word	0x0800523a
 800502c:	08009c21 	.word	0x08009c21
 8005030:	0800523a 	.word	0x0800523a
 8005034:	0800523a 	.word	0x0800523a
 8005038:	0800523a 	.word	0x0800523a
 800503c:	0800523a 	.word	0x0800523a
 8005040:	0800523a 	.word	0x0800523a
 8005044:	0800523a 	.word	0x0800523a
 8005048:	0800523a 	.word	0x0800523a
 800504c:	0800523a 	.word	0x0800523a
 8005050:	0800523a 	.word	0x0800523a
 8005054:	0800523a 	.word	0x0800523a
 8005058:	08009be1 	.word	0x08009be1
 800505c:	08009b91 	.word	0x08009b91
 8005060:	08009b41 	.word	0x08009b41
 8005064:	08009af1 	.word	0x08009af1
 8005068:	08009aa1 	.word	0x08009aa1
 800506c:	0800523a 	.word	0x0800523a
 8005070:	0800523a 	.word	0x0800523a
 8005074:	0800523a 	.word	0x0800523a
 8005078:	0800523a 	.word	0x0800523a
 800507c:	0800523a 	.word	0x0800523a
 8005080:	0800523a 	.word	0x0800523a
 8005084:	0800523a 	.word	0x0800523a
 8005088:	0800523a 	.word	0x0800523a
 800508c:	0800523a 	.word	0x0800523a
 8005090:	080094d1 	.word	0x080094d1
 8005094:	0800523a 	.word	0x0800523a
 8005098:	0800523a 	.word	0x0800523a
 800509c:	080099b1 	.word	0x080099b1
 80050a0:	0800523a 	.word	0x0800523a
 80050a4:	0800523a 	.word	0x0800523a
 80050a8:	0800523a 	.word	0x0800523a
 80050ac:	0800523a 	.word	0x0800523a
 80050b0:	080097f1 	.word	0x080097f1
 80050b4:	0800523a 	.word	0x0800523a
 80050b8:	0800523a 	.word	0x0800523a
 80050bc:	0800523a 	.word	0x0800523a
 80050c0:	0800523a 	.word	0x0800523a
 80050c4:	0800523a 	.word	0x0800523a
 80050c8:	0800523a 	.word	0x0800523a
 80050cc:	0800523a 	.word	0x0800523a
 80050d0:	0800523a 	.word	0x0800523a
 80050d4:	0800523a 	.word	0x0800523a
 80050d8:	0800523a 	.word	0x0800523a
 80050dc:	0800523a 	.word	0x0800523a
 80050e0:	08009891 	.word	0x08009891
 80050e4:	0800523a 	.word	0x0800523a
 80050e8:	0800523a 	.word	0x0800523a
 80050ec:	0800523a 	.word	0x0800523a
 80050f0:	0800523a 	.word	0x0800523a
 80050f4:	0800523a 	.word	0x0800523a
 80050f8:	0800523a 	.word	0x0800523a
 80050fc:	0800523a 	.word	0x0800523a
 8005100:	0800523a 	.word	0x0800523a
 8005104:	0800523a 	.word	0x0800523a
 8005108:	0800523a 	.word	0x0800523a
 800510c:	0800523a 	.word	0x0800523a
 8005110:	0800523a 	.word	0x0800523a
 8005114:	0800523a 	.word	0x0800523a
 8005118:	0800523a 	.word	0x0800523a
 800511c:	0800523a 	.word	0x0800523a
 8005120:	0800523a 	.word	0x0800523a
 8005124:	0800523a 	.word	0x0800523a
 8005128:	0800523a 	.word	0x0800523a
 800512c:	0800523a 	.word	0x0800523a
 8005130:	0800523a 	.word	0x0800523a
 8005134:	0800523a 	.word	0x0800523a
 8005138:	0800523a 	.word	0x0800523a
 800513c:	0800523a 	.word	0x0800523a
 8005140:	0800523a 	.word	0x0800523a
 8005144:	0800523a 	.word	0x0800523a
 8005148:	0800523a 	.word	0x0800523a
 800514c:	0800523a 	.word	0x0800523a
 8005150:	0800523a 	.word	0x0800523a
 8005154:	0800523a 	.word	0x0800523a
 8005158:	0800523a 	.word	0x0800523a
 800515c:	0800523a 	.word	0x0800523a

Disassembly of section .text:

08005160 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8005160:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8005162:	4827      	ldr	r0, [pc, #156]	; (8005200 <endfiniloop+0x4>)
                msr     MSP, r0
 8005164:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8005168:	4826      	ldr	r0, [pc, #152]	; (8005204 <endfiniloop+0x8>)
                msr     PSP, r0
 800516a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800516e:	4826      	ldr	r0, [pc, #152]	; (8005208 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8005170:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8005174:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8005178:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800517a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800517c:	f380 8814 	msr	CONTROL, r0
                isb
 8005180:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8005184:	f009 f89c 	bl	800e2c0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8005188:	f004 f962 	bl	8009450 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800518c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8005190:	491e      	ldr	r1, [pc, #120]	; (800520c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8005192:	4a1b      	ldr	r2, [pc, #108]	; (8005200 <endfiniloop+0x4>)

08005194 <msloop>:
msloop:
                cmp     r1, r2
 8005194:	4291      	cmp	r1, r2
                itt     lo
 8005196:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8005198:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800519c:	e7fa      	bcc.n	8005194 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800519e:	491c      	ldr	r1, [pc, #112]	; (8005210 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80051a0:	4a18      	ldr	r2, [pc, #96]	; (8005204 <endfiniloop+0x8>)

080051a2 <psloop>:
psloop:
                cmp     r1, r2
 80051a2:	4291      	cmp	r1, r2
                itt     lo
 80051a4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80051a6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80051aa:	e7fa      	bcc.n	80051a2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 80051ac:	4919      	ldr	r1, [pc, #100]	; (8005214 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 80051ae:	4a1a      	ldr	r2, [pc, #104]	; (8005218 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 80051b0:	4b1a      	ldr	r3, [pc, #104]	; (800521c <endfiniloop+0x20>)

080051b2 <dloop>:
dloop:
                cmp     r2, r3
 80051b2:	429a      	cmp	r2, r3
                ittt    lo
 80051b4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80051b6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80051ba:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80051be:	e7f8      	bcc.n	80051b2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 80051c0:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 80051c2:	4917      	ldr	r1, [pc, #92]	; (8005220 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 80051c4:	4a17      	ldr	r2, [pc, #92]	; (8005224 <endfiniloop+0x28>)

080051c6 <bloop>:
bloop:
                cmp     r1, r2
 80051c6:	4291      	cmp	r1, r2
                itt     lo
 80051c8:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80051ca:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80051ce:	e7fa      	bcc.n	80051c6 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80051d0:	f009 f82e 	bl	800e230 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80051d4:	f009 f86c 	bl	800e2b0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 80051d8:	4c13      	ldr	r4, [pc, #76]	; (8005228 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 80051da:	4d14      	ldr	r5, [pc, #80]	; (800522c <endfiniloop+0x30>)

080051dc <initloop>:
initloop:
                cmp     r4, r5
 80051dc:	42ac      	cmp	r4, r5
                bge     endinitloop
 80051de:	da03      	bge.n	80051e8 <endinitloop>
                ldr     r1, [r4], #4
 80051e0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80051e4:	4788      	blx	r1
                b       initloop
 80051e6:	e7f9      	b.n	80051dc <initloop>

080051e8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80051e8:	f006 ffea 	bl	800c1c0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 80051ec:	4c10      	ldr	r4, [pc, #64]	; (8005230 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 80051ee:	4d11      	ldr	r5, [pc, #68]	; (8005234 <endfiniloop+0x38>)

080051f0 <finiloop>:
finiloop:
                cmp     r4, r5
 80051f0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80051f2:	da03      	bge.n	80051fc <endfiniloop>
                ldr     r1, [r4], #4
 80051f4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80051f8:	4788      	blx	r1
                b       finiloop
 80051fa:	e7f9      	b.n	80051f0 <finiloop>

080051fc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80051fc:	f009 b850 	b.w	800e2a0 <__default_exit>
                ldr     r0, =__main_stack_end__
 8005200:	20001000 	.word	0x20001000
                ldr     r0, =__process_stack_end__
 8005204:	20001400 	.word	0x20001400
                ldr     r0, =_vectors
 8005208:	08005000 	.word	0x08005000
                ldr     r1, =__main_stack_base__
 800520c:	20000c00 	.word	0x20000c00
                ldr     r1, =__process_stack_base__
 8005210:	20001000 	.word	0x20001000
                ldr     r1, =_textdata_start
 8005214:	08010ce4 	.word	0x08010ce4
                ldr     r2, =_data_start
 8005218:	20001400 	.word	0x20001400
                ldr     r3, =_data_end
 800521c:	20001898 	.word	0x20001898
                ldr     r1, =_bss_start
 8005220:	20001898 	.word	0x20001898
                ldr     r2, =_bss_end
 8005224:	200029e0 	.word	0x200029e0
                ldr     r4, =__init_array_start
 8005228:	08005160 	.word	0x08005160
                ldr     r5, =__init_array_end
 800522c:	08005160 	.word	0x08005160
                ldr     r4, =__fini_array_start
 8005230:	08005160 	.word	0x08005160
                ldr     r5, =__fini_array_end
 8005234:	08005160 	.word	0x08005160

08005238 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8005238:	e792      	b.n	8005160 <_crt0_entry>

0800523a <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
         b          _unhandled_exception
 800523a:	e7ff      	b.n	800523c <_unhandled_exception>

0800523c <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800523c:	e7fe      	b.n	800523c <_unhandled_exception>
 800523e:	46c0      	nop			; (mov r8, r8)

08005240 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8005240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8005244:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8005248:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800524a:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800524c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005250 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8005250:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8005252:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8005256:	4628      	mov	r0, r5
                blx     r4
 8005258:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 800525a:	2000      	movs	r0, #0
                bl      chThdExit
 800525c:	f004 fcf0 	bl	8009c40 <chThdExit>

08005260 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8005260:	f004 fcfe 	bl	8009c60 <chSchDoReschedule>

08005264 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8005264:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8005266:	e7fe      	b.n	8005266 <_port_exit_from_isr+0x2>

08005268 <memcpy>:
 8005268:	4684      	mov	ip, r0
 800526a:	ea41 0300 	orr.w	r3, r1, r0
 800526e:	f013 0303 	ands.w	r3, r3, #3
 8005272:	d149      	bne.n	8005308 <memcpy+0xa0>
 8005274:	3a40      	subs	r2, #64	; 0x40
 8005276:	d323      	bcc.n	80052c0 <memcpy+0x58>
 8005278:	680b      	ldr	r3, [r1, #0]
 800527a:	6003      	str	r3, [r0, #0]
 800527c:	684b      	ldr	r3, [r1, #4]
 800527e:	6043      	str	r3, [r0, #4]
 8005280:	688b      	ldr	r3, [r1, #8]
 8005282:	6083      	str	r3, [r0, #8]
 8005284:	68cb      	ldr	r3, [r1, #12]
 8005286:	60c3      	str	r3, [r0, #12]
 8005288:	690b      	ldr	r3, [r1, #16]
 800528a:	6103      	str	r3, [r0, #16]
 800528c:	694b      	ldr	r3, [r1, #20]
 800528e:	6143      	str	r3, [r0, #20]
 8005290:	698b      	ldr	r3, [r1, #24]
 8005292:	6183      	str	r3, [r0, #24]
 8005294:	69cb      	ldr	r3, [r1, #28]
 8005296:	61c3      	str	r3, [r0, #28]
 8005298:	6a0b      	ldr	r3, [r1, #32]
 800529a:	6203      	str	r3, [r0, #32]
 800529c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800529e:	6243      	str	r3, [r0, #36]	; 0x24
 80052a0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80052a2:	6283      	str	r3, [r0, #40]	; 0x28
 80052a4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80052a6:	62c3      	str	r3, [r0, #44]	; 0x2c
 80052a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80052aa:	6303      	str	r3, [r0, #48]	; 0x30
 80052ac:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80052ae:	6343      	str	r3, [r0, #52]	; 0x34
 80052b0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80052b2:	6383      	str	r3, [r0, #56]	; 0x38
 80052b4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80052b6:	63c3      	str	r3, [r0, #60]	; 0x3c
 80052b8:	3040      	adds	r0, #64	; 0x40
 80052ba:	3140      	adds	r1, #64	; 0x40
 80052bc:	3a40      	subs	r2, #64	; 0x40
 80052be:	d2db      	bcs.n	8005278 <memcpy+0x10>
 80052c0:	3230      	adds	r2, #48	; 0x30
 80052c2:	d30b      	bcc.n	80052dc <memcpy+0x74>
 80052c4:	680b      	ldr	r3, [r1, #0]
 80052c6:	6003      	str	r3, [r0, #0]
 80052c8:	684b      	ldr	r3, [r1, #4]
 80052ca:	6043      	str	r3, [r0, #4]
 80052cc:	688b      	ldr	r3, [r1, #8]
 80052ce:	6083      	str	r3, [r0, #8]
 80052d0:	68cb      	ldr	r3, [r1, #12]
 80052d2:	60c3      	str	r3, [r0, #12]
 80052d4:	3010      	adds	r0, #16
 80052d6:	3110      	adds	r1, #16
 80052d8:	3a10      	subs	r2, #16
 80052da:	d2f3      	bcs.n	80052c4 <memcpy+0x5c>
 80052dc:	320c      	adds	r2, #12
 80052de:	d305      	bcc.n	80052ec <memcpy+0x84>
 80052e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80052e4:	f840 3b04 	str.w	r3, [r0], #4
 80052e8:	3a04      	subs	r2, #4
 80052ea:	d2f9      	bcs.n	80052e0 <memcpy+0x78>
 80052ec:	3204      	adds	r2, #4
 80052ee:	d008      	beq.n	8005302 <memcpy+0x9a>
 80052f0:	07d2      	lsls	r2, r2, #31
 80052f2:	bf1c      	itt	ne
 80052f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80052f8:	f800 3b01 	strbne.w	r3, [r0], #1
 80052fc:	d301      	bcc.n	8005302 <memcpy+0x9a>
 80052fe:	880b      	ldrh	r3, [r1, #0]
 8005300:	8003      	strh	r3, [r0, #0]
 8005302:	4660      	mov	r0, ip
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	2a08      	cmp	r2, #8
 800530a:	d313      	bcc.n	8005334 <memcpy+0xcc>
 800530c:	078b      	lsls	r3, r1, #30
 800530e:	d0b1      	beq.n	8005274 <memcpy+0xc>
 8005310:	f010 0303 	ands.w	r3, r0, #3
 8005314:	d0ae      	beq.n	8005274 <memcpy+0xc>
 8005316:	f1c3 0304 	rsb	r3, r3, #4
 800531a:	1ad2      	subs	r2, r2, r3
 800531c:	07db      	lsls	r3, r3, #31
 800531e:	bf1c      	itt	ne
 8005320:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8005324:	f800 3b01 	strbne.w	r3, [r0], #1
 8005328:	d3a4      	bcc.n	8005274 <memcpy+0xc>
 800532a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800532e:	f820 3b02 	strh.w	r3, [r0], #2
 8005332:	e79f      	b.n	8005274 <memcpy+0xc>
 8005334:	3a04      	subs	r2, #4
 8005336:	d3d9      	bcc.n	80052ec <memcpy+0x84>
 8005338:	3a01      	subs	r2, #1
 800533a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800533e:	f800 3b01 	strb.w	r3, [r0], #1
 8005342:	d2f9      	bcs.n	8005338 <memcpy+0xd0>
 8005344:	780b      	ldrb	r3, [r1, #0]
 8005346:	7003      	strb	r3, [r0, #0]
 8005348:	784b      	ldrb	r3, [r1, #1]
 800534a:	7043      	strb	r3, [r0, #1]
 800534c:	788b      	ldrb	r3, [r1, #2]
 800534e:	7083      	strb	r3, [r0, #2]
 8005350:	4660      	mov	r0, ip
 8005352:	4770      	bx	lr

08005354 <strcmp>:
 8005354:	ea80 0c01 	eor.w	ip, r0, r1
 8005358:	f01c 0f03 	tst.w	ip, #3
 800535c:	d137      	bne.n	80053ce <strcmp+0x7a>
 800535e:	f010 0c03 	ands.w	ip, r0, #3
 8005362:	f020 0003 	bic.w	r0, r0, #3
 8005366:	f021 0103 	bic.w	r1, r1, #3
 800536a:	f850 2b04 	ldr.w	r2, [r0], #4
 800536e:	bf08      	it	eq
 8005370:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005374:	d00e      	beq.n	8005394 <strcmp+0x40>
 8005376:	f08c 0c03 	eor.w	ip, ip, #3
 800537a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800537e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8005382:	fa23 fc0c 	lsr.w	ip, r3, ip
 8005386:	f851 3b04 	ldr.w	r3, [r1], #4
 800538a:	ea42 020c 	orr.w	r2, r2, ip
 800538e:	ea43 030c 	orr.w	r3, r3, ip
 8005392:	bf00      	nop
 8005394:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8005398:	429a      	cmp	r2, r3
 800539a:	bf01      	itttt	eq
 800539c:	ea2c 0c02 	biceq.w	ip, ip, r2
 80053a0:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
 80053a4:	f850 2b04 	ldreq.w	r2, [r0], #4
 80053a8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80053ac:	d0f2      	beq.n	8005394 <strcmp+0x40>
 80053ae:	ea4f 6002 	mov.w	r0, r2, lsl #24
 80053b2:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80053b6:	2801      	cmp	r0, #1
 80053b8:	bf28      	it	cs
 80053ba:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 80053be:	bf08      	it	eq
 80053c0:	0a1b      	lsreq	r3, r3, #8
 80053c2:	d0f4      	beq.n	80053ae <strcmp+0x5a>
 80053c4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80053c8:	0e00      	lsrs	r0, r0, #24
 80053ca:	1ac0      	subs	r0, r0, r3
 80053cc:	4770      	bx	lr
 80053ce:	f010 0f03 	tst.w	r0, #3
 80053d2:	d00a      	beq.n	80053ea <strcmp+0x96>
 80053d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053dc:	2a01      	cmp	r2, #1
 80053de:	bf28      	it	cs
 80053e0:	429a      	cmpcs	r2, r3
 80053e2:	d0f4      	beq.n	80053ce <strcmp+0x7a>
 80053e4:	eba2 0003 	sub.w	r0, r2, r3
 80053e8:	4770      	bx	lr
 80053ea:	f84d 5d04 	str.w	r5, [sp, #-4]!
 80053ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80053f2:	f001 0503 	and.w	r5, r1, #3
 80053f6:	f021 0103 	bic.w	r1, r1, #3
 80053fa:	f851 3b04 	ldr.w	r3, [r1], #4
 80053fe:	2d02      	cmp	r5, #2
 8005400:	d026      	beq.n	8005450 <strcmp+0xfc>
 8005402:	d84d      	bhi.n	80054a0 <strcmp+0x14c>
 8005404:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
 8005408:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
 800540c:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8005410:	ea2c 0c02 	bic.w	ip, ip, r2
 8005414:	d10d      	bne.n	8005432 <strcmp+0xde>
 8005416:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 800541a:	bf08      	it	eq
 800541c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005420:	d10a      	bne.n	8005438 <strcmp+0xe4>
 8005422:	ea85 0502 	eor.w	r5, r5, r2
 8005426:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
 800542a:	d10c      	bne.n	8005446 <strcmp+0xf2>
 800542c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005430:	e7e8      	b.n	8005404 <strcmp+0xb0>
 8005432:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8005436:	e05b      	b.n	80054f0 <strcmp+0x19c>
 8005438:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
 800543c:	d154      	bne.n	80054e8 <strcmp+0x194>
 800543e:	780b      	ldrb	r3, [r1, #0]
 8005440:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8005444:	e054      	b.n	80054f0 <strcmp+0x19c>
 8005446:	ea4f 6512 	mov.w	r5, r2, lsr #24
 800544a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800544e:	e04f      	b.n	80054f0 <strcmp+0x19c>
 8005450:	ea4f 4502 	mov.w	r5, r2, lsl #16
 8005454:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8005458:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800545c:	ea2c 0c02 	bic.w	ip, ip, r2
 8005460:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
 8005464:	d118      	bne.n	8005498 <strcmp+0x144>
 8005466:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 800546a:	bf08      	it	eq
 800546c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005470:	d107      	bne.n	8005482 <strcmp+0x12e>
 8005472:	ea85 0502 	eor.w	r5, r5, r2
 8005476:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
 800547a:	d109      	bne.n	8005490 <strcmp+0x13c>
 800547c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005480:	e7e6      	b.n	8005450 <strcmp+0xfc>
 8005482:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 8005486:	d12f      	bne.n	80054e8 <strcmp+0x194>
 8005488:	880b      	ldrh	r3, [r1, #0]
 800548a:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800548e:	e02f      	b.n	80054f0 <strcmp+0x19c>
 8005490:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8005494:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8005498:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800549c:	e028      	b.n	80054f0 <strcmp+0x19c>
 800549e:	bf00      	nop
 80054a0:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 80054a4:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
 80054a8:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 80054ac:	ea2c 0c02 	bic.w	ip, ip, r2
 80054b0:	d10d      	bne.n	80054ce <strcmp+0x17a>
 80054b2:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 80054b6:	bf08      	it	eq
 80054b8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80054bc:	d10a      	bne.n	80054d4 <strcmp+0x180>
 80054be:	ea85 0502 	eor.w	r5, r5, r2
 80054c2:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
 80054c6:	d10a      	bne.n	80054de <strcmp+0x18a>
 80054c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80054cc:	e7e8      	b.n	80054a0 <strcmp+0x14c>
 80054ce:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80054d2:	e00d      	b.n	80054f0 <strcmp+0x19c>
 80054d4:	f012 0fff 	tst.w	r2, #255	; 0xff
 80054d8:	d006      	beq.n	80054e8 <strcmp+0x194>
 80054da:	f851 3b04 	ldr.w	r3, [r1], #4
 80054de:	ea4f 2512 	mov.w	r5, r2, lsr #8
 80054e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054e6:	e003      	b.n	80054f0 <strcmp+0x19c>
 80054e8:	f04f 0000 	mov.w	r0, #0
 80054ec:	bc20      	pop	{r5}
 80054ee:	4770      	bx	lr
 80054f0:	f005 02ff 	and.w	r2, r5, #255	; 0xff
 80054f4:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80054f8:	2801      	cmp	r0, #1
 80054fa:	bf28      	it	cs
 80054fc:	4290      	cmpcs	r0, r2
 80054fe:	bf04      	itt	eq
 8005500:	0a2d      	lsreq	r5, r5, #8
 8005502:	0a1b      	lsreq	r3, r3, #8
 8005504:	d0f4      	beq.n	80054f0 <strcmp+0x19c>
 8005506:	eba2 0000 	sub.w	r0, r2, r0
 800550a:	bc20      	pop	{r5}
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop

08005510 <chMtxTryLock.constprop.80>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005510:	2320      	movs	r3, #32
 8005512:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 8005516:	4b09      	ldr	r3, [pc, #36]	; (800553c <chMtxTryLock.constprop.80+0x2c>)
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	b122      	cbz	r2, 8005526 <chMtxTryLock.constprop.80+0x16>
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 800551c:	2000      	movs	r0, #0
 800551e:	2300      	movs	r3, #0
 8005520:	f383 8811 	msr	BASEPRI, r3
}
 8005524:	4770      	bx	lr

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 8005526:	4a06      	ldr	r2, [pc, #24]	; (8005540 <chMtxTryLock.constprop.80+0x30>)
  mp->next = currp->mtxlist;
  currp->mtxlist = mp;
 8005528:	2001      	movs	r0, #1
  mp->owner = currp;
 800552a:	6992      	ldr	r2, [r2, #24]
  mp->next = currp->mtxlist;
 800552c:	6b91      	ldr	r1, [r2, #56]	; 0x38
  currp->mtxlist = mp;
 800552e:	6393      	str	r3, [r2, #56]	; 0x38
  mp->next = currp->mtxlist;
 8005530:	e9c3 2102 	strd	r2, r1, [r3, #8]
 8005534:	2300      	movs	r3, #0
 8005536:	f383 8811 	msr	BASEPRI, r3
}
 800553a:	4770      	bx	lr
 800553c:	20001838 	.word	0x20001838
 8005540:	20001eb0 	.word	0x20001eb0
	...

08005550 <chEvtGetAndClearEvents.constprop.70>:
 8005550:	2320      	movs	r3, #32
 8005552:	f383 8811 	msr	BASEPRI, r3
 */
eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
  eventmask_t m;

  m = currp->epending & events;
  currp->epending &= ~events;
 8005556:	2300      	movs	r3, #0
  m = currp->epending & events;
 8005558:	4a03      	ldr	r2, [pc, #12]	; (8005568 <chEvtGetAndClearEvents.constprop.70+0x18>)
 800555a:	6992      	ldr	r2, [r2, #24]
 800555c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->epending &= ~events;
 800555e:	6353      	str	r3, [r2, #52]	; 0x34
 8005560:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  m = chEvtGetAndClearEventsI(events);
  chSysUnlock();

  return m;
}
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20001eb0 	.word	0x20001eb0
 800556c:	00000000 	.word	0x00000000

08005570 <_test_assert_time_window.constprop.3>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8005570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((time - start) < (end - start));
 8005576:	1a09      	subs	r1, r1, r0
 8005578:	b29b      	uxth	r3, r3
 800557a:	1a18      	subs	r0, r3, r0
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
 800557c:	4288      	cmp	r0, r1
 800557e:	db0a      	blt.n	8005596 <_test_assert_time_window.constprop.3+0x26>
  test_local_fail      = true;
 8005580:	2001      	movs	r0, #1
  clear_tokens();

  return false;
}

bool _test_assert_time_window(systime_t start,
 8005582:	b410      	push	{r4}
  test_global_fail     = true;
 8005584:	4905      	ldr	r1, [pc, #20]	; (800559c <_test_assert_time_window.constprop.3+0x2c>)
  test_local_fail      = true;
 8005586:	4c06      	ldr	r4, [pc, #24]	; (80055a0 <_test_assert_time_window.constprop.3+0x30>)
  test_failure_message = msg;
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <_test_assert_time_window.constprop.3+0x34>)
 800558a:	4a07      	ldr	r2, [pc, #28]	; (80055a8 <_test_assert_time_window.constprop.3+0x38>)
  test_local_fail      = true;
 800558c:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 800558e:	7008      	strb	r0, [r1, #0]
  test_failure_message = msg;
 8005590:	601a      	str	r2, [r3, #0]
                              systime_t end,
                              const char *msg) {

  return _test_assert(osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end),
                      msg);
}
 8005592:	bc10      	pop	{r4}
 8005594:	4770      	bx	lr
  return false;
 8005596:	2000      	movs	r0, #0
}
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	20002798 	.word	0x20002798
 80055a0:	20002838 	.word	0x20002838
 80055a4:	20002794 	.word	0x20002794
 80055a8:	0800e5b8 	.word	0x0800e5b8
 80055ac:	00000000 	.word	0x00000000

080055b0 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 80055b0:	b470      	push	{r4, r5, r6}
 80055b2:	2320      	movs	r3, #32
 80055b4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80055b8:	4c0d      	ldr	r4, [pc, #52]	; (80055f0 <chCoreAllocAlignedWithOffset+0x40>)
 80055ba:	1e4d      	subs	r5, r1, #1
 80055bc:	6826      	ldr	r6, [r4, #0]
  size = MEM_ALIGN_NEXT(size, align);
 80055be:	1943      	adds	r3, r0, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80055c0:	18b0      	adds	r0, r6, r2
  size = MEM_ALIGN_NEXT(size, align);
 80055c2:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80055c4:	4428      	add	r0, r5
  size = MEM_ALIGN_NEXT(size, align);
 80055c6:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80055c8:	4008      	ands	r0, r1
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80055ca:	6862      	ldr	r2, [r4, #4]
  next = p + size;
 80055cc:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d807      	bhi.n	80055e2 <chCoreAllocAlignedWithOffset+0x32>
 80055d2:	429e      	cmp	r6, r3
 80055d4:	d805      	bhi.n	80055e2 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
 80055d6:	6023      	str	r3, [r4, #0]
 80055d8:	2300      	movs	r3, #0
 80055da:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 80055de:	bc70      	pop	{r4, r5, r6}
 80055e0:	4770      	bx	lr
    return NULL;
 80055e2:	2000      	movs	r0, #0
 80055e4:	2300      	movs	r3, #0
 80055e6:	f383 8811 	msr	BASEPRI, r3
}
 80055ea:	bc70      	pop	{r4, r5, r6}
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	20002040 	.word	0x20002040
	...

08005600 <get_descriptor>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8005600:	2902      	cmp	r1, #2
 8005602:	d006      	beq.n	8005612 <get_descriptor+0x12>
 8005604:	2903      	cmp	r1, #3
 8005606:	d006      	beq.n	8005616 <get_descriptor+0x16>
 8005608:	2901      	cmp	r1, #1
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 800560a:	4806      	ldr	r0, [pc, #24]	; (8005624 <get_descriptor+0x24>)
 800560c:	bf18      	it	ne
 800560e:	2000      	movne	r0, #0
 8005610:	4770      	bx	lr
    return &vcom_configuration_descriptor;
 8005612:	4805      	ldr	r0, [pc, #20]	; (8005628 <get_descriptor+0x28>)
 8005614:	4770      	bx	lr
    if (dindex < 4)
 8005616:	2a03      	cmp	r2, #3
      return &vcom_strings[dindex];
 8005618:	bf9a      	itte	ls
 800561a:	4804      	ldrls	r0, [pc, #16]	; (800562c <get_descriptor+0x2c>)
 800561c:	eb00 00c2 	addls.w	r0, r0, r2, lsl #3
  return NULL;
 8005620:	2000      	movhi	r0, #0
}
 8005622:	4770      	bx	lr
 8005624:	08010c00 	.word	0x08010c00
 8005628:	08010bb4 	.word	0x08010bb4
 800562c:	08010c88 	.word	0x08010c88

08005630 <oslib_test_003_001_setup>:
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 8005630:	2000      	movs	r0, #0
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8005632:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <oslib_test_003_001_setup+0x30>)
  heapp->provider = NULL;
 8005634:	4a0b      	ldr	r2, [pc, #44]	; (8005664 <oslib_test_003_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8005636:	1dd9      	adds	r1, r3, #7
 8005638:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 800563c:	1acb      	subs	r3, r1, r3
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800563e:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 * - [3.1.10] Testing final conditions. The heap geometry must be the
 *   same than the one registered at beginning.
 * .
 */

static void oslib_test_003_001_setup(void) {
 8005642:	b410      	push	{r4}
 8005644:	08db      	lsrs	r3, r3, #3
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8005646:	f102 040c 	add.w	r4, r2, #12
 800564a:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 800564c:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 800564e:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8005650:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 8005654:	6010      	str	r0, [r2, #0]
  H_PAGES(&heapp->header) = 0;
 8005656:	6090      	str	r0, [r2, #8]
  mp->owner = NULL;
 8005658:	6150      	str	r0, [r2, #20]
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 800565a:	bc10      	pop	{r4}
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	200027b8 	.word	0x200027b8
 8005664:	2000279c 	.word	0x2000279c
	...

08005670 <oslib_test_002_003_setup>:
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8005670:	2200      	movs	r2, #0
  mp->object_size = size;
 8005672:	2104      	movs	r1, #4
  mp->next = NULL;
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <oslib_test_002_003_setup+0x18>)
 8005676:	60da      	str	r2, [r3, #12]
  mp->align = align;
  mp->provider = provider;
 8005678:	619a      	str	r2, [r3, #24]
 800567a:	e9c3 3300 	strd	r3, r3, [r3]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 800567e:	609a      	str	r2, [r3, #8]
  mp->align = align;
 8005680:	e9c3 1104 	strd	r1, r1, [r3, #16]
 * .
 */

static void oslib_test_002_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20001814 	.word	0x20001814
 800568c:	00000000 	.word	0x00000000

08005690 <oslib_test_002_002_setup>:
 8005690:	f7ff bfee 	b.w	8005670 <oslib_test_002_003_setup>
	...

080056a0 <null_provider>:
}
 80056a0:	2000      	movs	r0, #0
 80056a2:	4770      	bx	lr
	...

080056b0 <oslib_test_002_001_setup>:
  mp->next = NULL;
 80056b0:	2100      	movs	r1, #0
  mp->object_size = size;
 80056b2:	2204      	movs	r2, #4
  mp->next = NULL;
 80056b4:	4b02      	ldr	r3, [pc, #8]	; (80056c0 <oslib_test_002_001_setup+0x10>)
 80056b6:	6019      	str	r1, [r3, #0]
  mp->provider = provider;
 80056b8:	60d9      	str	r1, [r3, #12]
  mp->align = align;
 80056ba:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
 80056be:	4770      	bx	lr
 80056c0:	20001880 	.word	0x20001880
	...

080056d0 <oslib_test_001_003_setup>:

  mbp->buffer = buf;
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
  mbp->cnt    = (size_t)0;
 80056d0:	2100      	movs	r1, #0
 *   active state.
 * - [1.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_001_003_setup(void) {
 80056d2:	b430      	push	{r4, r5}
  mbp->buffer = buf;
 80056d4:	4b09      	ldr	r3, [pc, #36]	; (80056fc <oslib_test_001_003_setup+0x2c>)
 80056d6:	4a0a      	ldr	r2, [pc, #40]	; (8005700 <oslib_test_001_003_setup+0x30>)
  tqp->next = (thread_t *)tqp;
 80056d8:	f103 0418 	add.w	r4, r3, #24
  mbp->top    = &buf[n];
 80056dc:	f102 0510 	add.w	r5, r2, #16
 80056e0:	f103 0020 	add.w	r0, r3, #32
 80056e4:	605d      	str	r5, [r3, #4]
  tqp->prev = (thread_t *)tqp;
 80056e6:	e9c3 4406 	strd	r4, r4, [r3, #24]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 80056ea:	bc30      	pop	{r4, r5}
  mbp->buffer = buf;
 80056ec:	601a      	str	r2, [r3, #0]
  mbp->wrptr  = buf;
 80056ee:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80056f2:	e9c3 0008 	strd	r0, r0, [r3, #32]
  mbp->cnt    = (size_t)0;
 80056f6:	6119      	str	r1, [r3, #16]
  mbp->reset  = false;
 80056f8:	7519      	strb	r1, [r3, #20]
 80056fa:	4770      	bx	lr
 80056fc:	20001858 	.word	0x20001858
 8005700:	200020c8 	.word	0x200020c8
	...

08005710 <oslib_test_001_002_setup>:
 8005710:	f7ff bfde 	b.w	80056d0 <oslib_test_001_003_setup>
	...

08005720 <oslib_test_001_001_setup>:
 8005720:	f7ff bfd6 	b.w	80056d0 <oslib_test_001_003_setup>
	...

08005730 <rt_test_010_011_setup>:
 8005730:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
 8005732:	4b02      	ldr	r3, [pc, #8]	; (800573c <rt_test_010_011_setup+0xc>)
 8005734:	609a      	str	r2, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 8005736:	e9c3 3300 	strd	r3, r3, [r3]
 * .
 */

static void rt_test_010_011_setup(void) {
  chMtxObjectInit(&mtx1);
}
 800573a:	4770      	bx	lr
 800573c:	200020e8 	.word	0x200020e8

08005740 <rt_test_010_010_setup>:
 8005740:	2201      	movs	r2, #1
  tqp->next = (thread_t *)tqp;
 8005742:	4b02      	ldr	r3, [pc, #8]	; (800574c <rt_test_010_010_setup+0xc>)
 8005744:	609a      	str	r2, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 8005746:	e9c3 3300 	strd	r3, r3, [r3]
}
 800574a:	4770      	bx	lr
 800574c:	20002114 	.word	0x20002114

08005750 <tmo>:
static void tmo(void *param) {(void)param;}
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
	...

08005760 <rt_test_010_007_setup>:
 8005760:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
 8005762:	4b02      	ldr	r3, [pc, #8]	; (800576c <rt_test_010_007_setup+0xc>)
 8005764:	609a      	str	r2, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 8005766:	e9c3 3300 	strd	r3, r3, [r3]
}
 800576a:	4770      	bx	lr
 800576c:	20002114 	.word	0x20002114

08005770 <rt_test_009_002_setup>:
  mp->next = NULL;
 8005770:	2200      	movs	r2, #0
  mp->object_size = size;
 8005772:	f44f 70a4 	mov.w	r0, #328	; 0x148
  mp->align = align;
 8005776:	2104      	movs	r1, #4
  mp->next = NULL;
 8005778:	4b02      	ldr	r3, [pc, #8]	; (8005784 <rt_test_009_002_setup+0x14>)
 800577a:	601a      	str	r2, [r3, #0]
  mp->provider = provider;
 800577c:	60da      	str	r2, [r3, #12]
  mp->align = align;
 800577e:	e9c3 0101 	strd	r0, r1, [r3, #4]
 * .
 */

static void rt_test_009_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 8005782:	4770      	bx	lr
 8005784:	200020d8 	.word	0x200020d8
	...

08005790 <rt_test_009_001_setup>:
  heapp->provider = NULL;
 8005790:	2000      	movs	r0, #0
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8005792:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <rt_test_009_001_setup+0x30>)
  heapp->provider = NULL;
 8005794:	4a0b      	ldr	r2, [pc, #44]	; (80057c4 <rt_test_009_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8005796:	1dd9      	adds	r1, r3, #7
 8005798:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 800579c:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800579e:	f5c3 63cc 	rsb	r3, r3, #1632	; 0x660
static void rt_test_009_001_setup(void) {
 80057a2:	b410      	push	{r4}
 80057a4:	08db      	lsrs	r3, r3, #3
  tqp->next = (thread_t *)tqp;
 80057a6:	f102 040c 	add.w	r4, r2, #12
 80057aa:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 80057ac:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 80057ae:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 80057b0:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 80057b4:	6010      	str	r0, [r2, #0]
  H_PAGES(&heapp->header) = 0;
 80057b6:	6090      	str	r0, [r2, #8]
 80057b8:	6150      	str	r0, [r2, #20]
}
 80057ba:	bc10      	pop	{r4}
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	20002128 	.word	0x20002128
 80057c4:	200020ac 	.word	0x200020ac
	...

080057d0 <rt_test_008_007_setup>:
 *   has been emptied.
 * - [8.7.4] Unregistering from the Event Sources.
 * .
 */

static void rt_test_008_007_setup(void) {
 80057d0:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 80057d2:	f7ff febd 	bl	8005550 <chEvtGetAndClearEvents.constprop.70>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 80057d6:	4a02      	ldr	r2, [pc, #8]	; (80057e0 <rt_test_008_007_setup+0x10>)
 80057d8:	4b02      	ldr	r3, [pc, #8]	; (80057e4 <rt_test_008_007_setup+0x14>)
 80057da:	6012      	str	r2, [r2, #0]
 80057dc:	601b      	str	r3, [r3, #0]
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 80057de:	bd08      	pop	{r3, pc}
 80057e0:	2000180c 	.word	0x2000180c
 80057e4:	20001810 	.word	0x20001810
	...

080057f0 <rt_test_008_006_setup>:
  chEvtGetAndClearEvents(ALL_EVENTS);
 80057f0:	f7ff beae 	b.w	8005550 <chEvtGetAndClearEvents.constprop.70>
	...

08005800 <rt_test_008_005_setup>:
 8005800:	f7ff bff6 	b.w	80057f0 <rt_test_008_006_setup>
	...

08005810 <rt_test_008_004_setup>:
 8005810:	f7ff bfee 	b.w	80057f0 <rt_test_008_006_setup>
	...

08005820 <rt_test_008_003_setup>:
 8005820:	f7ff bfe6 	b.w	80057f0 <rt_test_008_006_setup>
	...

08005830 <rt_test_008_002_setup>:
 8005830:	f7ff bfde 	b.w	80057f0 <rt_test_008_006_setup>
	...

08005840 <rt_test_006_009_setup>:
 8005840:	2000      	movs	r0, #0
  tqp->next = (thread_t *)tqp;
 8005842:	4a06      	ldr	r2, [pc, #24]	; (800585c <rt_test_006_009_setup+0x1c>)
 8005844:	4b06      	ldr	r3, [pc, #24]	; (8005860 <rt_test_006_009_setup+0x20>)
 8005846:	4907      	ldr	r1, [pc, #28]	; (8005864 <rt_test_006_009_setup+0x24>)
 8005848:	6090      	str	r0, [r2, #8]
  tqp->prev = (thread_t *)tqp;
 800584a:	e9c2 2200 	strd	r2, r2, [r2]
 800584e:	6098      	str	r0, [r3, #8]
 8005850:	e9c3 3300 	strd	r3, r3, [r3]
 8005854:	e9c1 1100 	strd	r1, r1, [r1]

static void rt_test_006_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	20001838 	.word	0x20001838
 8005860:	20001848 	.word	0x20001848
 8005864:	20001804 	.word	0x20001804
	...

08005870 <rt_test_006_008_setup>:
 8005870:	2100      	movs	r1, #0
  tqp->next = (thread_t *)tqp;
 8005872:	4b04      	ldr	r3, [pc, #16]	; (8005884 <rt_test_006_008_setup+0x14>)
 8005874:	4a04      	ldr	r2, [pc, #16]	; (8005888 <rt_test_006_008_setup+0x18>)
 8005876:	6099      	str	r1, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 8005878:	e9c3 3300 	strd	r3, r3, [r3]
 800587c:	e9c2 2200 	strd	r2, r2, [r2]
}
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	20001838 	.word	0x20001838
 8005888:	20001804 	.word	0x20001804
 800588c:	00000000 	.word	0x00000000

08005890 <rt_test_006_007_setup>:
 8005890:	f7ff bfee 	b.w	8005870 <rt_test_006_008_setup>
	...

080058a0 <rt_test_006_005_setup>:
 80058a0:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
 80058a2:	4b02      	ldr	r3, [pc, #8]	; (80058ac <rt_test_006_005_setup+0xc>)
 80058a4:	609a      	str	r2, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 80058a6:	e9c3 3300 	strd	r3, r3, [r3]
}
 80058aa:	4770      	bx	lr
 80058ac:	20001838 	.word	0x20001838

080058b0 <rt_test_006_004_setup>:
 80058b0:	2100      	movs	r1, #0
  tqp->next = (thread_t *)tqp;
 80058b2:	4a04      	ldr	r2, [pc, #16]	; (80058c4 <rt_test_006_004_setup+0x14>)
 80058b4:	4b04      	ldr	r3, [pc, #16]	; (80058c8 <rt_test_006_004_setup+0x18>)
 80058b6:	6091      	str	r1, [r2, #8]
  tqp->prev = (thread_t *)tqp;
 80058b8:	e9c2 2200 	strd	r2, r2, [r2]
 80058bc:	6099      	str	r1, [r3, #8]
 80058be:	e9c3 3300 	strd	r3, r3, [r3]
}
 80058c2:	4770      	bx	lr
 80058c4:	20001838 	.word	0x20001838
 80058c8:	20001848 	.word	0x20001848
 80058cc:	00000000 	.word	0x00000000

080058d0 <rt_test_006_001_setup>:
 80058d0:	f7ff bfe6 	b.w	80058a0 <rt_test_006_005_setup>
	...

080058e0 <rt_test_005_005_setup>:
 80058e0:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
 80058e2:	4b02      	ldr	r3, [pc, #8]	; (80058ec <rt_test_005_005_setup+0xc>)
 80058e4:	609a      	str	r2, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 80058e6:	e9c3 3300 	strd	r3, r3, [r3]
 * .
 */

static void rt_test_005_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 80058ea:	4770      	bx	lr
 80058ec:	20002108 	.word	0x20002108

080058f0 <rt_test_005_004_setup>:
 80058f0:	f7ff bff6 	b.w	80058e0 <rt_test_005_005_setup>
	...

08005900 <rt_test_005_003_setup>:
 8005900:	f7ff bfee 	b.w	80058e0 <rt_test_005_005_setup>
	...

08005910 <rt_test_005_002_setup>:
 8005910:	f7ff bfe6 	b.w	80058e0 <rt_test_005_005_setup>
	...

08005920 <rt_test_005_001_setup>:
 8005920:	2201      	movs	r2, #1
  tqp->next = (thread_t *)tqp;
 8005922:	4b02      	ldr	r3, [pc, #8]	; (800592c <rt_test_005_001_setup+0xc>)
 8005924:	609a      	str	r2, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 8005926:	e9c3 3300 	strd	r3, r3, [r3]
}
 800592a:	4770      	bx	lr
 800592c:	20002108 	.word	0x20002108

08005930 <rt_test_004_001_setup>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_004_001_setup(void) {
  tr1 = NULL;
 8005930:	2200      	movs	r2, #0
 8005932:	4b01      	ldr	r3, [pc, #4]	; (8005938 <rt_test_004_001_setup+0x8>)
 8005934:	601a      	str	r2, [r3, #0]
}
 8005936:	4770      	bx	lr
 8005938:	20002868 	.word	0x20002868
 800593c:	00000000 	.word	0x00000000

08005940 <_test_assert>:
  if (!condition)
 8005940:	b948      	cbnz	r0, 8005956 <_test_assert+0x16>
  test_local_fail      = true;
 8005942:	2001      	movs	r0, #1
bool _test_assert(bool condition, const char *msg) {
 8005944:	b410      	push	{r4}
  test_global_fail     = true;
 8005946:	4a05      	ldr	r2, [pc, #20]	; (800595c <_test_assert+0x1c>)
  test_local_fail      = true;
 8005948:	4c05      	ldr	r4, [pc, #20]	; (8005960 <_test_assert+0x20>)
  test_failure_message = msg;
 800594a:	4b06      	ldr	r3, [pc, #24]	; (8005964 <_test_assert+0x24>)
  test_local_fail      = true;
 800594c:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 800594e:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8005950:	6019      	str	r1, [r3, #0]
}
 8005952:	bc10      	pop	{r4}
 8005954:	4770      	bx	lr
  return false;
 8005956:	2000      	movs	r0, #0
}
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	20002798 	.word	0x20002798
 8005960:	20002838 	.word	0x20002838
 8005964:	20002794 	.word	0x20002794
	...

08005970 <rt_test_002_004_execute>:
 8005970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

static void rt_test_002_004_execute(void) {

  /* [2.4.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 8005974:	2001      	movs	r0, #1
 8005976:	4619      	mov	r1, r3
 8005978:	4a04      	ldr	r2, [pc, #16]	; (800598c <rt_test_002_004_execute+0x1c>)
 800597a:	6010      	str	r0, [r2, #0]
 800597c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800597e:	b292      	uxth	r2, r2
 8005980:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
 8005982:	b29b      	uxth	r3, r3
 8005984:	429a      	cmp	r2, r3
 8005986:	d0fb      	beq.n	8005980 <rt_test_002_004_execute+0x10>
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    }
  }
}
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	2000283c 	.word	0x2000283c

08005990 <rt_test_002_003_execute>:
  test_set_step(1);
 8005990:	2101      	movs	r1, #1
 8005992:	4a07      	ldr	r2, [pc, #28]	; (80059b0 <rt_test_002_003_execute+0x20>)
 8005994:	2320      	movs	r3, #32
 8005996:	6011      	str	r1, [r2, #0]
 8005998:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 800599c:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 800599e:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80059a0:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80059a4:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80059a6:	2300      	movs	r3, #0
 80059a8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80059ac:	b662      	cpsie	i
}
 80059ae:	4770      	bx	lr
 80059b0:	2000283c 	.word	0x2000283c
	...

080059c0 <test_terminate_threads>:
                         test_buffer + (WA_SIZE * 4)};

/*
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 80059c0:	b430      	push	{r4, r5}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80059c2:	2520      	movs	r5, #32
 80059c4:	2400      	movs	r4, #0
 80059c6:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <test_terminate_threads+0x30>)
 80059c8:	f103 0014 	add.w	r0, r3, #20
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 80059cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80059d0:	b14a      	cbz	r2, 80059e6 <test_terminate_threads+0x26>
 80059d2:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->flags |= CH_FLAG_TERMINATE;
 80059d6:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 80059da:	f041 0104 	orr.w	r1, r1, #4
 80059de:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 80059e2:	f384 8811 	msr	BASEPRI, r4
  for (i = 0; i < MAX_THREADS; i++)
 80059e6:	4283      	cmp	r3, r0
 80059e8:	d1f0      	bne.n	80059cc <test_terminate_threads+0xc>
      chThdTerminate(threads[i]);
}
 80059ea:	bc30      	pop	{r4, r5}
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20002854 	.word	0x20002854
	...

08005a00 <test_printn.part.0>:

  if (!n)
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
 8005a00:	b320      	cbz	r0, 8005a4c <test_printn.part.0+0x4c>
void test_printn(uint32_t n) {
 8005a02:	b570      	push	{r4, r5, r6, lr}
 8005a04:	b084      	sub	sp, #16
    p = buf;
 8005a06:	466d      	mov	r5, sp
      *p++ = (n % 10) + '0', n /= 10;
 8005a08:	4e11      	ldr	r6, [pc, #68]	; (8005a50 <test_printn.part.0+0x50>)
    p = buf;
 8005a0a:	462c      	mov	r4, r5
 8005a0c:	e000      	b.n	8005a10 <test_printn.part.0+0x10>
    while (n)
 8005a0e:	4614      	mov	r4, r2
      *p++ = (n % 10) + '0', n /= 10;
 8005a10:	4622      	mov	r2, r4
 8005a12:	fba6 1300 	umull	r1, r3, r6, r0
 8005a16:	08db      	lsrs	r3, r3, #3
 8005a18:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005a1c:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8005a20:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8005a24:	b2c9      	uxtb	r1, r1
 8005a26:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1ee      	bne.n	8005a0e <test_printn.part.0+0xe>
    while (p > buf)
 8005a30:	42aa      	cmp	r2, r5
 8005a32:	d909      	bls.n	8005a48 <test_printn.part.0+0x48>
 8005a34:	4e07      	ldr	r6, [pc, #28]	; (8005a54 <test_printn.part.0+0x54>)
 8005a36:	e001      	b.n	8005a3c <test_printn.part.0+0x3c>
 8005a38:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      streamPut(test_chp, *--p);
 8005a3c:	6830      	ldr	r0, [r6, #0]
 8005a3e:	6803      	ldr	r3, [r0, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	4798      	blx	r3
    while (p > buf)
 8005a44:	42a5      	cmp	r5, r4
 8005a46:	d1f7      	bne.n	8005a38 <test_printn.part.0+0x38>
  }
}
 8005a48:	b004      	add	sp, #16
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	cccccccd 	.word	0xcccccccd
 8005a54:	20002790 	.word	0x20002790
	...

08005a60 <test_printn>:
  if (!n)
 8005a60:	b928      	cbnz	r0, 8005a6e <test_printn+0xe>
    streamPut(test_chp, '0');
 8005a62:	4b04      	ldr	r3, [pc, #16]	; (8005a74 <test_printn+0x14>)
 8005a64:	2130      	movs	r1, #48	; 0x30
 8005a66:	6818      	ldr	r0, [r3, #0]
 8005a68:	6803      	ldr	r3, [r0, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	4718      	bx	r3
 8005a6e:	f7ff bfc7 	b.w	8005a00 <test_printn.part.0>
 8005a72:	bf00      	nop
 8005a74:	20002790 	.word	0x20002790
	...

08005a80 <test_emit_token>:
 8005a80:	2320      	movs	r3, #32
 8005a82:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void test_emit_token(char token) {

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 8005a86:	4a06      	ldr	r2, [pc, #24]	; (8005aa0 <test_emit_token+0x20>)
 8005a88:	4906      	ldr	r1, [pc, #24]	; (8005aa4 <test_emit_token+0x24>)
 8005a8a:	6813      	ldr	r3, [r2, #0]
 8005a8c:	428b      	cmp	r3, r1
 8005a8e:	d202      	bcs.n	8005a96 <test_emit_token+0x16>
    *test_tokp++ = token;
 8005a90:	1c59      	adds	r1, r3, #1
 8005a92:	7018      	strb	r0, [r3, #0]
 8005a94:	6011      	str	r1, [r2, #0]
 8005a96:	2300      	movs	r3, #0
 8005a98:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	20002850 	.word	0x20002850
 8005aa4:	20002850 	.word	0x20002850
	...

08005ab0 <h3>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8005ab0:	2043      	movs	r0, #67	; 0x43
 8005ab2:	f7ff bfe5 	b.w	8005a80 <test_emit_token>
 8005ab6:	bf00      	nop
	...

08005ac0 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8005ac0:	2042      	movs	r0, #66	; 0x42
 8005ac2:	f7ff bfdd 	b.w	8005a80 <test_emit_token>
 8005ac6:	bf00      	nop
	...

08005ad0 <h1>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8005ad0:	2041      	movs	r0, #65	; 0x41
 8005ad2:	f7ff bfd5 	b.w	8005a80 <test_emit_token>
 8005ad6:	bf00      	nop
	...

08005ae0 <thread>:
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8005ae0:	7800      	ldrb	r0, [r0, #0]
 8005ae2:	f7ff bfcd 	b.w	8005a80 <test_emit_token>
 8005ae6:	bf00      	nop
	...

08005af0 <dyn_thread1>:
 8005af0:	f7ff bff6 	b.w	8005ae0 <thread>
	...

08005b00 <test_println>:
void test_println(const char *msgp) {
 8005b00:	b570      	push	{r4, r5, r6, lr}
  while (*msgp)
 8005b02:	7801      	ldrb	r1, [r0, #0]
 8005b04:	b189      	cbz	r1, 8005b2a <test_println+0x2a>
 8005b06:	4604      	mov	r4, r0
 8005b08:	4d09      	ldr	r5, [pc, #36]	; (8005b30 <test_println+0x30>)
    streamPut(test_chp, *msgp++);
 8005b0a:	6828      	ldr	r0, [r5, #0]
 8005b0c:	6803      	ldr	r3, [r0, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	4798      	blx	r3
  while (*msgp)
 8005b12:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8005b16:	2900      	cmp	r1, #0
 8005b18:	d1f7      	bne.n	8005b0a <test_println+0xa>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8005b1a:	6828      	ldr	r0, [r5, #0]
 8005b1c:	2202      	movs	r2, #2
}
 8005b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8005b22:	6803      	ldr	r3, [r0, #0]
 8005b24:	4903      	ldr	r1, [pc, #12]	; (8005b34 <test_println+0x34>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4718      	bx	r3
 8005b2a:	4d01      	ldr	r5, [pc, #4]	; (8005b30 <test_println+0x30>)
 8005b2c:	e7f5      	b.n	8005b1a <test_println+0x1a>
 8005b2e:	bf00      	nop
 8005b30:	20002790 	.word	0x20002790
 8005b34:	0800e8fc 	.word	0x0800e8fc
	...

08005b40 <test_print>:
  while (*msgp)
 8005b40:	7801      	ldrb	r1, [r0, #0]
 8005b42:	b159      	cbz	r1, 8005b5c <test_print+0x1c>
void test_print(const char *msgp) {
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	4604      	mov	r4, r0
 8005b48:	4d05      	ldr	r5, [pc, #20]	; (8005b60 <test_print+0x20>)
    streamPut(test_chp, *msgp++);
 8005b4a:	6828      	ldr	r0, [r5, #0]
 8005b4c:	6803      	ldr	r3, [r0, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	4798      	blx	r3
  while (*msgp)
 8005b52:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8005b56:	2900      	cmp	r1, #0
 8005b58:	d1f7      	bne.n	8005b4a <test_print+0xa>
}
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20002790 	.word	0x20002790
	...

08005b70 <_test_assert_sequence>:
bool _test_assert_sequence(char *expected, const char *msg) {
 8005b70:	b4f0      	push	{r4, r5, r6, r7}
  while (cp < test_tokp) {
 8005b72:	4e0d      	ldr	r6, [pc, #52]	; (8005ba8 <_test_assert_sequence+0x38>)
  char *cp = test_tokens_buffer;
 8005b74:	4f0d      	ldr	r7, [pc, #52]	; (8005bac <_test_assert_sequence+0x3c>)
 8005b76:	1e42      	subs	r2, r0, #1
  while (cp < test_tokp) {
 8005b78:	6835      	ldr	r5, [r6, #0]
  char *cp = test_tokens_buffer;
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	e003      	b.n	8005b86 <_test_assert_sequence+0x16>
    if (*cp++ != *expected++)
 8005b7e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8005b82:	4284      	cmp	r4, r0
 8005b84:	d107      	bne.n	8005b96 <_test_assert_sequence+0x26>
  while (cp < test_tokp) {
 8005b86:	429d      	cmp	r5, r3
 8005b88:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8005b8c:	d8f7      	bhi.n	8005b7e <_test_assert_sequence+0xe>
  if (*expected)
 8005b8e:	b910      	cbnz	r0, 8005b96 <_test_assert_sequence+0x26>
  test_tokp = test_tokens_buffer;
 8005b90:	6037      	str	r7, [r6, #0]
}
 8005b92:	bcf0      	pop	{r4, r5, r6, r7}
 8005b94:	4770      	bx	lr
  test_local_fail      = true;
 8005b96:	2001      	movs	r0, #1
 8005b98:	4c05      	ldr	r4, [pc, #20]	; (8005bb0 <_test_assert_sequence+0x40>)
  test_global_fail     = true;
 8005b9a:	4a06      	ldr	r2, [pc, #24]	; (8005bb4 <_test_assert_sequence+0x44>)
  test_failure_message = msg;
 8005b9c:	4b06      	ldr	r3, [pc, #24]	; (8005bb8 <_test_assert_sequence+0x48>)
  test_local_fail      = true;
 8005b9e:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8005ba0:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8005ba2:	6019      	str	r1, [r3, #0]
}
 8005ba4:	bcf0      	pop	{r4, r5, r6, r7}
 8005ba6:	4770      	bx	lr
 8005ba8:	20002850 	.word	0x20002850
 8005bac:	20002840 	.word	0x20002840
 8005bb0:	20002838 	.word	0x20002838
 8005bb4:	20002798 	.word	0x20002798
 8005bb8:	20002794 	.word	0x20002794
 8005bbc:	00000000 	.word	0x00000000

08005bc0 <rt_test_008_002_execute>:
static void rt_test_008_002_execute(void) {
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	2507      	movs	r5, #7

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8005bc6:	461e      	mov	r6, r3
  eid = (eventid_t)0;
 8005bc8:	2400      	movs	r4, #0
 8005bca:	4a0d      	ldr	r2, [pc, #52]	; (8005c00 <rt_test_008_002_execute+0x40>)
 8005bcc:	4f0d      	ldr	r7, [pc, #52]	; (8005c04 <rt_test_008_002_execute+0x44>)
 8005bce:	6013      	str	r3, [r2, #0]
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8005bd0:	fa25 f304 	lsr.w	r3, r5, r4
 8005bd4:	07db      	lsls	r3, r3, #31
      events &= ~EVENT_MASK(eid);
 8005bd6:	fa06 f204 	lsl.w	r2, r6, r4
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8005bda:	d50e      	bpl.n	8005bfa <rt_test_008_002_execute+0x3a>
      handlers[eid](eid);
 8005bdc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8005be0:	4620      	mov	r0, r4
      events &= ~EVENT_MASK(eid);
 8005be2:	ea25 0502 	bic.w	r5, r5, r2
    }
    eid++;
 8005be6:	3401      	adds	r4, #1
      handlers[eid](eid);
 8005be8:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 8005bea:	2d00      	cmp	r5, #0
 8005bec:	d1f0      	bne.n	8005bd0 <rt_test_008_002_execute+0x10>
}
 8005bee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8005bf2:	4905      	ldr	r1, [pc, #20]	; (8005c08 <rt_test_008_002_execute+0x48>)
 8005bf4:	4805      	ldr	r0, [pc, #20]	; (8005c0c <rt_test_008_002_execute+0x4c>)
 8005bf6:	f7ff bfbb 	b.w	8005b70 <_test_assert_sequence>
    eid++;
 8005bfa:	3401      	adds	r4, #1
 8005bfc:	e7e8      	b.n	8005bd0 <rt_test_008_002_execute+0x10>
 8005bfe:	bf00      	nop
 8005c00:	2000283c 	.word	0x2000283c
 8005c04:	0800e97c 	.word	0x0800e97c
 8005c08:	0800fb54 	.word	0x0800fb54
 8005c0c:	0800fb68 	.word	0x0800fb68

08005c10 <print_line>:
static void print_line(void) {
 8005c10:	b570      	push	{r4, r5, r6, lr}
 8005c12:	244c      	movs	r4, #76	; 0x4c
 8005c14:	4d07      	ldr	r5, [pc, #28]	; (8005c34 <print_line+0x24>)
    streamPut(test_chp, '-');
 8005c16:	6828      	ldr	r0, [r5, #0]
 8005c18:	212d      	movs	r1, #45	; 0x2d
 8005c1a:	6803      	ldr	r3, [r0, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8005c20:	3c01      	subs	r4, #1
 8005c22:	d1f8      	bne.n	8005c16 <print_line+0x6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8005c24:	6828      	ldr	r0, [r5, #0]
 8005c26:	2202      	movs	r2, #2
}
 8005c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8005c2c:	6803      	ldr	r3, [r0, #0]
 8005c2e:	4902      	ldr	r1, [pc, #8]	; (8005c38 <print_line+0x28>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4718      	bx	r3
 8005c34:	20002790 	.word	0x20002790
 8005c38:	0800e8fc 	.word	0x0800e8fc
 8005c3c:	00000000 	.word	0x00000000

08005c40 <usb_lld_start_in>:
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8005c40:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005c44:	68c3      	ldr	r3, [r0, #12]
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8005c46:	b430      	push	{r4, r5}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8005c48:	695a      	ldr	r2, [r3, #20]

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 8005c4a:	8a18      	ldrh	r0, [r3, #16]
  n = isp->txsize;
 8005c4c:	6813      	ldr	r3, [r2, #0]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8005c4e:	4c1a      	ldr	r4, [pc, #104]	; (8005cb8 <usb_lld_start_in+0x78>)
 8005c50:	4298      	cmp	r0, r3
 8005c52:	bf28      	it	cs
 8005c54:	4618      	movcs	r0, r3
    n = (size_t)usbp->epc[ep]->in_maxsize;

  isp->txlast = n;
 8005c56:	60d0      	str	r0, [r2, #12]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8005c58:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005c5a:	010d      	lsls	r5, r1, #4
 8005c5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c60:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  usb_packet_write_from_buffer(ep, isp->txbuf, n);
 8005c64:	6894      	ldr	r4, [r2, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8005c66:	58ea      	ldr	r2, [r5, r3]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8005c68:	442b      	add	r3, r5
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8005c6a:	6058      	str	r0, [r3, #4]
  while (i > 0) {
 8005c6c:	b188      	cbz	r0, 8005c92 <usb_lld_start_in+0x52>
 8005c6e:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8005c72:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8005c76:	0052      	lsls	r2, r2, #1
 8005c78:	3801      	subs	r0, #1
 8005c7a:	0840      	lsrs	r0, r0, #1
 8005c7c:	1d13      	adds	r3, r2, #4
 8005c7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005c82:	e000      	b.n	8005c86 <usb_lld_start_in+0x46>
 8005c84:	3304      	adds	r3, #4
    w |= *buf++ << 8;
 8005c86:	f834 5b02 	ldrh.w	r5, [r4], #2
  while (i > 0) {
 8005c8a:	4298      	cmp	r0, r3
    *pmap++ = (stm32_usb_pma_t)w;
 8005c8c:	6015      	str	r5, [r2, #0]
 8005c8e:	461a      	mov	r2, r3
  while (i > 0) {
 8005c90:	d1f8      	bne.n	8005c84 <usb_lld_start_in+0x44>

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
}
 8005c92:	bc30      	pop	{r4, r5}
 8005c94:	0089      	lsls	r1, r1, #2
 8005c96:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005c9a:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8005c9e:	680b      	ldr	r3, [r1, #0]
 8005ca0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8005ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ca8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8005cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb4:	600b      	str	r3, [r1, #0]
}
 8005cb6:	4770      	bx	lr
 8005cb8:	40005c00 	.word	0x40005c00
 8005cbc:	00000000 	.word	0x00000000

08005cc0 <usb_lld_start_out>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8005cc0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005cc4:	68c0      	ldr	r0, [r0, #12]
 8005cc6:	6982      	ldr	r2, [r0, #24]
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8005cc8:	6813      	ldr	r3, [r2, #0]
 8005cca:	b1bb      	cbz	r3, 8005cfc <usb_lld_start_out+0x3c>
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8005ccc:	8a40      	ldrh	r0, [r0, #18]
 8005cce:	4403      	add	r3, r0
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	fbb3 f3f0 	udiv	r3, r3, r0
 8005cd6:	8193      	strh	r3, [r2, #12]
 8005cd8:	0089      	lsls	r1, r1, #2
 8005cda:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005cde:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8005ce2:	680b      	ldr	r3, [r1, #0]
 8005ce4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cec:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf8:	600b      	str	r3, [r1, #0]
}
 8005cfa:	4770      	bx	lr
    osp->rxpkts = 1;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	8193      	strh	r3, [r2, #12]
 8005d00:	e7ea      	b.n	8005cd8 <usb_lld_start_out+0x18>
 8005d02:	bf00      	nop
	...

08005d10 <usb_lld_init_endpoint>:
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8005d10:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8005d14:	b4f0      	push	{r4, r5, r6, r7}
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8005d16:	68de      	ldr	r6, [r3, #12]
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8005d18:	6833      	ldr	r3, [r6, #0]
 8005d1a:	f013 0303 	ands.w	r3, r3, #3
 8005d1e:	d053      	beq.n	8005dc8 <usb_lld_init_endpoint+0xb8>
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d95d      	bls.n	8005de0 <usb_lld_init_endpoint+0xd0>
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d14f      	bne.n	8005dc8 <usb_lld_init_endpoint+0xb8>
    epr = EPR_EP_TYPE_INTERRUPT;
 8005d28:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  dp = USB_GET_DESCRIPTOR(ep);
 8005d2c:	4a2d      	ldr	r2, [pc, #180]	; (8005de4 <usb_lld_init_endpoint+0xd4>)
  if (epcp->in_state != NULL) {
 8005d2e:	6974      	ldr	r4, [r6, #20]
  dp = USB_GET_DESCRIPTOR(ep);
 8005d30:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005d32:	010f      	lsls	r7, r1, #4
 8005d34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005d38:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8005d3c:	18bd      	adds	r5, r7, r2
  if (epcp->in_state != NULL) {
 8005d3e:	b184      	cbz	r4, 8005d62 <usb_lld_init_endpoint+0x52>
    dp->TXCOUNT0 = 0;
 8005d40:	f04f 0c00 	mov.w	ip, #0
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8005d44:	8a34      	ldrh	r4, [r6, #16]
    dp->TXCOUNT0 = 0;
 8005d46:	f8c5 c004 	str.w	ip, [r5, #4]
  next = usbp->pmnext;
 8005d4a:	f8d0 c084 	ldr.w	ip, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 8005d4e:	3401      	adds	r4, #1
 8005d50:	f024 0401 	bic.w	r4, r4, #1
 8005d54:	4464      	add	r4, ip
 8005d56:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
    epr |= EPR_STAT_TX_NAK;
 8005d5a:	f043 0320 	orr.w	r3, r3, #32
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8005d5e:	f847 c002 	str.w	ip, [r7, r2]
  if (epcp->out_state != NULL) {
 8005d62:	69b2      	ldr	r2, [r6, #24]
 8005d64:	b1c2      	cbz	r2, 8005d98 <usb_lld_init_endpoint+0x88>
    if (epcp->out_maxsize > 62)
 8005d66:	8a74      	ldrh	r4, [r6, #18]
 8005d68:	2c3e      	cmp	r4, #62	; 0x3e
 8005d6a:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 8005d6e:	d92e      	bls.n	8005dce <usb_lld_init_endpoint+0xbe>
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8005d70:	f042 021f 	orr.w	r2, r2, #31
 8005d74:	3201      	adds	r2, #1
 8005d76:	4e1c      	ldr	r6, [pc, #112]	; (8005de8 <usb_lld_init_endpoint+0xd8>)
 8005d78:	1152      	asrs	r2, r2, #5
 8005d7a:	ea46 2282 	orr.w	r2, r6, r2, lsl #10
 8005d7e:	b292      	uxth	r2, r2
    dp->RXCOUNT0 = nblocks;
 8005d80:	60ea      	str	r2, [r5, #12]
  next = usbp->pmnext;
 8005d82:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 8005d86:	3401      	adds	r4, #1
 8005d88:	f024 0401 	bic.w	r4, r4, #1
 8005d8c:	4414      	add	r4, r2
 8005d8e:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
    epr |= EPR_STAT_RX_NAK;
 8005d92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8005d96:	60aa      	str	r2, [r5, #8]
  EPR_SET(ep, epr | ep);
 8005d98:	f248 0080 	movw	r0, #32896	; 0x8080
  EPR_TOGGLE(ep, epr);
 8005d9c:	f647 0470 	movw	r4, #30832	; 0x7870
  EPR_SET(ep, epr | ep);
 8005da0:	ea43 0201 	orr.w	r2, r3, r1
 8005da4:	f422 4278 	bic.w	r2, r2, #63488	; 0xf800
 8005da8:	0089      	lsls	r1, r1, #2
 8005daa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005dae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005db2:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8005db6:	4302      	orrs	r2, r0
 8005db8:	600a      	str	r2, [r1, #0]
  EPR_TOGGLE(ep, epr);
 8005dba:	680a      	ldr	r2, [r1, #0]
 8005dbc:	4023      	ands	r3, r4
 8005dbe:	4053      	eors	r3, r2
 8005dc0:	4303      	orrs	r3, r0
 8005dc2:	600b      	str	r3, [r1, #0]
}
 8005dc4:	bcf0      	pop	{r4, r5, r6, r7}
 8005dc6:	4770      	bx	lr
    epr = EPR_EP_TYPE_CONTROL;
 8005dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dcc:	e7ae      	b.n	8005d2c <usb_lld_init_endpoint+0x1c>
      nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 8005dce:	f042 0201 	orr.w	r2, r2, #1
 8005dd2:	3201      	adds	r2, #1
 8005dd4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8005dd8:	0252      	lsls	r2, r2, #9
 8005dda:	f402 427c 	and.w	r2, r2, #64512	; 0xfc00
 8005dde:	e7cf      	b.n	8005d80 <usb_lld_init_endpoint+0x70>
    epr = EPR_EP_TYPE_BULK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e7a3      	b.n	8005d2c <usb_lld_init_endpoint+0x1c>
 8005de4:	40005c00 	.word	0x40005c00
 8005de8:	ffff8000 	.word	0xffff8000
 8005dec:	00000000 	.word	0x00000000

08005df0 <usb_lld_reset>:
  STM32_USB->BTABLE = BTABLE_ADDR;
 8005df0:	2100      	movs	r1, #0
  if (usbp->config->sof_cb != NULL)
 8005df2:	6843      	ldr	r3, [r0, #4]
void usb_lld_reset(USBDriver *usbp) {
 8005df4:	b4f0      	push	{r4, r5, r6, r7}
  if (usbp->config->sof_cb != NULL)
 8005df6:	68db      	ldr	r3, [r3, #12]
  STM32_USB->DADDR  = DADDR_EF;
 8005df8:	2780      	movs	r7, #128	; 0x80
  if (usbp->config->sof_cb != NULL)
 8005dfa:	428b      	cmp	r3, r1
    cntr |= CNTR_SOFM;
 8005dfc:	bf0c      	ite	eq
 8005dfe:	f44f 461c 	moveq.w	r6, #39936	; 0x9c00
 8005e02:	f44f 461e 	movne.w	r6, #40448	; 0x9e00
  usbp->pmnext = 64;
 8005e06:	2540      	movs	r5, #64	; 0x40
  STM32_USB->BTABLE = BTABLE_ADDR;
 8005e08:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <usb_lld_reset+0x30>)
  usbp->epc[0] = &ep0config;
 8005e0a:	4c06      	ldr	r4, [pc, #24]	; (8005e24 <usb_lld_reset+0x34>)
  STM32_USB->BTABLE = BTABLE_ADDR;
 8005e0c:	6519      	str	r1, [r3, #80]	; 0x50
  STM32_USB->ISTR   = 0;
 8005e0e:	6459      	str	r1, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8005e10:	64df      	str	r7, [r3, #76]	; 0x4c
  STM32_USB->CNTR = cntr;
 8005e12:	641e      	str	r6, [r3, #64]	; 0x40
  usbp->pmnext = 64;
 8005e14:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  usbp->epc[0] = &ep0config;
 8005e18:	60c4      	str	r4, [r0, #12]
}
 8005e1a:	bcf0      	pop	{r4, r5, r6, r7}
  usb_lld_init_endpoint(usbp, 0);
 8005e1c:	f7ff bf78 	b.w	8005d10 <usb_lld_init_endpoint>
 8005e20:	40005c00 	.word	0x40005c00
 8005e24:	0800e910 	.word	0x0800e910
	...

08005e30 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8005e30:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 8005e34:	2a15      	cmp	r2, #21
 8005e36:	d815      	bhi.n	8005e64 <_usb_ep0out+0x34>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f640 6141 	movw	r1, #3649	; 0xe41
 8005e3e:	4093      	lsls	r3, r2
 8005e40:	420b      	tst	r3, r1
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8005e42:	b570      	push	{r4, r5, r6, lr}
 8005e44:	4604      	mov	r4, r0
 8005e46:	d125      	bne.n	8005e94 <_usb_ep0out+0x64>
 8005e48:	f413 1580 	ands.w	r5, r3, #1048576	; 0x100000
 8005e4c:	d00b      	beq.n	8005e66 <_usb_ep0out+0x36>
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8005e4e:	68c3      	ldr	r3, [r0, #12]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	b92b      	cbnz	r3, 8005e62 <_usb_ep0out+0x32>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 8005e56:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8005e58:	b103      	cbz	r3, 8005e5c <_usb_ep0out+0x2c>
      usbp->ep0endcb(usbp);
 8005e5a:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	4770      	bx	lr
 8005e66:	029b      	lsls	r3, r3, #10
 8005e68:	d5fb      	bpl.n	8005e62 <_usb_ep0out+0x32>
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8005e6a:	220b      	movs	r2, #11
 8005e6c:	2320      	movs	r3, #32
 8005e6e:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 8005e72:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8005e76:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8005e78:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8005e7a:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8005e7c:	f042 0201 	orr.w	r2, r2, #1
 8005e80:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8005e82:	4629      	mov	r1, r5
  isp->txbuf  = buf;
 8005e84:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8005e86:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8005e8a:	f7ff fed9 	bl	8005c40 <usb_lld_start_in>
 8005e8e:	f385 8811 	msr	BASEPRI, r5
}
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8005e94:	f248 0680 	movw	r6, #32896	; 0x8080
 8005e98:	490d      	ldr	r1, [pc, #52]	; (8005ed0 <_usb_ep0out+0xa0>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8005e9a:	6843      	ldr	r3, [r0, #4]
 8005e9c:	680a      	ldr	r2, [r1, #0]
 8005e9e:	681d      	ldr	r5, [r3, #0]
 8005ea0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8005ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ea8:	f082 0210 	eor.w	r2, r2, #16
 8005eac:	4332      	orrs	r2, r6
 8005eae:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8005eb0:	680b      	ldr	r3, [r1, #0]
 8005eb2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ebe:	4333      	orrs	r3, r6
 8005ec0:	600b      	str	r3, [r1, #0]
 8005ec2:	b10d      	cbz	r5, 8005ec8 <_usb_ep0out+0x98>
 8005ec4:	2106      	movs	r1, #6
 8005ec6:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8005ec8:	2306      	movs	r3, #6
 8005eca:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8005ece:	bd70      	pop	{r4, r5, r6, pc}
 8005ed0:	40005c00 	.word	0x40005c00
	...

08005ee0 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8005ee0:	b538      	push	{r3, r4, r5, lr}
  switch (usbp->ep0state) {
 8005ee2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8005ee6:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 8005ee8:	2b15      	cmp	r3, #21
 8005eea:	d82a      	bhi.n	8005f42 <_usb_ep0in+0x62>
 8005eec:	e8df f003 	tbb	[pc, r3]
 8005ef0:	2929290b 	.word	0x2929290b
 8005ef4:	290b2929 	.word	0x290b2929
 8005ef8:	513a2a29 	.word	0x513a2a29
 8005efc:	29292929 	.word	0x29292929
 8005f00:	29292929 	.word	0x29292929
 8005f04:	0b0b      	.short	0x0b0b
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8005f06:	f248 0080 	movw	r0, #32896	; 0x8080
 8005f0a:	4930      	ldr	r1, [pc, #192]	; (8005fcc <_usb_ep0in+0xec>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8005f0c:	6863      	ldr	r3, [r4, #4]
 8005f0e:	680a      	ldr	r2, [r1, #0]
 8005f10:	681d      	ldr	r5, [r3, #0]
 8005f12:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8005f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1a:	f082 0210 	eor.w	r2, r2, #16
 8005f1e:	4302      	orrs	r2, r0
 8005f20:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8005f22:	680b      	ldr	r3, [r1, #0]
 8005f24:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f30:	4303      	orrs	r3, r0
 8005f32:	600b      	str	r3, [r1, #0]
 8005f34:	b115      	cbz	r5, 8005f3c <_usb_ep0in+0x5c>
 8005f36:	2106      	movs	r1, #6
 8005f38:	4620      	mov	r0, r4
 8005f3a:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8005f3c:	2306      	movs	r3, #6
 8005f3e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
 8005f44:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
 8005f48:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
    if ((usbp->ep0n < max) &&
 8005f4c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    max = (size_t)get_hword(&usbp->setup[6]);
 8005f4e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    if ((usbp->ep0n < max) &&
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d206      	bcs.n	8005f64 <_usb_ep0in+0x84>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8005f56:	68c3      	ldr	r3, [r0, #12]
 8005f58:	8a1b      	ldrh	r3, [r3, #16]
 8005f5a:	fbb2 f5f3 	udiv	r5, r2, r3
 8005f5e:	fb03 2515 	mls	r5, r3, r5, r2
    if ((usbp->ep0n < max) &&
 8005f62:	b1ed      	cbz	r5, 8005fa0 <_usb_ep0in+0xc0>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8005f64:	2214      	movs	r2, #20
 8005f66:	2320      	movs	r3, #32
 8005f68:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8005f6c:	f383 8811 	msr	BASEPRI, r3
  osp->rxbuf  = buf;
 8005f70:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
 8005f72:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8005f74:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8005f76:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8005f78:	f042 0201 	orr.w	r2, r2, #1
 8005f7c:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8005f7e:	4620      	mov	r0, r4
  osp->rxbuf  = buf;
 8005f80:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
 8005f82:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
 8005f86:	4629      	mov	r1, r5
 8005f88:	f7ff fe9a 	bl	8005cc0 <usb_lld_start_out>
 8005f8c:	f385 8811 	msr	BASEPRI, r5
}
 8005f90:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 8005f92:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8005f94:	b103      	cbz	r3, 8005f98 <_usb_ep0in+0xb8>
      usbp->ep0endcb(usbp);
 8005f96:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	2320      	movs	r3, #32
 8005fa2:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8005fa6:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8005fa8:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8005faa:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8005fac:	f042 0201 	orr.w	r2, r2, #1
 8005fb0:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8005fb2:	4629      	mov	r1, r5
  isp->txbuf  = buf;
 8005fb4:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8005fb6:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8005fba:	f7ff fe41 	bl	8005c40 <usb_lld_start_in>
 8005fbe:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 8005fc2:	230a      	movs	r3, #10
 8005fc4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8005fc8:	bd38      	pop	{r3, r4, r5, pc}
 8005fca:	bf00      	nop
 8005fcc:	40005c00 	.word	0x40005c00

08005fd0 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8005fd0:	b570      	push	{r4, r5, r6, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8005fd2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8005fd6:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8005fd8:	b113      	cbz	r3, 8005fe0 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  udp = USB_GET_DESCRIPTOR(ep);
 8005fe0:	4bc3      	ldr	r3, [pc, #780]	; (80062f0 <_usb_ep0setup+0x320>)
  usbReadSetup(usbp, ep, usbp->setup);
 8005fe2:	f104 0274 	add.w	r2, r4, #116	; 0x74
 8005fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fec:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8005ff0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005ffa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	f103 0010 	add.w	r0, r3, #16
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8006004:	6819      	ldr	r1, [r3, #0]
 8006006:	3304      	adds	r3, #4
  for (n = 0; n < 4; n++) {
 8006008:	4283      	cmp	r3, r0
    *(uint16_t *)buf = (uint16_t)*pmap++;
 800600a:	f822 1b02 	strh.w	r1, [r2], #2
  for (n = 0; n < 4; n++) {
 800600e:	d1f9      	bne.n	8006004 <_usb_ep0setup+0x34>
  if ((usbp->config->requests_hook_cb == NULL) ||
 8006010:	6863      	ldr	r3, [r4, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	b363      	cbz	r3, 8006070 <_usb_ep0setup+0xa0>
      !(usbp->config->requests_hook_cb(usbp))) {
 8006016:	4620      	mov	r0, r4
 8006018:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 800601a:	b348      	cbz	r0, 8006070 <_usb_ep0setup+0xa0>
 800601c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800601e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
  hw |= (uint16_t)*p << 8U;
 8006022:	f894 007b 	ldrb.w	r0, [r4, #123]	; 0x7b
 8006026:	f894 107a 	ldrb.w	r1, [r4, #122]	; 0x7a
  max = (size_t)get_hword(&usbp->setup[6]);
 800602a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  if (usbp->ep0n > max) {
 800602e:	4291      	cmp	r1, r2
 8006030:	bf2c      	ite	cs
 8006032:	4611      	movcs	r1, r2
    usbp->ep0n = max;
 8006034:	66e1      	strcc	r1, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8006036:	061a      	lsls	r2, r3, #24
 8006038:	f100 80a3 	bmi.w	8006182 <_usb_ep0setup+0x1b2>
    if (usbp->ep0n != 0U) {
 800603c:	2900      	cmp	r1, #0
 800603e:	d073      	beq.n	8006128 <_usb_ep0setup+0x158>
      usbp->ep0state = USB_EP0_OUT_RX;
 8006040:	2215      	movs	r2, #21
 8006042:	2320      	movs	r3, #32
 8006044:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8006048:	f383 8811 	msr	BASEPRI, r3
  osp->rxcnt  = 0;
 800604c:	2500      	movs	r5, #0
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 800604e:	e9d4 611a 	ldrd	r6, r1, [r4, #104]	; 0x68
  osp = usbp->epc[ep]->out_state;
 8006052:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006054:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8006056:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006058:	f042 0201 	orr.w	r2, r2, #1
 800605c:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800605e:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8006060:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_out(usbp, ep);
 8006064:	4629      	mov	r1, r5
 8006066:	f7ff fe2b 	bl	8005cc0 <usb_lld_start_out>
 800606a:	f385 8811 	msr	BASEPRI, r5
}
 800606e:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8006070:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8006074:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8006078:	4618      	mov	r0, r3
 800607a:	d01e      	beq.n	80060ba <_usb_ep0setup+0xea>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800607c:	f248 0080 	movw	r0, #32896	; 0x8080
 8006080:	499b      	ldr	r1, [pc, #620]	; (80062f0 <_usb_ep0setup+0x320>)
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8006082:	6863      	ldr	r3, [r4, #4]
 8006084:	680a      	ldr	r2, [r1, #0]
 8006086:	681d      	ldr	r5, [r3, #0]
 8006088:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800608c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006090:	f082 0210 	eor.w	r2, r2, #16
 8006094:	4302      	orrs	r2, r0
 8006096:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8006098:	680b      	ldr	r3, [r1, #0]
 800609a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800609e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060a6:	4303      	orrs	r3, r0
 80060a8:	600b      	str	r3, [r1, #0]
 80060aa:	b115      	cbz	r5, 80060b2 <_usb_ep0setup+0xe2>
 80060ac:	2106      	movs	r1, #6
 80060ae:	4620      	mov	r0, r4
 80060b0:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 80060b2:	2306      	movs	r3, #6
 80060b4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 80060b8:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80060ba:	f240 3102 	movw	r1, #770	; 0x302
           ((uint32_t)usbp->setup[1] << 8U))) {
 80060be:	f894 6075 	ldrb.w	r6, [r4, #117]	; 0x75
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80060c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 80060c6:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80060ca:	428a      	cmp	r2, r1
 80060cc:	f000 812e 	beq.w	800632c <_usb_ep0setup+0x35c>
 80060d0:	d841      	bhi.n	8006156 <_usb_ep0setup+0x186>
 80060d2:	2a02      	cmp	r2, #2
 80060d4:	f000 8112 	beq.w	80062fc <_usb_ep0setup+0x32c>
 80060d8:	f240 80f7 	bls.w	80062ca <_usb_ep0setup+0x2fa>
 80060dc:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80060e0:	f000 8144 	beq.w	800636c <_usb_ep0setup+0x39c>
 80060e4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80060e8:	f000 8096 	beq.w	8006218 <_usb_ep0setup+0x248>
 80060ec:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80060f0:	d1c4      	bne.n	800607c <_usb_ep0setup+0xac>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80060f2:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d1c0      	bne.n	800607c <_usb_ep0setup+0xac>
      usbp->status &= ~2U;
 80060fa:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80060fe:	66a5      	str	r5, [r4, #104]	; 0x68
      usbp->status &= ~2U;
 8006100:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006104:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      usbp->status &= ~2U;
 8006108:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 800610c:	e00a      	b.n	8006124 <_usb_ep0setup+0x154>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800610e:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 8006112:	f080 8090 	bcs.w	8006236 <_usb_ep0setup+0x266>
 8006116:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800611a:	d1af      	bne.n	800607c <_usb_ep0setup+0xac>
    usbSetupTransfer(usbp, NULL, 0, set_address);
 800611c:	4b75      	ldr	r3, [pc, #468]	; (80062f4 <_usb_ep0setup+0x324>)
 800611e:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8006122:	6723      	str	r3, [r4, #112]	; 0x70
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8006124:	0603      	lsls	r3, r0, #24
 8006126:	d445      	bmi.n	80061b4 <_usb_ep0setup+0x1e4>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8006128:	220b      	movs	r2, #11
 800612a:	2320      	movs	r3, #32
 800612c:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8006130:	f383 8811 	msr	BASEPRI, r3
  isp->txbuf  = buf;
 8006134:	2500      	movs	r5, #0
  isp = usbp->epc[ep]->in_state;
 8006136:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006138:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 800613a:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800613c:	f042 0201 	orr.w	r2, r2, #1
 8006140:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8006142:	4620      	mov	r0, r4
  isp->txbuf  = buf;
 8006144:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8006146:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 800614a:	4629      	mov	r1, r5
 800614c:	f7ff fd78 	bl	8005c40 <usb_lld_start_in>
 8006150:	f385 8811 	msr	BASEPRI, r5
}
 8006154:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006156:	f240 6101 	movw	r1, #1537	; 0x601
 800615a:	428a      	cmp	r2, r1
 800615c:	d9d7      	bls.n	800610e <_usb_ep0setup+0x13e>
 800615e:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 8006162:	d03e      	beq.n	80061e2 <_usb_ep0setup+0x212>
 8006164:	f640 4102 	movw	r1, #3074	; 0xc02
 8006168:	428a      	cmp	r2, r1
 800616a:	f000 80ba 	beq.w	80062e2 <_usb_ep0setup+0x312>
 800616e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006172:	d183      	bne.n	800607c <_usb_ep0setup+0xac>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8006174:	2201      	movs	r2, #1
 8006176:	f104 017f 	add.w	r1, r4, #127	; 0x7f
 800617a:	e9c4 251b 	strd	r2, r5, [r4, #108]	; 0x6c
 800617e:	66a1      	str	r1, [r4, #104]	; 0x68
 8006180:	e74f      	b.n	8006022 <_usb_ep0setup+0x52>
    if (usbp->ep0n != 0U) {
 8006182:	b1b9      	cbz	r1, 80061b4 <_usb_ep0setup+0x1e4>
      usbp->ep0state = USB_EP0_IN_TX;
 8006184:	2209      	movs	r2, #9
 8006186:	2320      	movs	r3, #32
 8006188:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800618c:	f383 8811 	msr	BASEPRI, r3
  isp->txcnt  = 0;
 8006190:	2500      	movs	r5, #0
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8006192:	e9d4 611a 	ldrd	r6, r1, [r4, #104]	; 0x68
  isp = usbp->epc[ep]->in_state;
 8006196:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006198:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 800619a:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800619c:	f042 0201 	orr.w	r2, r2, #1
 80061a0:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 80061a2:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 80061a4:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_in(usbp, ep);
 80061a8:	4629      	mov	r1, r5
 80061aa:	f7ff fd49 	bl	8005c40 <usb_lld_start_in>
 80061ae:	f385 8811 	msr	BASEPRI, r5
}
 80061b2:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 80061b4:	2214      	movs	r2, #20
 80061b6:	2320      	movs	r3, #32
 80061b8:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 80061bc:	f383 8811 	msr	BASEPRI, r3
  osp->rxbuf  = buf;
 80061c0:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
 80061c2:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80061c4:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 80061c6:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80061c8:	f042 0201 	orr.w	r2, r2, #1
 80061cc:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 80061ce:	4620      	mov	r0, r4
  osp->rxbuf  = buf;
 80061d0:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
 80061d2:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
 80061d6:	4629      	mov	r1, r5
 80061d8:	f7ff fd72 	bl	8005cc0 <usb_lld_start_out>
 80061dc:	f385 8811 	msr	BASEPRI, r5
}
 80061e0:	bd70      	pop	{r4, r5, r6, pc}
    if (usbp->configuration != usbp->setup[2]) {
 80061e2:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80061e6:	f894 207f 	ldrb.w	r2, [r4, #127]	; 0x7f
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d00f      	beq.n	800620e <_usb_ep0setup+0x23e>
      if (usbp->state == USB_ACTIVE) {
 80061ee:	7822      	ldrb	r2, [r4, #0]
 80061f0:	2a04      	cmp	r2, #4
 80061f2:	d039      	beq.n	8006268 <_usb_ep0setup+0x298>
      if (usbp->setup[2] != 0U) {
 80061f4:	b14b      	cbz	r3, 800620a <_usb_ep0setup+0x23a>
        usbp->state = USB_ACTIVE;
 80061f6:	2104      	movs	r1, #4
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80061f8:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 80061fa:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_ACTIVE;
 80061fe:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8006200:	6813      	ldr	r3, [r2, #0]
 8006202:	b113      	cbz	r3, 800620a <_usb_ep0setup+0x23a>
 8006204:	2102      	movs	r1, #2
 8006206:	4620      	mov	r0, r4
 8006208:	4798      	blx	r3
 800620a:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800620e:	2300      	movs	r3, #0
 8006210:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8006214:	6723      	str	r3, [r4, #112]	; 0x70
 8006216:	e785      	b.n	8006124 <_usb_ep0setup+0x154>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8006218:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 800621c:	2b01      	cmp	r3, #1
 800621e:	f47f af2d 	bne.w	800607c <_usb_ep0setup+0xac>
      usbp->status |= 2U;
 8006222:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006226:	66a5      	str	r5, [r4, #104]	; 0x68
      usbp->status |= 2U;
 8006228:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800622c:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      usbp->status |= 2U;
 8006230:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 8006234:	e776      	b.n	8006124 <_usb_ep0setup+0x154>
  hw |= (uint16_t)*p << 8U;
 8006236:	f894 1079 	ldrb.w	r1, [r4, #121]	; 0x79
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800623a:	6862      	ldr	r2, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 800623c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8006240:	6856      	ldr	r6, [r2, #4]
 8006242:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006246:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 800624a:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 800624e:	4620      	mov	r0, r4
 8006250:	47b0      	blx	r6
    if (dp == NULL) {
 8006252:	2800      	cmp	r0, #0
 8006254:	f43f af12 	beq.w	800607c <_usb_ep0setup+0xac>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8006258:	e9d0 2300 	ldrd	r2, r3, [r0]
 800625c:	6725      	str	r5, [r4, #112]	; 0x70
 800625e:	e9c4 321a 	strd	r3, r2, [r4, #104]	; 0x68
 8006262:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8006266:	e6dc      	b.n	8006022 <_usb_ep0setup+0x52>
 8006268:	2320      	movs	r3, #32
 800626a:	f383 8811 	msr	BASEPRI, r3
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 800626e:	2201      	movs	r2, #1
  usbp->pmnext = 64;
 8006270:	2640      	movs	r6, #64	; 0x40
    EPR_TOGGLE(i, 0);
 8006272:	f248 0080 	movw	r0, #32896	; 0x8080
  usbp->transmitting &= 1U;
 8006276:	8921      	ldrh	r1, [r4, #8]
  usbp->receiving    &= 1U;
 8006278:	8963      	ldrh	r3, [r4, #10]
    usbp->epc[i] = NULL;
 800627a:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800627e:	e9c4 5506 	strd	r5, r5, [r4, #24]
 8006282:	e9c4 5508 	strd	r5, r5, [r4, #32]
  usbp->transmitting &= 1U;
 8006286:	4011      	ands	r1, r2
  usbp->receiving    &= 1U;
 8006288:	4013      	ands	r3, r2
    usbp->epc[i] = NULL;
 800628a:	62a5      	str	r5, [r4, #40]	; 0x28
  usbp->transmitting &= 1U;
 800628c:	8121      	strh	r1, [r4, #8]
  usbp->receiving    &= 1U;
 800628e:	8163      	strh	r3, [r4, #10]
  usbp->pmnext = 64;
 8006290:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
 8006294:	0093      	lsls	r3, r2, #2
 8006296:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800629a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    EPR_TOGGLE(i, 0);
 800629e:	6819      	ldr	r1, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80062a0:	3201      	adds	r2, #1
    EPR_TOGGLE(i, 0);
 80062a2:	4301      	orrs	r1, r0
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80062a4:	2a08      	cmp	r2, #8
    EPR_TOGGLE(i, 0);
 80062a6:	6019      	str	r1, [r3, #0]
    EPR_SET(i, 0);
 80062a8:	6018      	str	r0, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80062aa:	d1f3      	bne.n	8006294 <_usb_ep0setup+0x2c4>
 80062ac:	2300      	movs	r3, #0
 80062ae:	f383 8811 	msr	BASEPRI, r3
        usbp->state = USB_SELECTED;
 80062b2:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 80062b4:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = 0U;
 80062b6:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_SELECTED;
 80062ba:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 80062bc:	6813      	ldr	r3, [r2, #0]
 80062be:	b10b      	cbz	r3, 80062c4 <_usb_ep0setup+0x2f4>
 80062c0:	4620      	mov	r0, r4
 80062c2:	4798      	blx	r3
 80062c4:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80062c8:	e794      	b.n	80061f4 <_usb_ep0setup+0x224>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80062ca:	b93a      	cbnz	r2, 80062dc <_usb_ep0setup+0x30c>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 80062cc:	2102      	movs	r1, #2
 80062ce:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80062d2:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
 80062d6:	66a0      	str	r0, [r4, #104]	; 0x68
 80062d8:	460a      	mov	r2, r1
 80062da:	e6a2      	b.n	8006022 <_usb_ep0setup+0x52>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80062dc:	2a01      	cmp	r2, #1
 80062de:	f47f aecd 	bne.w	800607c <_usb_ep0setup+0xac>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 80062e2:	2202      	movs	r2, #2
 80062e4:	2000      	movs	r0, #0
 80062e6:	4904      	ldr	r1, [pc, #16]	; (80062f8 <_usb_ep0setup+0x328>)
 80062e8:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
 80062ec:	66a1      	str	r1, [r4, #104]	; 0x68
 80062ee:	e698      	b.n	8006022 <_usb_ep0setup+0x52>
 80062f0:	40005c00 	.word	0x40005c00
 80062f4:	08006451 	.word	0x08006451
 80062f8:	08010ce0 	.word	0x08010ce0
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80062fc:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8006300:	f001 000f 	and.w	r0, r1, #15
 8006304:	f011 0f80 	tst.w	r1, #128	; 0x80
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8006308:	4940      	ldr	r1, [pc, #256]	; (800640c <_usb_ep0setup+0x43c>)
 800630a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800630e:	d152      	bne.n	80063b6 <_usb_ep0setup+0x3e6>
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8006310:	f411 5140 	ands.w	r1, r1, #12288	; 0x3000
 8006314:	f43f aeb2 	beq.w	800607c <_usb_ep0setup+0xac>
 8006318:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800631c:	d151      	bne.n	80063c2 <_usb_ep0setup+0x3f2>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800631e:	2502      	movs	r5, #2
 8006320:	2000      	movs	r0, #0
 8006322:	493b      	ldr	r1, [pc, #236]	; (8006410 <_usb_ep0setup+0x440>)
 8006324:	e9c4 501b 	strd	r5, r0, [r4, #108]	; 0x6c
 8006328:	66a1      	str	r1, [r4, #104]	; 0x68
 800632a:	e67a      	b.n	8006022 <_usb_ep0setup+0x52>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800632c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8006330:	2b00      	cmp	r3, #0
 8006332:	f47f aea3 	bne.w	800607c <_usb_ep0setup+0xac>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8006336:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 800633a:	f012 030f 	ands.w	r3, r2, #15
 800633e:	f43f af66 	beq.w	800620e <_usb_ep0setup+0x23e>
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006348:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800634c:	f012 0f80 	tst.w	r2, #128	; 0x80
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	d14f      	bne.n	80063f4 <_usb_ep0setup+0x424>
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8006354:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006358:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800635c:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8006360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006364:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	e750      	b.n	800620e <_usb_ep0setup+0x23e>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800636c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8006370:	2b00      	cmp	r3, #0
 8006372:	f47f ae83 	bne.w	800607c <_usb_ep0setup+0xac>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8006376:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 800637a:	f012 030f 	ands.w	r3, r2, #15
 800637e:	f43f af46 	beq.w	800620e <_usb_ep0setup+0x23e>
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006388:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800638c:	f012 0f80 	tst.w	r2, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	d11d      	bne.n	80063d0 <_usb_ep0setup+0x400>
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8006394:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8006398:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800639c:	f43f af37 	beq.w	800620e <_usb_ep0setup+0x23e>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80063a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063aa:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 80063ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	e72b      	b.n	800620e <_usb_ep0setup+0x23e>
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 80063b6:	f011 0130 	ands.w	r1, r1, #48	; 0x30
 80063ba:	f43f ae5f 	beq.w	800607c <_usb_ep0setup+0xac>
 80063be:	2910      	cmp	r1, #16
 80063c0:	d0ad      	beq.n	800631e <_usb_ep0setup+0x34e>
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 80063c2:	2502      	movs	r5, #2
 80063c4:	2000      	movs	r0, #0
 80063c6:	4913      	ldr	r1, [pc, #76]	; (8006414 <_usb_ep0setup+0x444>)
 80063c8:	e9c4 501b 	strd	r5, r0, [r4, #108]	; 0x6c
 80063cc:	66a1      	str	r1, [r4, #104]	; 0x68
 80063ce:	e628      	b.n	8006022 <_usb_ep0setup+0x52>
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 80063d0:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80063d4:	2a30      	cmp	r2, #48	; 0x30
 80063d6:	f43f af1a 	beq.w	800620e <_usb_ep0setup+0x23e>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80063e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e4:	f082 0220 	eor.w	r2, r2, #32
 80063e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	e70c      	b.n	800620e <_usb_ep0setup+0x23e>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80063f4:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80063f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063fc:	f082 0210 	eor.w	r2, r2, #16
 8006400:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006404:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	e700      	b.n	800620e <_usb_ep0setup+0x23e>
 800640c:	40005c00 	.word	0x40005c00
 8006410:	0800e988 	.word	0x0800e988
 8006414:	0800e5cc 	.word	0x0800e5cc
	...

08006420 <usbStartTransmitI>:
                       const uint8_t *buf, size_t n) {
 8006420:	b5f0      	push	{r4, r5, r6, r7, lr}
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006422:	2401      	movs	r4, #1
  isp->txcnt  = 0;
 8006424:	2700      	movs	r7, #0
  isp = usbp->epc[ep]->in_state;
 8006426:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
 800642a:	f8dc e00c 	ldr.w	lr, [ip, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800642e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8006432:	f8de 5014 	ldr.w	r5, [lr, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006436:	408c      	lsls	r4, r1
 8006438:	ea44 040c 	orr.w	r4, r4, ip
 800643c:	8104      	strh	r4, [r0, #8]
  isp->txbuf  = buf;
 800643e:	60aa      	str	r2, [r5, #8]
  isp->txcnt  = 0;
 8006440:	e9c5 3700 	strd	r3, r7, [r5]
}
 8006444:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  usb_lld_start_in(usbp, ep);
 8006448:	f7ff bbfa 	b.w	8005c40 <usb_lld_start_in>
 800644c:	0000      	movs	r0, r0
	...

08006450 <set_address>:
  usbp->address = usbp->setup[2];
 8006450:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8006454:	6842      	ldr	r2, [r0, #4]
  usbp->address = usbp->setup[2];
 8006456:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 800645a:	4906      	ldr	r1, [pc, #24]	; (8006474 <set_address+0x24>)
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800645c:	6812      	ldr	r2, [r2, #0]
 800645e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
static void set_address(USBDriver *usbp) {
 8006462:	b510      	push	{r4, lr}
 8006464:	4604      	mov	r4, r0
 8006466:	64cb      	str	r3, [r1, #76]	; 0x4c
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8006468:	b10a      	cbz	r2, 800646e <set_address+0x1e>
 800646a:	2101      	movs	r1, #1
 800646c:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 800646e:	2303      	movs	r3, #3
 8006470:	7023      	strb	r3, [r4, #0]
}
 8006472:	bd10      	pop	{r4, pc}
 8006474:	40005c00 	.word	0x40005c00
	...

08006480 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
	...

08006490 <sduRequestsHook>:
  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8006490:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
bool sduRequestsHook(USBDriver *usbp) {
 8006494:	4602      	mov	r2, r0
  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8006496:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800649a:	2b20      	cmp	r3, #32
 800649c:	d001      	beq.n	80064a2 <sduRequestsHook+0x12>
      return false;
 800649e:	2000      	movs	r0, #0
}
 80064a0:	4770      	bx	lr
    switch (usbp->setup[1]) {
 80064a2:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	d3f9      	bcc.n	800649e <sduRequestsHook+0xe>
 80064aa:	2b21      	cmp	r3, #33	; 0x21
 80064ac:	d807      	bhi.n	80064be <sduRequestsHook+0x2e>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80064ae:	2007      	movs	r0, #7
 80064b0:	2100      	movs	r1, #0
 80064b2:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <sduRequestsHook+0x40>)
 80064b4:	e9c2 011b 	strd	r0, r1, [r2, #108]	; 0x6c
 80064b8:	6693      	str	r3, [r2, #104]	; 0x68
      return true;
 80064ba:	2001      	movs	r0, #1
 80064bc:	4770      	bx	lr
    switch (usbp->setup[1]) {
 80064be:	2b22      	cmp	r3, #34	; 0x22
 80064c0:	d1ed      	bne.n	800649e <sduRequestsHook+0xe>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80064c2:	2300      	movs	r3, #0
      return true;
 80064c4:	2001      	movs	r0, #1
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80064c6:	e9c2 331a 	strd	r3, r3, [r2, #104]	; 0x68
 80064ca:	6713      	str	r3, [r2, #112]	; 0x70
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	20001830 	.word	0x20001830
	...

080064e0 <_ctl>:
}
 80064e0:	2000      	movs	r0, #0
 80064e2:	4770      	bx	lr
	...

080064f0 <sdu_start_receive>:
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 80064f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80064f2:	f8d0 148c 	ldr.w	r1, [r0, #1164]	; 0x48c
 80064f6:	680a      	ldr	r2, [r1, #0]
 80064f8:	7813      	ldrb	r3, [r2, #0]
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d001      	beq.n	8006502 <sdu_start_receive+0x12>
    return true;
 80064fe:	2001      	movs	r0, #1
}
 8006500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8006502:	7a03      	ldrb	r3, [r0, #8]
 8006504:	2b02      	cmp	r3, #2
 8006506:	d1fa      	bne.n	80064fe <sdu_start_receive+0xe>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8006508:	2301      	movs	r3, #1
 800650a:	790c      	ldrb	r4, [r1, #4]
 800650c:	8955      	ldrh	r5, [r2, #10]
 800650e:	fa03 f404 	lsl.w	r4, r3, r4
 8006512:	4225      	tst	r5, r4
 8006514:	d1f3      	bne.n	80064fe <sdu_start_receive+0xe>
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8006516:	e9d0 4607 	ldrd	r4, r6, [r0, #28]
 800651a:	42b4      	cmp	r4, r6
 800651c:	d015      	beq.n	800654a <sdu_start_receive+0x5a>
  if (buf == NULL) {
 800651e:	1d23      	adds	r3, r4, #4
 8006520:	d0ed      	beq.n	80064fe <sdu_start_receive+0xe>
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006522:	2001      	movs	r0, #1
  osp->rxcnt  = 0;
 8006524:	2400      	movs	r4, #0
  osp->rxsize = n;
 8006526:	f44f 7780 	mov.w	r7, #256	; 0x100
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800652a:	7949      	ldrb	r1, [r1, #5]
  osp = usbp->epc[ep]->out_state;
 800652c:	eb02 0681 	add.w	r6, r2, r1, lsl #2
 8006530:	68f6      	ldr	r6, [r6, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006532:	4088      	lsls	r0, r1
  osp = usbp->epc[ep]->out_state;
 8006534:	69b6      	ldr	r6, [r6, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006536:	4305      	orrs	r5, r0
 8006538:	8155      	strh	r5, [r2, #10]
  usb_lld_start_out(usbp, ep);
 800653a:	4610      	mov	r0, r2
  osp->rxbuf  = buf;
 800653c:	60b3      	str	r3, [r6, #8]
  osp->rxcnt  = 0;
 800653e:	e9c6 7400 	strd	r7, r4, [r6]
  usb_lld_start_out(usbp, ep);
 8006542:	f7ff fbbd 	bl	8005cc0 <usb_lld_start_out>
  return false;
 8006546:	4620      	mov	r0, r4
}
 8006548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800654a:	6980      	ldr	r0, [r0, #24]
 800654c:	2800      	cmp	r0, #0
 800654e:	d1d6      	bne.n	80064fe <sdu_start_receive+0xe>
 8006550:	e7e5      	b.n	800651e <sdu_start_receive+0x2e>
 8006552:	bf00      	nop
	...

08006560 <ibnotify>:
  (void) sdu_start_receive(sdup);
 8006560:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8006562:	f7ff bfc5 	b.w	80064f0 <sdu_start_receive>
 8006566:	bf00      	nop
	...

08006570 <obqGetFullBufferI>:
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8006570:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8006574:	429a      	cmp	r2, r3
 8006576:	d004      	beq.n	8006582 <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 8006578:	4618      	mov	r0, r3
 800657a:	f850 3b04 	ldr.w	r3, [r0], #4
 800657e:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 8006580:	4770      	bx	lr
  if (obqIsEmptyI(obqp)) {
 8006582:	68c2      	ldr	r2, [r0, #12]
 8006584:	2a00      	cmp	r2, #0
 8006586:	d0f7      	beq.n	8006578 <obqGetFullBufferI+0x8>
    return NULL;
 8006588:	2000      	movs	r0, #0
 800658a:	4770      	bx	lr
 800658c:	0000      	movs	r0, r0
	...

08006590 <obnotify>:
static void obnotify(io_buffers_queue_t *bqp) {
 8006590:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8006592:	6b44      	ldr	r4, [r0, #52]	; 0x34
static void obnotify(io_buffers_queue_t *bqp) {
 8006594:	b082      	sub	sp, #8
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8006596:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 800659a:	6813      	ldr	r3, [r2, #0]
 800659c:	7819      	ldrb	r1, [r3, #0]
 800659e:	2904      	cmp	r1, #4
 80065a0:	d001      	beq.n	80065a6 <obnotify+0x16>
}
 80065a2:	b002      	add	sp, #8
 80065a4:	bd10      	pop	{r4, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80065a6:	7a21      	ldrb	r1, [r4, #8]
 80065a8:	2902      	cmp	r1, #2
 80065aa:	d1fa      	bne.n	80065a2 <obnotify+0x12>
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80065ac:	2101      	movs	r1, #1
 80065ae:	7910      	ldrb	r0, [r2, #4]
 80065b0:	891a      	ldrh	r2, [r3, #8]
 80065b2:	fa01 f300 	lsl.w	r3, r1, r0
 80065b6:	4213      	tst	r3, r2
 80065b8:	d1f3      	bne.n	80065a2 <obnotify+0x12>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80065ba:	a901      	add	r1, sp, #4
 80065bc:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80065c0:	f7ff ffd6 	bl	8006570 <obqGetFullBufferI>
    if (buf != NULL) {
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d0ec      	beq.n	80065a2 <obnotify+0x12>
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 80065c8:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80065cc:	4602      	mov	r2, r0
 80065ce:	7919      	ldrb	r1, [r3, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	9b01      	ldr	r3, [sp, #4]
 80065d4:	f7ff ff24 	bl	8006420 <usbStartTransmitI>
 80065d8:	e7e3      	b.n	80065a2 <obnotify+0x12>
 80065da:	bf00      	nop
 80065dc:	0000      	movs	r0, r0
	...

080065e0 <sof_handler>:
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 80065e0:	b510      	push	{r4, lr}
 80065e2:	2320      	movs	r3, #32
 80065e4:	b082      	sub	sp, #8
 80065e6:	f383 8811 	msr	BASEPRI, r3
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80065ea:	4c1f      	ldr	r4, [pc, #124]	; (8006668 <sof_handler+0x88>)
 80065ec:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 80065f0:	6813      	ldr	r3, [r2, #0]
 80065f2:	7819      	ldrb	r1, [r3, #0]
 80065f4:	2904      	cmp	r1, #4
 80065f6:	d004      	beq.n	8006602 <sof_handler+0x22>
 80065f8:	2300      	movs	r3, #0
 80065fa:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&SDU1);
  osalSysUnlockFromISR();
}
 80065fe:	b002      	add	sp, #8
 8006600:	bd10      	pop	{r4, pc}
 8006602:	7a21      	ldrb	r1, [r4, #8]
 8006604:	2902      	cmp	r1, #2
 8006606:	d1f7      	bne.n	80065f8 <sof_handler+0x18>
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8006608:	2101      	movs	r1, #1
 800660a:	7910      	ldrb	r0, [r2, #4]
 800660c:	891a      	ldrh	r2, [r3, #8]
 800660e:	fa01 f300 	lsl.w	r3, r1, r0
 8006612:	4213      	tst	r3, r2
 8006614:	d1f0      	bne.n	80065f8 <sof_handler+0x18>

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8006616:	e9d4 3215 	ldrd	r3, r2, [r4, #84]	; 0x54
 800661a:	4293      	cmp	r3, r2
 800661c:	d1ec      	bne.n	80065f8 <sof_handler+0x18>
 800661e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006620:	2a00      	cmp	r2, #0
 8006622:	d0e9      	beq.n	80065f8 <sof_handler+0x18>
 8006624:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006626:	2a00      	cmp	r2, #0
 8006628:	d0e6      	beq.n	80065f8 <sof_handler+0x18>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 800662a:	3a04      	subs	r2, #4

    if (size > 0U) {
 800662c:	1ad2      	subs	r2, r2, r3
 800662e:	d0e3      	beq.n	80065f8 <sof_handler+0x18>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 8006630:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
 8006632:	e9d4 1017 	ldrd	r1, r0, [r4, #92]	; 0x5c
      obqp->bwrptr += obqp->bsize;
 8006636:	4403      	add	r3, r0
      if (obqp->bwrptr >= obqp->btop) {
 8006638:	428b      	cmp	r3, r1
      obqp->bwrptr += obqp->bsize;
 800663a:	6563      	str	r3, [r4, #84]	; 0x54
        obqp->bwrptr = obqp->buffers;
 800663c:	bf28      	it	cs
 800663e:	6ea3      	ldrcs	r3, [r4, #104]	; 0x68
      obqp->bcounter--;
 8006640:	6d22      	ldr	r2, [r4, #80]	; 0x50
        obqp->bwrptr = obqp->buffers;
 8006642:	bf28      	it	cs
 8006644:	6563      	strcs	r3, [r4, #84]	; 0x54
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8006646:	2300      	movs	r3, #0
      obqp->bcounter--;
 8006648:	3a01      	subs	r2, #1
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800664a:	a901      	add	r1, sp, #4
 800664c:	4807      	ldr	r0, [pc, #28]	; (800666c <sof_handler+0x8c>)
 800664e:	6522      	str	r2, [r4, #80]	; 0x50
      obqp->ptr = NULL;
 8006650:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006652:	f7ff ff8d 	bl	8006570 <obqGetFullBufferI>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8006656:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800665a:	4602      	mov	r2, r0
 800665c:	7919      	ldrb	r1, [r3, #4]
 800665e:	6818      	ldr	r0, [r3, #0]
 8006660:	9b01      	ldr	r3, [sp, #4]
 8006662:	f7ff fedd 	bl	8006420 <usbStartTransmitI>
 8006666:	e7c7      	b.n	80065f8 <sof_handler+0x18>
 8006668:	20001898 	.word	0x20001898
 800666c:	200018dc 	.word	0x200018dc

08006670 <_port_irq_epilogue>:
 8006670:	2320      	movs	r3, #32
 8006672:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8006676:	4b0f      	ldr	r3, [pc, #60]	; (80066b4 <_port_irq_epilogue+0x44>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800667e:	d102      	bne.n	8006686 <_port_irq_epilogue+0x16>
 8006680:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8006684:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8006686:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
 800668a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
 800668e:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
 8006692:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8006696:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 800669a:	4a07      	ldr	r2, [pc, #28]	; (80066b8 <_port_irq_epilogue+0x48>)
 800669c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800669e:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 80066a0:	6889      	ldr	r1, [r1, #8]
 80066a2:	6892      	ldr	r2, [r2, #8]
 80066a4:	4291      	cmp	r1, r2
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80066a6:	bf8c      	ite	hi
 80066a8:	4a04      	ldrhi	r2, [pc, #16]	; (80066bc <_port_irq_epilogue+0x4c>)
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80066aa:	4a05      	ldrls	r2, [pc, #20]	; (80066c0 <_port_irq_epilogue+0x50>)
 80066ac:	f843 2c08 	str.w	r2, [r3, #-8]
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	e000ed00 	.word	0xe000ed00
 80066b8:	20001eb0 	.word	0x20001eb0
 80066bc:	08005261 	.word	0x08005261
 80066c0:	08005264 	.word	0x08005264
	...

080066d0 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 80066d0:	b4f0      	push	{r4, r5, r6, r7}
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80066d2:	4d0b      	ldr	r5, [pc, #44]	; (8006700 <chCoreAllocAlignedI+0x30>)
  size = MEM_ALIGN_NEXT(size, align);
 80066d4:	1e4a      	subs	r2, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80066d6:	682f      	ldr	r7, [r5, #0]
  size = MEM_ALIGN_NEXT(size, align);
 80066d8:	424e      	negs	r6, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80066da:	1e7c      	subs	r4, r7, #1
  size = MEM_ALIGN_NEXT(size, align);
 80066dc:	1813      	adds	r3, r2, r0
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80066de:	4421      	add	r1, r4
 80066e0:	ea01 0006 	and.w	r0, r1, r6
  size = MEM_ALIGN_NEXT(size, align);
 80066e4:	4033      	ands	r3, r6
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80066e6:	686a      	ldr	r2, [r5, #4]
  next = p + size;
 80066e8:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d804      	bhi.n	80066f8 <chCoreAllocAlignedI+0x28>
 80066ee:	429f      	cmp	r7, r3
 80066f0:	d802      	bhi.n	80066f8 <chCoreAllocAlignedI+0x28>
  ch_memcore.nextmem = next;
 80066f2:	602b      	str	r3, [r5, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80066f4:	bcf0      	pop	{r4, r5, r6, r7}
 80066f6:	4770      	bx	lr
    return NULL;
 80066f8:	2000      	movs	r0, #0
 80066fa:	bcf0      	pop	{r4, r5, r6, r7}
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20002040 	.word	0x20002040
	...

08006710 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8006710:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006712:	2220      	movs	r2, #32
 8006714:	4603      	mov	r3, r0
 8006716:	f382 8811 	msr	BASEPRI, r2
  objp = mp->next;
 800671a:	6800      	ldr	r0, [r0, #0]
  if (objp != NULL) {
 800671c:	b128      	cbz	r0, 800672a <chPoolAlloc+0x1a>
    mp->next = mp->next->next;
 800671e:	6802      	ldr	r2, [r0, #0]
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	2300      	movs	r3, #0
 8006724:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8006728:	bd08      	pop	{r3, pc}
  else if (mp->provider != NULL) {
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	2a00      	cmp	r2, #0
 800672e:	d0f8      	beq.n	8006722 <chPoolAlloc+0x12>
    objp = mp->provider(mp->object_size, mp->align);
 8006730:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 8006734:	4790      	blx	r2
 8006736:	2300      	movs	r3, #0
 8006738:	f383 8811 	msr	BASEPRI, r3
}
 800673c:	bd08      	pop	{r3, pc}
 800673e:	bf00      	nop

08006740 <oslib_test_002_001_execute>:
  test_set_step(1);
 8006740:	2101      	movs	r1, #1
static void oslib_test_002_001_execute(void) {
 8006742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8006746:	2204      	movs	r2, #4
 8006748:	2520      	movs	r5, #32
 800674a:	2000      	movs	r0, #0
 800674c:	4e38      	ldr	r6, [pc, #224]	; (8006830 <oslib_test_002_001_execute+0xf0>)
 800674e:	4b39      	ldr	r3, [pc, #228]	; (8006834 <oslib_test_002_001_execute+0xf4>)
 8006750:	4c39      	ldr	r4, [pc, #228]	; (8006838 <oslib_test_002_001_execute+0xf8>)
 8006752:	6031      	str	r1, [r6, #0]
 8006754:	f385 8811 	msr	BASEPRI, r5
  chDbgCheck((mp != NULL) && (objp != NULL));

  chDbgAssert(((size_t)objp & MEM_ALIGN_MASK(mp->align)) == 0U,
              "unaligned object");

  php->next = mp->next;
 8006758:	6821      	ldr	r1, [r4, #0]
  mp->next = php;
 800675a:	6023      	str	r3, [r4, #0]
  php->next = mp->next;
 800675c:	6019      	str	r1, [r3, #0]
 800675e:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8006762:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 8006764:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8006766:	440b      	add	r3, r1
  while (n != 0U) {
 8006768:	d1f4      	bne.n	8006754 <oslib_test_002_001_execute+0x14>
  test_set_step(2);
 800676a:	2302      	movs	r3, #2
 800676c:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 800676e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8006838 <oslib_test_002_001_execute+0xf8>
 8006772:	4f32      	ldr	r7, [pc, #200]	; (800683c <oslib_test_002_001_execute+0xfc>)
  test_set_step(2);
 8006774:	6033      	str	r3, [r6, #0]
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8006776:	4640      	mov	r0, r8
 8006778:	f7ff ffca 	bl	8006710 <chPoolAlloc>
 800677c:	3000      	adds	r0, #0
 800677e:	bf18      	it	ne
 8006780:	2001      	movne	r0, #1
 8006782:	4639      	mov	r1, r7
 8006784:	f7ff f8dc 	bl	8005940 <_test_assert>
 8006788:	2800      	cmp	r0, #0
 800678a:	d13b      	bne.n	8006804 <oslib_test_002_001_execute+0xc4>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800678c:	3d01      	subs	r5, #1
 800678e:	d1f2      	bne.n	8006776 <oslib_test_002_001_execute+0x36>
  test_set_step(3);
 8006790:	2303      	movs	r3, #3
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8006792:	4829      	ldr	r0, [pc, #164]	; (8006838 <oslib_test_002_001_execute+0xf8>)
  test_set_step(3);
 8006794:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8006796:	f7ff ffbb 	bl	8006710 <chPoolAlloc>
 800679a:	fab0 f080 	clz	r0, r0
 800679e:	4928      	ldr	r1, [pc, #160]	; (8006840 <oslib_test_002_001_execute+0x100>)
 80067a0:	0940      	lsrs	r0, r0, #5
 80067a2:	f7ff f8cd 	bl	8005940 <_test_assert>
 80067a6:	bb68      	cbnz	r0, 8006804 <oslib_test_002_001_execute+0xc4>
  test_set_step(4);
 80067a8:	2204      	movs	r2, #4
 80067aa:	2720      	movs	r7, #32
 80067ac:	4b21      	ldr	r3, [pc, #132]	; (8006834 <oslib_test_002_001_execute+0xf4>)
 80067ae:	6032      	str	r2, [r6, #0]
 80067b0:	f103 0010 	add.w	r0, r3, #16
 80067b4:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 80067b8:	6822      	ldr	r2, [r4, #0]
  mp->next = php;
 80067ba:	6023      	str	r3, [r4, #0]
  php->next = mp->next;
 80067bc:	f843 2b04 	str.w	r2, [r3], #4
 80067c0:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80067c4:	4298      	cmp	r0, r3
 80067c6:	d1f5      	bne.n	80067b4 <oslib_test_002_001_execute+0x74>
  test_set_step(5);
 80067c8:	2305      	movs	r3, #5
 80067ca:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80067cc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8006838 <oslib_test_002_001_execute+0xf8>
 80067d0:	4f1a      	ldr	r7, [pc, #104]	; (800683c <oslib_test_002_001_execute+0xfc>)
  test_set_step(5);
 80067d2:	6033      	str	r3, [r6, #0]
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80067d4:	4640      	mov	r0, r8
 80067d6:	f7ff ff9b 	bl	8006710 <chPoolAlloc>
 80067da:	3000      	adds	r0, #0
 80067dc:	bf18      	it	ne
 80067de:	2001      	movne	r0, #1
 80067e0:	4639      	mov	r1, r7
 80067e2:	f7ff f8ad 	bl	8005940 <_test_assert>
 80067e6:	b968      	cbnz	r0, 8006804 <oslib_test_002_001_execute+0xc4>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80067e8:	3d01      	subs	r5, #1
 80067ea:	d1f3      	bne.n	80067d4 <oslib_test_002_001_execute+0x94>
  test_set_step(6);
 80067ec:	2306      	movs	r3, #6
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80067ee:	4812      	ldr	r0, [pc, #72]	; (8006838 <oslib_test_002_001_execute+0xf8>)
  test_set_step(6);
 80067f0:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80067f2:	f7ff ff8d 	bl	8006710 <chPoolAlloc>
 80067f6:	fab0 f080 	clz	r0, r0
 80067fa:	4911      	ldr	r1, [pc, #68]	; (8006840 <oslib_test_002_001_execute+0x100>)
 80067fc:	0940      	lsrs	r0, r0, #5
 80067fe:	f7ff f89f 	bl	8005940 <_test_assert>
 8006802:	b108      	cbz	r0, 8006808 <oslib_test_002_001_execute+0xc8>
}
 8006804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(7);
 8006808:	2107      	movs	r1, #7
  mp->object_size = size;
 800680a:	2304      	movs	r3, #4
  mp->provider = provider;
 800680c:	4a0d      	ldr	r2, [pc, #52]	; (8006844 <oslib_test_002_001_execute+0x104>)
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800680e:	480a      	ldr	r0, [pc, #40]	; (8006838 <oslib_test_002_001_execute+0xf8>)
  test_set_step(7);
 8006810:	6031      	str	r1, [r6, #0]
  mp->next = NULL;
 8006812:	6025      	str	r5, [r4, #0]
  mp->align = align;
 8006814:	e9c4 3301 	strd	r3, r3, [r4, #4]
  mp->provider = provider;
 8006818:	60e2      	str	r2, [r4, #12]
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800681a:	f7ff ff79 	bl	8006710 <chPoolAlloc>
}
 800681e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8006822:	fab0 f080 	clz	r0, r0
 8006826:	4908      	ldr	r1, [pc, #32]	; (8006848 <oslib_test_002_001_execute+0x108>)
 8006828:	0940      	lsrs	r0, r0, #5
 800682a:	f7ff b889 	b.w	8005940 <_test_assert>
 800682e:	bf00      	nop
 8006830:	2000283c 	.word	0x2000283c
 8006834:	200020f8 	.word	0x200020f8
 8006838:	20001880 	.word	0x20001880
 800683c:	0800ead0 	.word	0x0800ead0
 8006840:	0800eadc 	.word	0x0800eadc
 8006844:	080056a1 	.word	0x080056a1
 8006848:	0800eaec 	.word	0x0800eaec
 800684c:	00000000 	.word	0x00000000

08006850 <chEvtAddEvents>:
 8006850:	2320      	movs	r3, #32
 8006852:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 8006856:	4b04      	ldr	r3, [pc, #16]	; (8006868 <chEvtAddEvents+0x18>)
 8006858:	2200      	movs	r2, #0
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800685e:	4308      	orrs	r0, r1
 8006860:	6358      	str	r0, [r3, #52]	; 0x34
 8006862:	f382 8811 	msr	BASEPRI, r2
}
 8006866:	4770      	bx	lr
 8006868:	20001eb0 	.word	0x20001eb0
 800686c:	00000000 	.word	0x00000000

08006870 <chEvtUnregister>:
 8006870:	2320      	movs	r3, #32
 8006872:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8006876:	4602      	mov	r2, r0
 8006878:	e002      	b.n	8006880 <chEvtUnregister+0x10>
    if (p->next == elp) {
 800687a:	428b      	cmp	r3, r1
 800687c:	d007      	beq.n	800688e <chEvtUnregister+0x1e>
 800687e:	461a      	mov	r2, r3
  while (p->next != (event_listener_t *)esp) {
 8006880:	6813      	ldr	r3, [r2, #0]
 8006882:	4283      	cmp	r3, r0
 8006884:	d1f9      	bne.n	800687a <chEvtUnregister+0xa>
 8006886:	2300      	movs	r3, #0
 8006888:	f383 8811 	msr	BASEPRI, r3
}
 800688c:	4770      	bx	lr
      p->next = elp->next;
 800688e:	680b      	ldr	r3, [r1, #0]
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	2300      	movs	r3, #0
 8006894:	f383 8811 	msr	BASEPRI, r3
}
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	0000      	movs	r0, r0
	...

080068a0 <rt_test_008_001_execute>:
  test_set_step(2);
 80068a0:	2002      	movs	r0, #2
static void rt_test_008_001_execute(void) {
 80068a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(2);
 80068a6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8006994 <rt_test_008_001_execute+0xf4>
  esp->next = (event_listener_t *)esp;
 80068aa:	4c36      	ldr	r4, [pc, #216]	; (8006984 <rt_test_008_001_execute+0xe4>)
static void rt_test_008_001_execute(void) {
 80068ac:	b08c      	sub	sp, #48	; 0x30
  test_set_step(2);
 80068ae:	f8c9 0000 	str.w	r0, [r9]
 80068b2:	6024      	str	r4, [r4, #0]
 80068b4:	2620      	movs	r6, #32
 80068b6:	f386 8811 	msr	BASEPRI, r6
  elp->events   = events;
 80068ba:	2301      	movs	r3, #1
  elp->flags    = (eventflags_t)0;
 80068bc:	2500      	movs	r5, #0
  elp->wflags   = wflags;
 80068be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  elp->listener = currp;
 80068c2:	4a31      	ldr	r2, [pc, #196]	; (8006988 <rt_test_008_001_execute+0xe8>)
  elp->events   = events;
 80068c4:	9309      	str	r3, [sp, #36]	; 0x24
  elp->next     = esp->next;
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	af0c      	add	r7, sp, #48	; 0x30
 80068ca:	9301      	str	r3, [sp, #4]
  elp->listener = currp;
 80068cc:	6993      	ldr	r3, [r2, #24]
  elp->wflags   = wflags;
 80068ce:	e9cd 510a 	strd	r5, r1, [sp, #40]	; 0x28
  elp->listener = currp;
 80068d2:	9308      	str	r3, [sp, #32]
  elp->next     = esp->next;
 80068d4:	9b01      	ldr	r3, [sp, #4]
 80068d6:	f847 3d14 	str.w	r3, [r7, #-20]!
  esp->next     = elp;
 80068da:	6027      	str	r7, [r4, #0]
 80068dc:	f385 8811 	msr	BASEPRI, r5
 80068e0:	f386 8811 	msr	BASEPRI, r6
  elp->next     = esp->next;
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	f10d 0830 	add.w	r8, sp, #48	; 0x30
  elp->listener = currp;
 80068ea:	6992      	ldr	r2, [r2, #24]
  elp->next     = esp->next;
 80068ec:	f848 3d28 	str.w	r3, [r8, #-40]!
  elp->listener = currp;
 80068f0:	9203      	str	r2, [sp, #12]
  elp->flags    = (eventflags_t)0;
 80068f2:	e9cd 0504 	strd	r0, r5, [sp, #16]
  elp->wflags   = wflags;
 80068f6:	9106      	str	r1, [sp, #24]
  esp->next     = elp;
 80068f8:	f8c4 8000 	str.w	r8, [r4]
 80068fc:	f385 8811 	msr	BASEPRI, r5
 8006900:	f386 8811 	msr	BASEPRI, r6
  return (bool)(esp != (event_source_t *)esp->next);
 8006904:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8006906:	4921      	ldr	r1, [pc, #132]	; (800698c <rt_test_008_001_execute+0xec>)
 8006908:	1b00      	subs	r0, r0, r4
 800690a:	bf18      	it	ne
 800690c:	2001      	movne	r0, #1
 800690e:	f7ff f817 	bl	8005940 <_test_assert>
 8006912:	b120      	cbz	r0, 800691e <rt_test_008_001_execute+0x7e>
 8006914:	f385 8811 	msr	BASEPRI, r5
}
 8006918:	b00c      	add	sp, #48	; 0x30
 800691a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691e:	4682      	mov	sl, r0
 8006920:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8006924:	2303      	movs	r3, #3
    chEvtUnregister(&es1, &el1);
 8006926:	4639      	mov	r1, r7
 8006928:	4620      	mov	r0, r4
  test_set_step(3);
 800692a:	f8c9 3000 	str.w	r3, [r9]
    chEvtUnregister(&es1, &el1);
 800692e:	f7ff ff9f 	bl	8006870 <chEvtUnregister>
 8006932:	f386 8811 	msr	BASEPRI, r6
 8006936:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8006938:	4914      	ldr	r1, [pc, #80]	; (800698c <rt_test_008_001_execute+0xec>)
 800693a:	1b00      	subs	r0, r0, r4
 800693c:	bf18      	it	ne
 800693e:	2001      	movne	r0, #1
 8006940:	f7fe fffe 	bl	8005940 <_test_assert>
 8006944:	4605      	mov	r5, r0
 8006946:	b120      	cbz	r0, 8006952 <rt_test_008_001_execute+0xb2>
 8006948:	f38a 8811 	msr	BASEPRI, sl
}
 800694c:	b00c      	add	sp, #48	; 0x30
 800694e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006952:	f380 8811 	msr	BASEPRI, r0
  test_set_step(4);
 8006956:	2304      	movs	r3, #4
    chEvtUnregister(&es1, &el2);
 8006958:	4641      	mov	r1, r8
 800695a:	4620      	mov	r0, r4
  test_set_step(4);
 800695c:	f8c9 3000 	str.w	r3, [r9]
    chEvtUnregister(&es1, &el2);
 8006960:	f7ff ff86 	bl	8006870 <chEvtUnregister>
 8006964:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 8006968:	6820      	ldr	r0, [r4, #0]
 800696a:	4909      	ldr	r1, [pc, #36]	; (8006990 <rt_test_008_001_execute+0xf0>)
 800696c:	1b00      	subs	r0, r0, r4
 800696e:	fab0 f080 	clz	r0, r0
 8006972:	0940      	lsrs	r0, r0, #5
 8006974:	f7fe ffe4 	bl	8005940 <_test_assert>
 8006978:	2800      	cmp	r0, #0
 800697a:	d1cb      	bne.n	8006914 <rt_test_008_001_execute+0x74>
 800697c:	f380 8811 	msr	BASEPRI, r0
 8006980:	e7ca      	b.n	8006918 <rt_test_008_001_execute+0x78>
 8006982:	bf00      	nop
 8006984:	2000180c 	.word	0x2000180c
 8006988:	20001eb0 	.word	0x20001eb0
 800698c:	0800fb28 	.word	0x0800fb28
 8006990:	0800fb34 	.word	0x0800fb34
 8006994:	2000283c 	.word	0x2000283c
	...

080069a0 <chThdCreateSuspendedI>:
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 80069a0:	b4f0      	push	{r4, r5, r6, r7}
  tp->flags     = CH_FLAG_MODE_STATIC;
 80069a2:	2100      	movs	r1, #0
  tp->state     = CH_STATE_WTSTART;
 80069a4:	2702      	movs	r7, #2
  tp->refs      = (trefs_t)1;
 80069a6:	2501      	movs	r5, #1
  tp = (thread_t *)((uint8_t *)tdp->wend -
 80069a8:	6883      	ldr	r3, [r0, #8]
  tp->wabase = tdp->wbase;
 80069aa:	6846      	ldr	r6, [r0, #4]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80069ac:	6904      	ldr	r4, [r0, #16]
  REG_INSERT(tp);
 80069ae:	4a19      	ldr	r2, [pc, #100]	; (8006a14 <chThdCreateSuspendedI+0x74>)
  tp->wabase = tdp->wbase;
 80069b0:	f843 6c2c 	str.w	r6, [r3, #-44]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80069b4:	f843 4c6c 	str.w	r4, [r3, #-108]
  return _thread_init(tp, tdp->name, tdp->prio);
 80069b8:	6806      	ldr	r6, [r0, #0]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80069ba:	6944      	ldr	r4, [r0, #20]
  return _thread_init(tp, tdp->name, tdp->prio);
 80069bc:	68c0      	ldr	r0, [r0, #12]
  tp->refs      = (trefs_t)1;
 80069be:	f803 5c26 	strb.w	r5, [r3, #-38]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80069c2:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 80069c6:	f803 7c28 	strb.w	r7, [r3, #-40]
  REG_INSERT(tp);
 80069ca:	f843 2c38 	str.w	r2, [r3, #-56]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80069ce:	4d12      	ldr	r5, [pc, #72]	; (8006a18 <chThdCreateSuspendedI+0x78>)
 80069d0:	f843 4c68 	str.w	r4, [r3, #-104]
  tp->prio      = prio;
 80069d4:	f843 0c40 	str.w	r0, [r3, #-64]
  REG_INSERT(tp);
 80069d8:	6954      	ldr	r4, [r2, #20]
  tp->realprio  = prio;
 80069da:	f843 0c0c 	str.w	r0, [r3, #-12]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80069de:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 80069e2:	f843 0c3c 	str.w	r0, [r3, #-60]
 80069e6:	f843 5c4c 	str.w	r5, [r3, #-76]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 80069ea:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  tp->epending  = (eventmask_t)0;
 80069ee:	e943 1105 	strd	r1, r1, [r3, #-20]
  list_init(&tp->waiting);
 80069f2:	f1a3 0520 	sub.w	r5, r3, #32
  queue_init(&tp->msgqueue);
 80069f6:	f1a3 011c 	sub.w	r1, r3, #28
  tp->name      = name;
 80069fa:	f843 6c30 	str.w	r6, [r3, #-48]
  REG_INSERT(tp);
 80069fe:	f843 4c34 	str.w	r4, [r3, #-52]
 8006a02:	6120      	str	r0, [r4, #16]
 8006a04:	6150      	str	r0, [r2, #20]
  tqp->next = (thread_t *)tqp;
 8006a06:	e943 5108 	strd	r5, r1, [r3, #-32]
}
 8006a0a:	bcf0      	pop	{r4, r5, r6, r7}
  tqp->prev = (thread_t *)tqp;
 8006a0c:	f843 1c18 	str.w	r1, [r3, #-24]
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	20001eb0 	.word	0x20001eb0
 8006a18:	08005251 	.word	0x08005251
 8006a1c:	00000000 	.word	0x00000000

08006a20 <wakeup>:
 8006a20:	2320      	movs	r3, #32
 8006a22:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8006a26:	f890 3020 	ldrb.w	r3, [r0, #32]
 8006a2a:	2b07      	cmp	r3, #7
 8006a2c:	d80e      	bhi.n	8006a4c <wakeup+0x2c>
 8006a2e:	e8df f003 	tbb	[pc, r3]
 8006a32:	0d28      	.short	0x0d28
 8006a34:	0408240d 	.word	0x0408240d
 8006a38:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
 8006a3a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8006a3c:	6893      	ldr	r3, [r2, #8]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8006a42:	e9d0 2300 	ldrd	r2, r3, [r0]
 8006a46:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8006a48:	6802      	ldr	r2, [r0, #0]
 8006a4a:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 8006a4c:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 8006a4e:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8006a50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 8006a54:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8006a56:	4b0d      	ldr	r3, [pc, #52]	; (8006a8c <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8006a58:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8006a5a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8006a5e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	428a      	cmp	r2, r1
 8006a64:	d2fb      	bcs.n	8006a5e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	2100      	movs	r1, #0
 8006a6a:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8006a6e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8006a70:	6058      	str	r0, [r3, #4]
 8006a72:	f381 8811 	msr	BASEPRI, r1
}
 8006a76:	bc10      	pop	{r4}
 8006a78:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	e7e4      	b.n	8006a4c <wakeup+0x2c>
 8006a82:	2300      	movs	r3, #0
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	20001eb0 	.word	0x20001eb0

08006a90 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8006a90:	4601      	mov	r1, r0
  tp->state = CH_STATE_READY;
 8006a92:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8006a94:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <chSchReadyI+0x24>)
  } while (cp->prio >= tp->prio);
 8006a96:	6880      	ldr	r0, [r0, #8]
  tp->state = CH_STATE_READY;
 8006a98:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 8006a9c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	4282      	cmp	r2, r0
 8006aa2:	d2fb      	bcs.n	8006a9c <chSchReadyI+0xc>
  tp->queue.prev             = cp->queue.prev;
 8006aa4:	685a      	ldr	r2, [r3, #4]
}
 8006aa6:	4608      	mov	r0, r1
  tp->queue.prev             = cp->queue.prev;
 8006aa8:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8006aac:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8006aae:	6059      	str	r1, [r3, #4]
}
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	20001eb0 	.word	0x20001eb0
	...

08006ac0 <chThdDequeueNextI.constprop.86>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 8006ac0:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8006ac2:	4290      	cmp	r0, r2
 8006ac4:	d00a      	beq.n	8006adc <chThdDequeueNextI.constprop.86+0x1c>
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8006ac6:	b410      	push	{r4}
 8006ac8:	4603      	mov	r3, r0

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8006aca:	2400      	movs	r4, #0
  tqp->next             = tp->queue.next;
 8006acc:	6811      	ldr	r1, [r2, #0]
  (void) chSchReadyI(tp);
 8006ace:	4610      	mov	r0, r2
 8006ad0:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8006ad2:	604b      	str	r3, [r1, #4]
  tp->u.rdymsg = msg;
 8006ad4:	6254      	str	r4, [r2, #36]	; 0x24
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8006ad6:	bc10      	pop	{r4}
  (void) chSchReadyI(tp);
 8006ad8:	f7ff bfda 	b.w	8006a90 <chSchReadyI>
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop

08006ae0 <chMBPostI.constprop.54>:

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8006ae0:	4b0f      	ldr	r3, [pc, #60]	; (8006b20 <chMBPostI.constprop.54+0x40>)
 8006ae2:	7d1a      	ldrb	r2, [r3, #20]
 8006ae4:	b9aa      	cbnz	r2, 8006b12 <chMBPostI.constprop.54+0x32>
 8006ae6:	691a      	ldr	r2, [r3, #16]
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	e9d3 6100 	ldrd	r6, r1, [r3]
 */
static inline size_t chMBGetSizeI(const mailbox_t *mbp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(mbp->top - mbp->buffer);
 8006aee:	1b8c      	subs	r4, r1, r6
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8006af0:	ebb2 0fa4 	cmp.w	r2, r4, asr #2
 8006af4:	d010      	beq.n	8006b18 <chMBPostI.constprop.54+0x38>
    *mbp->wrptr++ = msg;
 8006af6:	689d      	ldr	r5, [r3, #8]
    if (mbp->wrptr >= mbp->top) {
      mbp->wrptr = mbp->buffer;
    }
    mbp->cnt++;
 8006af8:	3201      	adds	r2, #1
    *mbp->wrptr++ = msg;
 8006afa:	1d2c      	adds	r4, r5, #4
 8006afc:	609c      	str	r4, [r3, #8]
    if (mbp->wrptr >= mbp->top) {
 8006afe:	42a1      	cmp	r1, r4
    *mbp->wrptr++ = msg;
 8006b00:	6028      	str	r0, [r5, #0]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8006b02:	4808      	ldr	r0, [pc, #32]	; (8006b24 <chMBPostI.constprop.54+0x44>)
      mbp->wrptr = mbp->buffer;
 8006b04:	bf98      	it	ls
 8006b06:	609e      	strls	r6, [r3, #8]
    mbp->cnt++;
 8006b08:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8006b0a:	f7ff ffd9 	bl	8006ac0 <chThdDequeueNextI.constprop.86>

    return MSG_OK;
 8006b0e:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8006b10:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_RESET;
 8006b12:	f06f 0001 	mvn.w	r0, #1
}
 8006b16:	4770      	bx	lr
  return MSG_TIMEOUT;
 8006b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
 8006b1e:	bf00      	nop
 8006b20:	20001858 	.word	0x20001858
 8006b24:	20001878 	.word	0x20001878
	...

08006b30 <chMBPostAheadI.constprop.51>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8006b30:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8006b32:	4b0f      	ldr	r3, [pc, #60]	; (8006b70 <chMBPostAheadI.constprop.51+0x40>)
 8006b34:	7d1a      	ldrb	r2, [r3, #20]
 8006b36:	b9a2      	cbnz	r2, 8006b62 <chMBPostAheadI.constprop.51+0x32>
 8006b38:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006b3c:	6919      	ldr	r1, [r3, #16]
 8006b3e:	1b2a      	subs	r2, r5, r4
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8006b40:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 8006b44:	d010      	beq.n	8006b68 <chMBPostAheadI.constprop.51+0x38>
    if (--mbp->rdptr < mbp->buffer) {
 8006b46:	68da      	ldr	r2, [r3, #12]
      mbp->rdptr = mbp->top - 1;
    }
    *mbp->rdptr = msg;
    mbp->cnt++;
 8006b48:	3101      	adds	r1, #1
    if (--mbp->rdptr < mbp->buffer) {
 8006b4a:	3a04      	subs	r2, #4
 8006b4c:	4294      	cmp	r4, r2
      mbp->rdptr = mbp->top - 1;
 8006b4e:	bf88      	it	hi
 8006b50:	1f2a      	subhi	r2, r5, #4
 8006b52:	60da      	str	r2, [r3, #12]
    *mbp->rdptr = msg;
 8006b54:	6010      	str	r0, [r2, #0]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8006b56:	4807      	ldr	r0, [pc, #28]	; (8006b74 <chMBPostAheadI.constprop.51+0x44>)
    mbp->cnt++;
 8006b58:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8006b5a:	f7ff ffb1 	bl	8006ac0 <chThdDequeueNextI.constprop.86>

    return MSG_OK;
 8006b5e:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8006b60:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8006b62:	f06f 0001 	mvn.w	r0, #1
}
 8006b66:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8006b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006b6c:	bd38      	pop	{r3, r4, r5, pc}
 8006b6e:	bf00      	nop
 8006b70:	20001858 	.word	0x20001858
 8006b74:	20001878 	.word	0x20001878
	...

08006b80 <chMBFetchI.constprop.48>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8006b80:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8006b82:	4b0f      	ldr	r3, [pc, #60]	; (8006bc0 <chMBFetchI.constprop.48+0x40>)
 8006b84:	7d1a      	ldrb	r2, [r3, #20]
 8006b86:	b9a2      	cbnz	r2, 8006bb2 <chMBFetchI.constprop.48+0x32>
 8006b88:	691a      	ldr	r2, [r3, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8006b8a:	b1aa      	cbz	r2, 8006bb8 <chMBFetchI.constprop.48+0x38>
    *msgp = *mbp->rdptr++;
 8006b8c:	68dc      	ldr	r4, [r3, #12]
    if (mbp->rdptr >= mbp->top) {
 8006b8e:	685d      	ldr	r5, [r3, #4]
    *msgp = *mbp->rdptr++;
 8006b90:	1d21      	adds	r1, r4, #4
    if (mbp->rdptr >= mbp->top) {
 8006b92:	42a9      	cmp	r1, r5
    *msgp = *mbp->rdptr++;
 8006b94:	6824      	ldr	r4, [r4, #0]
 8006b96:	60d9      	str	r1, [r3, #12]
      mbp->rdptr = mbp->buffer;
 8006b98:	bf28      	it	cs
 8006b9a:	6819      	ldrcs	r1, [r3, #0]
    *msgp = *mbp->rdptr++;
 8006b9c:	6004      	str	r4, [r0, #0]
    }
    mbp->cnt--;
 8006b9e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8006ba2:	4808      	ldr	r0, [pc, #32]	; (8006bc4 <chMBFetchI.constprop.48+0x44>)
      mbp->rdptr = mbp->buffer;
 8006ba4:	bf28      	it	cs
 8006ba6:	60d9      	strcs	r1, [r3, #12]
    mbp->cnt--;
 8006ba8:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8006baa:	f7ff ff89 	bl	8006ac0 <chThdDequeueNextI.constprop.86>

    return MSG_OK;
 8006bae:	2000      	movs	r0, #0
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8006bb0:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8006bb2:	f06f 0001 	mvn.w	r0, #1
}
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006bbc:	bd38      	pop	{r3, r4, r5, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20001858 	.word	0x20001858
 8006bc4:	20001870 	.word	0x20001870
	...

08006bd0 <chCondSignalI.constprop.77>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 8006bd0:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <chCondSignalI.constprop.77+0x20>)
 8006bd2:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d009      	beq.n	8006bec <chCondSignalI.constprop.77+0x1c>
void chCondSignalI(condition_variable_t *cp) {
 8006bd8:	b410      	push	{r4}
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
 8006bda:	2400      	movs	r4, #0
  tqp->next             = tp->queue.next;
 8006bdc:	6811      	ldr	r1, [r2, #0]
    (void) chSchReadyI(tp);
 8006bde:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
 8006be0:	604b      	str	r3, [r1, #4]
  tqp->next             = tp->queue.next;
 8006be2:	6019      	str	r1, [r3, #0]
    tp->u.rdymsg = MSG_OK;
 8006be4:	6254      	str	r4, [r2, #36]	; 0x24
  }
}
 8006be6:	bc10      	pop	{r4}
    (void) chSchReadyI(tp);
 8006be8:	f7ff bf52 	b.w	8006a90 <chSchReadyI>
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	20001804 	.word	0x20001804
	...

08006c00 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8006c00:	4603      	mov	r3, r0
  tp->epending |= events;
 8006c02:	6b42      	ldr	r2, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8006c04:	f890 0020 	ldrb.w	r0, [r0, #32]
  tp->epending |= events;
 8006c08:	4311      	orrs	r1, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 8006c0a:	280a      	cmp	r0, #10
  tp->epending |= events;
 8006c0c:	6359      	str	r1, [r3, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8006c0e:	d00a      	beq.n	8006c26 <chEvtSignalI+0x26>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8006c10:	280b      	cmp	r0, #11
 8006c12:	d000      	beq.n	8006c16 <chEvtSignalI+0x16>
}
 8006c14:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8006c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8006c18:	438a      	bics	r2, r1
 8006c1a:	d1fb      	bne.n	8006c14 <chEvtSignalI+0x14>
    tp->u.rdymsg = MSG_OK;
 8006c1c:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
 8006c1e:	4618      	mov	r0, r3
    tp->u.rdymsg = MSG_OK;
 8006c20:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8006c22:	f7ff bf35 	b.w	8006a90 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8006c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8006c28:	4211      	tst	r1, r2
 8006c2a:	d1f7      	bne.n	8006c1c <chEvtSignalI+0x1c>
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop

08006c30 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8006c30:	b570      	push	{r4, r5, r6, lr}
  elp = esp->next;
 8006c32:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 8006c34:	42a0      	cmp	r0, r4
 8006c36:	d00f      	beq.n	8006c58 <chEvtBroadcastFlagsI+0x28>
 8006c38:	4606      	mov	r6, r0
 8006c3a:	460d      	mov	r5, r1
    elp->flags |= flags;
 8006c3c:	68e3      	ldr	r3, [r4, #12]
 8006c3e:	432b      	orrs	r3, r5
 8006c40:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8006c42:	b115      	cbz	r5, 8006c4a <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 8006c44:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8006c46:	4213      	tst	r3, r2
 8006c48:	d003      	beq.n	8006c52 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->listener, elp->events);
 8006c4a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8006c4e:	f7ff ffd7 	bl	8006c00 <chEvtSignalI>
    elp = elp->next;
 8006c52:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8006c54:	42a6      	cmp	r6, r4
 8006c56:	d1f1      	bne.n	8006c3c <chEvtBroadcastFlagsI+0xc>
}
 8006c58:	bd70      	pop	{r4, r5, r6, pc}
 8006c5a:	bf00      	nop
 8006c5c:	0000      	movs	r0, r0
	...

08006c60 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8006c60:	3111      	adds	r1, #17
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8006c62:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8006c64:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 8006c68:	b344      	cbz	r4, 8006cbc <sduDataReceived+0x5c>
 8006c6a:	2320      	movs	r3, #32
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8006c70:	2104      	movs	r1, #4
 8006c72:	1860      	adds	r0, r4, r1
 8006c74:	f7ff ffdc 	bl	8006c30 <chEvtBroadcastFlagsI>
                     usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8006c78:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
  *((size_t *)ibqp->bwrptr) = size;
 8006c7c:	69e3      	ldr	r3, [r4, #28]
 8006c7e:	7948      	ldrb	r0, [r1, #5]
 8006c80:	680a      	ldr	r2, [r1, #0]
  if (ibqp->bwrptr >= ibqp->btop) {
 8006c82:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c84:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8006c88:	68d2      	ldr	r2, [r2, #12]
  ibqPostFullBufferI(&sdup->ibqueue,
 8006c8a:	f104 000c 	add.w	r0, r4, #12
 8006c8e:	6992      	ldr	r2, [r2, #24]
 8006c90:	6852      	ldr	r2, [r2, #4]
  *((size_t *)ibqp->bwrptr) = size;
 8006c92:	601a      	str	r2, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
 8006c94:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  ibqp->bcounter++;
 8006c96:	69a2      	ldr	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 8006c98:	442b      	add	r3, r5
  if (ibqp->bwrptr >= ibqp->btop) {
 8006c9a:	428b      	cmp	r3, r1
  ibqp->bwrptr += ibqp->bsize;
 8006c9c:	61e3      	str	r3, [r4, #28]
    ibqp->bwrptr = ibqp->buffers;
 8006c9e:	bf28      	it	cs
 8006ca0:	6b23      	ldrcs	r3, [r4, #48]	; 0x30
  ibqp->bcounter++;
 8006ca2:	f102 0201 	add.w	r2, r2, #1
    ibqp->bwrptr = ibqp->buffers;
 8006ca6:	bf28      	it	cs
 8006ca8:	61e3      	strcs	r3, [r4, #28]
  ibqp->bcounter++;
 8006caa:	61a2      	str	r2, [r4, #24]
  chThdDequeueNextI(tqp, msg);
 8006cac:	f7ff ff08 	bl	8006ac0 <chThdDequeueNextI.constprop.86>
  (void) sdu_start_receive(sdup);
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f7ff fc1d 	bl	80064f0 <sdu_start_receive>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f383 8811 	msr	BASEPRI, r3
}
 8006cbc:	bd38      	pop	{r3, r4, r5, pc}
 8006cbe:	bf00      	nop

08006cc0 <sduDataTransmitted>:
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8006cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8006cc4:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8006cc8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8006cca:	b082      	sub	sp, #8
  if (sdup == NULL) {
 8006ccc:	b1f4      	cbz	r4, 8006d0c <sduDataTransmitted+0x4c>
 8006cce:	460e      	mov	r6, r1
 8006cd0:	4605      	mov	r5, r0
 8006cd2:	2320      	movs	r3, #32
 8006cd4:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8006cd8:	2108      	movs	r1, #8
 8006cda:	1d20      	adds	r0, r4, #4
 8006cdc:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8006ce0:	f7ff ffa6 	bl	8006c30 <chEvtBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f104 0844 	add.w	r8, r4, #68	; 0x44
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	bb03      	cbnz	r3, 8006d32 <sduDataTransmitted+0x72>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	a901      	add	r1, sp, #4
 8006cf4:	f7ff fc3c 	bl	8006570 <obqGetFullBufferI>
  if (buf != NULL) {
 8006cf8:	b158      	cbz	r0, 8006d12 <sduDataTransmitted+0x52>
    usbStartTransmitI(usbp, ep, buf, n);
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	4628      	mov	r0, r5
 8006d00:	9b01      	ldr	r3, [sp, #4]
 8006d02:	f7ff fb8d 	bl	8006420 <usbStartTransmitI>
 8006d06:	2300      	movs	r3, #0
 8006d08:	f383 8811 	msr	BASEPRI, r3
}
 8006d0c:	b002      	add	sp, #8
 8006d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	695a      	ldr	r2, [r3, #20]
 8006d16:	6812      	ldr	r2, [r2, #0]
 8006d18:	2a00      	cmp	r2, #0
 8006d1a:	d0f4      	beq.n	8006d06 <sduDataTransmitted+0x46>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8006d1c:	8a1b      	ldrh	r3, [r3, #16]
 8006d1e:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8006d20:	4013      	ands	r3, r2
 8006d22:	d1f0      	bne.n	8006d06 <sduDataTransmitted+0x46>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8006d24:	4631      	mov	r1, r6
 8006d26:	f105 0274 	add.w	r2, r5, #116	; 0x74
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	f7ff fb78 	bl	8006420 <usbStartTransmitI>
 8006d30:	e7e9      	b.n	8006d06 <sduDataTransmitted+0x46>
  obqp->brdptr += obqp->bsize;
 8006d32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d34:	6e21      	ldr	r1, [r4, #96]	; 0x60
  obqp->bcounter++;
 8006d36:	6d22      	ldr	r2, [r4, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 8006d38:	440b      	add	r3, r1
  if (obqp->brdptr >= obqp->btop) {
 8006d3a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  obqp->brdptr += obqp->bsize;
 8006d3c:	65a3      	str	r3, [r4, #88]	; 0x58
  if (obqp->brdptr >= obqp->btop) {
 8006d3e:	428b      	cmp	r3, r1
    obqp->brdptr = obqp->buffers;
 8006d40:	bf28      	it	cs
 8006d42:	6ea3      	ldrcs	r3, [r4, #104]	; 0x68
  obqp->bcounter++;
 8006d44:	f102 0201 	add.w	r2, r2, #1
    obqp->brdptr = obqp->buffers;
 8006d48:	bf28      	it	cs
 8006d4a:	65a3      	strcs	r3, [r4, #88]	; 0x58
  chThdDequeueNextI(tqp, msg);
 8006d4c:	4640      	mov	r0, r8
  obqp->bcounter++;
 8006d4e:	6522      	str	r2, [r4, #80]	; 0x50
 8006d50:	f7ff feb6 	bl	8006ac0 <chThdDequeueNextI.constprop.86>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8006d54:	4640      	mov	r0, r8
 8006d56:	a901      	add	r1, sp, #4
 8006d58:	f7ff fc0a 	bl	8006570 <obqGetFullBufferI>
  if (buf != NULL) {
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d1cc      	bne.n	8006cfa <sduDataTransmitted+0x3a>
 8006d60:	e7d7      	b.n	8006d12 <sduDataTransmitted+0x52>
 8006d62:	bf00      	nop
	...

08006d70 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8006d70:	4a12      	ldr	r2, [pc, #72]	; (8006dbc <chMtxUnlockS+0x4c>)
void chMtxUnlockS(mutex_t *mp) {
 8006d72:	b430      	push	{r4, r5}
  return (bool)(tqp->next != (const thread_t *)tqp);
 8006d74:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8006d76:	68c3      	ldr	r3, [r0, #12]
  thread_t *ctp = currp;
 8006d78:	6995      	ldr	r5, [r2, #24]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8006d7a:	4284      	cmp	r4, r0
    ctp->mtxlist = mp->next;
 8006d7c:	63ab      	str	r3, [r5, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 8006d7e:	d018      	beq.n	8006db2 <chMtxUnlockS+0x42>
 8006d80:	4601      	mov	r1, r0
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8006d82:	6be8      	ldr	r0, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8006d84:	b14b      	cbz	r3, 8006d9a <chMtxUnlockS+0x2a>
 8006d86:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <chMtxUnlockS+0x24>
 8006d8c:	6892      	ldr	r2, [r2, #8]
 8006d8e:	4290      	cmp	r0, r2
 8006d90:	bf38      	it	cc
 8006d92:	4610      	movcc	r0, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8006d94:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1f5      	bne.n	8006d86 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8006d9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  tqp->next             = tp->queue.next;
 8006d9c:	6823      	ldr	r3, [r4, #0]
      ctp->prio = newprio;
 8006d9e:	60a8      	str	r0, [r5, #8]
 8006da0:	600b      	str	r3, [r1, #0]
      tp->mtxlist = mp;
      (void) chSchReadyI(tp);
 8006da2:	4620      	mov	r0, r4
  tqp->next->queue.prev = (thread_t *)tqp;
 8006da4:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 8006da6:	e9c1 4202 	strd	r4, r2, [r1, #8]
      tp->mtxlist = mp;
 8006daa:	63a1      	str	r1, [r4, #56]	; 0x38
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8006dac:	bc30      	pop	{r4, r5}
      (void) chSchReadyI(tp);
 8006dae:	f7ff be6f 	b.w	8006a90 <chSchReadyI>
      mp->owner = NULL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	60a3      	str	r3, [r4, #8]
}
 8006db6:	bc30      	pop	{r4, r5}
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	20001eb0 	.word	0x20001eb0

08006dc0 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 8006dc0:	6883      	ldr	r3, [r0, #8]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	6083      	str	r3, [r0, #8]
 8006dc8:	dd00      	ble.n	8006dcc <chSemSignalI+0xc>
 8006dca:	4770      	bx	lr
void chSemSignalI(semaphore_t *sp) {
 8006dcc:	b410      	push	{r4}
 8006dce:	4602      	mov	r2, r0
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
 8006dd0:	2400      	movs	r4, #0
  thread_t *tp = tqp->next;
 8006dd2:	6803      	ldr	r3, [r0, #0]
  tqp->next             = tp->queue.next;
 8006dd4:	6819      	ldr	r1, [r3, #0]
    (void) chSchReadyI(tp);
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	6011      	str	r1, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8006dda:	604a      	str	r2, [r1, #4]
    tp->u.rdymsg = MSG_OK;
 8006ddc:	625c      	str	r4, [r3, #36]	; 0x24
  }
}
 8006dde:	bc10      	pop	{r4}
    (void) chSchReadyI(tp);
 8006de0:	f7ff be56 	b.w	8006a90 <chSchReadyI>
	...

08006df0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8006df0:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->next != (const thread_t *)tqp);
 8006df2:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 8006df4:	4298      	cmp	r0, r3
 8006df6:	d00b      	beq.n	8006e10 <chThdDequeueAllI+0x20>
 8006df8:	4604      	mov	r4, r0
 8006dfa:	460d      	mov	r5, r1
  tqp->next             = tp->queue.next;
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8006e02:	6054      	str	r4, [r2, #4]
  tp->u.rdymsg = msg;
 8006e04:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8006e06:	f7ff fe43 	bl	8006a90 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	429c      	cmp	r4, r3
 8006e0e:	d1f5      	bne.n	8006dfc <chThdDequeueAllI+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8006e10:	bd38      	pop	{r3, r4, r5, pc}
 8006e12:	bf00      	nop
	...

08006e20 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8006e20:	4b1f      	ldr	r3, [pc, #124]	; (8006ea0 <chVTDoResetI+0x80>)
void chVTDoResetI(virtual_timer_t *vtp) {
 8006e22:	b430      	push	{r4, r5}
  if (ch.vtlist.next != vtp) {
 8006e24:	69da      	ldr	r2, [r3, #28]
 8006e26:	4282      	cmp	r2, r0
 8006e28:	d00f      	beq.n	8006e4a <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8006e2a:	e9d0 2100 	ldrd	r2, r1, [r0]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;
 8006e2e:	2400      	movs	r4, #0
    vtp->prev->next = vtp->next;
 8006e30:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 8006e32:	6802      	ldr	r2, [r0, #0]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8006e34:	331c      	adds	r3, #28
 8006e36:	429a      	cmp	r2, r3
    vtp->next->prev = vtp->prev;
 8006e38:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 8006e3a:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8006e3c:	d003      	beq.n	8006e46 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
 8006e3e:	6881      	ldr	r1, [r0, #8]
 8006e40:	6893      	ldr	r3, [r2, #8]
 8006e42:	440b      	add	r3, r1
 8006e44:	6093      	str	r3, [r2, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8006e46:	bc30      	pop	{r4, r5}
 8006e48:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 8006e4a:	4618      	mov	r0, r3
  vtp->func = NULL;
 8006e4c:	2400      	movs	r4, #0
  ch.vtlist.next = vtp->next;
 8006e4e:	6811      	ldr	r1, [r2, #0]
 8006e50:	f840 1f1c 	str.w	r1, [r0, #28]!
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8006e54:	4281      	cmp	r1, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8006e56:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 8006e58:	60d4      	str	r4, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8006e5a:	d01c      	beq.n	8006e96 <chVTDoResetI+0x76>
 8006e5c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  ch.vtlist.next->delta += vtp->delta;
 8006e60:	6895      	ldr	r5, [r2, #8]
 8006e62:	688a      	ldr	r2, [r1, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8006e64:	8d18      	ldrh	r0, [r3, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8006e66:	1953      	adds	r3, r2, r5
 8006e68:	608b      	str	r3, [r1, #8]
 8006e6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8006e6c:	1a12      	subs	r2, r2, r0
 8006e6e:	b292      	uxth	r2, r2
  if (nowdelta >= ch.vtlist.next->delta) {
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d9e8      	bls.n	8006e46 <chVTDoResetI+0x26>
  delta = ch.vtlist.next->delta - nowdelta;
 8006e74:	1a99      	subs	r1, r3, r2
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8006e76:	2901      	cmp	r1, #1
 8006e78:	d90b      	bls.n	8006e92 <chVTDoResetI+0x72>
 8006e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	bf28      	it	cs
 8006e82:	4613      	movcs	r3, r2
}
 8006e84:	bc30      	pop	{r4, r5}
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006e86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8006e8a:	4403      	add	r3, r0
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	6353      	str	r3, [r2, #52]	; 0x34
 8006e90:	4770      	bx	lr
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8006e92:	1c93      	adds	r3, r2, #2
 8006e94:	e7f6      	b.n	8006e84 <chVTDoResetI+0x64>
  STM32_ST_TIM->DIER = 0;
 8006e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e9a:	60dc      	str	r4, [r3, #12]
 8006e9c:	e7d3      	b.n	8006e46 <chVTDoResetI+0x26>
 8006e9e:	bf00      	nop
 8006ea0:	20001eb0 	.word	0x20001eb0
	...

08006eb0 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 8006eb0:	b470      	push	{r4, r5, r6}
  return (systime_t)STM32_ST_TIM->CNT;
 8006eb2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8006eb6:	4d2e      	ldr	r5, [pc, #184]	; (8006f70 <chVTDoSetI+0xc0>)
 8006eb8:	6a64      	ldr	r4, [r4, #36]	; 0x24
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8006eba:	2901      	cmp	r1, #1
  vtp->func = vtfunc;
 8006ebc:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8006ec0:	b2a3      	uxth	r3, r4
 8006ec2:	69ea      	ldr	r2, [r5, #28]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8006ec4:	d92e      	bls.n	8006f24 <chVTDoSetI+0x74>
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8006ec6:	f105 041c 	add.w	r4, r5, #28
 8006eca:	42a2      	cmp	r2, r4
 8006ecc:	d038      	beq.n	8006f40 <chVTDoSetI+0x90>
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8006ece:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 8006ed0:	6894      	ldr	r4, [r2, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8006ed2:	1b9b      	subs	r3, r3, r6
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	1859      	adds	r1, r3, r1
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8006ed8:	d317      	bcc.n	8006f0a <chVTDoSetI+0x5a>
      p = p->next;
 8006eda:	6812      	ldr	r2, [r2, #0]
      delta -= p->delta;
 8006edc:	1b09      	subs	r1, r1, r4
 8006ede:	6894      	ldr	r4, [r2, #8]
  while (p->delta < delta) {
 8006ee0:	42a1      	cmp	r1, r4
 8006ee2:	d904      	bls.n	8006eee <chVTDoSetI+0x3e>
    p = p->next;
 8006ee4:	6812      	ldr	r2, [r2, #0]
    delta -= p->delta;
 8006ee6:	1b09      	subs	r1, r1, r4
  while (p->delta < delta) {
 8006ee8:	6894      	ldr	r4, [r2, #8]
 8006eea:	428c      	cmp	r4, r1
 8006eec:	d3fa      	bcc.n	8006ee4 <chVTDoSetI+0x34>
  ch.vtlist.delta = (sysinterval_t)-1;
 8006eee:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  vtp->prev = vtp->next->prev;
 8006ef2:	6853      	ldr	r3, [r2, #4]
 8006ef4:	e9c0 2300 	strd	r2, r3, [r0]
  vtp->prev->next = vtp;
 8006ef8:	6018      	str	r0, [r3, #0]
  p->prev = vtp;
 8006efa:	6050      	str	r0, [r2, #4]
  vtp->delta = delta;
 8006efc:	6081      	str	r1, [r0, #8]
  p->delta -= delta;
 8006efe:	6893      	ldr	r3, [r2, #8]
 8006f00:	1a59      	subs	r1, r3, r1
 8006f02:	6091      	str	r1, [r2, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8006f04:	626c      	str	r4, [r5, #36]	; 0x24
}
 8006f06:	bc70      	pop	{r4, r5, r6}
 8006f08:	4770      	bx	lr
    else if (delta < p->delta) {
 8006f0a:	42a1      	cmp	r1, r4
 8006f0c:	d2e8      	bcs.n	8006ee0 <chVTDoSetI+0x30>
  return systime + (systime_t)interval;
 8006f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f12:	4299      	cmp	r1, r3
 8006f14:	bf94      	ite	ls
 8006f16:	1876      	addls	r6, r6, r1
 8006f18:	18f6      	addhi	r6, r6, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006f1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f1e:	b2b6      	uxth	r6, r6
 8006f20:	635e      	str	r6, [r3, #52]	; 0x34
 8006f22:	e7dd      	b.n	8006ee0 <chVTDoSetI+0x30>
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8006f24:	f105 011c 	add.w	r1, r5, #28
 8006f28:	428a      	cmp	r2, r1
      vtp->delta = delay;
 8006f2a:	f04f 0102 	mov.w	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8006f2e:	d1ce      	bne.n	8006ece <chVTDoSetI+0x1e>
      ch.vtlist.lasttime = now;
 8006f30:	852b      	strh	r3, [r5, #40]	; 0x28
      ch.vtlist.prev = vtp;
 8006f32:	e9c5 0007 	strd	r0, r0, [r5, #28]
      vtp->delta = delay;
 8006f36:	460c      	mov	r4, r1
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8006f38:	e9c0 2200 	strd	r2, r2, [r0]
      vtp->delta = delay;
 8006f3c:	6081      	str	r1, [r0, #8]
 8006f3e:	e00b      	b.n	8006f58 <chVTDoSetI+0xa8>
 8006f40:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8006f44:	428c      	cmp	r4, r1
 8006f46:	bf28      	it	cs
 8006f48:	460c      	movcs	r4, r1
      ch.vtlist.lasttime = now;
 8006f4a:	852b      	strh	r3, [r5, #40]	; 0x28
      ch.vtlist.prev = vtp;
 8006f4c:	e9c5 0007 	strd	r0, r0, [r5, #28]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8006f50:	e9c0 2200 	strd	r2, r2, [r0]
 8006f54:	b2a4      	uxth	r4, r4
      vtp->delta = delay;
 8006f56:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006f58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 8006f5c:	2000      	movs	r0, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8006f5e:	2102      	movs	r1, #2
 8006f60:	4423      	add	r3, r4
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	6353      	str	r3, [r2, #52]	; 0x34
}
 8006f66:	bc70      	pop	{r4, r5, r6}
  STM32_ST_TIM->SR     = 0;
 8006f68:	6110      	str	r0, [r2, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8006f6a:	60d1      	str	r1, [r2, #12]
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	20001eb0 	.word	0x20001eb0
	...

08006f80 <chSysGetStatusAndLockX.part.1>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f80:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006f84:	2320      	movs	r3, #32
 8006f86:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 8006f8a:	4770      	bx	lr
 8006f8c:	0000      	movs	r0, r0
	...

08006f90 <chSysIntegrityCheckI>:
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8006f90:	07c2      	lsls	r2, r0, #31
bool chSysIntegrityCheckI(unsigned testmask) {
 8006f92:	b410      	push	{r4}
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8006f94:	d510      	bpl.n	8006fb8 <chSysIntegrityCheckI+0x28>
    tp = ch.rlist.queue.next;
 8006f96:	4b26      	ldr	r3, [pc, #152]	; (8007030 <chSysIntegrityCheckI+0xa0>)
 8006f98:	e9d3 1400 	ldrd	r1, r4, [r3]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8006f9c:	4299      	cmp	r1, r3
 8006f9e:	d03b      	beq.n	8007018 <chSysIntegrityCheckI+0x88>
    n = (cnt_t)0;
 8006fa0:	2200      	movs	r2, #0
      tp = tp->queue.next;
 8006fa2:	6809      	ldr	r1, [r1, #0]
      n++;
 8006fa4:	3201      	adds	r2, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 8006fa6:	4299      	cmp	r1, r3
 8006fa8:	d1fb      	bne.n	8006fa2 <chSysIntegrityCheckI+0x12>
    while (tp != (thread_t *)&ch.rlist.queue) {
 8006faa:	428c      	cmp	r4, r1
 8006fac:	d031      	beq.n	8007012 <chSysIntegrityCheckI+0x82>
      tp = tp->queue.prev;
 8006fae:	6864      	ldr	r4, [r4, #4]
      n--;
 8006fb0:	3a01      	subs	r2, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 8006fb2:	429c      	cmp	r4, r3
 8006fb4:	d1fb      	bne.n	8006fae <chSysIntegrityCheckI+0x1e>
    if (n != (cnt_t)0) {
 8006fb6:	bb62      	cbnz	r2, 8007012 <chSysIntegrityCheckI+0x82>
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 8006fb8:	0783      	lsls	r3, r0, #30
 8006fba:	d512      	bpl.n	8006fe2 <chSysIntegrityCheckI+0x52>
    vtp = ch.vtlist.next;
 8006fbc:	4b1c      	ldr	r3, [pc, #112]	; (8007030 <chSysIntegrityCheckI+0xa0>)
 8006fbe:	69da      	ldr	r2, [r3, #28]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8006fc0:	f103 041c 	add.w	r4, r3, #28
 8006fc4:	42a2      	cmp	r2, r4
 8006fc6:	6a19      	ldr	r1, [r3, #32]
 8006fc8:	d02a      	beq.n	8007020 <chSysIntegrityCheckI+0x90>
    n = (cnt_t)0;
 8006fca:	2300      	movs	r3, #0
      vtp = vtp->next;
 8006fcc:	6812      	ldr	r2, [r2, #0]
      n++;
 8006fce:	3301      	adds	r3, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8006fd0:	42a2      	cmp	r2, r4
 8006fd2:	d1fb      	bne.n	8006fcc <chSysIntegrityCheckI+0x3c>
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8006fd4:	4291      	cmp	r1, r2
 8006fd6:	d01c      	beq.n	8007012 <chSysIntegrityCheckI+0x82>
      vtp = vtp->prev;
 8006fd8:	6849      	ldr	r1, [r1, #4]
      n--;
 8006fda:	3b01      	subs	r3, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8006fdc:	42a1      	cmp	r1, r4
 8006fde:	d1fb      	bne.n	8006fd8 <chSysIntegrityCheckI+0x48>
    if (n != (cnt_t)0) {
 8006fe0:	b9bb      	cbnz	r3, 8007012 <chSysIntegrityCheckI+0x82>
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 8006fe2:	f010 0004 	ands.w	r0, r0, #4
 8006fe6:	d012      	beq.n	800700e <chSysIntegrityCheckI+0x7e>
    tp = ch.rlist.newer;
 8006fe8:	4b11      	ldr	r3, [pc, #68]	; (8007030 <chSysIntegrityCheckI+0xa0>)
    n = (cnt_t)0;
 8006fea:	2000      	movs	r0, #0
 8006fec:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d019      	beq.n	8007028 <chSysIntegrityCheckI+0x98>
      tp = tp->newer;
 8006ff4:	6912      	ldr	r2, [r2, #16]
      n++;
 8006ff6:	3001      	adds	r0, #1
    while (tp != (thread_t *)&ch.rlist) {
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d1fb      	bne.n	8006ff4 <chSysIntegrityCheckI+0x64>
    while (tp != (thread_t *)&ch.rlist) {
 8006ffc:	4291      	cmp	r1, r2
 8006ffe:	d008      	beq.n	8007012 <chSysIntegrityCheckI+0x82>
      tp = tp->older;
 8007000:	6949      	ldr	r1, [r1, #20]
      n--;
 8007002:	3801      	subs	r0, #1
    while (tp != (thread_t *)&ch.rlist) {
 8007004:	4299      	cmp	r1, r3
 8007006:	d1fb      	bne.n	8007000 <chSysIntegrityCheckI+0x70>
    if (n != (cnt_t)0) {
 8007008:	3000      	adds	r0, #0
 800700a:	bf18      	it	ne
 800700c:	2001      	movne	r0, #1
}
 800700e:	bc10      	pop	{r4}
 8007010:	4770      	bx	lr
      return true;
 8007012:	2001      	movs	r0, #1
}
 8007014:	bc10      	pop	{r4}
 8007016:	4770      	bx	lr
    while (tp != (thread_t *)&ch.rlist.queue) {
 8007018:	429c      	cmp	r4, r3
 800701a:	d0cd      	beq.n	8006fb8 <chSysIntegrityCheckI+0x28>
    n = (cnt_t)0;
 800701c:	2200      	movs	r2, #0
 800701e:	e7c6      	b.n	8006fae <chSysIntegrityCheckI+0x1e>
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8007020:	42a1      	cmp	r1, r4
 8007022:	d0de      	beq.n	8006fe2 <chSysIntegrityCheckI+0x52>
    n = (cnt_t)0;
 8007024:	2300      	movs	r3, #0
 8007026:	e7d7      	b.n	8006fd8 <chSysIntegrityCheckI+0x48>
    while (tp != (thread_t *)&ch.rlist) {
 8007028:	4291      	cmp	r1, r2
 800702a:	d1e9      	bne.n	8007000 <chSysIntegrityCheckI+0x70>
 800702c:	e7ef      	b.n	800700e <chSysIntegrityCheckI+0x7e>
 800702e:	bf00      	nop
 8007030:	20001eb0 	.word	0x20001eb0
	...

08007040 <rt_test_002_001_execute>:
  test_set_step(1);
 8007040:	2001      	movs	r0, #1
static void rt_test_002_001_execute(void) {
 8007042:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8007044:	4d23      	ldr	r5, [pc, #140]	; (80070d4 <rt_test_002_001_execute+0x94>)
 8007046:	2420      	movs	r4, #32
 8007048:	6028      	str	r0, [r5, #0]
 800704a:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 800704e:	f7ff ff9f 	bl	8006f90 <chSysIntegrityCheckI>
 8007052:	2300      	movs	r3, #0
 8007054:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
 8007058:	f080 0001 	eor.w	r0, r0, #1
 800705c:	b2c0      	uxtb	r0, r0
 800705e:	491e      	ldr	r1, [pc, #120]	; (80070d8 <rt_test_002_001_execute+0x98>)
 8007060:	f7fe fc6e 	bl	8005940 <_test_assert>
 8007064:	b100      	cbz	r0, 8007068 <rt_test_002_001_execute+0x28>
}
 8007066:	bd70      	pop	{r4, r5, r6, pc}
 8007068:	4606      	mov	r6, r0
  test_set_step(2);
 800706a:	2002      	movs	r0, #2
 800706c:	6028      	str	r0, [r5, #0]
 800706e:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 8007072:	f7ff ff8d 	bl	8006f90 <chSysIntegrityCheckI>
 8007076:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "virtual timers list check failed");
 800707a:	f080 0001 	eor.w	r0, r0, #1
 800707e:	b2c0      	uxtb	r0, r0
 8007080:	4916      	ldr	r1, [pc, #88]	; (80070dc <rt_test_002_001_execute+0x9c>)
 8007082:	f7fe fc5d 	bl	8005940 <_test_assert>
 8007086:	4606      	mov	r6, r0
 8007088:	2800      	cmp	r0, #0
 800708a:	d1ec      	bne.n	8007066 <rt_test_002_001_execute+0x26>
  test_set_step(3);
 800708c:	2303      	movs	r3, #3
 800708e:	602b      	str	r3, [r5, #0]
 8007090:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 8007094:	2004      	movs	r0, #4
 8007096:	f7ff ff7b 	bl	8006f90 <chSysIntegrityCheckI>
 800709a:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "registry list check failed");
 800709e:	f080 0001 	eor.w	r0, r0, #1
 80070a2:	b2c0      	uxtb	r0, r0
 80070a4:	490e      	ldr	r1, [pc, #56]	; (80070e0 <rt_test_002_001_execute+0xa0>)
 80070a6:	f7fe fc4b 	bl	8005940 <_test_assert>
 80070aa:	4606      	mov	r6, r0
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d1da      	bne.n	8007066 <rt_test_002_001_execute+0x26>
  test_set_step(4);
 80070b0:	2304      	movs	r3, #4
 80070b2:	602b      	str	r3, [r5, #0]
 80070b4:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 80070b8:	2008      	movs	r0, #8
 80070ba:	f7ff ff69 	bl	8006f90 <chSysIntegrityCheckI>
 80070be:	f386 8811 	msr	BASEPRI, r6
}
 80070c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(result == false, "port layer check failed");
 80070c6:	f080 0001 	eor.w	r0, r0, #1
 80070ca:	b2c0      	uxtb	r0, r0
 80070cc:	4905      	ldr	r1, [pc, #20]	; (80070e4 <rt_test_002_001_execute+0xa4>)
 80070ce:	f7fe bc37 	b.w	8005940 <_test_assert>
 80070d2:	bf00      	nop
 80070d4:	2000283c 	.word	0x2000283c
 80070d8:	0800f7c0 	.word	0x0800f7c0
 80070dc:	0800f7d8 	.word	0x0800f7d8
 80070e0:	0800f7fc 	.word	0x0800f7fc
 80070e4:	0800f818 	.word	0x0800f818
	...

080070f0 <_idle_thread>:
static void _idle_thread(void *p) {
 80070f0:	e7fe      	b.n	80070f0 <_idle_thread>
 80070f2:	bf00      	nop
	...

08007100 <usbInitEndpointI>:
  if (epcp->in_state != NULL) {
 8007100:	6953      	ldr	r3, [r2, #20]
                      const USBEndpointConfig *epcp) {
 8007102:	b410      	push	{r4}
  usbp->epc[ep] = epcp;
 8007104:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8007108:	60e2      	str	r2, [r4, #12]
  if (epcp->in_state != NULL) {
 800710a:	b123      	cbz	r3, 8007116 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 800710c:	2400      	movs	r4, #0
 800710e:	601c      	str	r4, [r3, #0]
 8007110:	605c      	str	r4, [r3, #4]
 8007112:	609c      	str	r4, [r3, #8]
 8007114:	60dc      	str	r4, [r3, #12]
  if (epcp->out_state != NULL) {
 8007116:	6993      	ldr	r3, [r2, #24]
 8007118:	b123      	cbz	r3, 8007124 <usbInitEndpointI+0x24>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 800711a:	2200      	movs	r2, #0
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	605a      	str	r2, [r3, #4]
 8007120:	609a      	str	r2, [r3, #8]
 8007122:	60da      	str	r2, [r3, #12]
}
 8007124:	bc10      	pop	{r4}
  usb_lld_init_endpoint(usbp, ep);
 8007126:	f7fe bdf3 	b.w	8005d10 <usb_lld_init_endpoint>
 800712a:	bf00      	nop
 800712c:	0000      	movs	r0, r0
	...

08007130 <usb_event>:
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8007130:	b570      	push	{r4, r5, r6, lr}
  switch (event) {
 8007132:	2905      	cmp	r1, #5
 8007134:	d812      	bhi.n	800715c <usb_event+0x2c>
 8007136:	e8df f001 	tbb	[pc, r1]
 800713a:	1147      	.short	0x1147
 800713c:	03474712 	.word	0x03474712
 8007140:	2320      	movs	r3, #32
 8007142:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8007146:	4c2e      	ldr	r4, [pc, #184]	; (8007200 <usb_event+0xd0>)
 8007148:	2101      	movs	r1, #1
 800714a:	1d20      	adds	r0, r4, #4
 800714c:	f7ff fd70 	bl	8006c30 <chEvtBroadcastFlagsI>
  bqResumeX(&sdup->ibqueue);
 8007150:	2300      	movs	r3, #0
 8007152:	7523      	strb	r3, [r4, #20]
  bqResumeX(&sdup->obqueue);
 8007154:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8007158:	f383 8811 	msr	BASEPRI, r3
}
 800715c:	bd70      	pop	{r4, r5, r6, pc}
 800715e:	4606      	mov	r6, r0
 8007160:	2320      	movs	r3, #32
 8007162:	f383 8811 	msr	BASEPRI, r3
  ibqp->bcounter  = 0;
 8007166:	2500      	movs	r5, #0
 8007168:	4c25      	ldr	r4, [pc, #148]	; (8007200 <usb_event+0xd0>)
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 800716a:	4a26      	ldr	r2, [pc, #152]	; (8007204 <usb_event+0xd4>)
 800716c:	2101      	movs	r1, #1
 800716e:	f7ff ffc7 	bl	8007100 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 8007172:	4630      	mov	r0, r6
 8007174:	4a24      	ldr	r2, [pc, #144]	; (8007208 <usb_event+0xd8>)
 8007176:	2102      	movs	r1, #2
 8007178:	f7ff ffc2 	bl	8007100 <usbInitEndpointI>
  ibqp->brdptr    = ibqp->buffers;
 800717c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  chThdDequeueAllI(tqp, msg);
 800717e:	f104 000c 	add.w	r0, r4, #12
 8007182:	f06f 0101 	mvn.w	r1, #1
  ibqp->bwrptr    = ibqp->buffers;
 8007186:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ibqp->bcounter  = 0;
 800718a:	61a5      	str	r5, [r4, #24]
  ibqp->top       = NULL;
 800718c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007190:	f7ff fe2e 	bl	8006df0 <chThdDequeueAllI>
  obqp->brdptr    = obqp->buffers;
 8007194:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 8007198:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800719c:	f06f 0101 	mvn.w	r1, #1
  obqp->bcounter  = bqSizeX(obqp);
 80071a0:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->bwrptr    = obqp->buffers;
 80071a2:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  bqResumeX(&sdup->ibqueue);
 80071a6:	7525      	strb	r5, [r4, #20]
  obqp->top       = NULL;
 80071a8:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
 80071ac:	f7ff fe20 	bl	8006df0 <chThdDequeueAllI>
  chEvtBroadcastFlagsI(esp, flags);
 80071b0:	1d20      	adds	r0, r4, #4
 80071b2:	2101      	movs	r1, #1
  bqResumeX(&sdup->obqueue);
 80071b4:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 80071b8:	f7ff fd3a 	bl	8006c30 <chEvtBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 80071bc:	4620      	mov	r0, r4
 80071be:	f7ff f997 	bl	80064f0 <sdu_start_receive>
 80071c2:	f385 8811 	msr	BASEPRI, r5
}
 80071c6:	bd70      	pop	{r4, r5, r6, pc}
 80071c8:	2320      	movs	r3, #32
 80071ca:	f383 8811 	msr	BASEPRI, r3
  bqSuspendI(&sdup->ibqueue);
 80071ce:	2501      	movs	r5, #1
 80071d0:	4c0b      	ldr	r4, [pc, #44]	; (8007200 <usb_event+0xd0>)
 80071d2:	2102      	movs	r1, #2
 80071d4:	1d20      	adds	r0, r4, #4
 80071d6:	f7ff fd2b 	bl	8006c30 <chEvtBroadcastFlagsI>
  chThdDequeueAllI(tqp, msg);
 80071da:	f104 000c 	add.w	r0, r4, #12
 80071de:	f06f 0101 	mvn.w	r1, #1
 80071e2:	7525      	strb	r5, [r4, #20]
 80071e4:	f7ff fe04 	bl	8006df0 <chThdDequeueAllI>
 80071e8:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80071ec:	f06f 0101 	mvn.w	r1, #1
  bqSuspendI(&sdup->obqueue);
 80071f0:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 80071f4:	f7ff fdfc 	bl	8006df0 <chThdDequeueAllI>
 80071f8:	2300      	movs	r3, #0
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	bd70      	pop	{r4, r5, r6, pc}
 8007200:	20001898 	.word	0x20001898
 8007204:	0800e934 	.word	0x0800e934
 8007208:	0800e958 	.word	0x0800e958
 800720c:	00000000 	.word	0x00000000

08007210 <parse_arguments>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static char *parse_arguments(char *str, char **saveptr) {
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	460d      	mov	r5, r1
  char *p;

  if (str != NULL)
 8007214:	b1e8      	cbz	r0, 8007252 <parse_arguments+0x42>
 8007216:	4604      	mov	r4, r0
    *saveptr = str;
 8007218:	6028      	str	r0, [r5, #0]
  if (!p) {
    return NULL;
  }

  /* Skipping white space.*/
  p += strspn(p, " \t");
 800721a:	4911      	ldr	r1, [pc, #68]	; (8007260 <parse_arguments+0x50>)
 800721c:	4620      	mov	r0, r4
 800721e:	f007 f9ad 	bl	800e57c <strspn>

  if (*p == '"') {
 8007222:	5c21      	ldrb	r1, [r4, r0]
  p += strspn(p, " \t");
 8007224:	4404      	add	r4, r0
  if (*p == '"') {
 8007226:	2922      	cmp	r1, #34	; 0x22
 8007228:	d00d      	beq.n	8007246 <parse_arguments+0x36>
    p++;
    *saveptr = strpbrk(p, "\"");
  }
  else {
    /* The delimiter is white space.*/
    *saveptr = strpbrk(p, " \t");
 800722a:	490d      	ldr	r1, [pc, #52]	; (8007260 <parse_arguments+0x50>)
 800722c:	4620      	mov	r0, r4
 800722e:	f007 f983 	bl	800e538 <strpbrk>
 8007232:	6028      	str	r0, [r5, #0]
  }

  /* Replacing the delimiter with a zero.*/
  if (*saveptr != NULL) {
 8007234:	b118      	cbz	r0, 800723e <parse_arguments+0x2e>
    *(*saveptr)++ = '\0';
 8007236:	2300      	movs	r3, #0
 8007238:	1c42      	adds	r2, r0, #1
 800723a:	602a      	str	r2, [r5, #0]
 800723c:	7003      	strb	r3, [r0, #0]
  }

  return *p != '\0' ? p : NULL;
 800723e:	7823      	ldrb	r3, [r4, #0]
 8007240:	b153      	cbz	r3, 8007258 <parse_arguments+0x48>
}
 8007242:	4620      	mov	r0, r4
 8007244:	bd38      	pop	{r3, r4, r5, pc}
    p++;
 8007246:	3401      	adds	r4, #1
    *saveptr = strpbrk(p, "\"");
 8007248:	4620      	mov	r0, r4
 800724a:	f007 f885 	bl	800e358 <strchr>
 800724e:	6028      	str	r0, [r5, #0]
 8007250:	e7f0      	b.n	8007234 <parse_arguments+0x24>
  p = *saveptr;
 8007252:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 8007254:	2c00      	cmp	r4, #0
 8007256:	d1e0      	bne.n	800721a <parse_arguments+0xa>
  return *p != '\0' ? p : NULL;
 8007258:	2400      	movs	r4, #0
}
 800725a:	4620      	mov	r0, r4
 800725c:	bd38      	pop	{r3, r4, r5, pc}
 800725e:	bf00      	nop
 8007260:	0800ed28 	.word	0x0800ed28
	...

08007270 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8007270:	b40e      	push	{r1, r2, r3}
 8007272:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007276:	4604      	mov	r4, r0
  int n = 0;
 8007278:	f04f 0800 	mov.w	r8, #0
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 800727c:	b086      	sub	sp, #24
 800727e:	af0f      	add	r7, sp, #60	; 0x3c
 8007280:	f857 6b04 	ldr.w	r6, [r7], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8007284:	9702      	str	r7, [sp, #8]
    c = *fmt++;
 8007286:	7831      	ldrb	r1, [r6, #0]
 8007288:	1c72      	adds	r2, r6, #1
    if (c == 0)
 800728a:	b161      	cbz	r1, 80072a6 <chprintf+0x36>
    if (c != '%') {
 800728c:	2925      	cmp	r1, #37	; 0x25
 800728e:	d010      	beq.n	80072b2 <chprintf+0x42>
    c = *fmt++;
 8007290:	4616      	mov	r6, r2
      streamPut(chp, (uint8_t)c);
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	4620      	mov	r0, r4
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	4798      	blx	r3
    c = *fmt++;
 800729a:	7831      	ldrb	r1, [r6, #0]
      n++;
 800729c:	f108 0801 	add.w	r8, r8, #1
    c = *fmt++;
 80072a0:	1c72      	adds	r2, r6, #1
    if (c == 0)
 80072a2:	2900      	cmp	r1, #0
 80072a4:	d1f2      	bne.n	800728c <chprintf+0x1c>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 80072a6:	4640      	mov	r0, r8
 80072a8:	b006      	add	sp, #24
 80072aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ae:	b003      	add	sp, #12
 80072b0:	4770      	bx	lr
    if (*fmt == '-') {
 80072b2:	7871      	ldrb	r1, [r6, #1]
    width = 0;
 80072b4:	f04f 0900 	mov.w	r9, #0
    if (*fmt == '-') {
 80072b8:	292d      	cmp	r1, #45	; 0x2d
 80072ba:	bf03      	ittte	eq
 80072bc:	78b1      	ldrbeq	r1, [r6, #2]
      fmt++;
 80072be:	1cb2      	addeq	r2, r6, #2
      left_align = TRUE;
 80072c0:	2001      	moveq	r0, #1
    left_align = FALSE;
 80072c2:	2000      	movne	r0, #0
    if (*fmt == '0') {
 80072c4:	2930      	cmp	r1, #48	; 0x30
 80072c6:	bf03      	ittte	eq
 80072c8:	7851      	ldrbeq	r1, [r2, #1]
      fmt++;
 80072ca:	3201      	addeq	r2, #1
      filler = '0';
 80072cc:	2530      	moveq	r5, #48	; 0x30
    filler = ' ';
 80072ce:	2520      	movne	r5, #32
 80072d0:	3201      	adds	r2, #1
 80072d2:	e005      	b.n	80072e0 <chprintf+0x70>
        c = va_arg(ap, int);
 80072d4:	783b      	ldrb	r3, [r7, #0]
 80072d6:	3704      	adds	r7, #4
 80072d8:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
 80072dc:	eb03 0946 	add.w	r9, r3, r6, lsl #1
      if (c >= '0' && c <= '9')
 80072e0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b09      	cmp	r3, #9
      c = *fmt++;
 80072e8:	4694      	mov	ip, r2
      width = width * 10 + c;
 80072ea:	eb09 0689 	add.w	r6, r9, r9, lsl #2
      if (c >= '0' && c <= '9')
 80072ee:	d9f3      	bls.n	80072d8 <chprintf+0x68>
      else if (c == '*')
 80072f0:	292a      	cmp	r1, #42	; 0x2a
 80072f2:	d0ef      	beq.n	80072d4 <chprintf+0x64>
    if (c == '.') {
 80072f4:	292e      	cmp	r1, #46	; 0x2e
    precision = 0;
 80072f6:	f04f 0200 	mov.w	r2, #0
    if (c == '.') {
 80072fa:	d048      	beq.n	800738e <chprintf+0x11e>
    if (c == 'l' || c == 'L') {
 80072fc:	f001 03df 	and.w	r3, r1, #223	; 0xdf
 8007300:	2b4c      	cmp	r3, #76	; 0x4c
 8007302:	f10c 0601 	add.w	r6, ip, #1
 8007306:	d04e      	beq.n	80073a6 <chprintf+0x136>
      is_long = (c >= 'A') && (c <= 'Z');
 8007308:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    switch (c) {
 800730c:	f1a1 0644 	sub.w	r6, r1, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
 8007310:	b2db      	uxtb	r3, r3
    switch (c) {
 8007312:	2e34      	cmp	r6, #52	; 0x34
 8007314:	f200 811f 	bhi.w	8007556 <chprintf+0x2e6>
 8007318:	e8df f016 	tbh	[pc, r6, lsl #1]
 800731c:	011d016f 	.word	0x011d016f
 8007320:	011d011d 	.word	0x011d011d
 8007324:	016f011d 	.word	0x016f011d
 8007328:	011d011d 	.word	0x011d011d
 800732c:	011d011d 	.word	0x011d011d
 8007330:	0119011d 	.word	0x0119011d
 8007334:	011d011d 	.word	0x011d011d
 8007338:	011d011d 	.word	0x011d011d
 800733c:	00e7011d 	.word	0x00e7011d
 8007340:	011d011d 	.word	0x011d011d
 8007344:	011d0178 	.word	0x011d0178
 8007348:	011d011d 	.word	0x011d011d
 800734c:	011d011d 	.word	0x011d011d
 8007350:	011d011d 	.word	0x011d011d
 8007354:	011d011d 	.word	0x011d011d
 8007358:	008f011d 	.word	0x008f011d
 800735c:	011d016f 	.word	0x011d016f
 8007360:	011d011d 	.word	0x011d011d
 8007364:	016f011d 	.word	0x016f011d
 8007368:	011d011d 	.word	0x011d011d
 800736c:	011d011d 	.word	0x011d011d
 8007370:	0119011d 	.word	0x0119011d
 8007374:	011d011d 	.word	0x011d011d
 8007378:	006d011d 	.word	0x006d011d
 800737c:	00e7011d 	.word	0x00e7011d
 8007380:	011d011d 	.word	0x011d011d
 8007384:	0178      	.short	0x0178
          c = va_arg(ap, int);
 8007386:	783b      	ldrb	r3, [r7, #0]
 8007388:	3704      	adds	r7, #4
        precision += c;
 800738a:	eb03 0246 	add.w	r2, r3, r6, lsl #1
        c = *fmt++;
 800738e:	f81c 1b01 	ldrb.w	r1, [ip], #1
        precision *= 10;
 8007392:	eb02 0682 	add.w	r6, r2, r2, lsl #2
        if (c >= '0' && c <= '9')
 8007396:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b09      	cmp	r3, #9
 800739e:	d9f4      	bls.n	800738a <chprintf+0x11a>
        else if (c == '*')
 80073a0:	292a      	cmp	r1, #42	; 0x2a
 80073a2:	d0f0      	beq.n	8007386 <chprintf+0x116>
 80073a4:	e7aa      	b.n	80072fc <chprintf+0x8c>
      if (*fmt)
 80073a6:	f89c 3000 	ldrb.w	r3, [ip]
 80073aa:	b30b      	cbz	r3, 80073f0 <chprintf+0x180>
    switch (c) {
 80073ac:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 80073b0:	2934      	cmp	r1, #52	; 0x34
 80073b2:	f200 80d2 	bhi.w	800755a <chprintf+0x2ea>
 80073b6:	e8df f001 	tbb	[pc, r1]
 80073ba:	d0e1      	.short	0xd0e1
 80073bc:	e1d0d0d0 	.word	0xe1d0d0d0
 80073c0:	d0d0d0d0 	.word	0xd0d0d0d0
 80073c4:	d0d0cbd0 	.word	0xd0d0cbd0
 80073c8:	99d0d0d0 	.word	0x99d0d0d0
 80073cc:	d0ded0d0 	.word	0xd0ded0d0
 80073d0:	d0d0d0d0 	.word	0xd0d0d0d0
 80073d4:	d0d0d0d0 	.word	0xd0d0d0d0
 80073d8:	d0e141d0 	.word	0xd0e141d0
 80073dc:	e1d0d0d0 	.word	0xe1d0d0d0
 80073e0:	d0d0d0d0 	.word	0xd0d0d0d0
 80073e4:	d0d0cbd0 	.word	0xd0d0cbd0
 80073e8:	99d01fd0 	.word	0x99d01fd0
 80073ec:	d0d0      	.short	0xd0d0
 80073ee:	de          	.byte	0xde
 80073ef:	00          	.byte	0x00
      if (*fmt)
 80073f0:	460b      	mov	r3, r1
 80073f2:	4666      	mov	r6, ip
 80073f4:	e7da      	b.n	80073ac <chprintf+0x13c>
    switch (c) {
 80073f6:	4666      	mov	r6, ip
      if ((s = va_arg(ap, char *)) == 0)
 80073f8:	f8d7 a000 	ldr.w	sl, [r7]
 80073fc:	3704      	adds	r7, #4
 80073fe:	f1ba 0f00 	cmp.w	sl, #0
 8007402:	f000 8107 	beq.w	8007614 <chprintf+0x3a4>
 8007406:	f89a 3000 	ldrb.w	r3, [sl]
 800740a:	4655      	mov	r5, sl
      if (precision == 0)
 800740c:	2a00      	cmp	r2, #0
 800740e:	f040 8108 	bne.w	8007622 <chprintf+0x3b2>
      for (p = s; *p && (--precision >= 0); p++)
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 8115 	beq.w	8007642 <chprintf+0x3d2>
 8007418:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800741c:	4653      	mov	r3, sl
 800741e:	e001      	b.n	8007424 <chprintf+0x1b4>
 8007420:	3a01      	subs	r2, #1
 8007422:	d403      	bmi.n	800742c <chprintf+0x1bc>
 8007424:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007428:	2900      	cmp	r1, #0
 800742a:	d1f9      	bne.n	8007420 <chprintf+0x1b0>
 800742c:	1b5b      	subs	r3, r3, r5
 800742e:	eba9 0903 	sub.w	r9, r9, r3
 8007432:	3b01      	subs	r3, #1
 8007434:	9300      	str	r3, [sp, #0]
      filler = ' ';
 8007436:	2520      	movs	r5, #32
 8007438:	e00b      	b.n	8007452 <chprintf+0x1e2>
    switch (c) {
 800743a:	4666      	mov	r6, ip
      *p++ = va_arg(ap, int);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	f10d 0a18 	add.w	sl, sp, #24
 8007442:	f80a 3d0c 	strb.w	r3, [sl, #-12]!
 8007446:	2300      	movs	r3, #0
      filler = ' ';
 8007448:	2520      	movs	r5, #32
 800744a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
      *p++ = va_arg(ap, int);
 800744e:	3704      	adds	r7, #4
 8007450:	9300      	str	r3, [sp, #0]
    if ((width -= i) < 0)
 8007452:	f1b9 0f00 	cmp.w	r9, #0
 8007456:	db21      	blt.n	800749c <chprintf+0x22c>
    if (left_align == FALSE)
 8007458:	2800      	cmp	r0, #0
 800745a:	f040 8088 	bne.w	800756e <chprintf+0x2fe>
      width = -width;
 800745e:	f1c9 0300 	rsb	r3, r9, #0
    if (width < 0) {
 8007462:	f1b9 0f00 	cmp.w	r9, #0
 8007466:	f000 8081 	beq.w	800756c <chprintf+0x2fc>
      if (*s == '-' && filler == '0') {
 800746a:	f89a 1000 	ldrb.w	r1, [sl]
 800746e:	6822      	ldr	r2, [r4, #0]
 8007470:	292d      	cmp	r1, #45	; 0x2d
 8007472:	6892      	ldr	r2, [r2, #8]
 8007474:	f000 80af 	beq.w	80075d6 <chprintf+0x366>
 8007478:	469b      	mov	fp, r3
 800747a:	e001      	b.n	8007480 <chprintf+0x210>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	689a      	ldr	r2, [r3, #8]
        streamPut(chp, (uint8_t)filler);
 8007480:	4629      	mov	r1, r5
 8007482:	4620      	mov	r0, r4
 8007484:	4790      	blx	r2
      } while (++width != 0);
 8007486:	f11b 0b01 	adds.w	fp, fp, #1
 800748a:	d1f7      	bne.n	800747c <chprintf+0x20c>
    while (--i >= 0) {
 800748c:	9a00      	ldr	r2, [sp, #0]
 800748e:	465b      	mov	r3, fp
 8007490:	2a00      	cmp	r2, #0
 8007492:	44c8      	add	r8, r9
 8007494:	f6ff aef7 	blt.w	8007286 <chprintf+0x16>
 8007498:	4699      	mov	r9, r3
 800749a:	e005      	b.n	80074a8 <chprintf+0x238>
 800749c:	9b00      	ldr	r3, [sp, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f6ff aef1 	blt.w	8007286 <chprintf+0x16>
      width = 0;
 80074a4:	f04f 0900 	mov.w	r9, #0
      width = -width;
 80074a8:	f8dd b000 	ldr.w	fp, [sp]
      streamPut(chp, (uint8_t)*s++);
 80074ac:	6823      	ldr	r3, [r4, #0]
    while (--i >= 0) {
 80074ae:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)*s++);
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80074b8:	4620      	mov	r0, r4
 80074ba:	4798      	blx	r3
    while (--i >= 0) {
 80074bc:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 80074c0:	d1f4      	bne.n	80074ac <chprintf+0x23c>
 80074c2:	9b00      	ldr	r3, [sp, #0]
 80074c4:	f108 0801 	add.w	r8, r8, #1
 80074c8:	4443      	add	r3, r8
 80074ca:	4698      	mov	r8, r3
    while (width) {
 80074cc:	f1b9 0f00 	cmp.w	r9, #0
 80074d0:	f43f aed9 	beq.w	8007286 <chprintf+0x16>
 80074d4:	46ca      	mov	sl, r9
      streamPut(chp, (uint8_t)filler);
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	4629      	mov	r1, r5
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	4620      	mov	r0, r4
 80074de:	4798      	blx	r3
    while (width) {
 80074e0:	f1ba 0a01 	subs.w	sl, sl, #1
 80074e4:	d1f7      	bne.n	80074d6 <chprintf+0x266>
 80074e6:	44c8      	add	r8, r9
 80074e8:	e6cd      	b.n	8007286 <chprintf+0x16>
    switch (c) {
 80074ea:	4666      	mov	r6, ip
    case 'U':
 80074ec:	f04f 0e0a 	mov.w	lr, #10
 80074f0:	f857 2b04 	ldr.w	r2, [r7], #4
  q = p + MAX_FILLER;
 80074f4:	f10d 0117 	add.w	r1, sp, #23
 80074f8:	e000      	b.n	80074fc <chprintf+0x28c>
  } while ((ll /= radix) != 0);
 80074fa:	4659      	mov	r1, fp
    i = (int)(l % radix);
 80074fc:	fbb2 fcfe 	udiv	ip, r2, lr
 8007500:	fb0e 221c 	mls	r2, lr, ip, r2
    i += '0';
 8007504:	f102 0330 	add.w	r3, r2, #48	; 0x30
    if (i > '9')
 8007508:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 800750a:	bfc8      	it	gt
 800750c:	f102 0337 	addgt.w	r3, r2, #55	; 0x37
    l /= radix;
 8007510:	4662      	mov	r2, ip
    *--q = i;
 8007512:	b2db      	uxtb	r3, r3
 8007514:	f801 3c01 	strb.w	r3, [r1, #-1]
 8007518:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
  } while ((ll /= radix) != 0);
 800751c:	2a00      	cmp	r2, #0
 800751e:	d1ec      	bne.n	80074fa <chprintf+0x28a>
 8007520:	460a      	mov	r2, r1
  i = (int)(p + MAX_FILLER - q);
 8007522:	f10d 0117 	add.w	r1, sp, #23
 8007526:	f10d 0a0c 	add.w	sl, sp, #12
 800752a:	eba1 0e0b 	sub.w	lr, r1, fp
 800752e:	46d4      	mov	ip, sl
 8007530:	eb0b 010e 	add.w	r1, fp, lr
 8007534:	e001      	b.n	800753a <chprintf+0x2ca>
 8007536:	f812 3b01 	ldrb.w	r3, [r2], #1
  while (--i);
 800753a:	428a      	cmp	r2, r1
    *p++ = *q++;
 800753c:	f80c 3b01 	strb.w	r3, [ip], #1
  while (--i);
 8007540:	d1f9      	bne.n	8007536 <chprintf+0x2c6>
 8007542:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8007546:	eba9 090e 	sub.w	r9, r9, lr
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	e781      	b.n	8007452 <chprintf+0x1e2>
    switch (c) {
 800754e:	4666      	mov	r6, ip
    case 'O':
 8007550:	f04f 0e08 	mov.w	lr, #8
 8007554:	e7cc      	b.n	80074f0 <chprintf+0x280>
    switch (c) {
 8007556:	4666      	mov	r6, ip
 8007558:	460b      	mov	r3, r1
      *p++ = c;
 800755a:	2200      	movs	r2, #0
 800755c:	f10d 0a18 	add.w	sl, sp, #24
 8007560:	9200      	str	r2, [sp, #0]
 8007562:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007566:	f80a 3d0c 	strb.w	r3, [sl, #-12]!
 800756a:	e772      	b.n	8007452 <chprintf+0x1e2>
      width = -width;
 800756c:	4699      	mov	r9, r3
    while (--i >= 0) {
 800756e:	9b00      	ldr	r3, [sp, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	da99      	bge.n	80074a8 <chprintf+0x238>
 8007574:	e7aa      	b.n	80074cc <chprintf+0x25c>
    switch (c) {
 8007576:	f04f 0e10 	mov.w	lr, #16
 800757a:	e7b9      	b.n	80074f0 <chprintf+0x280>
 800757c:	1d39      	adds	r1, r7, #4
        l = va_arg(ap, long);
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	460f      	mov	r7, r1
      if (l < 0) {
 8007582:	2a00      	cmp	r2, #0
 8007584:	db54      	blt.n	8007630 <chprintf+0x3c0>
    p = tmpbuf;
 8007586:	f10d 0a0c 	add.w	sl, sp, #12
 800758a:	46d6      	mov	lr, sl
  q = p + MAX_FILLER;
 800758c:	f10e 0b0b 	add.w	fp, lr, #11
 8007590:	4659      	mov	r1, fp
    i = (int)(l % radix);
 8007592:	4b2e      	ldr	r3, [pc, #184]	; (800764c <chprintf+0x3dc>)
 8007594:	fba3 c302 	umull	ip, r3, r3, r2
 8007598:	08db      	lsrs	r3, r3, #3
 800759a:	469c      	mov	ip, r3
 800759c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80075a0:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
  } while ((ll /= radix) != 0);
 80075a4:	4662      	mov	r2, ip
    i += '0';
 80075a6:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while ((ll /= radix) != 0);
 80075ae:	2a00      	cmp	r2, #0
 80075b0:	d1ef      	bne.n	8007592 <chprintf+0x322>
  i = (int)(p + MAX_FILLER - q);
 80075b2:	ebab 0201 	sub.w	r2, fp, r1
 80075b6:	4472      	add	r2, lr
 80075b8:	e001      	b.n	80075be <chprintf+0x34e>
 80075ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    *p++ = *q++;
 80075be:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
 80075c2:	4596      	cmp	lr, r2
 80075c4:	d1f9      	bne.n	80075ba <chprintf+0x34a>
 80075c6:	ebae 0e0a 	sub.w	lr, lr, sl
 80075ca:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 80075ce:	eba9 090e 	sub.w	r9, r9, lr
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	e73d      	b.n	8007452 <chprintf+0x1e2>
      if (*s == '-' && filler == '0') {
 80075d6:	2d30      	cmp	r5, #48	; 0x30
 80075d8:	f47f af4e 	bne.w	8007478 <chprintf+0x208>
        streamPut(chp, (uint8_t)*s++);
 80075dc:	4620      	mov	r0, r4
 80075de:	9301      	str	r3, [sp, #4]
 80075e0:	4790      	blx	r2
 80075e2:	9b00      	ldr	r3, [sp, #0]
 80075e4:	6822      	ldr	r2, [r4, #0]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	9b01      	ldr	r3, [sp, #4]
 80075ec:	f108 0801 	add.w	r8, r8, #1
 80075f0:	6892      	ldr	r2, [r2, #8]
 80075f2:	f10a 0a01 	add.w	sl, sl, #1
 80075f6:	469b      	mov	fp, r3
 80075f8:	e742      	b.n	8007480 <chprintf+0x210>
 80075fa:	4639      	mov	r1, r7
 80075fc:	f851 2b04 	ldr.w	r2, [r1], #4
      if (is_long)
 8007600:	2b19      	cmp	r3, #25
 8007602:	4666      	mov	r6, ip
        l = va_arg(ap, int);
 8007604:	bf88      	it	hi
 8007606:	460f      	movhi	r7, r1
      if (is_long)
 8007608:	d8bb      	bhi.n	8007582 <chprintf+0x312>
 800760a:	e7b8      	b.n	800757e <chprintf+0x30e>
    switch (c) {
 800760c:	4666      	mov	r6, ip
 800760e:	f04f 0e10 	mov.w	lr, #16
 8007612:	e76d      	b.n	80074f0 <chprintf+0x280>
 8007614:	4d0e      	ldr	r5, [pc, #56]	; (8007650 <chprintf+0x3e0>)
      if (precision == 0)
 8007616:	46aa      	mov	sl, r5
 8007618:	2a00      	cmp	r2, #0
 800761a:	f43f aefd 	beq.w	8007418 <chprintf+0x1a8>
      for (p = s; *p && (--precision >= 0); p++)
 800761e:	3a01      	subs	r2, #1
 8007620:	e6fc      	b.n	800741c <chprintf+0x1ac>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1fb      	bne.n	800761e <chprintf+0x3ae>
 8007626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      filler = ' ';
 800762a:	2520      	movs	r5, #32
      for (p = s; *p && (--precision >= 0); p++)
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	e710      	b.n	8007452 <chprintf+0x1e2>
        *p++ = '-';
 8007630:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8007632:	4252      	negs	r2, r2
        *p++ = '-';
 8007634:	f88d 300c 	strb.w	r3, [sp, #12]
 8007638:	f10d 0e0d 	add.w	lr, sp, #13
 800763c:	f10d 0a0c 	add.w	sl, sp, #12
 8007640:	e7a4      	b.n	800758c <chprintf+0x31c>
      for (p = s; *p && (--precision >= 0); p++)
 8007642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      filler = ' ';
 8007646:	2520      	movs	r5, #32
      for (p = s; *p && (--precision >= 0); p++)
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	e705      	b.n	8007458 <chprintf+0x1e8>
 800764c:	cccccccd 	.word	0xcccccccd
 8007650:	0800e618 	.word	0x0800e618
	...

08007660 <cmd_write>:
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
 8007660:	2900      	cmp	r1, #0
 8007662:	dc18      	bgt.n	8007696 <cmd_write+0x36>
static void cmd_write(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	4604      	mov	r4, r0
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
#if 1
    /* Writing in channel mode.*/
    chnWrite(&SDU1, buf, sizeof buf - 1);
 8007668:	4e0c      	ldr	r6, [pc, #48]	; (800769c <cmd_write+0x3c>)
 800766a:	4d0d      	ldr	r5, [pc, #52]	; (80076a0 <cmd_write+0x40>)
 800766c:	e005      	b.n	800767a <cmd_write+0x1a>
 800766e:	6833      	ldr	r3, [r6, #0]
 8007670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4629      	mov	r1, r5
 8007678:	4798      	blx	r3
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	2100      	movs	r1, #0
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	4620      	mov	r0, r4
 8007682:	4798      	blx	r3
 8007684:	3001      	adds	r0, #1
    chnWrite(&SDU1, buf, sizeof buf - 1);
 8007686:	4805      	ldr	r0, [pc, #20]	; (800769c <cmd_write+0x3c>)
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 8007688:	d0f1      	beq.n	800766e <cmd_write+0xe>
    (void) obqGetEmptyBufferTimeout(&SDU1.obqueue, TIME_INFINITE);
    memcpy(SDU1.obqueue.ptr, buf, SERIAL_USB_BUFFERS_SIZE);
    obqPostFullBuffer(&SDU1.obqueue, SERIAL_USB_BUFFERS_SIZE);
#endif
  }
  chprintf(chp, "\r\n\nstopped\r\n");
 800768a:	4620      	mov	r0, r4
}
 800768c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chprintf(chp, "\r\n\nstopped\r\n");
 8007690:	4904      	ldr	r1, [pc, #16]	; (80076a4 <cmd_write+0x44>)
 8007692:	f7ff bded 	b.w	8007270 <chprintf>
    chprintf(chp, "Usage: write\r\n");
 8007696:	4904      	ldr	r1, [pc, #16]	; (80076a8 <cmd_write+0x48>)
 8007698:	f7ff bdea 	b.w	8007270 <chprintf>
 800769c:	20001898 	.word	0x20001898
 80076a0:	20001400 	.word	0x20001400
 80076a4:	0800e8e0 	.word	0x0800e8e0
 80076a8:	0800e8f0 	.word	0x0800e8f0
 80076ac:	00000000 	.word	0x00000000

080076b0 <cmd_systime>:

#if (SHELL_CMD_SYSTIME_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 80076b0:	2900      	cmp	r1, #0
 80076b2:	dd03      	ble.n	80076bc <cmd_systime+0xc>
    shellUsage(chp, "systime");
 80076b4:	4a08      	ldr	r2, [pc, #32]	; (80076d8 <cmd_systime+0x28>)
 80076b6:	4909      	ldr	r1, [pc, #36]	; (80076dc <cmd_systime+0x2c>)
 80076b8:	f7ff bdda 	b.w	8007270 <chprintf>
 80076bc:	2320      	movs	r3, #32
 80076be:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 80076c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80076c6:	2300      	movs	r3, #0
 80076c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076ca:	f383 8811 	msr	BASEPRI, r3
    return;
  }
  chprintf(chp, "%lu"SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 80076ce:	4904      	ldr	r1, [pc, #16]	; (80076e0 <cmd_systime+0x30>)
 80076d0:	b292      	uxth	r2, r2
 80076d2:	f7ff bdcd 	b.w	8007270 <chprintf>
 80076d6:	bf00      	nop
 80076d8:	0800e838 	.word	0x0800e838
 80076dc:	0800e840 	.word	0x0800e840
 80076e0:	0800e84c 	.word	0x0800e84c
	...

080076f0 <cmd_echo>:
  if (argc != 1) {
 80076f0:	2901      	cmp	r1, #1
 80076f2:	d003      	beq.n	80076fc <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 80076f4:	4a03      	ldr	r2, [pc, #12]	; (8007704 <cmd_echo+0x14>)
 80076f6:	4904      	ldr	r1, [pc, #16]	; (8007708 <cmd_echo+0x18>)
 80076f8:	f7ff bdba 	b.w	8007270 <chprintf>
  chprintf(chp, "%s"SHELL_NEWLINE_STR, argv[0]);
 80076fc:	6812      	ldr	r2, [r2, #0]
 80076fe:	4903      	ldr	r1, [pc, #12]	; (800770c <cmd_echo+0x1c>)
 8007700:	f7ff bdb6 	b.w	8007270 <chprintf>
 8007704:	0800e620 	.word	0x0800e620
 8007708:	0800e840 	.word	0x0800e840
 800770c:	0800e630 	.word	0x0800e630

08007710 <cmd_info>:
  if (argc > 0) {
 8007710:	2900      	cmp	r1, #0
 8007712:	dd03      	ble.n	800771c <cmd_info+0xc>
    shellUsage(chp, "info");
 8007714:	4a19      	ldr	r2, [pc, #100]	; (800777c <cmd_info+0x6c>)
 8007716:	491a      	ldr	r1, [pc, #104]	; (8007780 <cmd_info+0x70>)
 8007718:	f7ff bdaa 	b.w	8007270 <chprintf>
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 800771c:	b510      	push	{r4, lr}
 800771e:	4604      	mov	r4, r0
 8007720:	b082      	sub	sp, #8
  chprintf(chp, "Kernel:       %s"SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 8007722:	4a18      	ldr	r2, [pc, #96]	; (8007784 <cmd_info+0x74>)
 8007724:	4918      	ldr	r1, [pc, #96]	; (8007788 <cmd_info+0x78>)
 8007726:	f7ff fda3 	bl	8007270 <chprintf>
  chprintf(chp, "Compiler:     %s"SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 800772a:	4a18      	ldr	r2, [pc, #96]	; (800778c <cmd_info+0x7c>)
 800772c:	4918      	ldr	r1, [pc, #96]	; (8007790 <cmd_info+0x80>)
 800772e:	4620      	mov	r0, r4
 8007730:	f7ff fd9e 	bl	8007270 <chprintf>
  chprintf(chp, "Architecture: %s"SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 8007734:	4a17      	ldr	r2, [pc, #92]	; (8007794 <cmd_info+0x84>)
 8007736:	4918      	ldr	r1, [pc, #96]	; (8007798 <cmd_info+0x88>)
 8007738:	4620      	mov	r0, r4
 800773a:	f7ff fd99 	bl	8007270 <chprintf>
  chprintf(chp, "Core Variant: %s"SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 800773e:	4a17      	ldr	r2, [pc, #92]	; (800779c <cmd_info+0x8c>)
 8007740:	4917      	ldr	r1, [pc, #92]	; (80077a0 <cmd_info+0x90>)
 8007742:	4620      	mov	r0, r4
 8007744:	f7ff fd94 	bl	8007270 <chprintf>
  chprintf(chp, "Port Info:    %s"SHELL_NEWLINE_STR, PORT_INFO);
 8007748:	4a16      	ldr	r2, [pc, #88]	; (80077a4 <cmd_info+0x94>)
 800774a:	4917      	ldr	r1, [pc, #92]	; (80077a8 <cmd_info+0x98>)
 800774c:	4620      	mov	r0, r4
 800774e:	f7ff fd8f 	bl	8007270 <chprintf>
  chprintf(chp, "Platform:     %s"SHELL_NEWLINE_STR, PLATFORM_NAME);
 8007752:	4a16      	ldr	r2, [pc, #88]	; (80077ac <cmd_info+0x9c>)
 8007754:	4916      	ldr	r1, [pc, #88]	; (80077b0 <cmd_info+0xa0>)
 8007756:	4620      	mov	r0, r4
 8007758:	f7ff fd8a 	bl	8007270 <chprintf>
  chprintf(chp, "Board:        %s"SHELL_NEWLINE_STR, BOARD_NAME);
 800775c:	4a15      	ldr	r2, [pc, #84]	; (80077b4 <cmd_info+0xa4>)
 800775e:	4916      	ldr	r1, [pc, #88]	; (80077b8 <cmd_info+0xa8>)
 8007760:	4620      	mov	r0, r4
 8007762:	f7ff fd85 	bl	8007270 <chprintf>
  chprintf(chp, "Build time:   %s%s%s"SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 8007766:	4b15      	ldr	r3, [pc, #84]	; (80077bc <cmd_info+0xac>)
 8007768:	4620      	mov	r0, r4
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	4a14      	ldr	r2, [pc, #80]	; (80077c0 <cmd_info+0xb0>)
 800776e:	4b15      	ldr	r3, [pc, #84]	; (80077c4 <cmd_info+0xb4>)
 8007770:	4915      	ldr	r1, [pc, #84]	; (80077c8 <cmd_info+0xb8>)
 8007772:	f7ff fd7d 	bl	8007270 <chprintf>
}
 8007776:	b002      	add	sp, #8
 8007778:	bd10      	pop	{r4, pc}
 800777a:	bf00      	nop
 800777c:	0800e638 	.word	0x0800e638
 8007780:	0800e840 	.word	0x0800e840
 8007784:	0800e640 	.word	0x0800e640
 8007788:	0800e648 	.word	0x0800e648
 800778c:	0800e65c 	.word	0x0800e65c
 8007790:	0800e6a4 	.word	0x0800e6a4
 8007794:	0800e6b8 	.word	0x0800e6b8
 8007798:	0800e6c0 	.word	0x0800e6c0
 800779c:	0800e6d4 	.word	0x0800e6d4
 80077a0:	0800e6e0 	.word	0x0800e6e0
 80077a4:	0800e6f4 	.word	0x0800e6f4
 80077a8:	0800e70c 	.word	0x0800e70c
 80077ac:	0800e720 	.word	0x0800e720
 80077b0:	0800e74c 	.word	0x0800e74c
 80077b4:	0800e760 	.word	0x0800e760
 80077b8:	0800e774 	.word	0x0800e774
 80077bc:	0800e7b0 	.word	0x0800e7b0
 80077c0:	0800e78c 	.word	0x0800e78c
 80077c4:	0800e788 	.word	0x0800e788
 80077c8:	0800e798 	.word	0x0800e798
 80077cc:	00000000 	.word	0x00000000

080077d0 <rt_test_010_012_execute>:
 */

static void rt_test_010_012_execute(void) {

  /* [10.12.1] The size of the system area is printed.*/
  test_set_step(1);
 80077d0:	2301      	movs	r3, #1
static void rt_test_010_012_execute(void) {
 80077d2:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 80077d4:	4d32      	ldr	r5, [pc, #200]	; (80078a0 <rt_test_010_012_execute+0xd0>)
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
 80077d6:	4c33      	ldr	r4, [pc, #204]	; (80078a4 <rt_test_010_012_execute+0xd4>)
    test_print("--- System: ");
 80077d8:	4833      	ldr	r0, [pc, #204]	; (80078a8 <rt_test_010_012_execute+0xd8>)
  test_set_step(1);
 80077da:	602b      	str	r3, [r5, #0]
    test_print("--- System: ");
 80077dc:	f7fe f9b0 	bl	8005b40 <test_print>
 80077e0:	2074      	movs	r0, #116	; 0x74
 80077e2:	f7fe f90d 	bl	8005a00 <test_printn.part.0>
    test_println(" bytes");
 80077e6:	4620      	mov	r0, r4
 80077e8:	f7fe f98a 	bl	8005b00 <test_println>
  }

  /* [10.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 80077ec:	2302      	movs	r3, #2
  {
    test_print("--- Thread: ");
 80077ee:	482f      	ldr	r0, [pc, #188]	; (80078ac <rt_test_010_012_execute+0xdc>)
  test_set_step(2);
 80077f0:	602b      	str	r3, [r5, #0]
    test_print("--- Thread: ");
 80077f2:	f7fe f9a5 	bl	8005b40 <test_print>
 80077f6:	2044      	movs	r0, #68	; 0x44
 80077f8:	f7fe f902 	bl	8005a00 <test_printn.part.0>
    test_printn(sizeof(thread_t));
    test_println(" bytes");
 80077fc:	4620      	mov	r0, r4
 80077fe:	f7fe f97f 	bl	8005b00 <test_println>
  }

  /* [10.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 8007802:	2303      	movs	r3, #3
    test_printn(sizeof(virtual_timer_t));
    test_println(" bytes");
  }

  /* [10.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 8007804:	2604      	movs	r6, #4
    test_print("--- Timer : ");
 8007806:	482a      	ldr	r0, [pc, #168]	; (80078b0 <rt_test_010_012_execute+0xe0>)
  test_set_step(3);
 8007808:	602b      	str	r3, [r5, #0]
    test_print("--- Timer : ");
 800780a:	f7fe f999 	bl	8005b40 <test_print>
 800780e:	2014      	movs	r0, #20
 8007810:	f7fe f8f6 	bl	8005a00 <test_printn.part.0>
    test_println(" bytes");
 8007814:	4620      	mov	r0, r4
 8007816:	f7fe f973 	bl	8005b00 <test_println>
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 800781a:	4826      	ldr	r0, [pc, #152]	; (80078b4 <rt_test_010_012_execute+0xe4>)
  test_set_step(4);
 800781c:	602e      	str	r6, [r5, #0]
    test_print("--- Semaph: ");
 800781e:	f7fe f98f 	bl	8005b40 <test_print>
 8007822:	200c      	movs	r0, #12
 8007824:	f7fe f8ec 	bl	8005a00 <test_printn.part.0>
    test_printn(sizeof(semaphore_t));
    test_println(" bytes");
 8007828:	4620      	mov	r0, r4
 800782a:	f7fe f969 	bl	8005b00 <test_println>
#endif
  }

  /* [10.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 800782e:	2305      	movs	r3, #5
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 8007830:	4821      	ldr	r0, [pc, #132]	; (80078b8 <rt_test_010_012_execute+0xe8>)
  test_set_step(5);
 8007832:	602b      	str	r3, [r5, #0]
    test_print("--- Mutex : ");
 8007834:	f7fe f984 	bl	8005b40 <test_print>
 8007838:	2010      	movs	r0, #16
 800783a:	f7fe f8e1 	bl	8005a00 <test_printn.part.0>
    test_printn(sizeof(mutex_t));
    test_println(" bytes");
 800783e:	4620      	mov	r0, r4
 8007840:	f7fe f95e 	bl	8005b00 <test_println>
#endif
  }

  /* [10.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8007844:	2306      	movs	r3, #6
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 8007846:	481d      	ldr	r0, [pc, #116]	; (80078bc <rt_test_010_012_execute+0xec>)
  test_set_step(6);
 8007848:	602b      	str	r3, [r5, #0]
    test_print("--- CondV.: ");
 800784a:	f7fe f979 	bl	8005b40 <test_print>
 800784e:	2008      	movs	r0, #8
 8007850:	f7fe f8d6 	bl	8005a00 <test_printn.part.0>
    test_printn(sizeof(condition_variable_t));
    test_println(" bytes");
 8007854:	4620      	mov	r0, r4
 8007856:	f7fe f953 	bl	8005b00 <test_println>
#endif
  }

  /* [10.12.7] The size of an event source is printed.*/
  test_set_step(7);
 800785a:	2307      	movs	r3, #7
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 800785c:	4818      	ldr	r0, [pc, #96]	; (80078c0 <rt_test_010_012_execute+0xf0>)
  test_set_step(7);
 800785e:	602b      	str	r3, [r5, #0]
    test_print("--- EventS: ");
 8007860:	f7fe f96e 	bl	8005b40 <test_print>
 8007864:	4630      	mov	r0, r6
 8007866:	f7fe f8cb 	bl	8005a00 <test_printn.part.0>
    test_printn(sizeof(event_source_t));
    test_println(" bytes");
 800786a:	4620      	mov	r0, r4
 800786c:	f7fe f948 	bl	8005b00 <test_println>
#endif
  }

  /* [10.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8007870:	2308      	movs	r3, #8
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 8007872:	4814      	ldr	r0, [pc, #80]	; (80078c4 <rt_test_010_012_execute+0xf4>)
  test_set_step(8);
 8007874:	602b      	str	r3, [r5, #0]
    test_print("--- EventL: ");
 8007876:	f7fe f963 	bl	8005b40 <test_print>
 800787a:	2014      	movs	r0, #20
 800787c:	f7fe f8c0 	bl	8005a00 <test_printn.part.0>
    test_printn(sizeof(event_listener_t));
    test_println(" bytes");
 8007880:	4620      	mov	r0, r4
 8007882:	f7fe f93d 	bl	8005b00 <test_println>
#endif
  }

  /* [10.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8007886:	2309      	movs	r3, #9
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 8007888:	480f      	ldr	r0, [pc, #60]	; (80078c8 <rt_test_010_012_execute+0xf8>)
  test_set_step(9);
 800788a:	602b      	str	r3, [r5, #0]
    test_print("--- MailB.: ");
 800788c:	f7fe f958 	bl	8005b40 <test_print>
 8007890:	2028      	movs	r0, #40	; 0x28
 8007892:	f7fe f8b5 	bl	8005a00 <test_printn.part.0>
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
 8007896:	4620      	mov	r0, r4
#endif
  }
}
 8007898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_println(" bytes");
 800789c:	f7fe b930 	b.w	8005b00 <test_println>
 80078a0:	2000283c 	.word	0x2000283c
 80078a4:	0800fe6c 	.word	0x0800fe6c
 80078a8:	0800fe5c 	.word	0x0800fe5c
 80078ac:	0800fe74 	.word	0x0800fe74
 80078b0:	0800fe84 	.word	0x0800fe84
 80078b4:	0800fe94 	.word	0x0800fe94
 80078b8:	0800fea4 	.word	0x0800fea4
 80078bc:	0800feb4 	.word	0x0800feb4
 80078c0:	0800fec4 	.word	0x0800fec4
 80078c4:	0800fed4 	.word	0x0800fed4
 80078c8:	0800fee4 	.word	0x0800fee4
 80078cc:	00000000 	.word	0x00000000

080078d0 <rt_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 80078d0:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 80078d2:	2501      	movs	r5, #1
 80078d4:	4bc8      	ldr	r3, [pc, #800]	; (8007bf8 <rt_test_001_003_execute+0x328>)
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
    test_printn(CH_CFG_ST_RESOLUTION);
    test_println("");
 80078d6:	4cc9      	ldr	r4, [pc, #804]	; (8007bfc <rt_test_001_003_execute+0x32c>)
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 80078d8:	48c9      	ldr	r0, [pc, #804]	; (8007c00 <rt_test_001_003_execute+0x330>)
  test_set_step(1);
 80078da:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 80078dc:	f7fe f930 	bl	8005b40 <test_print>
 80078e0:	2010      	movs	r0, #16
 80078e2:	f7fe f88d 	bl	8005a00 <test_printn.part.0>
    test_println("");
 80078e6:	4620      	mov	r0, r4
 80078e8:	f7fe f90a 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
 80078ec:	48c5      	ldr	r0, [pc, #788]	; (8007c04 <rt_test_001_003_execute+0x334>)
 80078ee:	f7fe f927 	bl	8005b40 <test_print>
 80078f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80078f6:	f7fe f883 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_ST_FREQUENCY);
    test_println("");
 80078fa:	4620      	mov	r0, r4
 80078fc:	f7fe f900 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
 8007900:	48c1      	ldr	r0, [pc, #772]	; (8007c08 <rt_test_001_003_execute+0x338>)
 8007902:	f7fe f91d 	bl	8005b40 <test_print>
 8007906:	2020      	movs	r0, #32
 8007908:	f7fe f87a 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_INTERVALS_SIZE);
    test_println("");
 800790c:	4620      	mov	r0, r4
 800790e:	f7fe f8f7 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
 8007912:	48be      	ldr	r0, [pc, #760]	; (8007c0c <rt_test_001_003_execute+0x33c>)
 8007914:	f7fe f914 	bl	8005b40 <test_print>
 8007918:	2020      	movs	r0, #32
 800791a:	f7fe f871 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_TIME_TYPES_SIZE);
    test_println("");
 800791e:	4620      	mov	r0, r4
 8007920:	f7fe f8ee 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
 8007924:	48ba      	ldr	r0, [pc, #744]	; (8007c10 <rt_test_001_003_execute+0x340>)
 8007926:	f7fe f90b 	bl	8005b40 <test_print>
 800792a:	2002      	movs	r0, #2
 800792c:	f7fe f868 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_ST_TIMEDELTA);
    test_println("");
 8007930:	4620      	mov	r0, r4
 8007932:	f7fe f8e5 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
 8007936:	48b7      	ldr	r0, [pc, #732]	; (8007c14 <rt_test_001_003_execute+0x344>)
 8007938:	f7fe f902 	bl	8005b40 <test_print>
    test_printn(CH_CFG_TIME_QUANTUM);
 800793c:	2000      	movs	r0, #0
 800793e:	f7fe f88f 	bl	8005a60 <test_printn>
    test_println("");
 8007942:	4620      	mov	r0, r4
 8007944:	f7fe f8dc 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
 8007948:	48b3      	ldr	r0, [pc, #716]	; (8007c18 <rt_test_001_003_execute+0x348>)
 800794a:	f7fe f8f9 	bl	8005b40 <test_print>
    test_printn(CH_CFG_MEMCORE_SIZE);
 800794e:	2000      	movs	r0, #0
 8007950:	f7fe f886 	bl	8005a60 <test_printn>
    test_println("");
 8007954:	4620      	mov	r0, r4
 8007956:	f7fe f8d3 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
 800795a:	48b0      	ldr	r0, [pc, #704]	; (8007c1c <rt_test_001_003_execute+0x34c>)
 800795c:	f7fe f8f0 	bl	8005b40 <test_print>
    test_printn(CH_CFG_NO_IDLE_THREAD);
 8007960:	2000      	movs	r0, #0
 8007962:	f7fe f87d 	bl	8005a60 <test_printn>
    test_println("");
 8007966:	4620      	mov	r0, r4
 8007968:	f7fe f8ca 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
 800796c:	48ac      	ldr	r0, [pc, #688]	; (8007c20 <rt_test_001_003_execute+0x350>)
 800796e:	f7fe f8e7 	bl	8005b40 <test_print>
 8007972:	4628      	mov	r0, r5
 8007974:	f7fe f844 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_OPTIMIZE_SPEED);
    test_println("");
 8007978:	4620      	mov	r0, r4
 800797a:	f7fe f8c1 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_TM:                      ");
 800797e:	48a9      	ldr	r0, [pc, #676]	; (8007c24 <rt_test_001_003_execute+0x354>)
 8007980:	f7fe f8de 	bl	8005b40 <test_print>
    test_printn(CH_CFG_USE_TM);
 8007984:	2000      	movs	r0, #0
 8007986:	f7fe f86b 	bl	8005a60 <test_printn>
    test_println("");
 800798a:	4620      	mov	r0, r4
 800798c:	f7fe f8b8 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
 8007990:	48a5      	ldr	r0, [pc, #660]	; (8007c28 <rt_test_001_003_execute+0x358>)
 8007992:	f7fe f8d5 	bl	8005b40 <test_print>
 8007996:	4628      	mov	r0, r5
 8007998:	f7fe f832 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_USE_REGISTRY);
    test_println("");
 800799c:	4620      	mov	r0, r4
 800799e:	f7fe f8af 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
 80079a2:	48a2      	ldr	r0, [pc, #648]	; (8007c2c <rt_test_001_003_execute+0x35c>)
 80079a4:	f7fe f8cc 	bl	8005b40 <test_print>
 80079a8:	4628      	mov	r0, r5
 80079aa:	f7fe f829 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_USE_WAITEXIT);
    test_println("");
 80079ae:	4620      	mov	r0, r4
 80079b0:	f7fe f8a6 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
 80079b4:	489e      	ldr	r0, [pc, #632]	; (8007c30 <rt_test_001_003_execute+0x360>)
 80079b6:	f7fe f8c3 	bl	8005b40 <test_print>
 80079ba:	4628      	mov	r0, r5
 80079bc:	f7fe f820 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_USE_SEMAPHORES);
    test_println("");
 80079c0:	4620      	mov	r0, r4
 80079c2:	f7fe f89d 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES_PRI:          ");
 80079c6:	489b      	ldr	r0, [pc, #620]	; (8007c34 <rt_test_001_003_execute+0x364>)
 80079c8:	f7fe f8ba 	bl	8005b40 <test_print>
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
 80079cc:	2000      	movs	r0, #0
 80079ce:	f7fe f847 	bl	8005a60 <test_printn>
    test_println("");
 80079d2:	4620      	mov	r0, r4
 80079d4:	f7fe f894 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
 80079d8:	4897      	ldr	r0, [pc, #604]	; (8007c38 <rt_test_001_003_execute+0x368>)
 80079da:	f7fe f8b1 	bl	8005b40 <test_print>
 80079de:	4628      	mov	r0, r5
 80079e0:	f7fe f80e 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_USE_MUTEXES);
    test_println("");
 80079e4:	4620      	mov	r0, r4
 80079e6:	f7fe f88b 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES_RECURS:          ");
 80079ea:	4894      	ldr	r0, [pc, #592]	; (8007c3c <rt_test_001_003_execute+0x36c>)
 80079ec:	f7fe f8a8 	bl	8005b40 <test_print>
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
 80079f0:	2000      	movs	r0, #0
 80079f2:	f7fe f835 	bl	8005a60 <test_printn>
    test_println("");   
 80079f6:	4620      	mov	r0, r4
 80079f8:	f7fe f882 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
 80079fc:	4890      	ldr	r0, [pc, #576]	; (8007c40 <rt_test_001_003_execute+0x370>)
 80079fe:	f7fe f89f 	bl	8005b40 <test_print>
 8007a02:	4628      	mov	r0, r5
 8007a04:	f7fd fffc 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS);
    test_println("");
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f7fe f879 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEO:          ");
 8007a0e:	488d      	ldr	r0, [pc, #564]	; (8007c44 <rt_test_001_003_execute+0x374>)
 8007a10:	f7fe f896 	bl	8005b40 <test_print>
 8007a14:	4628      	mov	r0, r5
 8007a16:	f7fd fff3 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
    test_println("");
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f7fe f870 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
 8007a20:	4889      	ldr	r0, [pc, #548]	; (8007c48 <rt_test_001_003_execute+0x378>)
 8007a22:	f7fe f88d 	bl	8005b40 <test_print>
 8007a26:	4628      	mov	r0, r5
 8007a28:	f7fd ffea 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS);
    test_println("");
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f7fe f867 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
 8007a32:	4886      	ldr	r0, [pc, #536]	; (8007c4c <rt_test_001_003_execute+0x37c>)
 8007a34:	f7fe f884 	bl	8005b40 <test_print>
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f7fd ffe1 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
    test_println("");
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f7fe f85e 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
 8007a44:	4882      	ldr	r0, [pc, #520]	; (8007c50 <rt_test_001_003_execute+0x380>)
 8007a46:	f7fe f87b 	bl	8005b40 <test_print>
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f7fd ffd8 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_USE_MESSAGES);
    test_println("");
 8007a50:	4620      	mov	r0, r4
 8007a52:	f7fe f855 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES_PRI:            ");
 8007a56:	487f      	ldr	r0, [pc, #508]	; (8007c54 <rt_test_001_003_execute+0x384>)
 8007a58:	f7fe f872 	bl	8005b40 <test_print>
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	f7fd ffff 	bl	8005a60 <test_printn>
    test_println("");
 8007a62:	4620      	mov	r0, r4
 8007a64:	f7fe f84c 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 8007a68:	487b      	ldr	r0, [pc, #492]	; (8007c58 <rt_test_001_003_execute+0x388>)
 8007a6a:	f7fe f869 	bl	8005b40 <test_print>
 8007a6e:	4628      	mov	r0, r5
 8007a70:	f7fd ffc6 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_USE_MAILBOXES);
    test_println("");
 8007a74:	4620      	mov	r0, r4
 8007a76:	f7fe f843 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
 8007a7a:	4878      	ldr	r0, [pc, #480]	; (8007c5c <rt_test_001_003_execute+0x38c>)
 8007a7c:	f7fe f860 	bl	8005b40 <test_print>
 8007a80:	4628      	mov	r0, r5
 8007a82:	f7fd ffbd 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMCORE);
    test_println("");
 8007a86:	4620      	mov	r0, r4
 8007a88:	f7fe f83a 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_HEAP:                    ");
 8007a8c:	4874      	ldr	r0, [pc, #464]	; (8007c60 <rt_test_001_003_execute+0x390>)
 8007a8e:	f7fe f857 	bl	8005b40 <test_print>
 8007a92:	4628      	mov	r0, r5
 8007a94:	f7fd ffb4 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_USE_HEAP);
    test_println("");
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f7fe f831 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
 8007a9e:	4871      	ldr	r0, [pc, #452]	; (8007c64 <rt_test_001_003_execute+0x394>)
 8007aa0:	f7fe f84e 	bl	8005b40 <test_print>
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	f7fd ffab 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMPOOLS);
    test_println("");
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f7fe f828 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
 8007ab0:	486d      	ldr	r0, [pc, #436]	; (8007c68 <rt_test_001_003_execute+0x398>)
 8007ab2:	f7fe f845 	bl	8005b40 <test_print>
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f7fd ffa2 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_FIFOS);
    test_println("");
 8007abc:	4620      	mov	r0, r4
 8007abe:	f7fe f81f 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
 8007ac2:	486a      	ldr	r0, [pc, #424]	; (8007c6c <rt_test_001_003_execute+0x39c>)
 8007ac4:	f7fe f83c 	bl	8005b40 <test_print>
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f7fd ff99 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_USE_DYNAMIC);
    test_println("");
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f7fe f816 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
 8007ad4:	4866      	ldr	r0, [pc, #408]	; (8007c70 <rt_test_001_003_execute+0x3a0>)
 8007ad6:	f7fe f833 	bl	8005b40 <test_print>
 8007ada:	4628      	mov	r0, r5
 8007adc:	f7fd ff90 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_USE_FACTORY);
    test_println("");
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f7fe f80d 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
 8007ae6:	4863      	ldr	r0, [pc, #396]	; (8007c74 <rt_test_001_003_execute+0x3a4>)
 8007ae8:	f7fe f82a 	bl	8005b40 <test_print>
 8007aec:	2008      	movs	r0, #8
 8007aee:	f7fd ff87 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
    test_println("");
 8007af2:	4620      	mov	r0, r4
 8007af4:	f7fe f804 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
 8007af8:	485f      	ldr	r0, [pc, #380]	; (8007c78 <rt_test_001_003_execute+0x3a8>)
 8007afa:	f7fe f821 	bl	8005b40 <test_print>
 8007afe:	4628      	mov	r0, r5
 8007b00:	f7fd ff7e 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
    test_println("");
 8007b04:	4620      	mov	r0, r4
 8007b06:	f7fd fffb 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
 8007b0a:	485c      	ldr	r0, [pc, #368]	; (8007c7c <rt_test_001_003_execute+0x3ac>)
 8007b0c:	f7fe f818 	bl	8005b40 <test_print>
 8007b10:	4628      	mov	r0, r5
 8007b12:	f7fd ff75 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
    test_println("");
 8007b16:	4620      	mov	r0, r4
 8007b18:	f7fd fff2 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
 8007b1c:	4858      	ldr	r0, [pc, #352]	; (8007c80 <rt_test_001_003_execute+0x3b0>)
 8007b1e:	f7fe f80f 	bl	8005b40 <test_print>
 8007b22:	4628      	mov	r0, r5
 8007b24:	f7fd ff6c 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
    test_println("");
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f7fd ffe9 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
 8007b2e:	4855      	ldr	r0, [pc, #340]	; (8007c84 <rt_test_001_003_execute+0x3b4>)
 8007b30:	f7fe f806 	bl	8005b40 <test_print>
 8007b34:	4628      	mov	r0, r5
 8007b36:	f7fd ff63 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAILBOXES);
    test_println("");
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f7fd ffe0 	bl	8005b00 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
 8007b40:	4851      	ldr	r0, [pc, #324]	; (8007c88 <rt_test_001_003_execute+0x3b8>)
 8007b42:	f7fd fffd 	bl	8005b40 <test_print>
 8007b46:	4628      	mov	r0, r5
 8007b48:	f7fd ff5a 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
    test_println("");
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f7fd ffd7 	bl	8005b00 <test_println>
    test_print("--- CH_DBG_STATISTICS:                  ");
 8007b52:	484e      	ldr	r0, [pc, #312]	; (8007c8c <rt_test_001_003_execute+0x3bc>)
 8007b54:	f7fd fff4 	bl	8005b40 <test_print>
    test_printn(CH_DBG_STATISTICS);
 8007b58:	2000      	movs	r0, #0
 8007b5a:	f7fd ff81 	bl	8005a60 <test_printn>
    test_println("");
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f7fd ffce 	bl	8005b00 <test_println>
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
 8007b64:	484a      	ldr	r0, [pc, #296]	; (8007c90 <rt_test_001_003_execute+0x3c0>)
 8007b66:	f7fd ffeb 	bl	8005b40 <test_print>
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	f7fd ff78 	bl	8005a60 <test_printn>
    test_println("");
 8007b70:	4620      	mov	r0, r4
 8007b72:	f7fd ffc5 	bl	8005b00 <test_println>
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
 8007b76:	4847      	ldr	r0, [pc, #284]	; (8007c94 <rt_test_001_003_execute+0x3c4>)
 8007b78:	f7fd ffe2 	bl	8005b40 <test_print>
    test_printn(CH_DBG_ENABLE_CHECKS);
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	f7fd ff6f 	bl	8005a60 <test_printn>
    test_println("");
 8007b82:	4620      	mov	r0, r4
 8007b84:	f7fd ffbc 	bl	8005b00 <test_println>
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
 8007b88:	4843      	ldr	r0, [pc, #268]	; (8007c98 <rt_test_001_003_execute+0x3c8>)
 8007b8a:	f7fd ffd9 	bl	8005b40 <test_print>
    test_printn(CH_DBG_ENABLE_ASSERTS);
 8007b8e:	2000      	movs	r0, #0
 8007b90:	f7fd ff66 	bl	8005a60 <test_printn>
    test_println("");
 8007b94:	4620      	mov	r0, r4
 8007b96:	f7fd ffb3 	bl	8005b00 <test_println>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
 8007b9a:	4840      	ldr	r0, [pc, #256]	; (8007c9c <rt_test_001_003_execute+0x3cc>)
 8007b9c:	f7fd ffd0 	bl	8005b40 <test_print>
 8007ba0:	20ff      	movs	r0, #255	; 0xff
 8007ba2:	f7fd ff2d 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_MASK);
    test_println("");
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f7fd ffaa 	bl	8005b00 <test_println>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
 8007bac:	483c      	ldr	r0, [pc, #240]	; (8007ca0 <rt_test_001_003_execute+0x3d0>)
 8007bae:	f7fd ffc7 	bl	8005b40 <test_print>
 8007bb2:	2080      	movs	r0, #128	; 0x80
 8007bb4:	f7fd ff24 	bl	8005a00 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
    test_println("");
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f7fd ffa1 	bl	8005b00 <test_println>
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
 8007bbe:	4839      	ldr	r0, [pc, #228]	; (8007ca4 <rt_test_001_003_execute+0x3d4>)
 8007bc0:	f7fd ffbe 	bl	8005b40 <test_print>
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	f7fd ff4b 	bl	8005a60 <test_printn>
    test_println("");
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f7fd ff98 	bl	8005b00 <test_println>
    test_print("--- CH_DBG_FILL_THREADS:                ");
 8007bd0:	4835      	ldr	r0, [pc, #212]	; (8007ca8 <rt_test_001_003_execute+0x3d8>)
 8007bd2:	f7fd ffb5 	bl	8005b40 <test_print>
    test_printn(CH_DBG_FILL_THREADS);
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	f7fd ff42 	bl	8005a60 <test_printn>
    test_println("");
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f7fd ff8f 	bl	8005b00 <test_println>
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
 8007be2:	4832      	ldr	r0, [pc, #200]	; (8007cac <rt_test_001_003_execute+0x3dc>)
 8007be4:	f7fd ffac 	bl	8005b40 <test_print>
    test_printn(CH_DBG_THREADS_PROFILING);
 8007be8:	2000      	movs	r0, #0
 8007bea:	f7fd ff39 	bl	8005a60 <test_printn>
    test_println("");
 8007bee:	4620      	mov	r0, r4
  }
}
 8007bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8007bf4:	f7fd bf84 	b.w	8005b00 <test_println>
 8007bf8:	2000283c 	.word	0x2000283c
 8007bfc:	080100cc 	.word	0x080100cc
 8007c00:	0800f020 	.word	0x0800f020
 8007c04:	0800f04c 	.word	0x0800f04c
 8007c08:	0800f078 	.word	0x0800f078
 8007c0c:	0800f0a4 	.word	0x0800f0a4
 8007c10:	0800f0d0 	.word	0x0800f0d0
 8007c14:	0800f0fc 	.word	0x0800f0fc
 8007c18:	0800f128 	.word	0x0800f128
 8007c1c:	0800f154 	.word	0x0800f154
 8007c20:	0800f180 	.word	0x0800f180
 8007c24:	0800f1ac 	.word	0x0800f1ac
 8007c28:	0800f1d8 	.word	0x0800f1d8
 8007c2c:	0800f204 	.word	0x0800f204
 8007c30:	0800f230 	.word	0x0800f230
 8007c34:	0800f25c 	.word	0x0800f25c
 8007c38:	0800f288 	.word	0x0800f288
 8007c3c:	0800f2b4 	.word	0x0800f2b4
 8007c40:	0800f2e0 	.word	0x0800f2e0
 8007c44:	0800f30c 	.word	0x0800f30c
 8007c48:	0800f338 	.word	0x0800f338
 8007c4c:	0800f364 	.word	0x0800f364
 8007c50:	0800f390 	.word	0x0800f390
 8007c54:	0800f3bc 	.word	0x0800f3bc
 8007c58:	0800f3e8 	.word	0x0800f3e8
 8007c5c:	0800f414 	.word	0x0800f414
 8007c60:	0800f440 	.word	0x0800f440
 8007c64:	0800f46c 	.word	0x0800f46c
 8007c68:	0800f498 	.word	0x0800f498
 8007c6c:	0800f4c4 	.word	0x0800f4c4
 8007c70:	0800f4f0 	.word	0x0800f4f0
 8007c74:	0800f51c 	.word	0x0800f51c
 8007c78:	0800f548 	.word	0x0800f548
 8007c7c:	0800f574 	.word	0x0800f574
 8007c80:	0800f5a0 	.word	0x0800f5a0
 8007c84:	0800f5cc 	.word	0x0800f5cc
 8007c88:	0800f5f8 	.word	0x0800f5f8
 8007c8c:	0800f624 	.word	0x0800f624
 8007c90:	0800f650 	.word	0x0800f650
 8007c94:	0800f67c 	.word	0x0800f67c
 8007c98:	0800f6a8 	.word	0x0800f6a8
 8007c9c:	0800f6d4 	.word	0x0800f6d4
 8007ca0:	0800f700 	.word	0x0800f700
 8007ca4:	0800f72c 	.word	0x0800f72c
 8007ca8:	0800f758 	.word	0x0800f758
 8007cac:	0800f784 	.word	0x0800f784

08007cb0 <rt_test_001_002_execute>:
static void rt_test_001_002_execute(void) {
 8007cb0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8007cb2:	2501      	movs	r5, #1
 8007cb4:	4b18      	ldr	r3, [pc, #96]	; (8007d18 <rt_test_001_002_execute+0x68>)
    test_println("--- Product:                            ChibiOS/RT");
 8007cb6:	4819      	ldr	r0, [pc, #100]	; (8007d1c <rt_test_001_002_execute+0x6c>)
  test_set_step(1);
 8007cb8:	601d      	str	r5, [r3, #0]
    test_println("");
 8007cba:	4c19      	ldr	r4, [pc, #100]	; (8007d20 <rt_test_001_002_execute+0x70>)
    test_println("--- Product:                            ChibiOS/RT");
 8007cbc:	f7fd ff20 	bl	8005b00 <test_println>
    test_print("--- Stable Flag:                        ");
 8007cc0:	4818      	ldr	r0, [pc, #96]	; (8007d24 <rt_test_001_002_execute+0x74>)
 8007cc2:	f7fd ff3d 	bl	8005b40 <test_print>
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f7fd fe9a 	bl	8005a00 <test_printn.part.0>
    test_println("");
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f7fd ff17 	bl	8005b00 <test_println>
    test_print("--- Version String:                     ");
 8007cd2:	4815      	ldr	r0, [pc, #84]	; (8007d28 <rt_test_001_002_execute+0x78>)
 8007cd4:	f7fd ff34 	bl	8005b40 <test_print>
    test_println(CH_KERNEL_VERSION);
 8007cd8:	4814      	ldr	r0, [pc, #80]	; (8007d2c <rt_test_001_002_execute+0x7c>)
 8007cda:	f7fd ff11 	bl	8005b00 <test_println>
    test_print("--- Major Number:                       ");
 8007cde:	4814      	ldr	r0, [pc, #80]	; (8007d30 <rt_test_001_002_execute+0x80>)
 8007ce0:	f7fd ff2e 	bl	8005b40 <test_print>
 8007ce4:	2005      	movs	r0, #5
 8007ce6:	f7fd fe8b 	bl	8005a00 <test_printn.part.0>
    test_println("");
 8007cea:	4620      	mov	r0, r4
 8007cec:	f7fd ff08 	bl	8005b00 <test_println>
    test_print("--- Minor Number:                       ");
 8007cf0:	4810      	ldr	r0, [pc, #64]	; (8007d34 <rt_test_001_002_execute+0x84>)
 8007cf2:	f7fd ff25 	bl	8005b40 <test_print>
    test_printn(CH_KERNEL_MINOR);
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	f7fd feb2 	bl	8005a60 <test_printn>
    test_println("");
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f7fd feff 	bl	8005b00 <test_println>
    test_print("--- Patch Number:                       ");
 8007d02:	480d      	ldr	r0, [pc, #52]	; (8007d38 <rt_test_001_002_execute+0x88>)
 8007d04:	f7fd ff1c 	bl	8005b40 <test_print>
    test_printn(CH_KERNEL_PATCH);
 8007d08:	2000      	movs	r0, #0
 8007d0a:	f7fd fea9 	bl	8005a60 <test_printn>
    test_println("");
 8007d0e:	4620      	mov	r0, r4
}
 8007d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8007d14:	f7fd bef4 	b.w	8005b00 <test_println>
 8007d18:	2000283c 	.word	0x2000283c
 8007d1c:	0800ef00 	.word	0x0800ef00
 8007d20:	080100cc 	.word	0x080100cc
 8007d24:	0800ef34 	.word	0x0800ef34
 8007d28:	0800ef60 	.word	0x0800ef60
 8007d2c:	0800e640 	.word	0x0800e640
 8007d30:	0800ef8c 	.word	0x0800ef8c
 8007d34:	0800efb8 	.word	0x0800efb8
 8007d38:	0800efe4 	.word	0x0800efe4
 8007d3c:	00000000 	.word	0x00000000

08007d40 <rt_test_001_001_execute>:
  test_set_step(1);
 8007d40:	2201      	movs	r2, #1
 8007d42:	4b1c      	ldr	r3, [pc, #112]	; (8007db4 <rt_test_001_001_execute+0x74>)
static void rt_test_001_001_execute(void) {
 8007d44:	b510      	push	{r4, lr}
    test_print("--- Architecture:                       ");
 8007d46:	481c      	ldr	r0, [pc, #112]	; (8007db8 <rt_test_001_001_execute+0x78>)
  test_set_step(1);
 8007d48:	601a      	str	r2, [r3, #0]
    test_print("--- Architecture:                       ");
 8007d4a:	f7fd fef9 	bl	8005b40 <test_print>
    test_println(PORT_ARCHITECTURE_NAME);
 8007d4e:	481b      	ldr	r0, [pc, #108]	; (8007dbc <rt_test_001_001_execute+0x7c>)
 8007d50:	f7fd fed6 	bl	8005b00 <test_println>
    test_print("--- Core Variant:                       ");
 8007d54:	481a      	ldr	r0, [pc, #104]	; (8007dc0 <rt_test_001_001_execute+0x80>)
 8007d56:	f7fd fef3 	bl	8005b40 <test_print>
    test_println(PORT_CORE_VARIANT_NAME);
 8007d5a:	481a      	ldr	r0, [pc, #104]	; (8007dc4 <rt_test_001_001_execute+0x84>)
 8007d5c:	f7fd fed0 	bl	8005b00 <test_println>
    test_print("--- Compiler:                           ");
 8007d60:	4819      	ldr	r0, [pc, #100]	; (8007dc8 <rt_test_001_001_execute+0x88>)
 8007d62:	f7fd feed 	bl	8005b40 <test_print>
    test_println(PORT_COMPILER_NAME);
 8007d66:	4819      	ldr	r0, [pc, #100]	; (8007dcc <rt_test_001_001_execute+0x8c>)
 8007d68:	f7fd feca 	bl	8005b00 <test_println>
    test_print("--- Port Info:                          ");
 8007d6c:	4818      	ldr	r0, [pc, #96]	; (8007dd0 <rt_test_001_001_execute+0x90>)
 8007d6e:	f7fd fee7 	bl	8005b40 <test_print>
    test_println(PORT_INFO);
 8007d72:	4818      	ldr	r0, [pc, #96]	; (8007dd4 <rt_test_001_001_execute+0x94>)
    test_println("");
 8007d74:	4c18      	ldr	r4, [pc, #96]	; (8007dd8 <rt_test_001_001_execute+0x98>)
    test_println(PORT_INFO);
 8007d76:	f7fd fec3 	bl	8005b00 <test_println>
    test_print("--- Natural alignment:                  ");
 8007d7a:	4818      	ldr	r0, [pc, #96]	; (8007ddc <rt_test_001_001_execute+0x9c>)
 8007d7c:	f7fd fee0 	bl	8005b40 <test_print>
 8007d80:	2004      	movs	r0, #4
 8007d82:	f7fd fe3d 	bl	8005a00 <test_printn.part.0>
    test_println("");
 8007d86:	4620      	mov	r0, r4
 8007d88:	f7fd feba 	bl	8005b00 <test_println>
    test_print("--- Stack alignment:                    ");
 8007d8c:	4814      	ldr	r0, [pc, #80]	; (8007de0 <rt_test_001_001_execute+0xa0>)
 8007d8e:	f7fd fed7 	bl	8005b40 <test_print>
 8007d92:	2008      	movs	r0, #8
 8007d94:	f7fd fe34 	bl	8005a00 <test_printn.part.0>
    test_println("");
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f7fd feb1 	bl	8005b00 <test_println>
    test_print("--- Working area alignment:             ");
 8007d9e:	4811      	ldr	r0, [pc, #68]	; (8007de4 <rt_test_001_001_execute+0xa4>)
 8007da0:	f7fd fece 	bl	8005b40 <test_print>
 8007da4:	2008      	movs	r0, #8
 8007da6:	f7fd fe2b 	bl	8005a00 <test_printn.part.0>
    test_println("");
 8007daa:	4620      	mov	r0, r4
}
 8007dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    test_println("");
 8007db0:	f7fd bea6 	b.w	8005b00 <test_println>
 8007db4:	2000283c 	.word	0x2000283c
 8007db8:	0800edbc 	.word	0x0800edbc
 8007dbc:	0800e6b8 	.word	0x0800e6b8
 8007dc0:	0800ede8 	.word	0x0800ede8
 8007dc4:	0800e6d4 	.word	0x0800e6d4
 8007dc8:	0800ee14 	.word	0x0800ee14
 8007dcc:	0800e65c 	.word	0x0800e65c
 8007dd0:	0800ee40 	.word	0x0800ee40
 8007dd4:	0800e6f4 	.word	0x0800e6f4
 8007dd8:	080100cc 	.word	0x080100cc
 8007ddc:	0800ee6c 	.word	0x0800ee6c
 8007de0:	0800ee98 	.word	0x0800ee98
 8007de4:	0800eec4 	.word	0x0800eec4
	...

08007df0 <dyn_find_object>:
    chPoolFree(mp, (void *)dep);
  }
}
#endif /* CH_FACTORY_REQUIRES_POOLS */

static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
 8007df0:	b570      	push	{r4, r5, r6, lr}
  dyn_element_t *p = dlp->next;
 8007df2:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8007df4:	42a1      	cmp	r1, r4
 8007df6:	d012      	beq.n	8007e1e <dyn_find_object+0x2e>
 8007df8:	460d      	mov	r5, r1
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	e002      	b.n	8007e04 <dyn_find_object+0x14>
    p = p->next;
 8007dfe:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8007e00:	42a5      	cmp	r5, r4
 8007e02:	d00c      	beq.n	8007e1e <dyn_find_object+0x2e>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8007e04:	2208      	movs	r2, #8
 8007e06:	4631      	mov	r1, r6
 8007e08:	18a0      	adds	r0, r4, r2
 8007e0a:	f006 fb19 	bl	800e440 <strncmp>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d1f5      	bne.n	8007dfe <dyn_find_object+0xe>

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
  if (dep != NULL) {
 8007e12:	b12c      	cbz	r4, 8007e20 <dyn_find_object+0x30>
    /* Increasing references counter.*/
    dep->refs++;
 8007e14:	6863      	ldr	r3, [r4, #4]
  }

  return dep;
}
 8007e16:	4620      	mov	r0, r4
    dep->refs++;
 8007e18:	3301      	adds	r3, #1
 8007e1a:	6063      	str	r3, [r4, #4]
}
 8007e1c:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8007e1e:	2400      	movs	r4, #0
}
 8007e20:	4620      	mov	r0, r4
 8007e22:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e30 <dyn_create_object_pool>:
                                             memory_pool_t *mp) {
 8007e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8007e32:	680c      	ldr	r4, [r1, #0]
                                             memory_pool_t *mp) {
 8007e34:	460d      	mov	r5, r1
  while (p != (dyn_element_t *)dlp) {
 8007e36:	42a1      	cmp	r1, r4
                                             memory_pool_t *mp) {
 8007e38:	4606      	mov	r6, r0
 8007e3a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 8007e3c:	d103      	bne.n	8007e46 <dyn_create_object_pool+0x16>
 8007e3e:	e00d      	b.n	8007e5c <dyn_create_object_pool+0x2c>
    p = p->next;
 8007e40:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8007e42:	42a5      	cmp	r5, r4
 8007e44:	d00a      	beq.n	8007e5c <dyn_create_object_pool+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8007e46:	2208      	movs	r2, #8
 8007e48:	4631      	mov	r1, r6
 8007e4a:	18a0      	adds	r0, r4, r2
 8007e4c:	f006 faf8 	bl	800e440 <strncmp>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d1f5      	bne.n	8007e40 <dyn_create_object_pool+0x10>
  if (dep != NULL) {
 8007e54:	b114      	cbz	r4, 8007e5c <dyn_create_object_pool+0x2c>
    return NULL;
 8007e56:	4604      	mov	r4, r0
}
 8007e58:	4620      	mov	r0, r4
 8007e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dep = (dyn_element_t *)chPoolAlloc(mp);
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	f7fe fc57 	bl	8006710 <chPoolAlloc>
  if (dep == NULL) {
 8007e62:	4604      	mov	r4, r0
 8007e64:	b148      	cbz	r0, 8007e7a <dyn_create_object_pool+0x4a>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8007e66:	2208      	movs	r2, #8
 8007e68:	4631      	mov	r1, r6
 8007e6a:	4410      	add	r0, r2
 8007e6c:	f006 fb32 	bl	800e4d4 <strncpy>
  dep->refs = (ucnt_t)1;
 8007e70:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8007e72:	682b      	ldr	r3, [r5, #0]
 8007e74:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->next = (dyn_element_t *)dep;
 8007e78:	602c      	str	r4, [r5, #0]
}
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e7e:	bf00      	nop

08007e80 <chThdYield>:
void chThdYield(void) {
 8007e80:	b570      	push	{r4, r5, r6, lr}
 8007e82:	2320      	movs	r3, #32
 8007e84:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 8007e88:	4a12      	ldr	r2, [pc, #72]	; (8007ed4 <chThdYield+0x54>)
 8007e8a:	6810      	ldr	r0, [r2, #0]
 8007e8c:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8007e8e:	6883      	ldr	r3, [r0, #8]
  return firstprio(&ch.rlist.queue) >= currp->prio;
 8007e90:	68a1      	ldr	r1, [r4, #8]
  if (chSchCanYieldS()) {
 8007e92:	428b      	cmp	r3, r1
 8007e94:	d203      	bcs.n	8007e9e <chThdYield+0x1e>
 8007e96:	2300      	movs	r3, #0
 8007e98:	f383 8811 	msr	BASEPRI, r3
}
 8007e9c:	bd70      	pop	{r4, r5, r6, pc}
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8007e9e:	2601      	movs	r6, #1
  tp->state = CH_STATE_READY;
 8007ea0:	2500      	movs	r5, #0
  tqp->next             = tp->queue.next;
 8007ea2:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8007ea4:	605a      	str	r2, [r3, #4]
  tqp->next             = tp->queue.next;
 8007ea6:	6013      	str	r3, [r2, #0]
  currp->state = CH_STATE_CURRENT;
 8007ea8:	f880 6020 	strb.w	r6, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8007eac:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 8007eae:	f884 5020 	strb.w	r5, [r4, #32]
 8007eb2:	e000      	b.n	8007eb6 <chThdYield+0x36>
 8007eb4:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	4291      	cmp	r1, r2
 8007eba:	d9fb      	bls.n	8007eb4 <chThdYield+0x34>
  tp->queue.prev             = cp->queue.prev;
 8007ebc:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8007ebe:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 8007ec0:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8007ec4:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8007ec6:	605c      	str	r4, [r3, #4]
  chSysSwitch(currp, otp);
 8007ec8:	f7fd f9ba 	bl	8005240 <_port_switch>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	bd70      	pop	{r4, r5, r6, pc}
 8007ed4:	20001eb0 	.word	0x20001eb0
	...

08007ee0 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	4d08      	ldr	r5, [pc, #32]	; (8007f08 <bmk_thread8+0x28>)
    chThdYield();
 8007ee6:	f7ff ffcb 	bl	8007e80 <chThdYield>
    chThdYield();
 8007eea:	f7ff ffc9 	bl	8007e80 <chThdYield>
    chThdYield();
 8007eee:	f7ff ffc7 	bl	8007e80 <chThdYield>
    chThdYield();
 8007ef2:	f7ff ffc5 	bl	8007e80 <chThdYield>
    (*(uint32_t *)p) += 4;
 8007ef6:	6823      	ldr	r3, [r4, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8007ef8:	69aa      	ldr	r2, [r5, #24]
 8007efa:	3304      	adds	r3, #4
 8007efc:	6023      	str	r3, [r4, #0]
  } while(!chThdShouldTerminateX());
 8007efe:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8007f02:	075b      	lsls	r3, r3, #29
 8007f04:	d5ef      	bpl.n	8007ee6 <bmk_thread8+0x6>
}
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
 8007f08:	20001eb0 	.word	0x20001eb0
 8007f0c:	00000000 	.word	0x00000000

08007f10 <chSchWakeupS>:
  thread_t *otp = currp;
 8007f10:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <chSchWakeupS+0x5c>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8007f12:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 8007f14:	699e      	ldr	r6, [r3, #24]
  if (ntp->prio <= otp->prio) {
 8007f16:	6885      	ldr	r5, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8007f18:	4604      	mov	r4, r0
  ntp->u.rdymsg = msg;
 8007f1a:	6241      	str	r1, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8007f1c:	68b0      	ldr	r0, [r6, #8]
 8007f1e:	4285      	cmp	r5, r0
 8007f20:	d80d      	bhi.n	8007f3e <chSchWakeupS+0x2e>
  tp->state = CH_STATE_READY;
 8007f22:	2200      	movs	r2, #0
 8007f24:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 8007f28:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	4295      	cmp	r5, r2
 8007f2e:	d9fb      	bls.n	8007f28 <chSchWakeupS+0x18>
  tp->queue.prev             = cp->queue.prev;
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8007f36:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8007f38:	605c      	str	r4, [r3, #4]
}
 8007f3a:	bc70      	pop	{r4, r5, r6}
 8007f3c:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 8007f3e:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.queue;
 8007f40:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
 8007f42:	f886 1020 	strb.w	r1, [r6, #32]
    cp = cp->queue.next;
 8007f46:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8007f48:	6891      	ldr	r1, [r2, #8]
 8007f4a:	4288      	cmp	r0, r1
 8007f4c:	d9fb      	bls.n	8007f46 <chSchWakeupS+0x36>
    ntp->state = CH_STATE_CURRENT;
 8007f4e:	2001      	movs	r0, #1
  tp->queue.prev             = cp->queue.prev;
 8007f50:	6851      	ldr	r1, [r2, #4]
 8007f52:	e9c6 2100 	strd	r2, r1, [r6]
  tp->queue.prev->queue.next = tp;
 8007f56:	600e      	str	r6, [r1, #0]
  cp->queue.prev             = tp;
 8007f58:	6056      	str	r6, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8007f5a:	f884 0020 	strb.w	r0, [r4, #32]
    chSysSwitch(ntp, otp);
 8007f5e:	4631      	mov	r1, r6
 8007f60:	4620      	mov	r0, r4
    currp = ntp;
 8007f62:	619c      	str	r4, [r3, #24]
}
 8007f64:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 8007f66:	f7fd b96b 	b.w	8005240 <_port_switch>
 8007f6a:	bf00      	nop
 8007f6c:	20001eb0 	.word	0x20001eb0

08007f70 <chThdCreateStatic.constprop.89>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8007f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f72:	2420      	movs	r4, #32
 8007f74:	f384 8811 	msr	BASEPRI, r4
  tp->flags     = CH_FLAG_MODE_STATIC;
 8007f78:	2401      	movs	r4, #1
  tp->mtxlist   = NULL;
 8007f7a:	2500      	movs	r5, #0
  tp->state     = CH_STATE_WTSTART;
 8007f7c:	2702      	movs	r7, #2
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8007f7e:	e9c0 2337 	strd	r2, r3, [r0, #220]	; 0xdc
 8007f82:	f100 03dc 	add.w	r3, r0, #220	; 0xdc
  REG_INSERT(tp);
 8007f86:	4e19      	ldr	r6, [pc, #100]	; (8007fec <chThdCreateStatic.constprop.89+0x7c>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8007f88:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8007f8c:	4b18      	ldr	r3, [pc, #96]	; (8007ff0 <chThdCreateStatic.constprop.89+0x80>)
  tp->name      = name;
 8007f8e:	4a19      	ldr	r2, [pc, #100]	; (8007ff4 <chThdCreateStatic.constprop.89+0x84>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8007f90:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
  REG_INSERT(tp);
 8007f94:	6973      	ldr	r3, [r6, #20]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8007f96:	f880 4122 	strb.w	r4, [r0, #290]	; 0x122
  tp = (thread_t *)((uint8_t *)wsp + size -
 8007f9a:	f500 7480 	add.w	r4, r0, #256	; 0x100
  tp->prio      = prio;
 8007f9e:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
  tp->realprio  = prio;
 8007fa2:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
  tp->state     = CH_STATE_WTSTART;
 8007fa6:	f8a0 7120 	strh.w	r7, [r0, #288]	; 0x120
  tp->name      = name;
 8007faa:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
  tp->mtxlist   = NULL;
 8007fae:	f8c0 5138 	str.w	r5, [r0, #312]	; 0x138
  list_init(&tp->waiting);
 8007fb2:	f500 7294 	add.w	r2, r0, #296	; 0x128
  tp->epending  = (eventmask_t)0;
 8007fb6:	f8c0 5134 	str.w	r5, [r0, #308]	; 0x134
  REG_INSERT(tp);
 8007fba:	f8c0 6110 	str.w	r6, [r0, #272]	; 0x110
 8007fbe:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
  tp->wabase = (stkalign_t *)wsp;
 8007fc2:	f8c0 011c 	str.w	r0, [r0, #284]	; 0x11c
  REG_INSERT(tp);
 8007fc6:	611c      	str	r4, [r3, #16]
  queue_init(&tp->msgqueue);
 8007fc8:	f500 7396 	add.w	r3, r0, #300	; 0x12c
  tlp->next = (thread_t *)tlp;
 8007fcc:	f8c0 2128 	str.w	r2, [r0, #296]	; 0x128
  tqp->next = (thread_t *)tqp;
 8007fd0:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
 8007fd4:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
  chSchWakeupS(tp, MSG_OK);
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4620      	mov	r0, r4
  REG_INSERT(tp);
 8007fdc:	6174      	str	r4, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 8007fde:	f7ff ff97 	bl	8007f10 <chSchWakeupS>
 8007fe2:	f385 8811 	msr	BASEPRI, r5
}
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20001eb0 	.word	0x20001eb0
 8007ff0:	08005251 	.word	0x08005251
 8007ff4:	0800e5f8 	.word	0x0800e5f8
	...

08008000 <chCondSignal.constprop.78>:
void chCondSignal(condition_variable_t *cp) {
 8008000:	b508      	push	{r3, lr}
 8008002:	2320      	movs	r3, #32
 8008004:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8008008:	4b06      	ldr	r3, [pc, #24]	; (8008024 <chCondSignal.constprop.78+0x24>)
 800800a:	6818      	ldr	r0, [r3, #0]
  if (queue_notempty(&cp->queue)) {
 800800c:	4298      	cmp	r0, r3
 800800e:	d005      	beq.n	800801c <chCondSignal.constprop.78+0x1c>
  tqp->next             = tp->queue.next;
 8008010:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 8008012:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8008014:	6053      	str	r3, [r2, #4]
  tqp->next             = tp->queue.next;
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	f7ff ff7a 	bl	8007f10 <chSchWakeupS>
 800801c:	2300      	movs	r3, #0
 800801e:	f383 8811 	msr	BASEPRI, r3
}
 8008022:	bd08      	pop	{r3, pc}
 8008024:	20001804 	.word	0x20001804
	...

08008030 <chThdCreateFromMemoryPool.constprop.59>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8008030:	b5f0      	push	{r4, r5, r6, r7, lr}
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8008032:	4d14      	ldr	r5, [pc, #80]	; (8008084 <chThdCreateFromMemoryPool.constprop.59+0x54>)
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8008034:	b087      	sub	sp, #28
 8008036:	4607      	mov	r7, r0
  wsp = chPoolAlloc(mp);
 8008038:	4628      	mov	r0, r5
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 800803a:	460e      	mov	r6, r1
 800803c:	4614      	mov	r4, r2
  wsp = chPoolAlloc(mp);
 800803e:	f7fe fb67 	bl	8006710 <chPoolAlloc>
  if (wsp == NULL) {
 8008042:	b1e0      	cbz	r0, 800807e <chThdCreateFromMemoryPool.constprop.59+0x4e>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8008044:	686b      	ldr	r3, [r5, #4]
  thread_descriptor_t td = {
 8008046:	4a10      	ldr	r2, [pc, #64]	; (8008088 <chThdCreateFromMemoryPool.constprop.59+0x58>)
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8008048:	4403      	add	r3, r0
  thread_descriptor_t td = {
 800804a:	9302      	str	r3, [sp, #8]
 800804c:	9700      	str	r7, [sp, #0]
 800804e:	9001      	str	r0, [sp, #4]
 8008050:	9603      	str	r6, [sp, #12]
 8008052:	9405      	str	r4, [sp, #20]
 8008054:	9204      	str	r2, [sp, #16]
 8008056:	2320      	movs	r3, #32
 8008058:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800805c:	4668      	mov	r0, sp
 800805e:	f7fe fc9f 	bl	80069a0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 8008062:	2302      	movs	r3, #2
  tp->mpool = mp;
 8008064:	6405      	str	r5, [r0, #64]	; 0x40
  tp->flags = CH_FLAG_MODE_MPOOL;
 8008066:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
 800806a:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 800806c:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800806e:	f7ff ff4f 	bl	8007f10 <chSchWakeupS>
 8008072:	2300      	movs	r3, #0
 8008074:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8008078:	4620      	mov	r0, r4
 800807a:	b007      	add	sp, #28
 800807c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 800807e:	4604      	mov	r4, r0
 8008080:	e7fa      	b.n	8008078 <chThdCreateFromMemoryPool.constprop.59+0x48>
 8008082:	bf00      	nop
 8008084:	200020d8 	.word	0x200020d8
 8008088:	08005af1 	.word	0x08005af1
 800808c:	00000000 	.word	0x00000000

08008090 <chSemSignal>:
void chSemSignal(semaphore_t *sp) {
 8008090:	b508      	push	{r3, lr}
 8008092:	2320      	movs	r3, #32
 8008094:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 8008098:	6883      	ldr	r3, [r0, #8]
 800809a:	3301      	adds	r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	6083      	str	r3, [r0, #8]
 80080a0:	dd03      	ble.n	80080aa <chSemSignal+0x1a>
 80080a2:	2300      	movs	r3, #0
 80080a4:	f383 8811 	msr	BASEPRI, r3
}
 80080a8:	bd08      	pop	{r3, pc}
 80080aa:	4603      	mov	r3, r0
  thread_t *tp = tqp->next;
 80080ac:	6800      	ldr	r0, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 80080ae:	2100      	movs	r1, #0
  tqp->next             = tp->queue.next;
 80080b0:	6802      	ldr	r2, [r0, #0]
 80080b2:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80080b4:	6053      	str	r3, [r2, #4]
 80080b6:	f7ff ff2b 	bl	8007f10 <chSchWakeupS>
 80080ba:	2300      	movs	r3, #0
 80080bc:	f383 8811 	msr	BASEPRI, r3
}
 80080c0:	bd08      	pop	{r3, pc}
 80080c2:	bf00      	nop
	...

080080d0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 80080d0:	b430      	push	{r4, r5}
  currp->state = CH_STATE_CURRENT;
 80080d2:	2501      	movs	r5, #1
  thread_t *otp = currp;
 80080d4:	4b07      	ldr	r3, [pc, #28]	; (80080f4 <chSchGoSleepS+0x24>)
 80080d6:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 80080d8:	681a      	ldr	r2, [r3, #0]
  otp->state = newstate;
 80080da:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 80080de:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
 80080e0:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
 80080e2:	6063      	str	r3, [r4, #4]
  currp->state = CH_STATE_CURRENT;
 80080e4:	f882 5020 	strb.w	r5, [r2, #32]
  tqp->next             = tp->queue.next;
 80080e8:	601c      	str	r4, [r3, #0]
}
 80080ea:	bc30      	pop	{r4, r5}
  currp = queue_fifo_remove(&ch.rlist.queue);
 80080ec:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 80080ee:	f7fd b8a7 	b.w	8005240 <_port_switch>
 80080f2:	bf00      	nop
 80080f4:	20001eb0 	.word	0x20001eb0
	...

08008100 <chEvtWaitOne.constprop.66>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8008100:	4a0b      	ldr	r2, [pc, #44]	; (8008130 <chEvtWaitOne.constprop.66+0x30>)
eventmask_t chEvtWaitOne(eventmask_t events) {
 8008102:	b510      	push	{r4, lr}
 8008104:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8008106:	6994      	ldr	r4, [r2, #24]
 8008108:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800810c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800810e:	b933      	cbnz	r3, 800811e <chEvtWaitOne.constprop.66+0x1e>
    ctp->u.ewmask = events;
 8008110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    chSchGoSleepS(CH_STATE_WTOREVT);
 8008114:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 8008116:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8008118:	f7ff ffda 	bl	80080d0 <chSchGoSleepS>
    m = ctp->epending & events;
 800811c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 800811e:	4258      	negs	r0, r3
 8008120:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 8008122:	ea23 0300 	bic.w	r3, r3, r0
 8008126:	6363      	str	r3, [r4, #52]	; 0x34
 8008128:	2300      	movs	r3, #0
 800812a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800812e:	bd10      	pop	{r4, pc}
 8008130:	20001eb0 	.word	0x20001eb0
	...

08008140 <chEvtWaitAny.constprop.65>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8008140:	4a09      	ldr	r2, [pc, #36]	; (8008168 <chEvtWaitAny.constprop.65+0x28>)
eventmask_t chEvtWaitAny(eventmask_t events) {
 8008142:	b510      	push	{r4, lr}
 8008144:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8008146:	6994      	ldr	r4, [r2, #24]
 8008148:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800814c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800814e:	b930      	cbnz	r0, 800815e <chEvtWaitAny.constprop.65+0x1e>
    ctp->u.ewmask = events;
 8008150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    chSchGoSleepS(CH_STATE_WTOREVT);
 8008154:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 8008156:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8008158:	f7ff ffba 	bl	80080d0 <chSchGoSleepS>
    m = ctp->epending & events;
 800815c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->epending &= ~m;
 800815e:	2300      	movs	r3, #0
 8008160:	6363      	str	r3, [r4, #52]	; 0x34
 8008162:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8008166:	bd10      	pop	{r4, pc}
 8008168:	20001eb0 	.word	0x20001eb0
 800816c:	00000000 	.word	0x00000000

08008170 <chEvtWaitAll.constprop.64>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8008170:	4a0c      	ldr	r2, [pc, #48]	; (80081a4 <chEvtWaitAll.constprop.64+0x34>)
eventmask_t chEvtWaitAll(eventmask_t events) {
 8008172:	b510      	push	{r4, lr}
 8008174:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8008176:	6994      	ldr	r4, [r2, #24]
 8008178:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->epending & events) != events) {
 800817c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800817e:	f003 0205 	and.w	r2, r3, #5
 8008182:	2a05      	cmp	r2, #5
 8008184:	d005      	beq.n	8008192 <chEvtWaitAll.constprop.64+0x22>
    ctp->u.ewmask = events;
 8008186:	2305      	movs	r3, #5
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8008188:	200b      	movs	r0, #11
    ctp->u.ewmask = events;
 800818a:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 800818c:	f7ff ffa0 	bl	80080d0 <chSchGoSleepS>
 8008190:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->epending &= ~events;
 8008192:	f023 0305 	bic.w	r3, r3, #5
 8008196:	6363      	str	r3, [r4, #52]	; 0x34
 8008198:	2300      	movs	r3, #0
 800819a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 800819e:	2005      	movs	r0, #5
 80081a0:	bd10      	pop	{r4, pc}
 80081a2:	bf00      	nop
 80081a4:	20001eb0 	.word	0x20001eb0
	...

080081b0 <bmk_thread4>:
  return ch.rlist.current;
 80081b0:	4a07      	ldr	r2, [pc, #28]	; (80081d0 <bmk_thread4+0x20>)
static THD_FUNCTION(bmk_thread4, p) {
 80081b2:	b510      	push	{r4, lr}
 80081b4:	2320      	movs	r3, #32
 80081b6:	6994      	ldr	r4, [r2, #24]
 80081b8:	f383 8811 	msr	BASEPRI, r3
    chSchGoSleepS(CH_STATE_SUSPENDED);
 80081bc:	2003      	movs	r0, #3
 80081be:	f7ff ff87 	bl	80080d0 <chSchGoSleepS>
  } while (msg == MSG_OK);
 80081c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d0f9      	beq.n	80081bc <bmk_thread4+0xc>
 80081c8:	2300      	movs	r3, #0
 80081ca:	f383 8811 	msr	BASEPRI, r3
}
 80081ce:	bd10      	pop	{r4, pc}
 80081d0:	20001eb0 	.word	0x20001eb0
	...

080081e0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80081e0:	b530      	push	{r4, r5, lr}
  if (TIME_INFINITE != timeout) {
 80081e2:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80081e4:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 80081e6:	d012      	beq.n	800820e <chSchGoSleepTimeoutS+0x2e>
 80081e8:	4605      	mov	r5, r0
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80081ea:	4c0c      	ldr	r4, [pc, #48]	; (800821c <chSchGoSleepTimeoutS+0x3c>)
 80081ec:	a801      	add	r0, sp, #4
 80081ee:	69a3      	ldr	r3, [r4, #24]
 80081f0:	4a0b      	ldr	r2, [pc, #44]	; (8008220 <chSchGoSleepTimeoutS+0x40>)
 80081f2:	f7fe fe5d 	bl	8006eb0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 80081f6:	4628      	mov	r0, r5
 80081f8:	f7ff ff6a 	bl	80080d0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80081fc:	9b04      	ldr	r3, [sp, #16]
 80081fe:	b113      	cbz	r3, 8008206 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8008200:	a801      	add	r0, sp, #4
 8008202:	f7fe fe0d 	bl	8006e20 <chVTDoResetI>
  return currp->u.rdymsg;
 8008206:	69a3      	ldr	r3, [r4, #24]
}
 8008208:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800820a:	b007      	add	sp, #28
 800820c:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
 800820e:	f7ff ff5f 	bl	80080d0 <chSchGoSleepS>
 8008212:	4c02      	ldr	r4, [pc, #8]	; (800821c <chSchGoSleepTimeoutS+0x3c>)
  return currp->u.rdymsg;
 8008214:	69a3      	ldr	r3, [r4, #24]
}
 8008216:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008218:	b007      	add	sp, #28
 800821a:	bd30      	pop	{r4, r5, pc}
 800821c:	20001eb0 	.word	0x20001eb0
 8008220:	08006a21 	.word	0x08006a21
	...

08008230 <chSemWaitTimeout.constprop.85>:
 8008230:	2320      	movs	r3, #32
 8008232:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8008236:	4b10      	ldr	r3, [pc, #64]	; (8008278 <chSemWaitTimeout.constprop.85+0x48>)
 8008238:	6899      	ldr	r1, [r3, #8]
 800823a:	1e4a      	subs	r2, r1, #1
 800823c:	2a00      	cmp	r2, #0
 800823e:	609a      	str	r2, [r3, #8]
 8008240:	db04      	blt.n	800824c <chSemWaitTimeout.constprop.85+0x1c>
  return MSG_OK;
 8008242:	2000      	movs	r0, #0
 8008244:	2300      	movs	r3, #0
 8008246:	f383 8811 	msr	BASEPRI, r3
}
 800824a:	4770      	bx	lr
    if (TIME_IMMEDIATE == timeout) {
 800824c:	b180      	cbz	r0, 8008270 <chSemWaitTimeout.constprop.85+0x40>
    currp->u.wtsemp = sp;
 800824e:	4a0b      	ldr	r2, [pc, #44]	; (800827c <chSemWaitTimeout.constprop.85+0x4c>)
msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 8008250:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 8008252:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8008254:	685c      	ldr	r4, [r3, #4]
 8008256:	6253      	str	r3, [r2, #36]	; 0x24
 8008258:	e9c2 3400 	strd	r3, r4, [r2]
 800825c:	4601      	mov	r1, r0
  tp->queue.prev->queue.next = tp;
 800825e:	6022      	str	r2, [r4, #0]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8008260:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8008262:	605a      	str	r2, [r3, #4]
 8008264:	f7ff ffbc 	bl	80081e0 <chSchGoSleepTimeoutS>
 8008268:	2300      	movs	r3, #0
 800826a:	f383 8811 	msr	BASEPRI, r3
}
 800826e:	bd10      	pop	{r4, pc}
      sp->cnt++;
 8008270:	6099      	str	r1, [r3, #8]
      return MSG_TIMEOUT;
 8008272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008276:	e7e5      	b.n	8008244 <chSemWaitTimeout.constprop.85+0x14>
 8008278:	20002108 	.word	0x20002108
 800827c:	20001eb0 	.word	0x20001eb0

08008280 <chGuardedPoolAllocTimeout.constprop.43>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 8008280:	b510      	push	{r4, lr}
 8008282:	2320      	movs	r3, #32
 8008284:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8008288:	4c15      	ldr	r4, [pc, #84]	; (80082e0 <chGuardedPoolAllocTimeout.constprop.43+0x60>)
 800828a:	68a2      	ldr	r2, [r4, #8]
 800828c:	1e53      	subs	r3, r2, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	60a3      	str	r3, [r4, #8]
 8008292:	db07      	blt.n	80082a4 <chGuardedPoolAllocTimeout.constprop.43+0x24>
  objp = mp->next;
 8008294:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 8008296:	b1b0      	cbz	r0, 80082c6 <chGuardedPoolAllocTimeout.constprop.43+0x46>
    mp->next = mp->next->next;
 8008298:	6803      	ldr	r3, [r0, #0]
 800829a:	60e3      	str	r3, [r4, #12]
 800829c:	2300      	movs	r3, #0
 800829e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 80082a2:	bd10      	pop	{r4, pc}
    if (TIME_IMMEDIATE == timeout) {
 80082a4:	b1c8      	cbz	r0, 80082da <chGuardedPoolAllocTimeout.constprop.43+0x5a>
    currp->u.wtsemp = sp;
 80082a6:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <chGuardedPoolAllocTimeout.constprop.43+0x64>)
  tp->queue.prev             = tqp->prev;
 80082a8:	6862      	ldr	r2, [r4, #4]
 80082aa:	699b      	ldr	r3, [r3, #24]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 80082ac:	4601      	mov	r1, r0
 80082ae:	e9c3 4200 	strd	r4, r2, [r3]
    currp->u.wtsemp = sp;
 80082b2:	625c      	str	r4, [r3, #36]	; 0x24
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 80082b4:	2005      	movs	r0, #5
  tp->queue.prev->queue.next = tp;
 80082b6:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 80082b8:	6063      	str	r3, [r4, #4]
 80082ba:	f7ff ff91 	bl	80081e0 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 80082be:	2800      	cmp	r0, #0
 80082c0:	d0e8      	beq.n	8008294 <chGuardedPoolAllocTimeout.constprop.43+0x14>
    return NULL;
 80082c2:	2000      	movs	r0, #0
 80082c4:	e7ea      	b.n	800829c <chGuardedPoolAllocTimeout.constprop.43+0x1c>
  else if (mp->provider != NULL) {
 80082c6:	69a3      	ldr	r3, [r4, #24]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d0fa      	beq.n	80082c2 <chGuardedPoolAllocTimeout.constprop.43+0x42>
    objp = mp->provider(mp->object_size, mp->align);
 80082cc:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80082d0:	4798      	blx	r3
 80082d2:	2300      	movs	r3, #0
 80082d4:	f383 8811 	msr	BASEPRI, r3
}
 80082d8:	bd10      	pop	{r4, pc}
      sp->cnt++;
 80082da:	60a2      	str	r2, [r4, #8]
 80082dc:	e7de      	b.n	800829c <chGuardedPoolAllocTimeout.constprop.43+0x1c>
 80082de:	bf00      	nop
 80082e0:	20001814 	.word	0x20001814
 80082e4:	20001eb0 	.word	0x20001eb0
	...

080082f0 <oslib_test_002_003_execute>:

static void oslib_test_002_003_execute(void) {

  /* [2.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 80082f0:	2201      	movs	r2, #1
static void oslib_test_002_003_execute(void) {
 80082f2:	b508      	push	{r3, lr}
  test_set_step(1);
 80082f4:	4b06      	ldr	r3, [pc, #24]	; (8008310 <oslib_test_002_003_execute+0x20>)
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80082f6:	20c8      	movs	r0, #200	; 0xc8
  test_set_step(1);
 80082f8:	601a      	str	r2, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80082fa:	f7ff ffc1 	bl	8008280 <chGuardedPoolAllocTimeout.constprop.43>
  }
}
 80082fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8008302:	fab0 f080 	clz	r0, r0
 8008306:	4903      	ldr	r1, [pc, #12]	; (8008314 <oslib_test_002_003_execute+0x24>)
 8008308:	0940      	lsrs	r0, r0, #5
 800830a:	f7fd bb19 	b.w	8005940 <_test_assert>
 800830e:	bf00      	nop
 8008310:	2000283c 	.word	0x2000283c
 8008314:	0800eadc 	.word	0x0800eadc
	...

08008320 <rt_test_008_006_execute>:
  test_set_step(1);
 8008320:	2001      	movs	r0, #1
static void rt_test_008_006_execute(void) {
 8008322:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8008324:	4d55      	ldr	r5, [pc, #340]	; (800847c <rt_test_008_006_execute+0x15c>)
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8008326:	4c56      	ldr	r4, [pc, #344]	; (8008480 <rt_test_008_006_execute+0x160>)
 8008328:	6028      	str	r0, [r5, #0]
 800832a:	69a2      	ldr	r2, [r4, #24]
 800832c:	2320      	movs	r3, #32
 800832e:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8008332:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8008334:	b933      	cbnz	r3, 8008344 <rt_test_008_006_execute+0x24>
 8008336:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 800833a:	4952      	ldr	r1, [pc, #328]	; (8008484 <rt_test_008_006_execute+0x164>)
 800833c:	f7fd fb00 	bl	8005940 <_test_assert>
 8008340:	b180      	cbz	r0, 8008364 <rt_test_008_006_execute+0x44>
}
 8008342:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8008344:	4258      	negs	r0, r3
 8008346:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 8008348:	ea23 0300 	bic.w	r3, r3, r0
 800834c:	6353      	str	r3, [r2, #52]	; 0x34
 800834e:	2300      	movs	r3, #0
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	fab0 f080 	clz	r0, r0
    test_assert(m == 0, "spurious event");
 8008358:	494a      	ldr	r1, [pc, #296]	; (8008484 <rt_test_008_006_execute+0x164>)
 800835a:	0940      	lsrs	r0, r0, #5
 800835c:	f7fd faf0 	bl	8005940 <_test_assert>
 8008360:	2800      	cmp	r0, #0
 8008362:	d1ee      	bne.n	8008342 <rt_test_008_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8008364:	69a3      	ldr	r3, [r4, #24]
 8008366:	2220      	movs	r2, #32
 8008368:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 800836c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800836e:	2a00      	cmp	r2, #0
 8008370:	d06f      	beq.n	8008452 <rt_test_008_006_execute+0x132>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 8008372:	6358      	str	r0, [r3, #52]	; 0x34
 8008374:	f380 8811 	msr	BASEPRI, r0
    test_assert(m == 0, "spurious event");
 8008378:	4942      	ldr	r1, [pc, #264]	; (8008484 <rt_test_008_006_execute+0x164>)
 800837a:	f7fd fae1 	bl	8005940 <_test_assert>
 800837e:	2800      	cmp	r0, #0
 8008380:	d1df      	bne.n	8008342 <rt_test_008_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8008382:	69a3      	ldr	r3, [r4, #24]
 8008384:	2220      	movs	r2, #32
 8008386:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->epending & events) != events) {
 800838a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800838c:	3201      	adds	r2, #1
 800838e:	d064      	beq.n	800845a <rt_test_008_006_execute+0x13a>
 8008390:	f380 8811 	msr	BASEPRI, r0
 8008394:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 8008396:	493b      	ldr	r1, [pc, #236]	; (8008484 <rt_test_008_006_execute+0x164>)
 8008398:	f7fd fad2 	bl	8005940 <_test_assert>
 800839c:	2800      	cmp	r0, #0
 800839e:	d1d0      	bne.n	8008342 <rt_test_008_006_execute+0x22>
  test_set_step(2);
 80083a0:	2302      	movs	r3, #2
  thread_t *ctp = currp;
 80083a2:	69a6      	ldr	r6, [r4, #24]
 80083a4:	602b      	str	r3, [r5, #0]
 80083a6:	2320      	movs	r3, #32
 80083a8:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 80083ac:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80083ae:	b94d      	cbnz	r5, 80083c4 <rt_test_008_006_execute+0xa4>
    ctp->u.ewmask = events;
 80083b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 80083b4:	2164      	movs	r1, #100	; 0x64
    ctp->u.ewmask = events;
 80083b6:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 80083b8:	200a      	movs	r0, #10
 80083ba:	f7ff ff11 	bl	80081e0 <chSchGoSleepTimeoutS>
 80083be:	2800      	cmp	r0, #0
 80083c0:	db4f      	blt.n	8008462 <rt_test_008_006_execute+0x142>
    m = ctp->epending & events;
 80083c2:	6b75      	ldr	r5, [r6, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 80083c4:	4268      	negs	r0, r5
 80083c6:	4028      	ands	r0, r5
  ctp->epending &= ~m;
 80083c8:	ea25 0500 	bic.w	r5, r5, r0
 80083cc:	6375      	str	r5, [r6, #52]	; 0x34
 80083ce:	2300      	movs	r3, #0
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	fab0 f080 	clz	r0, r0
 80083d8:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 80083da:	492a      	ldr	r1, [pc, #168]	; (8008484 <rt_test_008_006_execute+0x164>)
 80083dc:	f7fd fab0 	bl	8005940 <_test_assert>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d1ae      	bne.n	8008342 <rt_test_008_006_execute+0x22>
  thread_t *ctp = currp;
 80083e4:	69a6      	ldr	r6, [r4, #24]
 80083e6:	2320      	movs	r3, #32
 80083e8:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 80083ec:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80083ee:	b94d      	cbnz	r5, 8008404 <rt_test_008_006_execute+0xe4>
    ctp->u.ewmask = events;
 80083f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 80083f4:	2164      	movs	r1, #100	; 0x64
    ctp->u.ewmask = events;
 80083f6:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 80083f8:	200a      	movs	r0, #10
 80083fa:	f7ff fef1 	bl	80081e0 <chSchGoSleepTimeoutS>
 80083fe:	2800      	cmp	r0, #0
 8008400:	db33      	blt.n	800846a <rt_test_008_006_execute+0x14a>
    m = ctp->epending & events;
 8008402:	6b75      	ldr	r5, [r6, #52]	; 0x34
  ctp->epending &= ~m;
 8008404:	2300      	movs	r3, #0
 8008406:	6373      	str	r3, [r6, #52]	; 0x34
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	fab5 f085 	clz	r0, r5
 8008410:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 8008412:	491c      	ldr	r1, [pc, #112]	; (8008484 <rt_test_008_006_execute+0x164>)
 8008414:	f7fd fa94 	bl	8005940 <_test_assert>
 8008418:	4605      	mov	r5, r0
 800841a:	2800      	cmp	r0, #0
 800841c:	d191      	bne.n	8008342 <rt_test_008_006_execute+0x22>
  thread_t *ctp = currp;
 800841e:	69a4      	ldr	r4, [r4, #24]
 8008420:	2320      	movs	r3, #32
 8008422:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
 8008426:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008428:	3301      	adds	r3, #1
 800842a:	d008      	beq.n	800843e <rt_test_008_006_execute+0x11e>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 800842c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8008430:	2164      	movs	r1, #100	; 0x64
    ctp->u.ewmask = events;
 8008432:	6263      	str	r3, [r4, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8008434:	200b      	movs	r0, #11
 8008436:	f7ff fed3 	bl	80081e0 <chSchGoSleepTimeoutS>
 800843a:	2800      	cmp	r0, #0
 800843c:	db19      	blt.n	8008472 <rt_test_008_006_execute+0x152>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 800843e:	2300      	movs	r3, #0
 8008440:	6363      	str	r3, [r4, #52]	; 0x34
 8008442:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 8008446:	4628      	mov	r0, r5
}
 8008448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(m == 0, "spurious event");
 800844c:	490d      	ldr	r1, [pc, #52]	; (8008484 <rt_test_008_006_execute+0x164>)
 800844e:	f7fd ba77 	b.w	8005940 <_test_assert>
 8008452:	f382 8811 	msr	BASEPRI, r2
 8008456:	2001      	movs	r0, #1
 8008458:	e78e      	b.n	8008378 <rt_test_008_006_execute+0x58>
 800845a:	6358      	str	r0, [r3, #52]	; 0x34
 800845c:	f380 8811 	msr	BASEPRI, r0
 8008460:	e799      	b.n	8008396 <rt_test_008_006_execute+0x76>
 8008462:	f385 8811 	msr	BASEPRI, r5
 8008466:	2001      	movs	r0, #1
 8008468:	e7b7      	b.n	80083da <rt_test_008_006_execute+0xba>
 800846a:	f385 8811 	msr	BASEPRI, r5
 800846e:	2001      	movs	r0, #1
 8008470:	e7cf      	b.n	8008412 <rt_test_008_006_execute+0xf2>
 8008472:	f385 8811 	msr	BASEPRI, r5
 8008476:	2501      	movs	r5, #1
 8008478:	e7e5      	b.n	8008446 <rt_test_008_006_execute+0x126>
 800847a:	bf00      	nop
 800847c:	2000283c 	.word	0x2000283c
 8008480:	20001eb0 	.word	0x20001eb0
 8008484:	0800fc00 	.word	0x0800fc00
	...

08008490 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8008490:	b161      	cbz	r1, 80084ac <chThdEnqueueTimeoutS+0x1c>
 8008492:	4602      	mov	r2, r0
  queue_insert(currp, tqp);
 8008494:	4b07      	ldr	r3, [pc, #28]	; (80084b4 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8008496:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8008498:	699b      	ldr	r3, [r3, #24]
  tp->queue.prev             = tqp->prev;
 800849a:	6844      	ldr	r4, [r0, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800849c:	2004      	movs	r0, #4
 800849e:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
 80084a2:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 80084a4:	6053      	str	r3, [r2, #4]
}
 80084a6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80084a8:	f7ff be9a 	b.w	80081e0 <chSchGoSleepTimeoutS>
}
 80084ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	20001eb0 	.word	0x20001eb0
	...

080084c0 <obqGetEmptyBufferTimeoutS>:
                                sysinterval_t timeout) {
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4604      	mov	r4, r0
 80084c4:	460d      	mov	r5, r1
 80084c6:	e007      	b.n	80084d8 <obqGetEmptyBufferTimeoutS+0x18>
    if (obqp->suspended) {
 80084c8:	7a23      	ldrb	r3, [r4, #8]
 80084ca:	b983      	cbnz	r3, 80084ee <obqGetEmptyBufferTimeoutS+0x2e>
  return chThdEnqueueTimeoutS(tqp, timeout);
 80084cc:	4629      	mov	r1, r5
 80084ce:	4620      	mov	r0, r4
 80084d0:	f7ff ffde 	bl	8008490 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80084d4:	2800      	cmp	r0, #0
 80084d6:	db09      	blt.n	80084ec <obqGetEmptyBufferTimeoutS+0x2c>
  while (obqIsFullI(obqp)) {
 80084d8:	68e3      	ldr	r3, [r4, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d0f4      	beq.n	80084c8 <obqGetEmptyBufferTimeoutS+0x8>
  obqp->top = obqp->bwrptr + obqp->bsize;
 80084de:	2000      	movs	r0, #0
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 80084e0:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 80084e2:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 80084e4:	1d1a      	adds	r2, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 80084e6:	440b      	add	r3, r1
 80084e8:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
}
 80084ec:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 80084ee:	f06f 0001 	mvn.w	r0, #1
}
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
	...

08008500 <obqWriteTimeout>:
                       size_t n, sysinterval_t timeout) {
 8008500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	4699      	mov	r9, r3
 8008506:	b083      	sub	sp, #12
 8008508:	4605      	mov	r5, r0
 800850a:	460e      	mov	r6, r1
 800850c:	4617      	mov	r7, r2
 800850e:	2320      	movs	r3, #32
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  size_t w = 0;
 8008518:	f04f 0b00 	mov.w	fp, #0
 800851c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    if (obqp->ptr == NULL) {
 800851e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8008520:	444a      	add	r2, r9
 8008522:	b293      	uxth	r3, r2
  obqp->ptr = NULL;
 8008524:	46d8      	mov	r8, fp
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8008526:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
 800852a:	9301      	str	r3, [sp, #4]
    if (obqp->ptr == NULL) {
 800852c:	2800      	cmp	r0, #0
 800852e:	d041      	beq.n	80085b4 <obqWriteTimeout+0xb4>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8008530:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    if (size > (n - w)) {
 8008532:	eba7 040b 	sub.w	r4, r7, fp
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8008536:	1a12      	subs	r2, r2, r0
 8008538:	4294      	cmp	r4, r2
 800853a:	bf28      	it	cs
 800853c:	4614      	movcs	r4, r2
    if (size > 64U) {
 800853e:	2c40      	cmp	r4, #64	; 0x40
 8008540:	d949      	bls.n	80085d6 <obqWriteTimeout+0xd6>
      memcpy(obqp->ptr, bp, 64U);
 8008542:	f106 0240 	add.w	r2, r6, #64	; 0x40
 8008546:	f8d6 c000 	ldr.w	ip, [r6]
 800854a:	6874      	ldr	r4, [r6, #4]
 800854c:	68b1      	ldr	r1, [r6, #8]
 800854e:	68f3      	ldr	r3, [r6, #12]
 8008550:	3610      	adds	r6, #16
 8008552:	4296      	cmp	r6, r2
 8008554:	f8c0 c000 	str.w	ip, [r0]
 8008558:	6044      	str	r4, [r0, #4]
 800855a:	6081      	str	r1, [r0, #8]
 800855c:	60c3      	str	r3, [r0, #12]
 800855e:	f100 0010 	add.w	r0, r0, #16
 8008562:	d1f0      	bne.n	8008546 <obqWriteTimeout+0x46>
      obqp->ptr += 64U;
 8008564:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      w         += 64U;
 8008566:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
      obqp->ptr += 64U;
 800856a:	3240      	adds	r2, #64	; 0x40
 800856c:	62aa      	str	r2, [r5, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 800856e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8008570:	4291      	cmp	r1, r2
 8008572:	d815      	bhi.n	80085a0 <obqWriteTimeout+0xa0>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8008574:	69e9      	ldr	r1, [r5, #28]
  *((size_t *)obqp->bwrptr) = size;
 8008576:	692a      	ldr	r2, [r5, #16]
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8008578:	3904      	subs	r1, #4
  *((size_t *)obqp->bwrptr) = size;
 800857a:	6011      	str	r1, [r2, #0]
  obqp->bwrptr += obqp->bsize;
 800857c:	69ec      	ldr	r4, [r5, #28]
  if (obqp->bwrptr >= obqp->btop) {
 800857e:	69a9      	ldr	r1, [r5, #24]
  obqp->bwrptr += obqp->bsize;
 8008580:	4422      	add	r2, r4
  if (obqp->bwrptr >= obqp->btop) {
 8008582:	428a      	cmp	r2, r1
  obqp->bwrptr += obqp->bsize;
 8008584:	612a      	str	r2, [r5, #16]
    obqp->bwrptr = obqp->buffers;
 8008586:	bf28      	it	cs
 8008588:	6a6a      	ldrcs	r2, [r5, #36]	; 0x24
  obqp->bcounter--;
 800858a:	68e8      	ldr	r0, [r5, #12]
    obqp->bwrptr = obqp->buffers;
 800858c:	bf28      	it	cs
 800858e:	612a      	strcs	r2, [r5, #16]
  if (obqp->notify != NULL) {
 8008590:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  obqp->bcounter--;
 8008592:	3801      	subs	r0, #1
 8008594:	60e8      	str	r0, [r5, #12]
  obqp->ptr = NULL;
 8008596:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  if (obqp->notify != NULL) {
 800859a:	b10a      	cbz	r2, 80085a0 <obqWriteTimeout+0xa0>
    obqp->notify(obqp);
 800859c:	4628      	mov	r0, r5
 800859e:	4790      	blx	r2
 80085a0:	f388 8811 	msr	BASEPRI, r8
    if (w >= n) {
 80085a4:	45bb      	cmp	fp, r7
 80085a6:	d229      	bcs.n	80085fc <obqWriteTimeout+0xfc>
 80085a8:	2220      	movs	r2, #32
 80085aa:	f382 8811 	msr	BASEPRI, r2
    if (obqp->ptr == NULL) {
 80085ae:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d1bd      	bne.n	8008530 <obqWriteTimeout+0x30>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80085b4:	f11a 0f03 	cmn.w	sl, #3
 80085b8:	d817      	bhi.n	80085ea <obqWriteTimeout+0xea>
 80085ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085be:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80085c0:	9b01      	ldr	r3, [sp, #4]
 80085c2:	1a59      	subs	r1, r3, r1
 80085c4:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
 80085c6:	4589      	cmp	r9, r1
 80085c8:	d31c      	bcc.n	8008604 <obqWriteTimeout+0x104>
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 80085ca:	4628      	mov	r0, r5
 80085cc:	f7ff ff78 	bl	80084c0 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 80085d0:	b988      	cbnz	r0, 80085f6 <obqWriteTimeout+0xf6>
 80085d2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80085d4:	e7ac      	b.n	8008530 <obqWriteTimeout+0x30>
      memcpy(obqp->ptr, bp, size);
 80085d6:	4622      	mov	r2, r4
 80085d8:	4631      	mov	r1, r6
 80085da:	f7fc fe45 	bl	8005268 <memcpy>
      obqp->ptr += size;
 80085de:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      w         += size;
 80085e0:	44a3      	add	fp, r4
      obqp->ptr += size;
 80085e2:	4422      	add	r2, r4
      bp        += size;
 80085e4:	4426      	add	r6, r4
      obqp->ptr += size;
 80085e6:	62aa      	str	r2, [r5, #40]	; 0x28
 80085e8:	e7c1      	b.n	800856e <obqWriteTimeout+0x6e>
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 80085ea:	4649      	mov	r1, r9
 80085ec:	4628      	mov	r0, r5
 80085ee:	f7ff ff67 	bl	80084c0 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 80085f2:	2800      	cmp	r0, #0
 80085f4:	d0ed      	beq.n	80085d2 <obqWriteTimeout+0xd2>
 80085f6:	2200      	movs	r2, #0
 80085f8:	f382 8811 	msr	BASEPRI, r2
}
 80085fc:	4658      	mov	r0, fp
 80085fe:	b003      	add	sp, #12
 8008600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008604:	f380 8811 	msr	BASEPRI, r0
 8008608:	4658      	mov	r0, fp
 800860a:	b003      	add	sp, #12
 800860c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008610 <_writet>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8008610:	3044      	adds	r0, #68	; 0x44
 8008612:	f7ff bf75 	b.w	8008500 <obqWriteTimeout>
 8008616:	bf00      	nop
	...

08008620 <_write>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 8008620:	3044      	adds	r0, #68	; 0x44
 8008622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008626:	f7ff bf6b 	b.w	8008500 <obqWriteTimeout>
 800862a:	bf00      	nop
 800862c:	0000      	movs	r0, r0
	...

08008630 <obqPutTimeout>:
                    sysinterval_t timeout) {
 8008630:	b570      	push	{r4, r5, r6, lr}
 8008632:	2320      	movs	r3, #32
 8008634:	460e      	mov	r6, r1
 8008636:	4604      	mov	r4, r0
 8008638:	f383 8811 	msr	BASEPRI, r3
  if (obqp->ptr == NULL) {
 800863c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800863e:	b305      	cbz	r5, 8008682 <obqPutTimeout+0x52>
  *obqp->ptr = b;
 8008640:	702e      	strb	r6, [r5, #0]
  if (obqp->ptr >= obqp->top) {
 8008642:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 8008646:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 8008648:	4293      	cmp	r3, r2
  obqp->ptr++;
 800864a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 800864c:	d315      	bcc.n	800867a <obqPutTimeout+0x4a>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800864e:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 8008650:	6923      	ldr	r3, [r4, #16]
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8008652:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 8008654:	601a      	str	r2, [r3, #0]
  obqp->bcounter--;
 8008656:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 8008658:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 800865a:	3a01      	subs	r2, #1
 800865c:	60e2      	str	r2, [r4, #12]
  obqp->ptr = NULL;
 800865e:	2200      	movs	r2, #0
  if (obqp->bwrptr >= obqp->btop) {
 8008660:	69a1      	ldr	r1, [r4, #24]
  obqp->bwrptr += obqp->bsize;
 8008662:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 8008664:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 8008666:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 8008668:	bf28      	it	cs
 800866a:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
  obqp->ptr = NULL;
 800866c:	62a2      	str	r2, [r4, #40]	; 0x28
    obqp->bwrptr = obqp->buffers;
 800866e:	bf28      	it	cs
 8008670:	6123      	strcs	r3, [r4, #16]
  if (obqp->notify != NULL) {
 8008672:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008674:	b10b      	cbz	r3, 800867a <obqPutTimeout+0x4a>
    obqp->notify(obqp);
 8008676:	4620      	mov	r0, r4
 8008678:	4798      	blx	r3
 800867a:	2000      	movs	r0, #0
 800867c:	f380 8811 	msr	BASEPRI, r0
}
 8008680:	bd70      	pop	{r4, r5, r6, pc}
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8008682:	4611      	mov	r1, r2
 8008684:	f7ff ff1c 	bl	80084c0 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8008688:	b908      	cbnz	r0, 800868e <obqPutTimeout+0x5e>
 800868a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800868c:	e7d8      	b.n	8008640 <obqPutTimeout+0x10>
 800868e:	f385 8811 	msr	BASEPRI, r5
}
 8008692:	bd70      	pop	{r4, r5, r6, pc}
	...

080086a0 <_putt>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 80086a0:	3044      	adds	r0, #68	; 0x44
 80086a2:	f7ff bfc5 	b.w	8008630 <obqPutTimeout>
 80086a6:	bf00      	nop
	...

080086b0 <_put>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 80086b0:	3044      	adds	r0, #68	; 0x44
 80086b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086b6:	f7ff bfbb 	b.w	8008630 <obqPutTimeout>
 80086ba:	bf00      	nop
 80086bc:	0000      	movs	r0, r0
	...

080086c0 <ibqGetFullBufferTimeoutS>:
                                 sysinterval_t timeout) {
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4604      	mov	r4, r0
 80086c4:	460d      	mov	r5, r1
 80086c6:	e007      	b.n	80086d8 <ibqGetFullBufferTimeoutS+0x18>
    if (ibqp->suspended) {
 80086c8:	7a23      	ldrb	r3, [r4, #8]
 80086ca:	b983      	cbnz	r3, 80086ee <ibqGetFullBufferTimeoutS+0x2e>
 80086cc:	4629      	mov	r1, r5
 80086ce:	4620      	mov	r0, r4
 80086d0:	f7ff fede 	bl	8008490 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80086d4:	2800      	cmp	r0, #0
 80086d6:	db09      	blt.n	80086ec <ibqGetFullBufferTimeoutS+0x2c>
  while (ibqIsEmptyI(ibqp)) {
 80086d8:	68e3      	ldr	r3, [r4, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0f4      	beq.n	80086c8 <ibqGetFullBufferTimeoutS+0x8>
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80086de:	2000      	movs	r0, #0
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80086e0:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80086e2:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80086e4:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80086e6:	441a      	add	r2, r3
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80086e8:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
}
 80086ec:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 80086ee:	f06f 0001 	mvn.w	r0, #1
}
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
	...

08008700 <ibqReadTimeout>:
                      size_t n, sysinterval_t timeout) {
 8008700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008704:	4699      	mov	r9, r3
 8008706:	b083      	sub	sp, #12
 8008708:	4604      	mov	r4, r0
 800870a:	460e      	mov	r6, r1
 800870c:	4617      	mov	r7, r2
 800870e:	2320      	movs	r3, #32
 8008710:	f383 8811 	msr	BASEPRI, r3
 8008714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  size_t r = 0;
 8008718:	2500      	movs	r5, #0
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (ibqp->ptr == NULL) {
 800871c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  return systime + (systime_t)interval;
 800871e:	444b      	add	r3, r9
 8008720:	b29b      	uxth	r3, r3
  ibqp->ptr = NULL;
 8008722:	46a8      	mov	r8, r5
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8008724:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
 8008728:	9301      	str	r3, [sp, #4]
    if (ibqp->ptr == NULL) {
 800872a:	2900      	cmp	r1, #0
 800872c:	d045      	beq.n	80087ba <ibqReadTimeout+0xba>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 800872e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (size > (n - r)) {
 8008730:	eba7 0b05 	sub.w	fp, r7, r5
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8008734:	1a5b      	subs	r3, r3, r1
 8008736:	459b      	cmp	fp, r3
 8008738:	bf28      	it	cs
 800873a:	469b      	movcs	fp, r3
    if (size > 64U) {
 800873c:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 8008740:	d94d      	bls.n	80087de <ibqReadTimeout+0xde>
      memcpy(bp, ibqp->ptr, 64U);
 8008742:	4633      	mov	r3, r6
 8008744:	f101 0240 	add.w	r2, r1, #64	; 0x40
 8008748:	f8d1 b000 	ldr.w	fp, [r1]
 800874c:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8008750:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8008754:	68c8      	ldr	r0, [r1, #12]
 8008756:	3110      	adds	r1, #16
 8008758:	4291      	cmp	r1, r2
 800875a:	f8c3 b000 	str.w	fp, [r3]
 800875e:	f8c3 e004 	str.w	lr, [r3, #4]
 8008762:	f8c3 c008 	str.w	ip, [r3, #8]
 8008766:	60d8      	str	r0, [r3, #12]
 8008768:	f103 0310 	add.w	r3, r3, #16
 800876c:	d1ec      	bne.n	8008748 <ibqReadTimeout+0x48>
      ibqp->ptr += 64U;
 800876e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      bp        += 64U;
 8008770:	3640      	adds	r6, #64	; 0x40
      ibqp->ptr += 64U;
 8008772:	3340      	adds	r3, #64	; 0x40
      r         += 64U;
 8008774:	3540      	adds	r5, #64	; 0x40
      ibqp->ptr += 64U;
 8008776:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 8008778:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800877a:	429a      	cmp	r2, r3
 800877c:	d813      	bhi.n	80087a6 <ibqReadTimeout+0xa6>
  if (ibqp->brdptr >= ibqp->btop) {
 800877e:	e9d4 2106 	ldrd	r2, r1, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 8008782:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 8008784:	68e0      	ldr	r0, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8008786:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 8008788:	4293      	cmp	r3, r2
  ibqp->brdptr += ibqp->bsize;
 800878a:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 800878c:	bf28      	it	cs
 800878e:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
  ibqp->bcounter--;
 8008790:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    ibqp->brdptr = ibqp->buffers;
 8008794:	bf28      	it	cs
 8008796:	6163      	strcs	r3, [r4, #20]
  if (ibqp->notify != NULL) {
 8008798:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->bcounter--;
 800879a:	60e0      	str	r0, [r4, #12]
  ibqp->ptr = NULL;
 800879c:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
  if (ibqp->notify != NULL) {
 80087a0:	b10b      	cbz	r3, 80087a6 <ibqReadTimeout+0xa6>
    ibqp->notify(ibqp);
 80087a2:	4620      	mov	r0, r4
 80087a4:	4798      	blx	r3
 80087a6:	f388 8811 	msr	BASEPRI, r8
    if (r >= n) {
 80087aa:	42bd      	cmp	r5, r7
 80087ac:	d22a      	bcs.n	8008804 <ibqReadTimeout+0x104>
 80087ae:	2320      	movs	r3, #32
 80087b0:	f383 8811 	msr	BASEPRI, r3
    if (ibqp->ptr == NULL) {
 80087b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80087b6:	2900      	cmp	r1, #0
 80087b8:	d1b9      	bne.n	800872e <ibqReadTimeout+0x2e>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80087ba:	f11a 0f03 	cmn.w	sl, #3
 80087be:	d818      	bhi.n	80087f2 <ibqReadTimeout+0xf2>
 80087c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return (sysinterval_t)((systime_t)(end - start));
 80087c4:	9a01      	ldr	r2, [sp, #4]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	b29b      	uxth	r3, r3
        if (next_timeout > timeout) {
 80087cc:	4599      	cmp	r9, r3
 80087ce:	d31d      	bcc.n	800880c <ibqReadTimeout+0x10c>
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 80087d0:	4619      	mov	r1, r3
 80087d2:	4620      	mov	r0, r4
 80087d4:	f7ff ff74 	bl	80086c0 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 80087d8:	b988      	cbnz	r0, 80087fe <ibqReadTimeout+0xfe>
 80087da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80087dc:	e7a7      	b.n	800872e <ibqReadTimeout+0x2e>
      memcpy(bp, ibqp->ptr, size);
 80087de:	4630      	mov	r0, r6
 80087e0:	465a      	mov	r2, fp
 80087e2:	f7fc fd41 	bl	8005268 <memcpy>
      ibqp->ptr += size;
 80087e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      r         += size;
 80087e8:	445d      	add	r5, fp
      ibqp->ptr += size;
 80087ea:	445b      	add	r3, fp
      bp        += size;
 80087ec:	445e      	add	r6, fp
      ibqp->ptr += size;
 80087ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80087f0:	e7c2      	b.n	8008778 <ibqReadTimeout+0x78>
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 80087f2:	4649      	mov	r1, r9
 80087f4:	4620      	mov	r0, r4
 80087f6:	f7ff ff63 	bl	80086c0 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d0ed      	beq.n	80087da <ibqReadTimeout+0xda>
 80087fe:	2300      	movs	r3, #0
 8008800:	f383 8811 	msr	BASEPRI, r3
}
 8008804:	4628      	mov	r0, r5
 8008806:	b003      	add	sp, #12
 8008808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880c:	f381 8811 	msr	BASEPRI, r1
 8008810:	4628      	mov	r0, r5
 8008812:	b003      	add	sp, #12
 8008814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008820 <_readt>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8008820:	300c      	adds	r0, #12
 8008822:	f7ff bf6d 	b.w	8008700 <ibqReadTimeout>
 8008826:	bf00      	nop
	...

08008830 <_read>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 8008830:	300c      	adds	r0, #12
 8008832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008836:	f7ff bf63 	b.w	8008700 <ibqReadTimeout>
 800883a:	bf00      	nop
 800883c:	0000      	movs	r0, r0
	...

08008840 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	2320      	movs	r3, #32
 8008844:	4604      	mov	r4, r0
 8008846:	f383 8811 	msr	BASEPRI, r3
  if (ibqp->ptr == NULL) {
 800884a:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800884c:	b1ed      	cbz	r5, 800888a <ibqGetTimeout+0x4a>
  msg = (msg_t)*ibqp->ptr;
 800884e:	f815 6b01 	ldrb.w	r6, [r5], #1
  if (ibqp->ptr >= ibqp->top) {
 8008852:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  ibqp->ptr++;
 8008854:	62a5      	str	r5, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 8008856:	4295      	cmp	r5, r2
 8008858:	d312      	bcc.n	8008880 <ibqGetTimeout+0x40>
  if (ibqp->brdptr >= ibqp->btop) {
 800885a:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->bcounter--;
 800885e:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8008860:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 8008862:	3a01      	subs	r2, #1
 8008864:	60e2      	str	r2, [r4, #12]
  ibqp->ptr = NULL;
 8008866:	2200      	movs	r2, #0
  ibqp->brdptr += ibqp->bsize;
 8008868:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 800886a:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 800886c:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 800886e:	bf28      	it	cs
 8008870:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
  ibqp->ptr = NULL;
 8008872:	62a2      	str	r2, [r4, #40]	; 0x28
    ibqp->brdptr = ibqp->buffers;
 8008874:	bf28      	it	cs
 8008876:	6163      	strcs	r3, [r4, #20]
  if (ibqp->notify != NULL) {
 8008878:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800887a:	b10b      	cbz	r3, 8008880 <ibqGetTimeout+0x40>
    ibqp->notify(ibqp);
 800887c:	4620      	mov	r0, r4
 800887e:	4798      	blx	r3
 8008880:	2300      	movs	r3, #0
 8008882:	f383 8811 	msr	BASEPRI, r3
}
 8008886:	4630      	mov	r0, r6
 8008888:	bd70      	pop	{r4, r5, r6, pc}
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 800888a:	f7ff ff19 	bl	80086c0 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 800888e:	4606      	mov	r6, r0
 8008890:	b908      	cbnz	r0, 8008896 <ibqGetTimeout+0x56>
 8008892:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008894:	e7db      	b.n	800884e <ibqGetTimeout+0xe>
 8008896:	f385 8811 	msr	BASEPRI, r5
 800889a:	e7f4      	b.n	8008886 <ibqGetTimeout+0x46>
 800889c:	0000      	movs	r0, r0
	...

080088a0 <_gett>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 80088a0:	300c      	adds	r0, #12
 80088a2:	f7ff bfcd 	b.w	8008840 <ibqGetTimeout>
 80088a6:	bf00      	nop
	...

080088b0 <_get>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 80088b0:	300c      	adds	r0, #12
 80088b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80088b6:	f7ff bfc3 	b.w	8008840 <ibqGetTimeout>
 80088ba:	bf00      	nop
 80088bc:	0000      	movs	r0, r0
	...

080088c0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 80088c0:	b508      	push	{r3, lr}
 80088c2:	4601      	mov	r1, r0
 80088c4:	2320      	movs	r3, #32
 80088c6:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80088ca:	2008      	movs	r0, #8
 80088cc:	f7ff fc88 	bl	80081e0 <chSchGoSleepTimeoutS>
 80088d0:	2300      	movs	r3, #0
 80088d2:	f383 8811 	msr	BASEPRI, r3
}
 80088d6:	bd08      	pop	{r3, pc}
	...

080088e0 <Thread1>:

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOC, GPIOC_LED);
 80088e0:	f44f 5500 	mov.w	r5, #8192	; 0x2000
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
 80088e4:	b580      	push	{r7, lr}
    palClearPad(GPIOC, GPIOC_LED);
 80088e6:	462f      	mov	r7, r5
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 80088e8:	4b0a      	ldr	r3, [pc, #40]	; (8008914 <Thread1+0x34>)
 80088ea:	4a0b      	ldr	r2, [pc, #44]	; (8008918 <Thread1+0x38>)
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	4e0b      	ldr	r6, [pc, #44]	; (800891c <Thread1+0x3c>)
 80088f0:	4c0b      	ldr	r4, [pc, #44]	; (8008920 <Thread1+0x40>)
 80088f2:	619a      	str	r2, [r3, #24]
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 80088f4:	7833      	ldrb	r3, [r6, #0]
    palClearPad(GPIOC, GPIOC_LED);
 80088f6:	6167      	str	r7, [r4, #20]
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 80088f8:	2b04      	cmp	r3, #4
    chThdSleepMilliseconds(time);
 80088fa:	bf14      	ite	ne
 80088fc:	f44f 707a 	movne.w	r0, #1000	; 0x3e8
 8008900:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 8008904:	f7ff ffdc 	bl	80088c0 <chThdSleep>
    palSetPad(GPIOC, GPIOC_LED);
 8008908:	6125      	str	r5, [r4, #16]
    chThdSleepMilliseconds(2000);
 800890a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800890e:	f7ff ffd7 	bl	80088c0 <chThdSleep>
 8008912:	e7ef      	b.n	80088f4 <Thread1+0x14>
 8008914:	20001eb0 	.word	0x20001eb0
 8008918:	0800e5b0 	.word	0x0800e5b0
 800891c:	20001d28 	.word	0x20001d28
 8008920:	40011000 	.word	0x40011000
	...

08008930 <rt_test_003_001_execute>:
  systime_t time;

  /* [3.1.1] The current system time is read then a sleep is performed
     for 100 system ticks and on exit the system time is verified
     again.*/
  test_set_step(1);
 8008930:	2301      	movs	r3, #1
static void rt_test_003_001_execute(void) {
 8008932:	b570      	push	{r4, r5, r6, lr}
 8008934:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  test_set_step(1);
 8008938:	4e30      	ldr	r6, [pc, #192]	; (80089fc <rt_test_003_001_execute+0xcc>)
  {
    time = chVTGetSystemTimeX();
    chThdSleep(100);
 800893a:	2064      	movs	r0, #100	; 0x64
  test_set_step(1);
 800893c:	6033      	str	r3, [r6, #0]
 800893e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleep(100);
 8008940:	f7ff ffbe 	bl	80088c0 <chThdSleep>
 8008944:	b2a4      	uxth	r4, r4
  return systime + (systime_t)interval;
 8008946:	f104 0167 	add.w	r1, r4, #103	; 0x67
 800894a:	f104 0064 	add.w	r0, r4, #100	; 0x64
    test_assert_time_window(chTimeAddX(time, 100),
 800894e:	b289      	uxth	r1, r1
 8008950:	b280      	uxth	r0, r0
 8008952:	f7fc fe0d 	bl	8005570 <_test_assert_time_window.constprop.3>
 8008956:	b100      	cbz	r0, 800895a <rt_test_003_001_execute+0x2a>
    chThdSleepUntil(chTimeAddX(time, 100));
    test_assert_time_window(chTimeAddX(time, 100),
                            chTimeAddX(time, 100 + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
  }
}
 8008958:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 800895a:	2302      	movs	r3, #2
 800895c:	6033      	str	r3, [r6, #0]
 800895e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMicroseconds(100000);
 8008960:	20c8      	movs	r0, #200	; 0xc8
 8008962:	b2a4      	uxth	r4, r4
 8008964:	f7ff ffac 	bl	80088c0 <chThdSleep>
 8008968:	f104 01cb 	add.w	r1, r4, #203	; 0xcb
 800896c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    test_assert_time_window(chTimeAddX(time, TIME_US2I(100000)),
 8008970:	b289      	uxth	r1, r1
 8008972:	b280      	uxth	r0, r0
 8008974:	f7fc fdfc 	bl	8005570 <_test_assert_time_window.constprop.3>
 8008978:	2800      	cmp	r0, #0
 800897a:	d1ed      	bne.n	8008958 <rt_test_003_001_execute+0x28>
  test_set_step(3);
 800897c:	2303      	movs	r3, #3
 800897e:	6033      	str	r3, [r6, #0]
 8008980:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMilliseconds(100);
 8008982:	20c8      	movs	r0, #200	; 0xc8
 8008984:	b2a4      	uxth	r4, r4
 8008986:	f7ff ff9b 	bl	80088c0 <chThdSleep>
 800898a:	f104 01cb 	add.w	r1, r4, #203	; 0xcb
 800898e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(100)),
 8008992:	b289      	uxth	r1, r1
 8008994:	b280      	uxth	r0, r0
 8008996:	f7fc fdeb 	bl	8005570 <_test_assert_time_window.constprop.3>
 800899a:	2800      	cmp	r0, #0
 800899c:	d1dc      	bne.n	8008958 <rt_test_003_001_execute+0x28>
  test_set_step(4);
 800899e:	2304      	movs	r3, #4
 80089a0:	6033      	str	r3, [r6, #0]
 80089a2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepSeconds(1);
 80089a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80089a8:	b2a4      	uxth	r4, r4
 80089aa:	f7ff ff89 	bl	80088c0 <chThdSleep>
 80089ae:	f204 71d3 	addw	r1, r4, #2003	; 0x7d3
 80089b2:	f504 60fa 	add.w	r0, r4, #2000	; 0x7d0
    test_assert_time_window(chTimeAddX(time, TIME_S2I(1)),
 80089b6:	b289      	uxth	r1, r1
 80089b8:	b280      	uxth	r0, r0
 80089ba:	f7fc fdd9 	bl	8005570 <_test_assert_time_window.constprop.3>
 80089be:	2800      	cmp	r0, #0
 80089c0:	d1ca      	bne.n	8008958 <rt_test_003_001_execute+0x28>
  test_set_step(5);
 80089c2:	2305      	movs	r3, #5
 80089c4:	6033      	str	r3, [r6, #0]
 80089c6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80089c8:	2320      	movs	r3, #32
 80089ca:	b2a4      	uxth	r4, r4
 80089cc:	f104 0664 	add.w	r6, r4, #100	; 0x64
 80089d0:	b2b6      	uxth	r6, r6
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	6a69      	ldr	r1, [r5, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80089d8:	1a71      	subs	r1, r6, r1
 80089da:	b289      	uxth	r1, r1
  if (interval > (sysinterval_t)0) {
 80089dc:	b111      	cbz	r1, 80089e4 <rt_test_003_001_execute+0xb4>
 80089de:	2008      	movs	r0, #8
 80089e0:	f7ff fbfe 	bl	80081e0 <chSchGoSleepTimeoutS>
 80089e4:	2300      	movs	r3, #0
 80089e6:	f383 8811 	msr	BASEPRI, r3
  return systime + (systime_t)interval;
 80089ea:	f104 0167 	add.w	r1, r4, #103	; 0x67
    test_assert_time_window(chTimeAddX(time, 100),
 80089ee:	4630      	mov	r0, r6
}
 80089f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_time_window(chTimeAddX(time, 100),
 80089f4:	b289      	uxth	r1, r1
 80089f6:	f7fc bdbb 	b.w	8005570 <_test_assert_time_window.constprop.3>
 80089fa:	bf00      	nop
 80089fc:	2000283c 	.word	0x2000283c

08008a00 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8008a00:	b508      	push	{r3, lr}

  chThdSleep(1);
 8008a02:	2001      	movs	r0, #1
 8008a04:	f7ff ff5c 	bl	80088c0 <chThdSleep>
 8008a08:	2320      	movs	r3, #32
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008a12:	2300      	movs	r3, #0
 8008a14:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8008a16:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 8008a1a:	b280      	uxth	r0, r0
 8008a1c:	bd08      	pop	{r3, pc}
 8008a1e:	bf00      	nop

08008a20 <rt_test_010_009_execute>:
static void rt_test_010_009_execute(void) {
 8008a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 8008a24:	2301      	movs	r3, #1
 8008a26:	4a20      	ldr	r2, [pc, #128]	; (8008aa8 <rt_test_010_009_execute+0x88>)
    n = 0;
 8008a28:	2400      	movs	r4, #0
  test_set_step(1);
 8008a2a:	6013      	str	r3, [r2, #0]
    start = test_wait_tick();
 8008a2c:	f7ff ffe8 	bl	8008a00 <test_wait_tick>
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8008a30:	46a3      	mov	fp, r4
    start = test_wait_tick();
 8008a32:	4681      	mov	r9, r0
 8008a34:	f04f 0a20 	mov.w	sl, #32
 8008a38:	f500 68fa 	add.w	r8, r0, #2000	; 0x7d0
 8008a3c:	fa1f f888 	uxth.w	r8, r8
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8008a40:	4f1a      	ldr	r7, [pc, #104]	; (8008aac <rt_test_010_009_execute+0x8c>)
 8008a42:	4e1b      	ldr	r6, [pc, #108]	; (8008ab0 <rt_test_010_009_execute+0x90>)
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8008a44:	4d1b      	ldr	r5, [pc, #108]	; (8008ab4 <rt_test_010_009_execute+0x94>)
 8008a46:	eba8 0800 	sub.w	r8, r8, r0
 8008a4a:	f38a 8811 	msr	BASEPRI, sl
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8008a4e:	2300      	movs	r3, #0
 8008a50:	463a      	mov	r2, r7
 8008a52:	4630      	mov	r0, r6
 8008a54:	2101      	movs	r1, #1
 8008a56:	f7fe fa2b 	bl	8006eb0 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8008a5a:	463a      	mov	r2, r7
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f242 7110 	movw	r1, #10000	; 0x2710
 8008a62:	4628      	mov	r0, r5
 8008a64:	f7fe fa24 	bl	8006eb0 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f7fe f9d9 	bl	8006e20 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f7fe f9d6 	bl	8006e20 <chVTDoResetI>
 8008a74:	f38b 8811 	msr	BASEPRI, fp
 8008a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 8008a7e:	3401      	adds	r4, #1
  return (bool)((time - start) < (end - start));
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	eba3 0309 	sub.w	r3, r3, r9
    } while (chVTIsSystemTimeWithinX(start, end));
 8008a86:	4543      	cmp	r3, r8
 8008a88:	dbdf      	blt.n	8008a4a <rt_test_010_009_execute+0x2a>
  test_set_step(2);
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	4a06      	ldr	r2, [pc, #24]	; (8008aa8 <rt_test_010_009_execute+0x88>)
    test_print("--- Score : ");
 8008a8e:	480a      	ldr	r0, [pc, #40]	; (8008ab8 <rt_test_010_009_execute+0x98>)
  test_set_step(2);
 8008a90:	6013      	str	r3, [r2, #0]
    test_print("--- Score : ");
 8008a92:	f7fd f855 	bl	8005b40 <test_print>
    test_printn(n * 2);
 8008a96:	0060      	lsls	r0, r4, #1
 8008a98:	f7fc ffe2 	bl	8005a60 <test_printn>
}
 8008a9c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" timers/S");
 8008aa0:	4806      	ldr	r0, [pc, #24]	; (8008abc <rt_test_010_009_execute+0x9c>)
 8008aa2:	f7fd b82d 	b.w	8005b00 <test_println>
 8008aa6:	bf00      	nop
 8008aa8:	2000283c 	.word	0x2000283c
 8008aac:	08005751 	.word	0x08005751
 8008ab0:	2000286c 	.word	0x2000286c
 8008ab4:	20002880 	.word	0x20002880
 8008ab8:	0800fdf0 	.word	0x0800fdf0
 8008abc:	0800fe00 	.word	0x0800fe00

08008ac0 <test_execute>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	4688      	mov	r8, r1
  int tseq, tcase;

  test_chp = stream;
 8008ac6:	4c9d      	ldr	r4, [pc, #628]	; (8008d3c <test_execute+0x27c>)
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8008ac8:	b083      	sub	sp, #12
  test_chp = stream;
 8008aca:	6020      	str	r0, [r4, #0]
  test_println("");
 8008acc:	489c      	ldr	r0, [pc, #624]	; (8008d40 <test_execute+0x280>)
 8008ace:	f7fd f817 	bl	8005b00 <test_println>
  if (tsp->name != NULL) {
 8008ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 8186 	beq.w	8008de8 <test_execute+0x328>
  while (*msgp)
 8008adc:	212a      	movs	r1, #42	; 0x2a
  if (tsp->name != NULL) {
 8008ade:	4d99      	ldr	r5, [pc, #612]	; (8008d44 <test_execute+0x284>)
    streamPut(test_chp, *msgp++);
 8008ae0:	6820      	ldr	r0, [r4, #0]
 8008ae2:	6803      	ldr	r3, [r0, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	4798      	blx	r3
  while (*msgp)
 8008ae8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008aec:	2900      	cmp	r1, #0
 8008aee:	d1f7      	bne.n	8008ae0 <test_execute+0x20>
    test_print("*** ");
    test_println(tsp->name);
 8008af0:	f8d8 0000 	ldr.w	r0, [r8]
 8008af4:	f7fd f804 	bl	8005b00 <test_println>
  }
  else {
    test_println("*** Test Suite");
  }
  test_println("***");
 8008af8:	4893      	ldr	r0, [pc, #588]	; (8008d48 <test_execute+0x288>)
 8008afa:	f7fd f801 	bl	8005b00 <test_println>
  while (*msgp)
 8008afe:	212a      	movs	r1, #42	; 0x2a
  test_println("***");
 8008b00:	4d92      	ldr	r5, [pc, #584]	; (8008d4c <test_execute+0x28c>)
    streamPut(test_chp, *msgp++);
 8008b02:	6820      	ldr	r0, [r4, #0]
 8008b04:	6803      	ldr	r3, [r0, #0]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	4798      	blx	r3
  while (*msgp)
 8008b0a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008b0e:	2900      	cmp	r1, #0
 8008b10:	d1f7      	bne.n	8008b02 <test_execute+0x42>
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8008b12:	488f      	ldr	r0, [pc, #572]	; (8008d50 <test_execute+0x290>)
 8008b14:	f7fc fff4 	bl	8005b00 <test_println>
  while (*msgp)
 8008b18:	212a      	movs	r1, #42	; 0x2a
  test_println(__DATE__ " - " __TIME__);
 8008b1a:	4d8e      	ldr	r5, [pc, #568]	; (8008d54 <test_execute+0x294>)
    streamPut(test_chp, *msgp++);
 8008b1c:	6820      	ldr	r0, [r4, #0]
 8008b1e:	6803      	ldr	r3, [r0, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	4798      	blx	r3
  while (*msgp)
 8008b24:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008b28:	2900      	cmp	r1, #0
 8008b2a:	d1f7      	bne.n	8008b1c <test_execute+0x5c>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8008b2c:	488a      	ldr	r0, [pc, #552]	; (8008d58 <test_execute+0x298>)
 8008b2e:	f7fc ffe7 	bl	8005b00 <test_println>
  while (*msgp)
 8008b32:	212a      	movs	r1, #42	; 0x2a
  test_println(PLATFORM_NAME);
 8008b34:	4d89      	ldr	r5, [pc, #548]	; (8008d5c <test_execute+0x29c>)
    streamPut(test_chp, *msgp++);
 8008b36:	6820      	ldr	r0, [r4, #0]
 8008b38:	6803      	ldr	r3, [r0, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	4798      	blx	r3
  while (*msgp)
 8008b3e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008b42:	2900      	cmp	r1, #0
 8008b44:	d1f7      	bne.n	8008b36 <test_execute+0x76>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8008b46:	4886      	ldr	r0, [pc, #536]	; (8008d60 <test_execute+0x2a0>)
 8008b48:	9101      	str	r1, [sp, #4]
 8008b4a:	f7fc ffd9 	bl	8005b00 <test_println>
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 8008b4e:	487c      	ldr	r0, [pc, #496]	; (8008d40 <test_execute+0x280>)
 8008b50:	f7fc ffd6 	bl	8005b00 <test_println>

  test_global_fail = false;
  tseq = 0;
 8008b54:	9901      	ldr	r1, [sp, #4]
  test_global_fail = false;
 8008b56:	4b83      	ldr	r3, [pc, #524]	; (8008d64 <test_execute+0x2a4>)
  tseq = 0;
 8008b58:	468b      	mov	fp, r1
  test_global_fail = false;
 8008b5a:	7019      	strb	r1, [r3, #0]
  test_tokp = test_tokens_buffer;
 8008b5c:	4e82      	ldr	r6, [pc, #520]	; (8008d68 <test_execute+0x2a8>)
 8008b5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
  while (tsp->sequences[tseq] != NULL) {
 8008b62:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008b66:	ea4f 078b 	mov.w	r7, fp, lsl #2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 811a 	beq.w	8008da4 <test_execute+0x2e4>
 8008b70:	254c      	movs	r5, #76	; 0x4c
    streamPut(test_chp, '=');
 8008b72:	6820      	ldr	r0, [r4, #0]
 8008b74:	213d      	movs	r1, #61	; 0x3d
 8008b76:	6803      	ldr	r3, [r0, #0]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8008b7c:	3d01      	subs	r5, #1
 8008b7e:	d1f8      	bne.n	8008b72 <test_execute+0xb2>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8008b80:	6820      	ldr	r0, [r4, #0]
 8008b82:	497a      	ldr	r1, [pc, #488]	; (8008d6c <test_execute+0x2ac>)
 8008b84:	6803      	ldr	r3, [r0, #0]
 8008b86:	2202      	movs	r2, #2
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4798      	blx	r3
  while (*msgp)
 8008b8c:	213d      	movs	r1, #61	; 0x3d
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8008b8e:	4d78      	ldr	r5, [pc, #480]	; (8008d70 <test_execute+0x2b0>)
    streamPut(test_chp, *msgp++);
 8008b90:	6820      	ldr	r0, [r4, #0]
 8008b92:	6803      	ldr	r3, [r0, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	4798      	blx	r3
  while (*msgp)
 8008b98:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008b9c:	2900      	cmp	r1, #0
 8008b9e:	d1f7      	bne.n	8008b90 <test_execute+0xd0>
#if TEST_SHOW_SEQUENCES == TRUE
    print_fat_line();
    test_print("=== Test Sequence ");
    test_printn(tseq + 1);
 8008ba0:	f10b 0b01 	add.w	fp, fp, #1
 8008ba4:	4658      	mov	r0, fp
 8008ba6:	f7fc ff5b 	bl	8005a60 <test_printn>
  while (*msgp)
 8008baa:	2120      	movs	r1, #32
    test_printn(tseq + 1);
 8008bac:	4d71      	ldr	r5, [pc, #452]	; (8008d74 <test_execute+0x2b4>)
    streamPut(test_chp, *msgp++);
 8008bae:	6820      	ldr	r0, [r4, #0]
 8008bb0:	6803      	ldr	r3, [r0, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	4798      	blx	r3
  while (*msgp)
 8008bb6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008bba:	2900      	cmp	r1, #0
 8008bbc:	d1f7      	bne.n	8008bae <test_execute+0xee>
    test_print(" (");
    test_print(tsp->sequences[tseq]->name);
 8008bbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008bc2:	59db      	ldr	r3, [r3, r7]
 8008bc4:	681d      	ldr	r5, [r3, #0]
  while (*msgp)
 8008bc6:	7829      	ldrb	r1, [r5, #0]
 8008bc8:	b139      	cbz	r1, 8008bda <test_execute+0x11a>
    streamPut(test_chp, *msgp++);
 8008bca:	6820      	ldr	r0, [r4, #0]
 8008bcc:	6803      	ldr	r3, [r0, #0]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	4798      	blx	r3
  while (*msgp)
 8008bd2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008bd6:	2900      	cmp	r1, #0
 8008bd8:	d1f7      	bne.n	8008bca <test_execute+0x10a>
    test_println(")");
 8008bda:	4867      	ldr	r0, [pc, #412]	; (8008d78 <test_execute+0x2b8>)
 8008bdc:	f7fc ff90 	bl	8005b00 <test_println>
#endif
    tcase = 0;
 8008be0:	2500      	movs	r5, #0
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8008be2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008be6:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8008bea:	59da      	ldr	r2, [r3, r7]
 8008bec:	6852      	ldr	r2, [r2, #4]
 8008bee:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8008bf2:	2a00      	cmp	r2, #0
 8008bf4:	d0b5      	beq.n	8008b62 <test_execute+0xa2>
      print_line();
 8008bf6:	f7fd f80b 	bl	8005c10 <print_line>
  while (*msgp)
 8008bfa:	212d      	movs	r1, #45	; 0x2d
      print_line();
 8008bfc:	f8df a190 	ldr.w	sl, [pc, #400]	; 8008d90 <test_execute+0x2d0>
    streamPut(test_chp, *msgp++);
 8008c00:	6820      	ldr	r0, [r4, #0]
 8008c02:	6803      	ldr	r3, [r0, #0]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	4798      	blx	r3
  while (*msgp)
 8008c08:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8008c0c:	2900      	cmp	r1, #0
 8008c0e:	d1f7      	bne.n	8008c00 <test_execute+0x140>
      test_print("--- Test Case ");
      test_printn(tseq + 1);
 8008c10:	4658      	mov	r0, fp
 8008c12:	f7fc ff25 	bl	8005a60 <test_printn>
    streamPut(test_chp, *msgp++);
 8008c16:	6820      	ldr	r0, [r4, #0]
 8008c18:	212e      	movs	r1, #46	; 0x2e
 8008c1a:	6803      	ldr	r3, [r0, #0]
      test_print(".");
      test_printn(tcase + 1);
 8008c1c:	3501      	adds	r5, #1
    streamPut(test_chp, *msgp++);
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	4798      	blx	r3
      test_printn(tcase + 1);
 8008c22:	4628      	mov	r0, r5
 8008c24:	f7fc ff1c 	bl	8005a60 <test_printn>
  while (*msgp)
 8008c28:	2120      	movs	r1, #32
      test_printn(tcase + 1);
 8008c2a:	f8df a148 	ldr.w	sl, [pc, #328]	; 8008d74 <test_execute+0x2b4>
    streamPut(test_chp, *msgp++);
 8008c2e:	6820      	ldr	r0, [r4, #0]
 8008c30:	6803      	ldr	r3, [r0, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	4798      	blx	r3
  while (*msgp)
 8008c36:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8008c3a:	2900      	cmp	r1, #0
 8008c3c:	d1f7      	bne.n	8008c2e <test_execute+0x16e>
      test_print(" (");
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
 8008c3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c42:	59db      	ldr	r3, [r3, r7]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	f853 3009 	ldr.w	r3, [r3, r9]
 8008c4a:	f8d3 a000 	ldr.w	sl, [r3]
  while (*msgp)
 8008c4e:	f89a 1000 	ldrb.w	r1, [sl]
 8008c52:	b139      	cbz	r1, 8008c64 <test_execute+0x1a4>
    streamPut(test_chp, *msgp++);
 8008c54:	6820      	ldr	r0, [r4, #0]
 8008c56:	6803      	ldr	r3, [r0, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	4798      	blx	r3
  while (*msgp)
 8008c5c:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8008c60:	2900      	cmp	r1, #0
 8008c62:	d1f7      	bne.n	8008c54 <test_execute+0x194>
      test_println(")");
 8008c64:	4844      	ldr	r0, [pc, #272]	; (8008d78 <test_execute+0x2b8>)
 8008c66:	f7fc ff4b 	bl	8005b00 <test_println>
  chThdSleep(delay);
 8008c6a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008c6e:	f7ff fe27 	bl	80088c0 <chThdSleep>
  test_local_fail = false;
 8008c72:	2200      	movs	r2, #0
#if TEST_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8008c74:	f8d8 3004 	ldr.w	r3, [r8, #4]
  test_local_fail = false;
 8008c78:	f8df a118 	ldr.w	sl, [pc, #280]	; 8008d94 <test_execute+0x2d4>
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8008c7c:	59db      	ldr	r3, [r3, r7]
  test_tokp = test_tokens_buffer;
 8008c7e:	493f      	ldr	r1, [pc, #252]	; (8008d7c <test_execute+0x2bc>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8008c80:	685b      	ldr	r3, [r3, #4]
  test_tokp = test_tokens_buffer;
 8008c82:	6031      	str	r1, [r6, #0]
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8008c84:	f853 9009 	ldr.w	r9, [r3, r9]
  test_local_fail = false;
 8008c88:	f88a 2000 	strb.w	r2, [sl]
  if (tcp->setup != NULL)
 8008c8c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008c90:	b103      	cbz	r3, 8008c94 <test_execute+0x1d4>
    tcp->setup();
 8008c92:	4798      	blx	r3
  tcp->execute();
 8008c94:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008c98:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8008c9a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008c9e:	b103      	cbz	r3, 8008ca2 <test_execute+0x1e2>
    tcp->teardown();
 8008ca0:	4798      	blx	r3
      if (test_local_fail) {
 8008ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d044      	beq.n	8008d34 <test_execute+0x274>
  while (*msgp)
 8008caa:	212d      	movs	r1, #45	; 0x2d
      if (test_local_fail) {
 8008cac:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8008d98 <test_execute+0x2d8>
    streamPut(test_chp, *msgp++);
 8008cb0:	6820      	ldr	r0, [r4, #0]
 8008cb2:	6803      	ldr	r3, [r0, #0]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	4798      	blx	r3
  while (*msgp)
 8008cb8:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8008cbc:	2900      	cmp	r1, #0
 8008cbe:	d1f7      	bne.n	8008cb0 <test_execute+0x1f0>
        test_print("--- Result: FAILURE (#");
        test_printn(test_step);
 8008cc0:	4b2f      	ldr	r3, [pc, #188]	; (8008d80 <test_execute+0x2c0>)
 8008cc2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8008d9c <test_execute+0x2dc>
 8008cc6:	6818      	ldr	r0, [r3, #0]
 8008cc8:	f7fc feca 	bl	8005a60 <test_printn>
  while (*msgp)
 8008ccc:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8008cce:	6820      	ldr	r0, [r4, #0]
 8008cd0:	6803      	ldr	r3, [r0, #0]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	4798      	blx	r3
  while (*msgp)
 8008cd6:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8008cda:	2900      	cmp	r1, #0
 8008cdc:	d1f7      	bne.n	8008cce <test_execute+0x20e>
  while (cp < test_tokp)
 8008cde:	6833      	ldr	r3, [r6, #0]
 8008ce0:	4a26      	ldr	r2, [pc, #152]	; (8008d7c <test_execute+0x2bc>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d909      	bls.n	8008cfa <test_execute+0x23a>
  char *cp = test_tokens_buffer;
 8008ce6:	4691      	mov	r9, r2
    streamPut(test_chp, *cp++);
 8008ce8:	6820      	ldr	r0, [r4, #0]
 8008cea:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008cee:	6803      	ldr	r3, [r0, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	4798      	blx	r3
  while (cp < test_tokp)
 8008cf4:	6833      	ldr	r3, [r6, #0]
 8008cf6:	4599      	cmp	r9, r3
 8008cf8:	d3f6      	bcc.n	8008ce8 <test_execute+0x228>
  while (*msgp)
 8008cfa:	215d      	movs	r1, #93	; 0x5d
 8008cfc:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8008da0 <test_execute+0x2e0>
    streamPut(test_chp, *msgp++);
 8008d00:	6820      	ldr	r0, [r4, #0]
 8008d02:	6803      	ldr	r3, [r0, #0]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	4798      	blx	r3
  while (*msgp)
 8008d08:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8008d0c:	2900      	cmp	r1, #0
 8008d0e:	d1f7      	bne.n	8008d00 <test_execute+0x240>
        test_print(" [");
        print_tokens();
        test_print("] \"");
        test_print(test_failure_message);
 8008d10:	4b1c      	ldr	r3, [pc, #112]	; (8008d84 <test_execute+0x2c4>)
 8008d12:	f8d3 9000 	ldr.w	r9, [r3]
  while (*msgp)
 8008d16:	f899 1000 	ldrb.w	r1, [r9]
 8008d1a:	b139      	cbz	r1, 8008d2c <test_execute+0x26c>
    streamPut(test_chp, *msgp++);
 8008d1c:	6820      	ldr	r0, [r4, #0]
 8008d1e:	6803      	ldr	r3, [r0, #0]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	4798      	blx	r3
  while (*msgp)
 8008d24:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8008d28:	2900      	cmp	r1, #0
 8008d2a:	d1f7      	bne.n	8008d1c <test_execute+0x25c>
        test_println("\")");
 8008d2c:	4816      	ldr	r0, [pc, #88]	; (8008d88 <test_execute+0x2c8>)
 8008d2e:	f7fc fee7 	bl	8005b00 <test_println>
 8008d32:	e756      	b.n	8008be2 <test_execute+0x122>
      }
      else {
        test_println("--- Result: SUCCESS");
 8008d34:	4815      	ldr	r0, [pc, #84]	; (8008d8c <test_execute+0x2cc>)
 8008d36:	f7fc fee3 	bl	8005b00 <test_println>
 8008d3a:	e752      	b.n	8008be2 <test_execute+0x122>
 8008d3c:	20002790 	.word	0x20002790
 8008d40:	080100cc 	.word	0x080100cc
 8008d44:	08010ab8 	.word	0x08010ab8
 8008d48:	08010b64 	.word	0x08010b64
 8008d4c:	08010ac0 	.word	0x08010ac0
 8008d50:	08010b68 	.word	0x08010b68
 8008d54:	08010ad4 	.word	0x08010ad4
 8008d58:	0800e720 	.word	0x0800e720
 8008d5c:	08010ae8 	.word	0x08010ae8
 8008d60:	0800e760 	.word	0x0800e760
 8008d64:	20002798 	.word	0x20002798
 8008d68:	20002850 	.word	0x20002850
 8008d6c:	0800e8fc 	.word	0x0800e8fc
 8008d70:	08010afc 	.word	0x08010afc
 8008d74:	08010b10 	.word	0x08010b10
 8008d78:	08010b80 	.word	0x08010b80
 8008d7c:	20002840 	.word	0x20002840
 8008d80:	2000283c 	.word	0x2000283c
 8008d84:	20002794 	.word	0x20002794
 8008d88:	08010b84 	.word	0x08010b84
 8008d8c:	08010b88 	.word	0x08010b88
 8008d90:	08010b14 	.word	0x08010b14
 8008d94:	20002838 	.word	0x20002838
 8008d98:	08010b24 	.word	0x08010b24
 8008d9c:	08010b3c 	.word	0x08010b3c
 8008da0:	08010b40 	.word	0x08010b40
      }
      tcase++;
    }
    tseq++;
  }
  print_line();
 8008da4:	f7fc ff34 	bl	8005c10 <print_line>
  test_println("");
 8008da8:	4811      	ldr	r0, [pc, #68]	; (8008df0 <test_execute+0x330>)
 8008daa:	f7fc fea9 	bl	8005b00 <test_println>
  while (*msgp)
 8008dae:	2146      	movs	r1, #70	; 0x46
  test_println("");
 8008db0:	4d10      	ldr	r5, [pc, #64]	; (8008df4 <test_execute+0x334>)
    streamPut(test_chp, *msgp++);
 8008db2:	6820      	ldr	r0, [r4, #0]
 8008db4:	6803      	ldr	r3, [r0, #0]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	4798      	blx	r3
  while (*msgp)
 8008dba:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008dbe:	2900      	cmp	r1, #0
 8008dc0:	d1f7      	bne.n	8008db2 <test_execute+0x2f2>
  test_print("Final result: ");
  if (test_global_fail)
 8008dc2:	4b0d      	ldr	r3, [pc, #52]	; (8008df8 <test_execute+0x338>)
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	b93b      	cbnz	r3, 8008dd8 <test_execute+0x318>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8008dc8:	480c      	ldr	r0, [pc, #48]	; (8008dfc <test_execute+0x33c>)
 8008dca:	f7fc fe99 	bl	8005b00 <test_println>
#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
}
 8008dce:	4b0a      	ldr	r3, [pc, #40]	; (8008df8 <test_execute+0x338>)
 8008dd0:	7818      	ldrb	r0, [r3, #0]
 8008dd2:	b003      	add	sp, #12
 8008dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("FAILURE");
 8008dd8:	4809      	ldr	r0, [pc, #36]	; (8008e00 <test_execute+0x340>)
 8008dda:	f7fc fe91 	bl	8005b00 <test_println>
}
 8008dde:	4b06      	ldr	r3, [pc, #24]	; (8008df8 <test_execute+0x338>)
 8008de0:	7818      	ldrb	r0, [r3, #0]
 8008de2:	b003      	add	sp, #12
 8008de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("*** Test Suite");
 8008de8:	4806      	ldr	r0, [pc, #24]	; (8008e04 <test_execute+0x344>)
 8008dea:	f7fc fe89 	bl	8005b00 <test_println>
 8008dee:	e683      	b.n	8008af8 <test_execute+0x38>
 8008df0:	080100cc 	.word	0x080100cc
 8008df4:	08010b44 	.word	0x08010b44
 8008df8:	20002798 	.word	0x20002798
 8008dfc:	08010b94 	.word	0x08010b94
 8008e00:	08010b9c 	.word	0x08010b9c
 8008e04:	08010b54 	.word	0x08010b54
	...

08008e10 <test_rt>:
#endif

#if (SHELL_CMD_TEST_ENABLED == TRUE) || defined(__DOXYGEN__)
static THD_FUNCTION(test_rt, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &rt_test_suite);
 8008e10:	4901      	ldr	r1, [pc, #4]	; (8008e18 <test_rt+0x8>)
 8008e12:	f7ff be55 	b.w	8008ac0 <test_execute>
 8008e16:	bf00      	nop
 8008e18:	08010024 	.word	0x08010024
 8008e1c:	00000000 	.word	0x00000000

08008e20 <test_oslib>:
}

static THD_FUNCTION(test_oslib, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &oslib_test_suite);
 8008e20:	4901      	ldr	r1, [pc, #4]	; (8008e28 <test_oslib+0x8>)
 8008e22:	f7ff be4d 	b.w	8008ac0 <test_execute>
 8008e26:	bf00      	nop
 8008e28:	0800ed0c 	.word	0x0800ed0c
 8008e2c:	00000000 	.word	0x00000000

08008e30 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	2320      	movs	r3, #32
 8008e34:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 8008e38:	4c0c      	ldr	r4, [pc, #48]	; (8008e6c <chMsgWait+0x3c>)
 8008e3a:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 8008e42:	4298      	cmp	r0, r3
 8008e44:	d009      	beq.n	8008e5a <chMsgWait+0x2a>
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
 8008e46:	250d      	movs	r5, #13
  tqp->next             = tp->queue.next;
 8008e48:	6801      	ldr	r1, [r0, #0]
 8008e4a:	2400      	movs	r4, #0
 8008e4c:	62d1      	str	r1, [r2, #44]	; 0x2c
  tqp->next->queue.prev = (thread_t *)tqp;
 8008e4e:	604b      	str	r3, [r1, #4]
 8008e50:	f880 5020 	strb.w	r5, [r0, #32]
 8008e54:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();

  return tp;
}
 8008e58:	bd38      	pop	{r3, r4, r5, pc}
    chSchGoSleepS(CH_STATE_WTMSG);
 8008e5a:	200e      	movs	r0, #14
 8008e5c:	f7ff f938 	bl	80080d0 <chSchGoSleepS>
 8008e60:	69a2      	ldr	r2, [r4, #24]
 8008e62:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8008e64:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 8008e68:	e7ed      	b.n	8008e46 <chMsgWait+0x16>
 8008e6a:	bf00      	nop
 8008e6c:	20001eb0 	.word	0x20001eb0

08008e70 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	2620      	movs	r6, #32
 8008e74:	2500      	movs	r5, #0
    tp = chMsgWait();
 8008e76:	f7ff ffdb 	bl	8008e30 <chMsgWait>
 8008e7a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008e7c:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8008e80:	4621      	mov	r1, r4
 8008e82:	f7ff f845 	bl	8007f10 <chSchWakeupS>
 8008e86:	f385 8811 	msr	BASEPRI, r5
  } while (msg);
 8008e8a:	2c00      	cmp	r4, #0
 8008e8c:	d1f3      	bne.n	8008e76 <bmk_thread1+0x6>
}
 8008e8e:	bd70      	pop	{r4, r5, r6, pc}

08008e90 <chMsgSend>:
  thread_t *ctp = currp;
 8008e90:	4b0e      	ldr	r3, [pc, #56]	; (8008ecc <chMsgSend+0x3c>)
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8008e92:	b510      	push	{r4, lr}
 8008e94:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8008e96:	699c      	ldr	r4, [r3, #24]
 8008e98:	f382 8811 	msr	BASEPRI, r2
  ctp->u.sentmsg = msg;
 8008e9c:	6261      	str	r1, [r4, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 8008e9e:	6b02      	ldr	r2, [r0, #48]	; 0x30
  msg_insert(ctp, &tp->msgqueue);
 8008ea0:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 8008ea4:	e9c4 1200 	strd	r1, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8008ea8:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 8008eaa:	f890 2020 	ldrb.w	r2, [r0, #32]
  tqp->prev                  = tp;
 8008eae:	6304      	str	r4, [r0, #48]	; 0x30
 8008eb0:	2a0e      	cmp	r2, #14
 8008eb2:	d007      	beq.n	8008ec4 <chMsgSend+0x34>
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8008eb4:	200c      	movs	r0, #12
 8008eb6:	f7ff f90b 	bl	80080d0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 8008eba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	f383 8811 	msr	BASEPRI, r3
}
 8008ec2:	bd10      	pop	{r4, pc}
    (void) chSchReadyI(tp);
 8008ec4:	f7fd fde4 	bl	8006a90 <chSchReadyI>
 8008ec8:	e7f4      	b.n	8008eb4 <chMsgSend+0x24>
 8008eca:	bf00      	nop
 8008ecc:	20001eb0 	.word	0x20001eb0

08008ed0 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 8008ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed4:	4607      	mov	r7, r0
  start = test_wait_tick();
 8008ed6:	f7ff fd93 	bl	8008a00 <test_wait_tick>
  uint32_t n = 0;
 8008eda:	2400      	movs	r4, #0
  start = test_wait_tick();
 8008edc:	4606      	mov	r6, r0
 8008ede:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8008ee2:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 8008ee6:	b2ad      	uxth	r5, r5
 8008ee8:	1a2d      	subs	r5, r5, r0
    (void)chMsgSend(tp, 1);
 8008eea:	2101      	movs	r1, #1
 8008eec:	4638      	mov	r0, r7
 8008eee:	f7ff ffcf 	bl	8008e90 <chMsgSend>
 8008ef2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    n++;
 8008ef6:	3401      	adds	r4, #1
  return (bool)((time - start) < (end - start));
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	1b9b      	subs	r3, r3, r6
  } while (chVTIsSystemTimeWithinX(start, end));
 8008efc:	42ab      	cmp	r3, r5
 8008efe:	dbf4      	blt.n	8008eea <msg_loop_test+0x1a>
  (void)chMsgSend(tp, 0);
 8008f00:	4638      	mov	r0, r7
 8008f02:	2100      	movs	r1, #0
 8008f04:	f7ff ffc4 	bl	8008e90 <chMsgSend>
}
 8008f08:	4620      	mov	r0, r4
 8008f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f0e:	bf00      	nop

08008f10 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 8008f10:	b510      	push	{r4, lr}
 8008f12:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8008f14:	2141      	movs	r1, #65	; 0x41
 8008f16:	f7ff ffbb 	bl	8008e90 <chMsgSend>
  chMsgSend(p, 'B');
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	2142      	movs	r1, #66	; 0x42
 8008f1e:	f7ff ffb7 	bl	8008e90 <chMsgSend>
  chMsgSend(p, 'C');
 8008f22:	4620      	mov	r0, r4
 8008f24:	2143      	movs	r1, #67	; 0x43
 8008f26:	f7ff ffb3 	bl	8008e90 <chMsgSend>
  chMsgSend(p, 'D');
 8008f2a:	4620      	mov	r0, r4
}
 8008f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 8008f30:	2144      	movs	r1, #68	; 0x44
 8008f32:	f7ff bfad 	b.w	8008e90 <chMsgSend>
 8008f36:	bf00      	nop
	...

08008f40 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 8008f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 8008f42:	4a38      	ldr	r2, [pc, #224]	; (8009024 <chMtxLockS+0xe4>)
  if (mp->owner != NULL) {
 8008f44:	6883      	ldr	r3, [r0, #8]
  thread_t *ctp = currp;
 8008f46:	6995      	ldr	r5, [r2, #24]
  if (mp->owner != NULL) {
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d040      	beq.n	8008fce <chMtxLockS+0x8e>
      while (tp->prio < ctp->prio) {
 8008f4c:	68a9      	ldr	r1, [r5, #8]
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	4604      	mov	r4, r0
 8008f52:	4291      	cmp	r1, r2
 8008f54:	d907      	bls.n	8008f66 <chMtxLockS+0x26>
        switch (tp->state) {
 8008f56:	f893 2020 	ldrb.w	r2, [r3, #32]
        tp->prio = ctp->prio;
 8008f5a:	6099      	str	r1, [r3, #8]
        switch (tp->state) {
 8008f5c:	2a06      	cmp	r2, #6
 8008f5e:	d03b      	beq.n	8008fd8 <chMtxLockS+0x98>
 8008f60:	2a07      	cmp	r2, #7
 8008f62:	d015      	beq.n	8008f90 <chMtxLockS+0x50>
 8008f64:	b342      	cbz	r2, 8008fb8 <chMtxLockS+0x78>
      queue_prio_insert(ctp, &mp->queue);
 8008f66:	4626      	mov	r6, r4
 8008f68:	4623      	mov	r3, r4
 8008f6a:	e003      	b.n	8008f74 <chMtxLockS+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8008f6c:	6899      	ldr	r1, [r3, #8]
 8008f6e:	68aa      	ldr	r2, [r5, #8]
 8008f70:	4291      	cmp	r1, r2
 8008f72:	d32a      	bcc.n	8008fca <chMtxLockS+0x8a>
    cp = cp->queue.next;
 8008f74:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8008f76:	429c      	cmp	r4, r3
 8008f78:	d1f8      	bne.n	8008f6c <chMtxLockS+0x2c>
  tp->queue.prev             = cp->queue.prev;
 8008f7a:	6873      	ldr	r3, [r6, #4]
      chSchGoSleepS(CH_STATE_WTMTX);
 8008f7c:	2006      	movs	r0, #6
 8008f7e:	e9c5 6300 	strd	r6, r3, [r5]
  tp->queue.prev->queue.next = tp;
 8008f82:	601d      	str	r5, [r3, #0]
  cp->queue.prev             = tp;
 8008f84:	6075      	str	r5, [r6, #4]
      ctp->u.wtmtxp = mp;
 8008f86:	626c      	str	r4, [r5, #36]	; 0x24
}
 8008f88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 8008f8c:	f7ff b8a0 	b.w	80080d0 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 8008f90:	681f      	ldr	r7, [r3, #0]
 8008f92:	6858      	ldr	r0, [r3, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8008f94:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8008f96:	6007      	str	r7, [r0, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8008f98:	681f      	ldr	r7, [r3, #0]
 8008f9a:	4632      	mov	r2, r6
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	e002      	b.n	8008fa6 <chMtxLockS+0x66>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8008fa0:	6890      	ldr	r0, [r2, #8]
 8008fa2:	4288      	cmp	r0, r1
 8008fa4:	d334      	bcc.n	8009010 <chMtxLockS+0xd0>
    cp = cp->queue.next;
 8008fa6:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8008fa8:	4296      	cmp	r6, r2
 8008faa:	d1f9      	bne.n	8008fa0 <chMtxLockS+0x60>
  tp->queue.prev             = cp->queue.prev;
 8008fac:	6872      	ldr	r2, [r6, #4]
 8008fae:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8008fb2:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8008fb4:	6073      	str	r3, [r6, #4]
 8008fb6:	e7d6      	b.n	8008f66 <chMtxLockS+0x26>
  tp->queue.prev->queue.next = tp->queue.next;
 8008fb8:	e9d3 1200 	ldrd	r1, r2, [r3]
 8008fbc:	6011      	str	r1, [r2, #0]
          (void) chSchReadyI(queue_dequeue(tp));
 8008fbe:	4618      	mov	r0, r3
  tp->queue.next->queue.prev = tp->queue.prev;
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	605a      	str	r2, [r3, #4]
 8008fc4:	f7fd fd64 	bl	8006a90 <chSchReadyI>
 8008fc8:	e7cd      	b.n	8008f66 <chMtxLockS+0x26>
    cp = cp->queue.next;
 8008fca:	461e      	mov	r6, r3
 8008fcc:	e7d5      	b.n	8008f7a <chMtxLockS+0x3a>
    mp->next = ctp->mtxlist;
 8008fce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008fd0:	e9c0 5302 	strd	r5, r3, [r0, #8]
    ctp->mtxlist = mp;
 8008fd4:	63a8      	str	r0, [r5, #56]	; 0x38
}
 8008fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8008fd8:	681f      	ldr	r7, [r3, #0]
 8008fda:	6858      	ldr	r0, [r3, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8008fdc:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8008fde:	6007      	str	r7, [r0, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8008fe0:	681f      	ldr	r7, [r3, #0]
 8008fe2:	46b4      	mov	ip, r6
 8008fe4:	4632      	mov	r2, r6
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	e002      	b.n	8008ff0 <chMtxLockS+0xb0>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8008fea:	6890      	ldr	r0, [r2, #8]
 8008fec:	4288      	cmp	r0, r1
 8008fee:	d316      	bcc.n	800901e <chMtxLockS+0xde>
    cp = cp->queue.next;
 8008ff0:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8008ff2:	4296      	cmp	r6, r2
 8008ff4:	d1f9      	bne.n	8008fea <chMtxLockS+0xaa>
  tp->queue.prev             = cp->queue.prev;
 8008ff6:	f8dc 2004 	ldr.w	r2, [ip, #4]
      while (tp->prio < ctp->prio) {
 8008ffa:	68a9      	ldr	r1, [r5, #8]
 8008ffc:	e9c3 c200 	strd	ip, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8009000:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8009002:	f8cc 3004 	str.w	r3, [ip, #4]
          tp = tp->u.wtmtxp->owner;
 8009006:	68b3      	ldr	r3, [r6, #8]
      while (tp->prio < ctp->prio) {
 8009008:	689a      	ldr	r2, [r3, #8]
 800900a:	428a      	cmp	r2, r1
 800900c:	d3a3      	bcc.n	8008f56 <chMtxLockS+0x16>
 800900e:	e7aa      	b.n	8008f66 <chMtxLockS+0x26>
    cp = cp->queue.next;
 8009010:	4616      	mov	r6, r2
  tp->queue.prev             = cp->queue.prev;
 8009012:	6872      	ldr	r2, [r6, #4]
 8009014:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8009018:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 800901a:	6073      	str	r3, [r6, #4]
 800901c:	e7a3      	b.n	8008f66 <chMtxLockS+0x26>
    cp = cp->queue.next;
 800901e:	4694      	mov	ip, r2
 8009020:	e7e9      	b.n	8008ff6 <chMtxLockS+0xb6>
 8009022:	bf00      	nop
 8009024:	20001eb0 	.word	0x20001eb0
	...

08009030 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 8009030:	b508      	push	{r3, lr}
 8009032:	2320      	movs	r3, #32
 8009034:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 8009038:	f7ff ff82 	bl	8008f40 <chMtxLockS>
 800903c:	2300      	movs	r3, #0
 800903e:	f383 8811 	msr	BASEPRI, r3
}
 8009042:	bd08      	pop	{r3, pc}
	...

08009050 <chSemWait>:
 8009050:	2320      	movs	r3, #32
 8009052:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8009056:	6883      	ldr	r3, [r0, #8]
 8009058:	3b01      	subs	r3, #1
 800905a:	2b00      	cmp	r3, #0
 800905c:	6083      	str	r3, [r0, #8]
 800905e:	db04      	blt.n	800906a <chSemWait+0x1a>
  return MSG_OK;
 8009060:	2000      	movs	r0, #0
 8009062:	2300      	movs	r3, #0
 8009064:	f383 8811 	msr	BASEPRI, r3
}
 8009068:	4770      	bx	lr
 800906a:	4603      	mov	r3, r0
msg_t chSemWait(semaphore_t *sp) {
 800906c:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 800906e:	4c08      	ldr	r4, [pc, #32]	; (8009090 <chSemWait+0x40>)
    chSchGoSleepS(CH_STATE_WTSEM);
 8009070:	2005      	movs	r0, #5
    currp->u.wtsemp = sp;
 8009072:	69a2      	ldr	r2, [r4, #24]
 8009074:	6253      	str	r3, [r2, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 8009076:	6859      	ldr	r1, [r3, #4]
 8009078:	e9c2 3100 	strd	r3, r1, [r2]
  tp->queue.prev->queue.next = tp;
 800907c:	600a      	str	r2, [r1, #0]
  tqp->prev                  = tp;
 800907e:	605a      	str	r2, [r3, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8009080:	f7ff f826 	bl	80080d0 <chSchGoSleepS>
    return currp->u.rdymsg;
 8009084:	69a3      	ldr	r3, [r4, #24]
 8009086:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009088:	2300      	movs	r3, #0
 800908a:	f383 8811 	msr	BASEPRI, r3
}
 800908e:	bd10      	pop	{r4, pc}
 8009090:	20001eb0 	.word	0x20001eb0
	...

080090a0 <rt_test_010_010_execute>:
static void rt_test_010_010_execute(void) {
 80090a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 80090a4:	2301      	movs	r3, #1
 80090a6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800912c <rt_test_010_010_execute+0x8c>
    n = 0;
 80090aa:	2500      	movs	r5, #0
  test_set_step(1);
 80090ac:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 80090b0:	f7ff fca6 	bl	8008a00 <test_wait_tick>
 80090b4:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 80090b8:	4607      	mov	r7, r0
  return systime + (systime_t)interval;
 80090ba:	f500 66fa 	add.w	r6, r0, #2000	; 0x7d0
 80090be:	b2b6      	uxth	r6, r6
      chSemWait(&sem1);
 80090c0:	4c17      	ldr	r4, [pc, #92]	; (8009120 <rt_test_010_010_execute+0x80>)
 80090c2:	1a36      	subs	r6, r6, r0
 80090c4:	4620      	mov	r0, r4
 80090c6:	f7ff ffc3 	bl	8009050 <chSemWait>
      chSemSignal(&sem1);
 80090ca:	4620      	mov	r0, r4
 80090cc:	f7fe ffe0 	bl	8008090 <chSemSignal>
      chSemWait(&sem1);
 80090d0:	4620      	mov	r0, r4
 80090d2:	f7ff ffbd 	bl	8009050 <chSemWait>
      chSemSignal(&sem1);
 80090d6:	4620      	mov	r0, r4
 80090d8:	f7fe ffda 	bl	8008090 <chSemSignal>
      chSemWait(&sem1);
 80090dc:	4620      	mov	r0, r4
 80090de:	f7ff ffb7 	bl	8009050 <chSemWait>
      chSemSignal(&sem1);
 80090e2:	4620      	mov	r0, r4
 80090e4:	f7fe ffd4 	bl	8008090 <chSemSignal>
      chSemWait(&sem1);
 80090e8:	4620      	mov	r0, r4
 80090ea:	f7ff ffb1 	bl	8009050 <chSemWait>
      chSemSignal(&sem1);
 80090ee:	4620      	mov	r0, r4
 80090f0:	f7fe ffce 	bl	8008090 <chSemSignal>
 80090f4:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
      n++;
 80090f8:	3501      	adds	r5, #1
  return (bool)((time - start) < (end - start));
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	1bdb      	subs	r3, r3, r7
    } while (chVTIsSystemTimeWithinX(start, end));
 80090fe:	42b3      	cmp	r3, r6
 8009100:	dbe0      	blt.n	80090c4 <rt_test_010_010_execute+0x24>
  test_set_step(2);
 8009102:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8009104:	4807      	ldr	r0, [pc, #28]	; (8009124 <rt_test_010_010_execute+0x84>)
  test_set_step(2);
 8009106:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 800910a:	f7fc fd19 	bl	8005b40 <test_print>
    test_printn(n * 4);
 800910e:	00a8      	lsls	r0, r5, #2
 8009110:	f7fc fca6 	bl	8005a60 <test_printn>
}
 8009114:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" wait+signal/S");
 8009118:	4803      	ldr	r0, [pc, #12]	; (8009128 <rt_test_010_010_execute+0x88>)
 800911a:	f7fc bcf1 	b.w	8005b00 <test_println>
 800911e:	bf00      	nop
 8009120:	20002114 	.word	0x20002114
 8009124:	0800fdf0 	.word	0x0800fdf0
 8009128:	0800fe1c 	.word	0x0800fe1c
 800912c:	2000283c 	.word	0x2000283c

08009130 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
 8009130:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8009132:	4c08      	ldr	r4, [pc, #32]	; (8009154 <bmk_thread7+0x24>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8009134:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 8009136:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800913a:	075a      	lsls	r2, r3, #29
 800913c:	d408      	bmi.n	8009150 <bmk_thread7+0x20>
    chSemWait(&sem1);
 800913e:	4d06      	ldr	r5, [pc, #24]	; (8009158 <bmk_thread7+0x28>)
 8009140:	4628      	mov	r0, r5
 8009142:	f7ff ff85 	bl	8009050 <chSemWait>
 8009146:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 8009148:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800914c:	075b      	lsls	r3, r3, #29
 800914e:	d5f7      	bpl.n	8009140 <bmk_thread7+0x10>
}
 8009150:	bd38      	pop	{r3, r4, r5, pc}
 8009152:	bf00      	nop
 8009154:	20001eb0 	.word	0x20001eb0
 8009158:	20002114 	.word	0x20002114
 800915c:	00000000 	.word	0x00000000

08009160 <thread3>:
static THD_FUNCTION(thread3, p) {
 8009160:	b510      	push	{r4, lr}
  chSemWait(&sem1);
 8009162:	4c04      	ldr	r4, [pc, #16]	; (8009174 <thread3+0x14>)
 8009164:	4620      	mov	r0, r4
 8009166:	f7ff ff73 	bl	8009050 <chSemWait>
  chSemSignal(&sem1);
 800916a:	4620      	mov	r0, r4
}
 800916c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSemSignal(&sem1);
 8009170:	f7fe bf8e 	b.w	8008090 <chSemSignal>
 8009174:	20002108 	.word	0x20002108
	...

08009180 <thread1.lto_priv.98>:
static THD_FUNCTION(thread1, p) {
 8009180:	b510      	push	{r4, lr}
 8009182:	4604      	mov	r4, r0
  chSemWait(&sem1);
 8009184:	4803      	ldr	r0, [pc, #12]	; (8009194 <thread1.lto_priv.98+0x14>)
 8009186:	f7ff ff63 	bl	8009050 <chSemWait>
  test_emit_token(*(char *)p);
 800918a:	7820      	ldrb	r0, [r4, #0]
}
 800918c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 8009190:	f7fc bc76 	b.w	8005a80 <test_emit_token>
 8009194:	20002108 	.word	0x20002108
	...

080091a0 <chThdExitS>:
void chThdExitS(msg_t msg) {
 80091a0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 80091a2:	4b10      	ldr	r3, [pc, #64]	; (80091e4 <chThdExitS+0x44>)
 80091a4:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 80091a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 80091a8:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80091ac:	42ab      	cmp	r3, r5
  tp->u.exitcode = msg;
 80091ae:	6260      	str	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 80091b0:	d007      	beq.n	80091c2 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 80091b2:	681a      	ldr	r2, [r3, #0]
    (void) chSchReadyI(list_remove(&tp->waiting));
 80091b4:	4618      	mov	r0, r3
 80091b6:	62a2      	str	r2, [r4, #40]	; 0x28
 80091b8:	f7fd fc6a 	bl	8006a90 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 80091bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 80091be:	42ab      	cmp	r3, r5
 80091c0:	d1f7      	bne.n	80091b2 <chThdExitS+0x12>
  if ((tp->refs == (trefs_t)0) &&
 80091c2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80091c6:	b943      	cbnz	r3, 80091da <chThdExitS+0x3a>
 80091c8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80091cc:	079b      	lsls	r3, r3, #30
 80091ce:	d104      	bne.n	80091da <chThdExitS+0x3a>
    REG_REMOVE(tp);
 80091d0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80091d4:	611a      	str	r2, [r3, #16]
 80091d6:	6922      	ldr	r2, [r4, #16]
 80091d8:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 80091da:	200f      	movs	r0, #15
}
 80091dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 80091e0:	f7fe bf76 	b.w	80080d0 <chSchGoSleepS>
 80091e4:	20001eb0 	.word	0x20001eb0
	...

080091f0 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 80091f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	4681      	mov	r9, r0
  int n;
  ShellConfig *scfg = p;
  BaseSequentialStream *chp = scfg->sc_channel;
 80091f6:	6807      	ldr	r7, [r0, #0]
  const ShellCommand *scp = scfg->sc_commands;
 80091f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
THD_FUNCTION(shellThread, p) {
 80091fc:	b09b      	sub	sp, #108	; 0x6c
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 80091fe:	4975      	ldr	r1, [pc, #468]	; (80093d4 <shellThread+0x1e4>)
 8009200:	4638      	mov	r0, r7
  const ShellCommand *scp = scfg->sc_commands;
 8009202:	9301      	str	r3, [sp, #4]
  chprintf(chp, SHELL_NEWLINE_STR);
 8009204:	f7fe f834 	bl	8007270 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell"SHELL_NEWLINE_STR);
 8009208:	4638      	mov	r0, r7
 800920a:	4973      	ldr	r1, [pc, #460]	; (80093d8 <shellThread+0x1e8>)
 800920c:	f7fe f830 	bl	8007270 <chprintf>
  while (true) {
    chprintf(chp, SHELL_PROMPT_STR);
 8009210:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 800940c <shellThread+0x21c>
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, SHELL_NEWLINE_STR);
 8009214:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 80093d4 <shellThread+0x1e4>
 8009218:	ae0a      	add	r6, sp, #40	; 0x28
  char *p = line;
 800921a:	4634      	mov	r4, r6
    chprintf(chp, SHELL_PROMPT_STR);
 800921c:	4651      	mov	r1, sl
 800921e:	4638      	mov	r0, r7
 8009220:	f7fe f826 	bl	8007270 <chprintf>
  BaseSequentialStream *chp = scfg->sc_channel;
 8009224:	f8d9 5000 	ldr.w	r5, [r9]
 8009228:	682b      	ldr	r3, [r5, #0]
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	f10d 010f 	add.w	r1, sp, #15
 8009232:	4628      	mov	r0, r5
 8009234:	4798      	blx	r3
 8009236:	2800      	cmp	r0, #0
 8009238:	d06d      	beq.n	8009316 <shellThread+0x126>
    if (c == 4) {
 800923a:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800923e:	2904      	cmp	r1, #4
 8009240:	d065      	beq.n	800930e <shellThread+0x11e>
    if ((c == 8) || (c == 127)) {
 8009242:	2908      	cmp	r1, #8
      continue;
    }
#endif
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 8009244:	f10d 0267 	add.w	r2, sp, #103	; 0x67
    if ((c == 8) || (c == 127)) {
 8009248:	d012      	beq.n	8009270 <shellThread+0x80>
 800924a:	297f      	cmp	r1, #127	; 0x7f
 800924c:	d010      	beq.n	8009270 <shellThread+0x80>
    if (c == '\r') {
 800924e:	290d      	cmp	r1, #13
 8009250:	d022      	beq.n	8009298 <shellThread+0xa8>
    if (c < 0x20)
 8009252:	291f      	cmp	r1, #31
 8009254:	682b      	ldr	r3, [r5, #0]
 8009256:	d9e8      	bls.n	800922a <shellThread+0x3a>
    if (p < line + size - 1) {
 8009258:	4294      	cmp	r4, r2
 800925a:	d2e6      	bcs.n	800922a <shellThread+0x3a>
      streamPut(chp, c);
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	4628      	mov	r0, r5
 8009260:	4798      	blx	r3
      *p++ = (char)c;
 8009262:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8009266:	3401      	adds	r4, #1
 8009268:	f804 3c01 	strb.w	r3, [r4, #-1]
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	e7dc      	b.n	800922a <shellThread+0x3a>
      if (p != line) {
 8009270:	42b4      	cmp	r4, r6
 8009272:	682b      	ldr	r3, [r5, #0]
 8009274:	d0d9      	beq.n	800922a <shellThread+0x3a>
        streamPut(chp, 0x08);
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	2108      	movs	r1, #8
 800927a:	4628      	mov	r0, r5
 800927c:	4798      	blx	r3
        streamPut(chp, 0x20);
 800927e:	682b      	ldr	r3, [r5, #0]
 8009280:	2120      	movs	r1, #32
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	4628      	mov	r0, r5
 8009286:	4798      	blx	r3
        streamPut(chp, 0x08);
 8009288:	682b      	ldr	r3, [r5, #0]
 800928a:	2108      	movs	r1, #8
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	4628      	mov	r0, r5
 8009290:	4798      	blx	r3
        p--;
 8009292:	3c01      	subs	r4, #1
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	e7c8      	b.n	800922a <shellThread+0x3a>
      *p = 0;
 8009298:	f04f 0800 	mov.w	r8, #0
      chprintf(chp, SHELL_NEWLINE_STR);
 800929c:	4628      	mov	r0, r5
 800929e:	4659      	mov	r1, fp
 80092a0:	f7fd ffe6 	bl	8007270 <chprintf>
      *p = 0;
 80092a4:	f884 8000 	strb.w	r8, [r4]
    lp = parse_arguments(line, &tokp);
 80092a8:	a904      	add	r1, sp, #16
 80092aa:	4630      	mov	r0, r6
 80092ac:	f7fd ffb0 	bl	8007210 <parse_arguments>
    n = 0;
 80092b0:	4644      	mov	r4, r8
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 80092b2:	a904      	add	r1, sp, #16
    lp = parse_arguments(line, &tokp);
 80092b4:	4680      	mov	r8, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 80092b6:	2000      	movs	r0, #0
 80092b8:	ad05      	add	r5, sp, #20
 80092ba:	f7fd ffa9 	bl	8007210 <parse_arguments>
 80092be:	b150      	cbz	r0, 80092d6 <shellThread+0xe6>
      if (n >= SHELL_MAX_ARGUMENTS) {
 80092c0:	2c04      	cmp	r4, #4
 80092c2:	d01d      	beq.n	8009300 <shellThread+0x110>
      args[n++] = lp;
 80092c4:	f845 0b04 	str.w	r0, [r5], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 80092c8:	a904      	add	r1, sp, #16
 80092ca:	2000      	movs	r0, #0
      args[n++] = lp;
 80092cc:	3401      	adds	r4, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 80092ce:	f7fd ff9f 	bl	8007210 <parse_arguments>
 80092d2:	2800      	cmp	r0, #0
 80092d4:	d1f4      	bne.n	80092c0 <shellThread+0xd0>
    args[n] = NULL;
 80092d6:	ab1a      	add	r3, sp, #104	; 0x68
 80092d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80092dc:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 80092e0:	f1b8 0f00 	cmp.w	r8, #0
 80092e4:	d099      	beq.n	800921a <shellThread+0x2a>
      if (strcmp(cmd, "help") == 0) {
 80092e6:	493d      	ldr	r1, [pc, #244]	; (80093dc <shellThread+0x1ec>)
 80092e8:	4640      	mov	r0, r8
 80092ea:	f7fc f833 	bl	8005354 <strcmp>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d147      	bne.n	8009382 <shellThread+0x192>
        if (n > 0) {
 80092f2:	b32c      	cbz	r4, 8009340 <shellThread+0x150>
          shellUsage(chp, "help");
 80092f4:	4a39      	ldr	r2, [pc, #228]	; (80093dc <shellThread+0x1ec>)
 80092f6:	493a      	ldr	r1, [pc, #232]	; (80093e0 <shellThread+0x1f0>)
 80092f8:	4638      	mov	r0, r7
 80092fa:	f7fd ffb9 	bl	8007270 <chprintf>
 80092fe:	e78c      	b.n	800921a <shellThread+0x2a>
        chprintf(chp, "too many arguments"SHELL_NEWLINE_STR);
 8009300:	4938      	ldr	r1, [pc, #224]	; (80093e4 <shellThread+0x1f4>)
 8009302:	4638      	mov	r0, r7
 8009304:	f7fd ffb4 	bl	8007270 <chprintf>
    args[n] = NULL;
 8009308:	2300      	movs	r3, #0
 800930a:	9309      	str	r3, [sp, #36]	; 0x24
 800930c:	e785      	b.n	800921a <shellThread+0x2a>
      chprintf(chp, "^D");
 800930e:	4628      	mov	r0, r5
 8009310:	4935      	ldr	r1, [pc, #212]	; (80093e8 <shellThread+0x1f8>)
 8009312:	f7fd ffad 	bl	8007270 <chprintf>
      chprintf(chp, SHELL_NEWLINE_STR);
 8009316:	492f      	ldr	r1, [pc, #188]	; (80093d4 <shellThread+0x1e4>)
 8009318:	4638      	mov	r0, r7
 800931a:	f7fd ffa9 	bl	8007270 <chprintf>
      chprintf(chp, "logout");
 800931e:	4638      	mov	r0, r7
 8009320:	4932      	ldr	r1, [pc, #200]	; (80093ec <shellThread+0x1fc>)
 8009322:	f7fd ffa5 	bl	8007270 <chprintf>
 8009326:	2320      	movs	r3, #32
 8009328:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 800932c:	2100      	movs	r1, #0
 800932e:	4830      	ldr	r0, [pc, #192]	; (80093f0 <shellThread+0x200>)
 8009330:	f7fd fc7e 	bl	8006c30 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 8009334:	2000      	movs	r0, #0
 8009336:	f7ff ff33 	bl	80091a0 <chThdExitS>
}
 800933a:	b01b      	add	sp, #108	; 0x6c
 800933c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chprintf(chp, "Commands: help ");
 8009340:	492c      	ldr	r1, [pc, #176]	; (80093f4 <shellThread+0x204>)
 8009342:	4638      	mov	r0, r7
 8009344:	f7fd ff94 	bl	8007270 <chprintf>
 8009348:	4c2b      	ldr	r4, [pc, #172]	; (80093f8 <shellThread+0x208>)
  while (scp->sc_name != NULL) {
 800934a:	4a2c      	ldr	r2, [pc, #176]	; (80093fc <shellThread+0x20c>)
    chprintf(chp, "%s ", scp->sc_name);
 800934c:	4d2c      	ldr	r5, [pc, #176]	; (8009400 <shellThread+0x210>)
 800934e:	4629      	mov	r1, r5
 8009350:	4638      	mov	r0, r7
 8009352:	f7fd ff8d 	bl	8007270 <chprintf>
  while (scp->sc_name != NULL) {
 8009356:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800935a:	2a00      	cmp	r2, #0
 800935c:	d1f7      	bne.n	800934e <shellThread+0x15e>
        if (scp != NULL)
 800935e:	9c01      	ldr	r4, [sp, #4]
 8009360:	b154      	cbz	r4, 8009378 <shellThread+0x188>
  while (scp->sc_name != NULL) {
 8009362:	6822      	ldr	r2, [r4, #0]
 8009364:	b142      	cbz	r2, 8009378 <shellThread+0x188>
    chprintf(chp, "%s ", scp->sc_name);
 8009366:	4d26      	ldr	r5, [pc, #152]	; (8009400 <shellThread+0x210>)
 8009368:	4629      	mov	r1, r5
 800936a:	4638      	mov	r0, r7
 800936c:	f7fd ff80 	bl	8007270 <chprintf>
  while (scp->sc_name != NULL) {
 8009370:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8009374:	2a00      	cmp	r2, #0
 8009376:	d1f7      	bne.n	8009368 <shellThread+0x178>
        chprintf(chp, SHELL_NEWLINE_STR);
 8009378:	4659      	mov	r1, fp
 800937a:	4638      	mov	r0, r7
 800937c:	f7fd ff78 	bl	8007270 <chprintf>
 8009380:	e74b      	b.n	800921a <shellThread+0x2a>
 8009382:	4d1d      	ldr	r5, [pc, #116]	; (80093f8 <shellThread+0x208>)
  while (scp->sc_name != NULL) {
 8009384:	481d      	ldr	r0, [pc, #116]	; (80093fc <shellThread+0x20c>)
 8009386:	e002      	b.n	800938e <shellThread+0x19e>
 8009388:	f855 0f08 	ldr.w	r0, [r5, #8]!
 800938c:	b150      	cbz	r0, 80093a4 <shellThread+0x1b4>
    if (strcmp(scp->sc_name, name) == 0) {
 800938e:	4641      	mov	r1, r8
 8009390:	f7fb ffe0 	bl	8005354 <strcmp>
 8009394:	2800      	cmp	r0, #0
 8009396:	d1f7      	bne.n	8009388 <shellThread+0x198>
      scp->sc_function(chp, argc, argv);
 8009398:	686b      	ldr	r3, [r5, #4]
 800939a:	aa05      	add	r2, sp, #20
 800939c:	4621      	mov	r1, r4
 800939e:	4638      	mov	r0, r7
 80093a0:	4798      	blx	r3
 80093a2:	e73a      	b.n	800921a <shellThread+0x2a>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 80093a4:	9d01      	ldr	r5, [sp, #4]
 80093a6:	b15d      	cbz	r5, 80093c0 <shellThread+0x1d0>
  while (scp->sc_name != NULL) {
 80093a8:	6828      	ldr	r0, [r5, #0]
 80093aa:	b918      	cbnz	r0, 80093b4 <shellThread+0x1c4>
 80093ac:	e008      	b.n	80093c0 <shellThread+0x1d0>
 80093ae:	f855 0f08 	ldr.w	r0, [r5, #8]!
 80093b2:	b128      	cbz	r0, 80093c0 <shellThread+0x1d0>
    if (strcmp(scp->sc_name, name) == 0) {
 80093b4:	4641      	mov	r1, r8
 80093b6:	f7fb ffcd 	bl	8005354 <strcmp>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d1f7      	bne.n	80093ae <shellThread+0x1be>
 80093be:	e7eb      	b.n	8009398 <shellThread+0x1a8>
        chprintf(chp, "%s", cmd);
 80093c0:	4642      	mov	r2, r8
 80093c2:	4910      	ldr	r1, [pc, #64]	; (8009404 <shellThread+0x214>)
 80093c4:	4638      	mov	r0, r7
 80093c6:	f7fd ff53 	bl	8007270 <chprintf>
        chprintf(chp, " ?"SHELL_NEWLINE_STR);
 80093ca:	490f      	ldr	r1, [pc, #60]	; (8009408 <shellThread+0x218>)
 80093cc:	4638      	mov	r0, r7
 80093ce:	f7fd ff4f 	bl	8007270 <chprintf>
 80093d2:	e722      	b.n	800921a <shellThread+0x2a>
 80093d4:	0800e8fc 	.word	0x0800e8fc
 80093d8:	08010068 	.word	0x08010068
 80093dc:	080100a8 	.word	0x080100a8
 80093e0:	0800e840 	.word	0x0800e840
 80093e4:	08010090 	.word	0x08010090
 80093e8:	08010084 	.word	0x08010084
 80093ec:	08010088 	.word	0x08010088
 80093f0:	20002120 	.word	0x20002120
 80093f4:	080100b0 	.word	0x080100b0
 80093f8:	080100d8 	.word	0x080100d8
 80093fc:	08010060 	.word	0x08010060
 8009400:	080100c0 	.word	0x080100c0
 8009404:	080100c4 	.word	0x080100c4
 8009408:	080100c8 	.word	0x080100c8
 800940c:	0801007c 	.word	0x0801007c

08009410 <cmd_exit>:
  if (argc > 0) {
 8009410:	2900      	cmp	r1, #0
 8009412:	dd03      	ble.n	800941c <cmd_exit+0xc>
    shellUsage(chp, "exit");
 8009414:	4a08      	ldr	r2, [pc, #32]	; (8009438 <cmd_exit+0x28>)
 8009416:	4909      	ldr	r1, [pc, #36]	; (800943c <cmd_exit+0x2c>)
 8009418:	f7fd bf2a 	b.w	8007270 <chprintf>
static void cmd_exit(BaseSequentialStream *chp, int argc, char *argv[]) {
 800941c:	b508      	push	{r3, lr}
 800941e:	2320      	movs	r3, #32
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	4806      	ldr	r0, [pc, #24]	; (8009440 <cmd_exit+0x30>)
 8009426:	2100      	movs	r1, #0
 8009428:	f7fd fc02 	bl	8006c30 <chEvtBroadcastFlagsI>
}
 800942c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chThdExitS(msg);
 8009430:	2000      	movs	r0, #0
 8009432:	f7ff beb5 	b.w	80091a0 <chThdExitS>
 8009436:	bf00      	nop
 8009438:	08010060 	.word	0x08010060
 800943c:	0800e840 	.word	0x0800e840
 8009440:	20002120 	.word	0x20002120
	...

08009450 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8009450:	4b1b      	ldr	r3, [pc, #108]	; (80094c0 <__early_init+0x70>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8009452:	461a      	mov	r2, r3
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8009454:	6819      	ldr	r1, [r3, #0]
 8009456:	f041 0101 	orr.w	r1, r1, #1
 800945a:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800945c:	6813      	ldr	r3, [r2, #0]
 800945e:	0798      	lsls	r0, r3, #30
 8009460:	d5fc      	bpl.n	800945c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8009462:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8009464:	6813      	ldr	r3, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8009466:	4916      	ldr	r1, [pc, #88]	; (80094c0 <__early_init+0x70>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8009468:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 800946c:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800946e:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8009470:	684b      	ldr	r3, [r1, #4]
 8009472:	f013 0f0c 	tst.w	r3, #12
 8009476:	d1fb      	bne.n	8009470 <__early_init+0x20>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8009478:	680b      	ldr	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 800947a:	4a11      	ldr	r2, [pc, #68]	; (80094c0 <__early_init+0x70>)
  RCC->CR |= RCC_CR_HSEON;
 800947c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009480:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8009482:	6813      	ldr	r3, [r2, #0]
 8009484:	0399      	lsls	r1, r3, #14
 8009486:	d5fc      	bpl.n	8009482 <__early_init+0x32>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8009488:	6853      	ldr	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800948a:	490d      	ldr	r1, [pc, #52]	; (80094c0 <__early_init+0x70>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800948c:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8009490:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8009492:	6813      	ldr	r3, [r2, #0]
 8009494:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009498:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800949a:	680b      	ldr	r3, [r1, #0]
 800949c:	019b      	lsls	r3, r3, #6
 800949e:	d5fc      	bpl.n	800949a <__early_init+0x4a>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80094a0:	2212      	movs	r2, #18
 80094a2:	4b08      	ldr	r3, [pc, #32]	; (80094c4 <__early_init+0x74>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80094a4:	4808      	ldr	r0, [pc, #32]	; (80094c8 <__early_init+0x78>)
 80094a6:	6048      	str	r0, [r1, #4]
  FLASH->ACR = STM32_FLASHBITS;
 80094a8:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 80094aa:	684b      	ldr	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80094ac:	4a04      	ldr	r2, [pc, #16]	; (80094c0 <__early_init+0x70>)
  RCC->CFGR |= STM32_SW;
 80094ae:	f043 0302 	orr.w	r3, r3, #2
 80094b2:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80094b4:	6853      	ldr	r3, [r2, #4]
 80094b6:	f003 030c 	and.w	r3, r3, #12
 80094ba:	2b08      	cmp	r3, #8
 80094bc:	d1fa      	bne.n	80094b4 <__early_init+0x64>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 80094be:	4770      	bx	lr
 80094c0:	40021000 	.word	0x40021000
 80094c4:	40022000 	.word	0x40022000
 80094c8:	001d6400 	.word	0x001d6400
 80094cc:	00000000 	.word	0x00000000

080094d0 <Vector90>:
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 80094d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  istr = STM32_USB->ISTR;
 80094d4:	4bc2      	ldr	r3, [pc, #776]	; (80097e0 <Vector90+0x310>)
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 80094d6:	b085      	sub	sp, #20
  istr = STM32_USB->ISTR;
 80094d8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (istr & ISTR_RESET) {
 80094da:	0567      	lsls	r7, r4, #21
 80094dc:	f100 80ac 	bmi.w	8009638 <Vector90+0x168>
  if (istr & ISTR_SUSP) {
 80094e0:	0526      	lsls	r6, r4, #20
 80094e2:	f100 80cf 	bmi.w	8009684 <Vector90+0x1b4>
  if (istr & ISTR_WKUP) {
 80094e6:	04e5      	lsls	r5, r4, #19
 80094e8:	d508      	bpl.n	80094fc <Vector90+0x2c>
    uint32_t fnr = STM32_USB->FNR;
 80094ea:	4bbd      	ldr	r3, [pc, #756]	; (80097e0 <Vector90+0x310>)
 80094ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 80094ee:	0410      	lsls	r0, r2, #16
 80094f0:	f140 814f 	bpl.w	8009792 <Vector90+0x2c2>
    STM32_USB->ISTR = ~ISTR_WKUP;
 80094f4:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 80094f8:	4bb9      	ldr	r3, [pc, #740]	; (80097e0 <Vector90+0x310>)
 80094fa:	645a      	str	r2, [r3, #68]	; 0x44
  if (istr & ISTR_SOF) {
 80094fc:	05a1      	lsls	r1, r4, #22
 80094fe:	d50b      	bpl.n	8009518 <Vector90+0x48>
    _usb_isr_invoke_sof_cb(usbp);
 8009500:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 80097e4 <Vector90+0x314>
 8009504:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	b10b      	cbz	r3, 8009510 <Vector90+0x40>
 800950c:	4650      	mov	r0, sl
 800950e:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 8009510:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8009514:	4bb2      	ldr	r3, [pc, #712]	; (80097e0 <Vector90+0x310>)
 8009516:	645a      	str	r2, [r3, #68]	; 0x44
  while (istr & ISTR_CTR) {
 8009518:	0423      	lsls	r3, r4, #16
 800951a:	d579      	bpl.n	8009610 <Vector90+0x140>
 800951c:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 80097e4 <Vector90+0x314>
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8009520:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 80097e0 <Vector90+0x310>
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
 8009524:	f004 040f 	and.w	r4, r4, #15
 8009528:	00a5      	lsls	r5, r4, #2
 800952a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800952e:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
  uint32_t epr = STM32_USB->EPR[ep];
 8009532:	f8d5 8000 	ldr.w	r8, [r5]
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8009536:	1ca6      	adds	r6, r4, #2
 8009538:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
  if (epr & EPR_CTR_TX) {
 800953c:	f018 0f80 	tst.w	r8, #128	; 0x80
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8009540:	685f      	ldr	r7, [r3, #4]
  if (epr & EPR_CTR_TX) {
 8009542:	d04c      	beq.n	80095de <Vector90+0x10e>
    USBInEndpointState *isp = epcp->in_state;
 8009544:	f8d7 c014 	ldr.w	ip, [r7, #20]
    EPR_CLEAR_CTR_TX(ep);
 8009548:	682a      	ldr	r2, [r5, #0]
    isp->txcnt += isp->txlast;
 800954a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800954e:	f8dc 100c 	ldr.w	r1, [ip, #12]
    n = isp->txsize - isp->txcnt;
 8009552:	f8dc 0000 	ldr.w	r0, [ip]
    EPR_CLEAR_CTR_TX(ep);
 8009556:	f422 4278 	bic.w	r2, r2, #63488	; 0xf800
    isp->txcnt += isp->txlast;
 800955a:	440b      	add	r3, r1
    EPR_CLEAR_CTR_TX(ep);
 800955c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009560:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    if (n > 0) {
 8009564:	1ac0      	subs	r0, r0, r3
    EPR_CLEAR_CTR_TX(ep);
 8009566:	602a      	str	r2, [r5, #0]
    isp->txcnt += isp->txlast;
 8009568:	f8cc 3004 	str.w	r3, [ip, #4]
    if (n > 0) {
 800956c:	d055      	beq.n	800961a <Vector90+0x14a>
      if (n > epcp->in_maxsize)
 800956e:	8a3b      	ldrh	r3, [r7, #16]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8009570:	ea4f 1e04 	mov.w	lr, r4, lsl #4
 8009574:	4298      	cmp	r0, r3
 8009576:	bf28      	it	cs
 8009578:	4618      	movcs	r0, r3
      isp->txlast = n;
 800957a:	f8cc 000c 	str.w	r0, [ip, #12]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800957e:	f8db 2050 	ldr.w	r2, [fp, #80]	; 0x50
      isp->txbuf += isp->txlast;
 8009582:	f8dc 3008 	ldr.w	r3, [ip, #8]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8009586:	f102 4980 	add.w	r9, r2, #1073741824	; 0x40000000
 800958a:	f509 49c0 	add.w	r9, r9, #24576	; 0x6000
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800958e:	f85e 2009 	ldr.w	r2, [lr, r9]
      isp->txbuf += isp->txlast;
 8009592:	4419      	add	r1, r3
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8009594:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8009598:	44ce      	add	lr, r9
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800959a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
      isp->txbuf += isp->txlast;
 800959e:	f8cc 1008 	str.w	r1, [ip, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80095a2:	0052      	lsls	r2, r2, #1
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80095a4:	f8ce 0004 	str.w	r0, [lr, #4]
  while (i > 0) {
 80095a8:	b168      	cbz	r0, 80095c6 <Vector90+0xf6>
 80095aa:	3801      	subs	r0, #1
 80095ac:	0840      	lsrs	r0, r0, #1
 80095ae:	1d13      	adds	r3, r2, #4
 80095b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80095b4:	4684      	mov	ip, r0
 80095b6:	e000      	b.n	80095ba <Vector90+0xea>
 80095b8:	3304      	adds	r3, #4
    w |= *buf++ << 8;
 80095ba:	f831 0b02 	ldrh.w	r0, [r1], #2
  while (i > 0) {
 80095be:	4563      	cmp	r3, ip
    *pmap++ = (stm32_usb_pma_t)w;
 80095c0:	6010      	str	r0, [r2, #0]
 80095c2:	461a      	mov	r2, r3
  while (i > 0) {
 80095c4:	d1f8      	bne.n	80095b8 <Vector90+0xe8>
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 80095c6:	682b      	ldr	r3, [r5, #0]
 80095c8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80095cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095d0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80095d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095dc:	602b      	str	r3, [r5, #0]
  if (epr & EPR_CTR_RX) {
 80095de:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 80095e2:	d011      	beq.n	8009608 <Vector90+0x138>
    EPR_CLEAR_CTR_RX(ep);
 80095e4:	682b      	ldr	r3, [r5, #0]
    if (epr & EPR_SETUP) {
 80095e6:	f418 6f00 	tst.w	r8, #2048	; 0x800
    EPR_CLEAR_CTR_RX(ep);
 80095ea:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80095ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095f6:	b2e1      	uxtb	r1, r4
 80095f8:	602b      	str	r3, [r5, #0]
    if (epr & EPR_SETUP) {
 80095fa:	d05e      	beq.n	80096ba <Vector90+0x1ea>
      _usb_isr_invoke_setup_cb(usbp, ep);
 80095fc:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8009600:	6873      	ldr	r3, [r6, #4]
 8009602:	4878      	ldr	r0, [pc, #480]	; (80097e4 <Vector90+0x314>)
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	4798      	blx	r3
    istr = STM32_USB->ISTR;
 8009608:	f8db 4044 	ldr.w	r4, [fp, #68]	; 0x44
  while (istr & ISTR_CTR) {
 800960c:	0422      	lsls	r2, r4, #16
 800960e:	d489      	bmi.n	8009524 <Vector90+0x54>
}
 8009610:	b005      	add	sp, #20
 8009612:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8009616:	f7fd b82b 	b.w	8006670 <_port_irq_epilogue>
      _usb_isr_invoke_in_cb(usbp, ep);
 800961a:	2101      	movs	r1, #1
 800961c:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 8009620:	40a1      	lsls	r1, r4
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	ea23 0301 	bic.w	r3, r3, r1
 8009628:	f8aa 3008 	strh.w	r3, [sl, #8]
 800962c:	2a00      	cmp	r2, #0
 800962e:	d0d6      	beq.n	80095de <Vector90+0x10e>
 8009630:	4621      	mov	r1, r4
 8009632:	486c      	ldr	r0, [pc, #432]	; (80097e4 <Vector90+0x314>)
 8009634:	4790      	blx	r2
 8009636:	e7d2      	b.n	80095de <Vector90+0x10e>
    STM32_USB->ISTR = ~ISTR_RESET;
 8009638:	f46f 6180 	mvn.w	r1, #1024	; 0x400
  usbp->status        = 0;
 800963c:	2500      	movs	r5, #0
  usbp->state         = USB_READY;
 800963e:	2202      	movs	r2, #2
 8009640:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 80097e4 <Vector90+0x314>
 8009644:	6459      	str	r1, [r3, #68]	; 0x44
  usb_lld_reset(usbp);
 8009646:	4650      	mov	r0, sl
  usbp->state         = USB_READY;
 8009648:	f88a 2000 	strb.w	r2, [sl]
  usbp->status        = 0;
 800964c:	f8ca 507c 	str.w	r5, [sl, #124]	; 0x7c
  usbp->receiving     = 0;
 8009650:	e9ca 5502 	strd	r5, r5, [sl, #8]
    usbp->epc[i] = NULL;
 8009654:	e9ca 5504 	strd	r5, r5, [sl, #16]
 8009658:	e9ca 5506 	strd	r5, r5, [sl, #24]
 800965c:	e9ca 5508 	strd	r5, r5, [sl, #32]
 8009660:	f8ca 5028 	str.w	r5, [sl, #40]	; 0x28
  usbp->ep0state = USB_EP0_STP_WAITING;
 8009664:	f88a 5064 	strb.w	r5, [sl, #100]	; 0x64
  usb_lld_reset(usbp);
 8009668:	f7fc fbc2 	bl	8005df0 <usb_lld_reset>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800966c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	f43f af34 	beq.w	80094e0 <Vector90+0x10>
 8009678:	4629      	mov	r1, r5
 800967a:	4650      	mov	r0, sl
 800967c:	4798      	blx	r3
  if (istr & ISTR_SUSP) {
 800967e:	0526      	lsls	r6, r4, #20
 8009680:	f57f af31 	bpl.w	80094e6 <Vector90+0x16>
    STM32_USB->ISTR = ~ISTR_SUSP;
 8009684:	f46f 6000 	mvn.w	r0, #2048	; 0x800
  usbp->state       = USB_SUSPENDED;
 8009688:	2105      	movs	r1, #5
    STM32_USB->CNTR |= CNTR_FSUSP;
 800968a:	4b55      	ldr	r3, [pc, #340]	; (80097e0 <Vector90+0x310>)
  usbp->saved_state = usbp->state;
 800968c:	f8df a154 	ldr.w	sl, [pc, #340]	; 80097e4 <Vector90+0x314>
 8009690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009692:	f042 0208 	orr.w	r2, r2, #8
 8009696:	641a      	str	r2, [r3, #64]	; 0x40
    STM32_USB->ISTR = ~ISTR_SUSP;
 8009698:	6458      	str	r0, [r3, #68]	; 0x44
 800969a:	f89a 2000 	ldrb.w	r2, [sl]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800969e:	f8da 3004 	ldr.w	r3, [sl, #4]
  usbp->saved_state = usbp->state;
 80096a2:	f88a 2080 	strb.w	r2, [sl, #128]	; 0x80
  usbp->state       = USB_SUSPENDED;
 80096a6:	f88a 1000 	strb.w	r1, [sl]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f43f af1a 	beq.w	80094e6 <Vector90+0x16>
 80096b2:	4650      	mov	r0, sl
 80096b4:	2104      	movs	r1, #4
 80096b6:	4798      	blx	r3
 80096b8:	e715      	b.n	80094e6 <Vector90+0x16>
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80096ba:	f8db 3050 	ldr.w	r3, [fp, #80]	; 0x50
      USBOutEndpointState *osp = epcp->out_state;
 80096be:	f8d7 e018 	ldr.w	lr, [r7, #24]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80096c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80096c6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80096ca:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80096ce:	689a      	ldr	r2, [r3, #8]
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80096d0:	68d8      	ldr	r0, [r3, #12]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80096d2:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80096d6:	f3c0 0909 	ubfx	r9, r0, #0, #10
 80096da:	9002      	str	r0, [sp, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80096dc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 80096e0:	f8de 0008 	ldr.w	r0, [lr, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80096e4:	005b      	lsls	r3, r3, #1
  while (i >= 2) {
 80096e6:	f1b9 0f01 	cmp.w	r9, #1
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80096ea:	461a      	mov	r2, r3
 80096ec:	9300      	str	r3, [sp, #0]
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 80096ee:	9001      	str	r0, [sp, #4]
  while (i >= 2) {
 80096f0:	d972      	bls.n	80097d8 <Vector90+0x308>
 80096f2:	f1a9 0302 	sub.w	r3, r9, #2
 80096f6:	085b      	lsrs	r3, r3, #1
 80096f8:	f102 0804 	add.w	r8, r2, #4
 80096fc:	9303      	str	r3, [sp, #12]
 80096fe:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 8009702:	1c83      	adds	r3, r0, #2
    uint32_t w = *pmap++;
 8009704:	6810      	ldr	r0, [r2, #0]
 8009706:	3204      	adds	r2, #4
    *buf++ = (uint8_t)(w >> 8);
 8009708:	ea4f 2c10 	mov.w	ip, r0, lsr #8
  while (i >= 2) {
 800970c:	4590      	cmp	r8, r2
    *buf++ = (uint8_t)w;
 800970e:	f803 0c02 	strb.w	r0, [r3, #-2]
    *buf++ = (uint8_t)(w >> 8);
 8009712:	f803 cc01 	strb.w	ip, [r3, #-1]
 8009716:	f103 0302 	add.w	r3, r3, #2
  while (i >= 2) {
 800971a:	d1f3      	bne.n	8009704 <Vector90+0x234>
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	9a00      	ldr	r2, [sp, #0]
 8009720:	3301      	adds	r3, #1
 8009722:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009726:	9200      	str	r2, [sp, #0]
 8009728:	9a01      	ldr	r2, [sp, #4]
 800972a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800972e:	9301      	str	r3, [sp, #4]
 8009730:	9b02      	ldr	r3, [sp, #8]
 8009732:	f003 0301 	and.w	r3, r3, #1
  if (i >= 1) {
 8009736:	b11b      	cbz	r3, 8009740 <Vector90+0x270>
    *buf = (uint8_t)*pmap;
 8009738:	9b00      	ldr	r3, [sp, #0]
 800973a:	9a01      	ldr	r2, [sp, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	7013      	strb	r3, [r2, #0]
      osp->rxpkts -= 1;
 8009740:	f8be 300c 	ldrh.w	r3, [lr, #12]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8009744:	f8b7 c012 	ldrh.w	ip, [r7, #18]
      osp->rxpkts -= 1;
 8009748:	1e5f      	subs	r7, r3, #1
      osp->rxsize -= n;
 800974a:	f8de 3000 	ldr.w	r3, [lr]
      osp->rxcnt  += n;
 800974e:	e9de 0201 	ldrd	r0, r2, [lr, #4]
      osp->rxpkts -= 1;
 8009752:	b2bf      	uxth	r7, r7
      osp->rxbuf += n;
 8009754:	444a      	add	r2, r9
      osp->rxcnt  += n;
 8009756:	4448      	add	r0, r9
      osp->rxsize -= n;
 8009758:	eba3 0309 	sub.w	r3, r3, r9
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 800975c:	45cc      	cmp	ip, r9
      osp->rxpkts -= 1;
 800975e:	f8ae 700c 	strh.w	r7, [lr, #12]
      osp->rxcnt  += n;
 8009762:	e9ce 0201 	strd	r0, r2, [lr, #4]
      osp->rxsize -= n;
 8009766:	f8ce 3000 	str.w	r3, [lr]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 800976a:	d926      	bls.n	80097ba <Vector90+0x2ea>
        _usb_isr_invoke_out_cb(usbp, ep);
 800976c:	2201      	movs	r2, #1
 800976e:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8009772:	6870      	ldr	r0, [r6, #4]
 8009774:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8009778:	fa02 f404 	lsl.w	r4, r2, r4
 800977c:	68c5      	ldr	r5, [r0, #12]
 800977e:	ea23 0404 	bic.w	r4, r3, r4
 8009782:	f8aa 400a 	strh.w	r4, [sl, #10]
 8009786:	2d00      	cmp	r5, #0
 8009788:	f43f af3e 	beq.w	8009608 <Vector90+0x138>
 800978c:	4815      	ldr	r0, [pc, #84]	; (80097e4 <Vector90+0x314>)
 800978e:	47a8      	blx	r5
 8009790:	e73a      	b.n	8009608 <Vector90+0x138>
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8009792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  usbp->state = usbp->saved_state;
 8009794:	f8df a04c 	ldr.w	sl, [pc, #76]	; 80097e4 <Vector90+0x314>
 8009798:	f022 0208 	bic.w	r2, r2, #8
 800979c:	641a      	str	r2, [r3, #64]	; 0x40
 800979e:	f89a 2080 	ldrb.w	r2, [sl, #128]	; 0x80
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80097a2:	f8da 3004 	ldr.w	r3, [sl, #4]
  usbp->state = usbp->saved_state;
 80097a6:	f88a 2000 	strb.w	r2, [sl]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f43f aea1 	beq.w	80094f4 <Vector90+0x24>
 80097b2:	4650      	mov	r0, sl
 80097b4:	2105      	movs	r1, #5
 80097b6:	4798      	blx	r3
 80097b8:	e69c      	b.n	80094f4 <Vector90+0x24>
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 80097ba:	2f00      	cmp	r7, #0
 80097bc:	d0d6      	beq.n	800976c <Vector90+0x29c>
        EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 80097be:	682b      	ldr	r3, [r5, #0]
 80097c0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80097c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097c8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80097cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097d4:	602b      	str	r3, [r5, #0]
 80097d6:	e717      	b.n	8009608 <Vector90+0x138>
  while (i >= 2) {
 80097d8:	464b      	mov	r3, r9
  if (i >= 1) {
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1ac      	bne.n	8009738 <Vector90+0x268>
 80097de:	e7af      	b.n	8009740 <Vector90+0x270>
 80097e0:	40005c00 	.word	0x40005c00
 80097e4:	20001d28 	.word	0x20001d28
	...

080097f0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80097f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80097f4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 80097f8:	6933      	ldr	r3, [r6, #16]
 80097fa:	079b      	lsls	r3, r3, #30
 80097fc:	d403      	bmi.n	8009806 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 80097fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8009802:	f7fc bf35 	b.w	8006670 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 8009806:	2300      	movs	r3, #0
 8009808:	2220      	movs	r2, #32
 800980a:	6133      	str	r3, [r6, #16]
 800980c:	f382 8811 	msr	BASEPRI, r2
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8009810:	4c1e      	ldr	r4, [pc, #120]	; (800988c <VectorB0+0x9c>)
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8009812:	4698      	mov	r8, r3
  vtp = ch.vtlist.next;
 8009814:	46a1      	mov	r9, r4
 8009816:	f859 3f1c 	ldr.w	r3, [r9, #28]!
 800981a:	689a      	ldr	r2, [r3, #8]
 800981c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800981e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8009820:	b280      	uxth	r0, r0
  return (sysinterval_t)((systime_t)(end - start));
 8009822:	1a47      	subs	r7, r0, r1
 8009824:	b2bf      	uxth	r7, r7
    if (nowdelta < vtp->delta) {
 8009826:	4297      	cmp	r7, r2
 8009828:	d31b      	bcc.n	8009862 <VectorB0+0x72>
 800982a:	2520      	movs	r5, #32
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800982c:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 800982e:	4411      	add	r1, r2

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8009830:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8009832:	8521      	strh	r1, [r4, #40]	; 0x28
      nowdelta -= vtp->delta;
 8009834:	eba7 0702 	sub.w	r7, r7, r2
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8009838:	f8c0 9004 	str.w	r9, [r0, #4]
      fn = vtp->func;
 800983c:	68da      	ldr	r2, [r3, #12]
      ch.vtlist.next = vtp->next;
 800983e:	61e0      	str	r0, [r4, #28]
      vtp->func = NULL;
 8009840:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->DIER = 0;
 8009844:	bf08      	it	eq
 8009846:	f8c6 800c 	streq.w	r8, [r6, #12]
 800984a:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 800984e:	6918      	ldr	r0, [r3, #16]
 8009850:	4790      	blx	r2
 8009852:	f385 8811 	msr	BASEPRI, r5
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8009856:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
 8009858:	689a      	ldr	r2, [r3, #8]
 800985a:	4297      	cmp	r7, r2
 800985c:	d3de      	bcc.n	800981c <VectorB0+0x2c>
 800985e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8009860:	e7e4      	b.n	800982c <VectorB0+0x3c>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8009862:	69e2      	ldr	r2, [r4, #28]
 8009864:	454a      	cmp	r2, r9
 8009866:	d00a      	beq.n	800987e <VectorB0+0x8e>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8009868:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
 800986a:	8520      	strh	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 800986c:	1bcf      	subs	r7, r1, r7
 800986e:	6097      	str	r7, [r2, #8]
  return systime + (systime_t)interval;
 8009870:	891b      	ldrh	r3, [r3, #8]
 8009872:	2b02      	cmp	r3, #2
 8009874:	bf2c      	ite	cs
 8009876:	18c0      	addcs	r0, r0, r3
 8009878:	3002      	addcc	r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800987a:	b280      	uxth	r0, r0
 800987c:	6370      	str	r0, [r6, #52]	; 0x34
 800987e:	2300      	movs	r3, #0
 8009880:	f383 8811 	msr	BASEPRI, r3
}
 8009884:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8009888:	f7fc bef2 	b.w	8006670 <_port_irq_epilogue>
 800988c:	20001eb0 	.word	0x20001eb0

08009890 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8009890:	4b3e      	ldr	r3, [pc, #248]	; (800998c <VectorE0+0xfc>)
OSAL_IRQ_HANDLER(VectorE0) {
 8009892:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 8009894:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8009896:	681c      	ldr	r4, [r3, #0]
 8009898:	4014      	ands	r4, r2
 800989a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 800989e:	615a      	str	r2, [r3, #20]

  exti_serve_irq(pr, 10);
 80098a0:	0562      	lsls	r2, r4, #21
 80098a2:	d510      	bpl.n	80098c6 <VectorE0+0x36>
 80098a4:	4a3a      	ldr	r2, [pc, #232]	; (8009990 <VectorE0+0x100>)
 80098a6:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 80098aa:	b113      	cbz	r3, 80098b2 <VectorE0+0x22>
 80098ac:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
 80098b0:	4798      	blx	r3
 80098b2:	2320      	movs	r3, #32
 80098b4:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 80098b8:	2100      	movs	r1, #0
 80098ba:	4836      	ldr	r0, [pc, #216]	; (8009994 <VectorE0+0x104>)
 80098bc:	f7fd fa98 	bl	8006df0 <chThdDequeueAllI>
 80098c0:	2300      	movs	r3, #0
 80098c2:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 11);
 80098c6:	0523      	lsls	r3, r4, #20
 80098c8:	d510      	bpl.n	80098ec <VectorE0+0x5c>
 80098ca:	4a31      	ldr	r2, [pc, #196]	; (8009990 <VectorE0+0x100>)
 80098cc:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
 80098d0:	b113      	cbz	r3, 80098d8 <VectorE0+0x48>
 80098d2:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 80098d6:	4798      	blx	r3
 80098d8:	2320      	movs	r3, #32
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	2100      	movs	r1, #0
 80098e0:	482d      	ldr	r0, [pc, #180]	; (8009998 <VectorE0+0x108>)
 80098e2:	f7fd fa85 	bl	8006df0 <chThdDequeueAllI>
 80098e6:	2300      	movs	r3, #0
 80098e8:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 12);
 80098ec:	04e0      	lsls	r0, r4, #19
 80098ee:	d510      	bpl.n	8009912 <VectorE0+0x82>
 80098f0:	4a27      	ldr	r2, [pc, #156]	; (8009990 <VectorE0+0x100>)
 80098f2:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 80098f6:	b113      	cbz	r3, 80098fe <VectorE0+0x6e>
 80098f8:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
 80098fc:	4798      	blx	r3
 80098fe:	2320      	movs	r3, #32
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	2100      	movs	r1, #0
 8009906:	4825      	ldr	r0, [pc, #148]	; (800999c <VectorE0+0x10c>)
 8009908:	f7fd fa72 	bl	8006df0 <chThdDequeueAllI>
 800990c:	2300      	movs	r3, #0
 800990e:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 13);
 8009912:	04a1      	lsls	r1, r4, #18
 8009914:	d510      	bpl.n	8009938 <VectorE0+0xa8>
 8009916:	4a1e      	ldr	r2, [pc, #120]	; (8009990 <VectorE0+0x100>)
 8009918:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
 800991c:	b113      	cbz	r3, 8009924 <VectorE0+0x94>
 800991e:	f8d2 00dc 	ldr.w	r0, [r2, #220]	; 0xdc
 8009922:	4798      	blx	r3
 8009924:	2320      	movs	r3, #32
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	2100      	movs	r1, #0
 800992c:	481c      	ldr	r0, [pc, #112]	; (80099a0 <VectorE0+0x110>)
 800992e:	f7fd fa5f 	bl	8006df0 <chThdDequeueAllI>
 8009932:	2300      	movs	r3, #0
 8009934:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 14);
 8009938:	0462      	lsls	r2, r4, #17
 800993a:	d510      	bpl.n	800995e <VectorE0+0xce>
 800993c:	4a14      	ldr	r2, [pc, #80]	; (8009990 <VectorE0+0x100>)
 800993e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8009942:	b113      	cbz	r3, 800994a <VectorE0+0xba>
 8009944:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
 8009948:	4798      	blx	r3
 800994a:	2320      	movs	r3, #32
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	2100      	movs	r1, #0
 8009952:	4814      	ldr	r0, [pc, #80]	; (80099a4 <VectorE0+0x114>)
 8009954:	f7fd fa4c 	bl	8006df0 <chThdDequeueAllI>
 8009958:	2300      	movs	r3, #0
 800995a:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 15);
 800995e:	0423      	lsls	r3, r4, #16
 8009960:	d510      	bpl.n	8009984 <VectorE0+0xf4>
 8009962:	4a0b      	ldr	r2, [pc, #44]	; (8009990 <VectorE0+0x100>)
 8009964:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 8009968:	b113      	cbz	r3, 8009970 <VectorE0+0xe0>
 800996a:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
 800996e:	4798      	blx	r3
 8009970:	2320      	movs	r3, #32
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	2100      	movs	r1, #0
 8009978:	480b      	ldr	r0, [pc, #44]	; (80099a8 <VectorE0+0x118>)
 800997a:	f7fd fa39 	bl	8006df0 <chThdDequeueAllI>
 800997e:	2300      	movs	r3, #0
 8009980:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8009984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8009988:	f7fc be72 	b.w	8006670 <_port_irq_epilogue>
 800998c:	40010400 	.word	0x40010400
 8009990:	20001db0 	.word	0x20001db0
 8009994:	20001e50 	.word	0x20001e50
 8009998:	20001e60 	.word	0x20001e60
 800999c:	20001e70 	.word	0x20001e70
 80099a0:	20001e80 	.word	0x20001e80
 80099a4:	20001e90 	.word	0x20001e90
 80099a8:	20001ea0 	.word	0x20001ea0
 80099ac:	00000000 	.word	0x00000000

080099b0 <Vector9C>:
  pr = EXTI->PR;
 80099b0:	4b32      	ldr	r3, [pc, #200]	; (8009a7c <Vector9C+0xcc>)
OSAL_IRQ_HANDLER(Vector9C) {
 80099b2:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 80099b4:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 80099b6:	681c      	ldr	r4, [r3, #0]
 80099b8:	4014      	ands	r4, r2
 80099ba:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
  EXTI->PR = pr;
 80099be:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 5);
 80099c0:	06a3      	lsls	r3, r4, #26
 80099c2:	d50e      	bpl.n	80099e2 <Vector9C+0x32>
 80099c4:	4a2e      	ldr	r2, [pc, #184]	; (8009a80 <Vector9C+0xd0>)
 80099c6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80099c8:	b10b      	cbz	r3, 80099ce <Vector9C+0x1e>
 80099ca:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 80099cc:	4798      	blx	r3
 80099ce:	2320      	movs	r3, #32
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	2100      	movs	r1, #0
 80099d6:	482b      	ldr	r0, [pc, #172]	; (8009a84 <Vector9C+0xd4>)
 80099d8:	f7fd fa0a 	bl	8006df0 <chThdDequeueAllI>
 80099dc:	2300      	movs	r3, #0
 80099de:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 6);
 80099e2:	0660      	lsls	r0, r4, #25
 80099e4:	d50e      	bpl.n	8009a04 <Vector9C+0x54>
 80099e6:	4a26      	ldr	r2, [pc, #152]	; (8009a80 <Vector9C+0xd0>)
 80099e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80099ea:	b10b      	cbz	r3, 80099f0 <Vector9C+0x40>
 80099ec:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80099ee:	4798      	blx	r3
 80099f0:	2320      	movs	r3, #32
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	2100      	movs	r1, #0
 80099f8:	4823      	ldr	r0, [pc, #140]	; (8009a88 <Vector9C+0xd8>)
 80099fa:	f7fd f9f9 	bl	8006df0 <chThdDequeueAllI>
 80099fe:	2300      	movs	r3, #0
 8009a00:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 7);
 8009a04:	0621      	lsls	r1, r4, #24
 8009a06:	d50e      	bpl.n	8009a26 <Vector9C+0x76>
 8009a08:	4a1d      	ldr	r2, [pc, #116]	; (8009a80 <Vector9C+0xd0>)
 8009a0a:	6f93      	ldr	r3, [r2, #120]	; 0x78
 8009a0c:	b10b      	cbz	r3, 8009a12 <Vector9C+0x62>
 8009a0e:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 8009a10:	4798      	blx	r3
 8009a12:	2320      	movs	r3, #32
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	2100      	movs	r1, #0
 8009a1a:	481c      	ldr	r0, [pc, #112]	; (8009a8c <Vector9C+0xdc>)
 8009a1c:	f7fd f9e8 	bl	8006df0 <chThdDequeueAllI>
 8009a20:	2300      	movs	r3, #0
 8009a22:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 8);
 8009a26:	05e2      	lsls	r2, r4, #23
 8009a28:	d510      	bpl.n	8009a4c <Vector9C+0x9c>
 8009a2a:	4a15      	ldr	r2, [pc, #84]	; (8009a80 <Vector9C+0xd0>)
 8009a2c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009a30:	b113      	cbz	r3, 8009a38 <Vector9C+0x88>
 8009a32:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8009a36:	4798      	blx	r3
 8009a38:	2320      	movs	r3, #32
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	2100      	movs	r1, #0
 8009a40:	4813      	ldr	r0, [pc, #76]	; (8009a90 <Vector9C+0xe0>)
 8009a42:	f7fd f9d5 	bl	8006df0 <chThdDequeueAllI>
 8009a46:	2300      	movs	r3, #0
 8009a48:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 9);
 8009a4c:	05a3      	lsls	r3, r4, #22
 8009a4e:	d510      	bpl.n	8009a72 <Vector9C+0xc2>
 8009a50:	4a0b      	ldr	r2, [pc, #44]	; (8009a80 <Vector9C+0xd0>)
 8009a52:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8009a56:	b113      	cbz	r3, 8009a5e <Vector9C+0xae>
 8009a58:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
 8009a5c:	4798      	blx	r3
 8009a5e:	2320      	movs	r3, #32
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	2100      	movs	r1, #0
 8009a66:	480b      	ldr	r0, [pc, #44]	; (8009a94 <Vector9C+0xe4>)
 8009a68:	f7fd f9c2 	bl	8006df0 <chThdDequeueAllI>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	f383 8811 	msr	BASEPRI, r3
}
 8009a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8009a76:	f7fc bdfb 	b.w	8006670 <_port_irq_epilogue>
 8009a7a:	bf00      	nop
 8009a7c:	40010400 	.word	0x40010400
 8009a80:	20001db0 	.word	0x20001db0
 8009a84:	20001e00 	.word	0x20001e00
 8009a88:	20001e10 	.word	0x20001e10
 8009a8c:	20001e20 	.word	0x20001e20
 8009a90:	20001e30 	.word	0x20001e30
 8009a94:	20001e40 	.word	0x20001e40
	...

08009aa0 <Vector68>:
  pr = EXTI->PR;
 8009aa0:	4a0d      	ldr	r2, [pc, #52]	; (8009ad8 <Vector68+0x38>)
OSAL_IRQ_HANDLER(Vector68) {
 8009aa2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8009aa4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8009aa6:	6813      	ldr	r3, [r2, #0]
 8009aa8:	400b      	ands	r3, r1
 8009aaa:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 8009aae:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 4);
 8009ab0:	b173      	cbz	r3, 8009ad0 <Vector68+0x30>
 8009ab2:	4a0a      	ldr	r2, [pc, #40]	; (8009adc <Vector68+0x3c>)
 8009ab4:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8009ab6:	b10b      	cbz	r3, 8009abc <Vector68+0x1c>
 8009ab8:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8009aba:	4798      	blx	r3
 8009abc:	2320      	movs	r3, #32
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	4806      	ldr	r0, [pc, #24]	; (8009ae0 <Vector68+0x40>)
 8009ac6:	f7fd f993 	bl	8006df0 <chThdDequeueAllI>
 8009aca:	2300      	movs	r3, #0
 8009acc:	f383 8811 	msr	BASEPRI, r3
}
 8009ad0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8009ad4:	f7fc bdcc 	b.w	8006670 <_port_irq_epilogue>
 8009ad8:	40010400 	.word	0x40010400
 8009adc:	20001db0 	.word	0x20001db0
 8009ae0:	20001df0 	.word	0x20001df0
	...

08009af0 <Vector64>:
  pr = EXTI->PR;
 8009af0:	4a0d      	ldr	r2, [pc, #52]	; (8009b28 <Vector64+0x38>)
OSAL_IRQ_HANDLER(Vector64) {
 8009af2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8009af4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8009af6:	6813      	ldr	r3, [r2, #0]
 8009af8:	400b      	ands	r3, r1
 8009afa:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 8009afe:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 3);
 8009b00:	b173      	cbz	r3, 8009b20 <Vector64+0x30>
 8009b02:	4a0a      	ldr	r2, [pc, #40]	; (8009b2c <Vector64+0x3c>)
 8009b04:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009b06:	b10b      	cbz	r3, 8009b0c <Vector64+0x1c>
 8009b08:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8009b0a:	4798      	blx	r3
 8009b0c:	2320      	movs	r3, #32
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	2100      	movs	r1, #0
 8009b14:	4806      	ldr	r0, [pc, #24]	; (8009b30 <Vector64+0x40>)
 8009b16:	f7fd f96b 	bl	8006df0 <chThdDequeueAllI>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f383 8811 	msr	BASEPRI, r3
}
 8009b20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8009b24:	f7fc bda4 	b.w	8006670 <_port_irq_epilogue>
 8009b28:	40010400 	.word	0x40010400
 8009b2c:	20001db0 	.word	0x20001db0
 8009b30:	20001de0 	.word	0x20001de0
	...

08009b40 <Vector60>:
  pr = EXTI->PR;
 8009b40:	4a0d      	ldr	r2, [pc, #52]	; (8009b78 <Vector60+0x38>)
OSAL_IRQ_HANDLER(Vector60) {
 8009b42:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8009b44:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 8009b46:	6813      	ldr	r3, [r2, #0]
 8009b48:	400b      	ands	r3, r1
 8009b4a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 8009b4e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 2);
 8009b50:	b173      	cbz	r3, 8009b70 <Vector60+0x30>
 8009b52:	4a0a      	ldr	r2, [pc, #40]	; (8009b7c <Vector60+0x3c>)
 8009b54:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009b56:	b10b      	cbz	r3, 8009b5c <Vector60+0x1c>
 8009b58:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8009b5a:	4798      	blx	r3
 8009b5c:	2320      	movs	r3, #32
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	2100      	movs	r1, #0
 8009b64:	4806      	ldr	r0, [pc, #24]	; (8009b80 <Vector60+0x40>)
 8009b66:	f7fd f943 	bl	8006df0 <chThdDequeueAllI>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	f383 8811 	msr	BASEPRI, r3
}
 8009b70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8009b74:	f7fc bd7c 	b.w	8006670 <_port_irq_epilogue>
 8009b78:	40010400 	.word	0x40010400
 8009b7c:	20001db0 	.word	0x20001db0
 8009b80:	20001dd0 	.word	0x20001dd0
	...

08009b90 <Vector5C>:
  pr = EXTI->PR;
 8009b90:	4a0d      	ldr	r2, [pc, #52]	; (8009bc8 <Vector5C+0x38>)
OSAL_IRQ_HANDLER(Vector5C) {
 8009b92:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8009b94:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8009b96:	6813      	ldr	r3, [r2, #0]
 8009b98:	400b      	ands	r3, r1
 8009b9a:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 8009b9e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 1);
 8009ba0:	b173      	cbz	r3, 8009bc0 <Vector5C+0x30>
 8009ba2:	4a0a      	ldr	r2, [pc, #40]	; (8009bcc <Vector5C+0x3c>)
 8009ba4:	6993      	ldr	r3, [r2, #24]
 8009ba6:	b10b      	cbz	r3, 8009bac <Vector5C+0x1c>
 8009ba8:	69d0      	ldr	r0, [r2, #28]
 8009baa:	4798      	blx	r3
 8009bac:	2320      	movs	r3, #32
 8009bae:	f383 8811 	msr	BASEPRI, r3
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	4806      	ldr	r0, [pc, #24]	; (8009bd0 <Vector5C+0x40>)
 8009bb6:	f7fd f91b 	bl	8006df0 <chThdDequeueAllI>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f383 8811 	msr	BASEPRI, r3
}
 8009bc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8009bc4:	f7fc bd54 	b.w	8006670 <_port_irq_epilogue>
 8009bc8:	40010400 	.word	0x40010400
 8009bcc:	20001db0 	.word	0x20001db0
 8009bd0:	20001dc0 	.word	0x20001dc0
	...

08009be0 <Vector58>:
  pr = EXTI->PR;
 8009be0:	4a0d      	ldr	r2, [pc, #52]	; (8009c18 <Vector58+0x38>)
OSAL_IRQ_HANDLER(Vector58) {
 8009be2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8009be4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 8009be6:	6813      	ldr	r3, [r2, #0]
 8009be8:	400b      	ands	r3, r1
 8009bea:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 8009bee:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 0);
 8009bf0:	b173      	cbz	r3, 8009c10 <Vector58+0x30>
 8009bf2:	4a0a      	ldr	r2, [pc, #40]	; (8009c1c <Vector58+0x3c>)
 8009bf4:	6893      	ldr	r3, [r2, #8]
 8009bf6:	b10b      	cbz	r3, 8009bfc <Vector58+0x1c>
 8009bf8:	68d0      	ldr	r0, [r2, #12]
 8009bfa:	4798      	blx	r3
 8009bfc:	2320      	movs	r3, #32
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	2100      	movs	r1, #0
 8009c04:	4805      	ldr	r0, [pc, #20]	; (8009c1c <Vector58+0x3c>)
 8009c06:	f7fd f8f3 	bl	8006df0 <chThdDequeueAllI>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f383 8811 	msr	BASEPRI, r3
}
 8009c10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8009c14:	f7fc bd2c 	b.w	8006670 <_port_irq_epilogue>
 8009c18:	40010400 	.word	0x40010400
 8009c1c:	20001db0 	.word	0x20001db0

08009c20 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8009c20:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8009c24:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8009c26:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	f383 8811 	msr	BASEPRI, r3
}
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
	...

08009c40 <chThdExit>:
 8009c40:	2320      	movs	r3, #32
 8009c42:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 8009c46:	f7ff baab 	b.w	80091a0 <chThdExitS>
 8009c4a:	bf00      	nop
 8009c4c:	0000      	movs	r0, r0
	...

08009c50 <bmk_thread3>:
  chThdExit((msg_t)p);
 8009c50:	f7ff bff6 	b.w	8009c40 <chThdExit>
	...

08009c60 <chSchDoReschedule>:
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8009c60:	2101      	movs	r1, #1
void chSchDoRescheduleAhead(void) {
 8009c62:	b430      	push	{r4, r5}
  tp->state = CH_STATE_READY;
 8009c64:	2500      	movs	r5, #0
  thread_t *otp = currp;
 8009c66:	4a0d      	ldr	r2, [pc, #52]	; (8009c9c <chSchDoReschedule+0x3c>)
  thread_t *tp = tqp->next;
 8009c68:	6810      	ldr	r0, [r2, #0]
 8009c6a:	6994      	ldr	r4, [r2, #24]
  tqp->next             = tp->queue.next;
 8009c6c:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009c6e:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8009c70:	f880 1020 	strb.w	r1, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8009c74:	68a1      	ldr	r1, [r4, #8]
  tqp->next             = tp->queue.next;
 8009c76:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8009c78:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 8009c7a:	f884 5020 	strb.w	r5, [r4, #32]
 8009c7e:	e000      	b.n	8009c82 <chSchDoReschedule+0x22>
 8009c80:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8009c82:	689a      	ldr	r2, [r3, #8]
 8009c84:	4291      	cmp	r1, r2
 8009c86:	d3fb      	bcc.n	8009c80 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8009c88:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8009c8a:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 8009c8c:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8009c90:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8009c92:	605c      	str	r4, [r3, #4]
}
 8009c94:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 8009c96:	f7fb bad3 	b.w	8005240 <_port_switch>
 8009c9a:	bf00      	nop
 8009c9c:	20001eb0 	.word	0x20001eb0

08009ca0 <chSchRescheduleS>:
  return firstprio(&ch.rlist.queue) > currp->prio;
 8009ca0:	4b04      	ldr	r3, [pc, #16]	; (8009cb4 <chSchRescheduleS+0x14>)
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 8009ca6:	6892      	ldr	r2, [r2, #8]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d800      	bhi.n	8009cb0 <chSchRescheduleS+0x10>
}
 8009cae:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8009cb0:	f7ff bfd6 	b.w	8009c60 <chSchDoReschedule>
 8009cb4:	20001eb0 	.word	0x20001eb0
	...

08009cc0 <chSemSignalWait.constprop.82>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8009cc0:	b538      	push	{r3, r4, r5, lr}
 8009cc2:	2320      	movs	r3, #32
 8009cc4:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 8009cc8:	4c15      	ldr	r4, [pc, #84]	; (8009d20 <chSemSignalWait.constprop.82+0x60>)
 8009cca:	68a3      	ldr	r3, [r4, #8]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	60a3      	str	r3, [r4, #8]
 8009cd2:	dd1a      	ble.n	8009d0a <chSemSignalWait.constprop.82+0x4a>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	60a3      	str	r3, [r4, #8]
 8009cda:	db06      	blt.n	8009cea <chSemSignalWait.constprop.82+0x2a>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8009cdc:	f7ff ffe0 	bl	8009ca0 <chSchRescheduleS>
    msg = MSG_OK;
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8009ce8:	bd38      	pop	{r3, r4, r5, pc}
    thread_t *ctp = currp;
 8009cea:	4a0e      	ldr	r2, [pc, #56]	; (8009d24 <chSemSignalWait.constprop.82+0x64>)
  tp->queue.prev             = tqp->prev;
 8009cec:	6863      	ldr	r3, [r4, #4]
 8009cee:	6995      	ldr	r5, [r2, #24]
    chSchGoSleepS(CH_STATE_WTSEM);
 8009cf0:	2005      	movs	r0, #5
 8009cf2:	e9c5 4300 	strd	r4, r3, [r5]
  tp->queue.prev->queue.next = tp;
 8009cf6:	601d      	str	r5, [r3, #0]
    ctp->u.wtsemp = spw;
 8009cf8:	626c      	str	r4, [r5, #36]	; 0x24
  tqp->prev                  = tp;
 8009cfa:	6065      	str	r5, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8009cfc:	f7fe f9e8 	bl	80080d0 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 8009d00:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009d02:	2300      	movs	r3, #0
 8009d04:	f383 8811 	msr	BASEPRI, r3
}
 8009d08:	bd38      	pop	{r3, r4, r5, pc}
  thread_t *tp = tqp->next;
 8009d0a:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8009d0c:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009d0e:	605c      	str	r4, [r3, #4]
  tqp->next             = tp->queue.next;
 8009d10:	6023      	str	r3, [r4, #0]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 8009d12:	f7fc febd 	bl	8006a90 <chSchReadyI>
 8009d16:	2200      	movs	r2, #0
 8009d18:	68a3      	ldr	r3, [r4, #8]
 8009d1a:	6242      	str	r2, [r0, #36]	; 0x24
 8009d1c:	e7da      	b.n	8009cd4 <chSemSignalWait.constprop.82+0x14>
 8009d1e:	bf00      	nop
 8009d20:	20002108 	.word	0x20002108
 8009d24:	20001eb0 	.word	0x20001eb0
	...

08009d30 <rt_test_005_005_execute>:

static void rt_test_005_005_teardown(void) {
  test_wait_threads();
}

static void rt_test_005_005_execute(void) {
 8009d30:	b538      	push	{r3, r4, r5, lr}

  /* [5.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 8009d32:	2401      	movs	r4, #1
  return ch.rlist.current;
 8009d34:	4b1d      	ldr	r3, [pc, #116]	; (8009dac <rt_test_005_005_execute+0x7c>)
 8009d36:	4d1e      	ldr	r5, [pc, #120]	; (8009db0 <rt_test_005_005_execute+0x80>)
  return chThdGetSelfX()->prio;
 8009d38:	699a      	ldr	r2, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8009d3a:	481e      	ldr	r0, [pc, #120]	; (8009db4 <rt_test_005_005_execute+0x84>)
 8009d3c:	6891      	ldr	r1, [r2, #8]
 8009d3e:	2300      	movs	r3, #0
 8009d40:	4421      	add	r1, r4
 8009d42:	4a1d      	ldr	r2, [pc, #116]	; (8009db8 <rt_test_005_005_execute+0x88>)
  test_set_step(1);
 8009d44:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8009d46:	f7fe f913 	bl	8007f70 <chThdCreateStatic.constprop.89>
  }

  /* [5.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 8009d4a:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8009d4c:	4a1b      	ldr	r2, [pc, #108]	; (8009dbc <rt_test_005_005_execute+0x8c>)
  return (bool)(tqp->next == (const thread_t *)tqp);
 8009d4e:	4c1c      	ldr	r4, [pc, #112]	; (8009dc0 <rt_test_005_005_execute+0x90>)
 8009d50:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8009d52:	602b      	str	r3, [r5, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8009d54:	f7ff ffb4 	bl	8009cc0 <chSemSignalWait.constprop.82>
 8009d58:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8009d5a:	491a      	ldr	r1, [pc, #104]	; (8009dc4 <rt_test_005_005_execute+0x94>)
 8009d5c:	1b00      	subs	r0, r0, r4
 8009d5e:	fab0 f080 	clz	r0, r0
 8009d62:	0940      	lsrs	r0, r0, #5
 8009d64:	f7fb fdec 	bl	8005940 <_test_assert>
 8009d68:	b100      	cbz	r0, 8009d6c <rt_test_005_005_execute+0x3c>
  {
    chSemSignalWait(&sem1, &sem1);
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }
}
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
    test_assert(sem1.cnt == 0, "counter not zero");
 8009d6c:	68a0      	ldr	r0, [r4, #8]
 8009d6e:	4916      	ldr	r1, [pc, #88]	; (8009dc8 <rt_test_005_005_execute+0x98>)
 8009d70:	fab0 f080 	clz	r0, r0
 8009d74:	0940      	lsrs	r0, r0, #5
 8009d76:	f7fb fde3 	bl	8005940 <_test_assert>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d1f5      	bne.n	8009d6a <rt_test_005_005_execute+0x3a>
  test_set_step(3);
 8009d7e:	2303      	movs	r3, #3
 8009d80:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
 8009d82:	f7ff ff9d 	bl	8009cc0 <chSemSignalWait.constprop.82>
 8009d86:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8009d88:	490e      	ldr	r1, [pc, #56]	; (8009dc4 <rt_test_005_005_execute+0x94>)
 8009d8a:	1b00      	subs	r0, r0, r4
 8009d8c:	fab0 f080 	clz	r0, r0
 8009d90:	0940      	lsrs	r0, r0, #5
 8009d92:	f7fb fdd5 	bl	8005940 <_test_assert>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d1e7      	bne.n	8009d6a <rt_test_005_005_execute+0x3a>
    test_assert(sem1.cnt == 0, "counter not zero");
 8009d9a:	68a0      	ldr	r0, [r4, #8]
 8009d9c:	490a      	ldr	r1, [pc, #40]	; (8009dc8 <rt_test_005_005_execute+0x98>)
 8009d9e:	fab0 f080 	clz	r0, r0
}
 8009da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_assert(sem1.cnt == 0, "counter not zero");
 8009da6:	0940      	lsrs	r0, r0, #5
 8009da8:	f7fb bdca 	b.w	8005940 <_test_assert>
 8009dac:	20001eb0 	.word	0x20001eb0
 8009db0:	2000283c 	.word	0x2000283c
 8009db4:	20002128 	.word	0x20002128
 8009db8:	08009161 	.word	0x08009161
 8009dbc:	20002854 	.word	0x20002854
 8009dc0:	20002108 	.word	0x20002108
 8009dc4:	0800f9e4 	.word	0x0800f9e4
 8009dc8:	0800f9f4 	.word	0x0800f9f4
 8009dcc:	00000000 	.word	0x00000000

08009dd0 <chMBReset.constprop.57>:
void chMBReset(mailbox_t *mbp) {
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	2320      	movs	r3, #32
 8009dd4:	f383 8811 	msr	BASEPRI, r3
  mbp->reset = true;
 8009dd8:	2201      	movs	r2, #1
  mbp->cnt   = (size_t)0;
 8009dda:	2500      	movs	r5, #0
  mbp->wrptr = mbp->buffer;
 8009ddc:	4c0b      	ldr	r4, [pc, #44]	; (8009e0c <chMBReset.constprop.57+0x3c>)
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8009dde:	f06f 0101 	mvn.w	r1, #1
  mbp->wrptr = mbp->buffer;
 8009de2:	6823      	ldr	r3, [r4, #0]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8009de4:	f104 0018 	add.w	r0, r4, #24
  mbp->reset = true;
 8009de8:	7522      	strb	r2, [r4, #20]
  mbp->rdptr = mbp->buffer;
 8009dea:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 8009dee:	6125      	str	r5, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8009df0:	f7fc fffe 	bl	8006df0 <chThdDequeueAllI>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 8009df4:	f104 0020 	add.w	r0, r4, #32
 8009df8:	f06f 0101 	mvn.w	r1, #1
 8009dfc:	f7fc fff8 	bl	8006df0 <chThdDequeueAllI>
  chSchRescheduleS();
 8009e00:	f7ff ff4e 	bl	8009ca0 <chSchRescheduleS>
 8009e04:	f385 8811 	msr	BASEPRI, r5
}
 8009e08:	bd38      	pop	{r3, r4, r5, pc}
 8009e0a:	bf00      	nop
 8009e0c:	20001858 	.word	0x20001858

08009e10 <oslib_test_001_003_teardown>:

static void oslib_test_001_003_teardown(void) {
  chMBReset(&mb1);
 8009e10:	f7ff bfde 	b.w	8009dd0 <chMBReset.constprop.57>
	...

08009e20 <oslib_test_001_002_teardown>:
 8009e20:	f7ff bff6 	b.w	8009e10 <oslib_test_001_003_teardown>
	...

08009e30 <oslib_test_001_001_teardown>:
 8009e30:	f7ff bfee 	b.w	8009e10 <oslib_test_001_003_teardown>
	...

08009e40 <chMBPostTimeout.constprop.55>:
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8009e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e42:	4607      	mov	r7, r0
 8009e44:	460e      	mov	r6, r1
 8009e46:	2320      	movs	r3, #32
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	4c15      	ldr	r4, [pc, #84]	; (8009ea4 <chMBPostTimeout.constprop.55+0x64>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8009e4e:	f104 0518 	add.w	r5, r4, #24
 8009e52:	e00b      	b.n	8009e6c <chMBPostTimeout.constprop.55+0x2c>
 8009e54:	6923      	ldr	r3, [r4, #16]
 8009e56:	e9d4 1200 	ldrd	r1, r2, [r4]
 8009e5a:	1a50      	subs	r0, r2, r1
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8009e5c:	ebb3 0fa0 	cmp.w	r3, r0, asr #2
 8009e60:	d10d      	bne.n	8009e7e <chMBPostTimeout.constprop.55+0x3e>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8009e62:	4631      	mov	r1, r6
 8009e64:	4628      	mov	r0, r5
 8009e66:	f7fe fb13 	bl	8008490 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8009e6a:	b920      	cbnz	r0, 8009e76 <chMBPostTimeout.constprop.55+0x36>
    if (mbp->reset) {
 8009e6c:	7d23      	ldrb	r3, [r4, #20]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d0f0      	beq.n	8009e54 <chMBPostTimeout.constprop.55+0x14>
      return MSG_RESET;
 8009e72:	f06f 0001 	mvn.w	r0, #1
 8009e76:	2300      	movs	r3, #0
 8009e78:	f383 8811 	msr	BASEPRI, r3
}
 8009e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *mbp->wrptr++ = msg;
 8009e7e:	68a5      	ldr	r5, [r4, #8]
      mbp->cnt++;
 8009e80:	3301      	adds	r3, #1
      *mbp->wrptr++ = msg;
 8009e82:	1d28      	adds	r0, r5, #4
 8009e84:	60a0      	str	r0, [r4, #8]
      if (mbp->wrptr >= mbp->top) {
 8009e86:	4282      	cmp	r2, r0
      *mbp->wrptr++ = msg;
 8009e88:	602f      	str	r7, [r5, #0]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8009e8a:	4807      	ldr	r0, [pc, #28]	; (8009ea8 <chMBPostTimeout.constprop.55+0x68>)
        mbp->wrptr = mbp->buffer;
 8009e8c:	bf98      	it	ls
 8009e8e:	60a1      	strls	r1, [r4, #8]
      mbp->cnt++;
 8009e90:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8009e92:	f7fc fe15 	bl	8006ac0 <chThdDequeueNextI.constprop.86>
      chSchRescheduleS();
 8009e96:	f7ff ff03 	bl	8009ca0 <chSchRescheduleS>
      return MSG_OK;
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f383 8811 	msr	BASEPRI, r3
}
 8009ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea4:	20001858 	.word	0x20001858
 8009ea8:	20001878 	.word	0x20001878
 8009eac:	00000000 	.word	0x00000000

08009eb0 <chMBPostAheadTimeout.constprop.52>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8009eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb2:	4607      	mov	r7, r0
 8009eb4:	460e      	mov	r6, r1
 8009eb6:	2320      	movs	r3, #32
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	4c15      	ldr	r4, [pc, #84]	; (8009f14 <chMBPostAheadTimeout.constprop.52+0x64>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8009ebe:	f104 0518 	add.w	r5, r4, #24
 8009ec2:	e00b      	b.n	8009edc <chMBPostAheadTimeout.constprop.52+0x2c>
 8009ec4:	6923      	ldr	r3, [r4, #16]
 8009ec6:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009eca:	1a88      	subs	r0, r1, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8009ecc:	ebb3 0fa0 	cmp.w	r3, r0, asr #2
 8009ed0:	d10d      	bne.n	8009eee <chMBPostAheadTimeout.constprop.52+0x3e>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	f7fe fadb 	bl	8008490 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8009eda:	b920      	cbnz	r0, 8009ee6 <chMBPostAheadTimeout.constprop.52+0x36>
    if (mbp->reset) {
 8009edc:	7d23      	ldrb	r3, [r4, #20]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0f0      	beq.n	8009ec4 <chMBPostAheadTimeout.constprop.52+0x14>
      return MSG_RESET;
 8009ee2:	f06f 0001 	mvn.w	r0, #1
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	f383 8811 	msr	BASEPRI, r3
}
 8009eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (--mbp->rdptr < mbp->buffer) {
 8009eee:	68e0      	ldr	r0, [r4, #12]
      mbp->cnt++;
 8009ef0:	3301      	adds	r3, #1
      if (--mbp->rdptr < mbp->buffer) {
 8009ef2:	3804      	subs	r0, #4
 8009ef4:	4282      	cmp	r2, r0
        mbp->rdptr = mbp->top - 1;
 8009ef6:	bf88      	it	hi
 8009ef8:	1f08      	subhi	r0, r1, #4
 8009efa:	60e0      	str	r0, [r4, #12]
      *mbp->rdptr = msg;
 8009efc:	6007      	str	r7, [r0, #0]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8009efe:	4806      	ldr	r0, [pc, #24]	; (8009f18 <chMBPostAheadTimeout.constprop.52+0x68>)
      mbp->cnt++;
 8009f00:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8009f02:	f7fc fddd 	bl	8006ac0 <chThdDequeueNextI.constprop.86>
      chSchRescheduleS();
 8009f06:	f7ff fecb 	bl	8009ca0 <chSchRescheduleS>
      return MSG_OK;
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	f383 8811 	msr	BASEPRI, r3
}
 8009f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f14:	20001858 	.word	0x20001858
 8009f18:	20001878 	.word	0x20001878
 8009f1c:	00000000 	.word	0x00000000

08009f20 <chMBFetchTimeout.constprop.49>:
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8009f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f22:	4607      	mov	r7, r0
 8009f24:	460e      	mov	r6, r1
 8009f26:	2320      	movs	r3, #32
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	4c15      	ldr	r4, [pc, #84]	; (8009f84 <chMBFetchTimeout.constprop.49+0x64>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8009f2e:	18e5      	adds	r5, r4, r3
 8009f30:	e006      	b.n	8009f40 <chMBFetchTimeout.constprop.49+0x20>
 8009f32:	6923      	ldr	r3, [r4, #16]
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8009f34:	b96b      	cbnz	r3, 8009f52 <chMBFetchTimeout.constprop.49+0x32>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8009f36:	4631      	mov	r1, r6
 8009f38:	4628      	mov	r0, r5
 8009f3a:	f7fe faa9 	bl	8008490 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8009f3e:	b920      	cbnz	r0, 8009f4a <chMBFetchTimeout.constprop.49+0x2a>
    if (mbp->reset) {
 8009f40:	7d23      	ldrb	r3, [r4, #20]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d0f5      	beq.n	8009f32 <chMBFetchTimeout.constprop.49+0x12>
      return MSG_RESET;
 8009f46:	f06f 0001 	mvn.w	r0, #1
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f383 8811 	msr	BASEPRI, r3
}
 8009f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *msgp = *mbp->rdptr++;
 8009f52:	68e1      	ldr	r1, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
 8009f54:	6860      	ldr	r0, [r4, #4]
      *msgp = *mbp->rdptr++;
 8009f56:	1d0a      	adds	r2, r1, #4
      if (mbp->rdptr >= mbp->top) {
 8009f58:	4282      	cmp	r2, r0
      *msgp = *mbp->rdptr++;
 8009f5a:	6809      	ldr	r1, [r1, #0]
 8009f5c:	60e2      	str	r2, [r4, #12]
        mbp->rdptr = mbp->buffer;
 8009f5e:	bf28      	it	cs
 8009f60:	6822      	ldrcs	r2, [r4, #0]
      *msgp = *mbp->rdptr++;
 8009f62:	6039      	str	r1, [r7, #0]
      mbp->cnt--;
 8009f64:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8009f68:	4807      	ldr	r0, [pc, #28]	; (8009f88 <chMBFetchTimeout.constprop.49+0x68>)
        mbp->rdptr = mbp->buffer;
 8009f6a:	bf28      	it	cs
 8009f6c:	60e2      	strcs	r2, [r4, #12]
      mbp->cnt--;
 8009f6e:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8009f70:	f7fc fda6 	bl	8006ac0 <chThdDequeueNextI.constprop.86>
      chSchRescheduleS();
 8009f74:	f7ff fe94 	bl	8009ca0 <chSchRescheduleS>
      return MSG_OK;
 8009f78:	2000      	movs	r0, #0
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f383 8811 	msr	BASEPRI, r3
}
 8009f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f82:	bf00      	nop
 8009f84:	20001858 	.word	0x20001858
 8009f88:	20001870 	.word	0x20001870
 8009f8c:	00000000 	.word	0x00000000

08009f90 <oslib_test_001_003_execute>:
static void oslib_test_001_003_execute(void) {
  msg_t msg1, msg2;
  unsigned i;

  /* [1.3.1] Filling the mailbox.*/
  test_set_step(1);
 8009f90:	2301      	movs	r3, #1
static void oslib_test_001_003_execute(void) {
 8009f92:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8009f94:	2442      	movs	r4, #66	; 0x42
 8009f96:	4e40      	ldr	r6, [pc, #256]	; (800a098 <oslib_test_001_003_execute+0x108>)
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8009f98:	4d40      	ldr	r5, [pc, #256]	; (800a09c <oslib_test_001_003_execute+0x10c>)
static void oslib_test_001_003_execute(void) {
 8009f9a:	b082      	sub	sp, #8
  test_set_step(1);
 8009f9c:	6033      	str	r3, [r6, #0]
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8009f9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f7ff ff4c 	bl	8009e40 <chMBPostTimeout.constprop.55>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8009fa8:	fab0 f080 	clz	r0, r0
 8009fac:	4629      	mov	r1, r5
 8009fae:	0940      	lsrs	r0, r0, #5
 8009fb0:	f7fb fcc6 	bl	8005940 <_test_assert>
 8009fb4:	3401      	adds	r4, #1
 8009fb6:	b988      	cbnz	r0, 8009fdc <oslib_test_001_003_execute+0x4c>
    for (i = 0; i < MB_SIZE; i++) {
 8009fb8:	2c46      	cmp	r4, #70	; 0x46
 8009fba:	d1f0      	bne.n	8009f9e <oslib_test_001_003_execute+0xe>
    }
  }

  /* [1.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 8009fbc:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	2058      	movs	r0, #88	; 0x58
  test_set_step(2);
 8009fc2:	6033      	str	r3, [r6, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8009fc4:	f7ff ff3c 	bl	8009e40 <chMBPostTimeout.constprop.55>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8009fc8:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8009fcc:	fab0 f080 	clz	r0, r0
 8009fd0:	4932      	ldr	r1, [pc, #200]	; (800a09c <oslib_test_001_003_execute+0x10c>)
 8009fd2:	0940      	lsrs	r0, r0, #5
 8009fd4:	f7fb fcb4 	bl	8005940 <_test_assert>
 8009fd8:	4604      	mov	r4, r0
 8009fda:	b108      	cbz	r0, 8009fe0 <oslib_test_001_003_execute+0x50>
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
}
 8009fdc:	b002      	add	sp, #8
 8009fde:	bd70      	pop	{r4, r5, r6, pc}
 8009fe0:	2520      	movs	r5, #32
 8009fe2:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostI(&mb1, 'X');
 8009fe6:	2058      	movs	r0, #88	; 0x58
 8009fe8:	f7fc fd7a 	bl	8006ae0 <chMBPostI.constprop.54>
 8009fec:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8009ff0:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8009ff4:	fab0 f080 	clz	r0, r0
 8009ff8:	4928      	ldr	r1, [pc, #160]	; (800a09c <oslib_test_001_003_execute+0x10c>)
 8009ffa:	0940      	lsrs	r0, r0, #5
 8009ffc:	f7fb fca0 	bl	8005940 <_test_assert>
 800a000:	2800      	cmp	r0, #0
 800a002:	d1eb      	bne.n	8009fdc <oslib_test_001_003_execute+0x4c>
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 800a004:	2101      	movs	r1, #1
 800a006:	2058      	movs	r0, #88	; 0x58
 800a008:	f7ff ff52 	bl	8009eb0 <chMBPostAheadTimeout.constprop.52>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800a00c:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800a010:	fab0 f080 	clz	r0, r0
 800a014:	4921      	ldr	r1, [pc, #132]	; (800a09c <oslib_test_001_003_execute+0x10c>)
 800a016:	0940      	lsrs	r0, r0, #5
 800a018:	f7fb fc92 	bl	8005940 <_test_assert>
 800a01c:	4604      	mov	r4, r0
 800a01e:	2800      	cmp	r0, #0
 800a020:	d1dc      	bne.n	8009fdc <oslib_test_001_003_execute+0x4c>
 800a022:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostAheadI(&mb1, 'X');
 800a026:	2058      	movs	r0, #88	; 0x58
 800a028:	f7fc fd82 	bl	8006b30 <chMBPostAheadI.constprop.51>
 800a02c:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800a030:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800a034:	fab0 f080 	clz	r0, r0
 800a038:	4918      	ldr	r1, [pc, #96]	; (800a09c <oslib_test_001_003_execute+0x10c>)
 800a03a:	0940      	lsrs	r0, r0, #5
 800a03c:	f7fb fc80 	bl	8005940 <_test_assert>
 800a040:	4604      	mov	r4, r0
 800a042:	2800      	cmp	r0, #0
 800a044:	d1ca      	bne.n	8009fdc <oslib_test_001_003_execute+0x4c>
  test_set_step(3);
 800a046:	2303      	movs	r3, #3
 800a048:	6033      	str	r3, [r6, #0]
    chMBReset(&mb1);
 800a04a:	f7ff fec1 	bl	8009dd0 <chMBReset.constprop.57>
  test_set_step(4);
 800a04e:	2204      	movs	r2, #4
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 800a050:	4b13      	ldr	r3, [pc, #76]	; (800a0a0 <oslib_test_001_003_execute+0x110>)
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800a052:	eb0d 0002 	add.w	r0, sp, r2
 800a056:	751c      	strb	r4, [r3, #20]
 800a058:	2101      	movs	r1, #1
  test_set_step(4);
 800a05a:	6032      	str	r2, [r6, #0]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800a05c:	f7ff ff60 	bl	8009f20 <chMBFetchTimeout.constprop.49>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800a060:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800a064:	fab0 f080 	clz	r0, r0
 800a068:	490c      	ldr	r1, [pc, #48]	; (800a09c <oslib_test_001_003_execute+0x10c>)
 800a06a:	0940      	lsrs	r0, r0, #5
 800a06c:	f7fb fc68 	bl	8005940 <_test_assert>
 800a070:	4604      	mov	r4, r0
 800a072:	2800      	cmp	r0, #0
 800a074:	d1b2      	bne.n	8009fdc <oslib_test_001_003_execute+0x4c>
 800a076:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBFetchI(&mb1, &msg2);
 800a07a:	a801      	add	r0, sp, #4
 800a07c:	f7fc fd80 	bl	8006b80 <chMBFetchI.constprop.48>
 800a080:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800a084:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800a088:	fab0 f080 	clz	r0, r0
 800a08c:	4903      	ldr	r1, [pc, #12]	; (800a09c <oslib_test_001_003_execute+0x10c>)
 800a08e:	0940      	lsrs	r0, r0, #5
 800a090:	f7fb fc56 	bl	8005940 <_test_assert>
 800a094:	e7a2      	b.n	8009fdc <oslib_test_001_003_execute+0x4c>
 800a096:	bf00      	nop
 800a098:	2000283c 	.word	0x2000283c
 800a09c:	0800eaa8 	.word	0x0800eaa8
 800a0a0:	20001858 	.word	0x20001858
	...

0800a0b0 <oslib_test_001_002_execute>:
static void oslib_test_001_002_execute(void) {
 800a0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 800a0b4:	f04f 0801 	mov.w	r8, #1
 800a0b8:	4fae      	ldr	r7, [pc, #696]	; (800a374 <oslib_test_001_002_execute+0x2c4>)
static void oslib_test_001_002_execute(void) {
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	2620      	movs	r6, #32
  test_set_step(1);
 800a0be:	f8c7 8000 	str.w	r8, [r7]
 800a0c2:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 800a0c6:	4cac      	ldr	r4, [pc, #688]	; (800a378 <oslib_test_001_002_execute+0x2c8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 800a0c8:	49ac      	ldr	r1, [pc, #688]	; (800a37c <oslib_test_001_002_execute+0x2cc>)
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a0ca:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800a0cc:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a0d0:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a0d2:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 800a0d6:	f1a0 0004 	sub.w	r0, r0, #4
 800a0da:	fab0 f080 	clz	r0, r0
 800a0de:	0940      	lsrs	r0, r0, #5
 800a0e0:	f7fb fc2e 	bl	8005940 <_test_assert>
 800a0e4:	b128      	cbz	r0, 800a0f2 <oslib_test_001_002_execute+0x42>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f383 8811 	msr	BASEPRI, r3
}
 800a0ec:	b002      	add	sp, #8
 800a0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f2:	4605      	mov	r5, r0
 800a0f4:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	603b      	str	r3, [r7, #0]
 800a0fc:	f386 8811 	msr	BASEPRI, r6
  mbp->wrptr = mbp->buffer;
 800a100:	6823      	ldr	r3, [r4, #0]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 800a102:	f104 0018 	add.w	r0, r4, #24
 800a106:	f06f 0101 	mvn.w	r1, #1
  mbp->rdptr = mbp->buffer;
 800a10a:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 800a10e:	6125      	str	r5, [r4, #16]
  mbp->reset = true;
 800a110:	f884 8014 	strb.w	r8, [r4, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 800a114:	f7fc fe6c 	bl	8006df0 <chThdDequeueAllI>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 800a118:	f104 0020 	add.w	r0, r4, #32
 800a11c:	f06f 0101 	mvn.w	r1, #1
 800a120:	f7fc fe66 	bl	8006df0 <chThdDequeueAllI>
 800a124:	f385 8811 	msr	BASEPRI, r5
 800a128:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 800a12c:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a130:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800a132:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a134:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800a138:	f1a0 0004 	sub.w	r0, r0, #4
 800a13c:	fab0 f080 	clz	r0, r0
 800a140:	498f      	ldr	r1, [pc, #572]	; (800a380 <oslib_test_001_002_execute+0x2d0>)
 800a142:	0940      	lsrs	r0, r0, #5
 800a144:	f7fb fbfc 	bl	8005940 <_test_assert>
 800a148:	4680      	mov	r8, r0
 800a14a:	b120      	cbz	r0, 800a156 <oslib_test_001_002_execute+0xa6>
 800a14c:	f385 8811 	msr	BASEPRI, r5
}
 800a150:	b002      	add	sp, #8
 800a152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a156:	f380 8811 	msr	BASEPRI, r0
 800a15a:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800a15e:	6920      	ldr	r0, [r4, #16]
 800a160:	4988      	ldr	r1, [pc, #544]	; (800a384 <oslib_test_001_002_execute+0x2d4>)
 800a162:	fab0 f080 	clz	r0, r0
 800a166:	0940      	lsrs	r0, r0, #5
 800a168:	f7fb fbea 	bl	8005940 <_test_assert>
 800a16c:	4605      	mov	r5, r0
 800a16e:	b110      	cbz	r0, 800a176 <oslib_test_001_002_execute+0xc6>
 800a170:	f388 8811 	msr	BASEPRI, r8
 800a174:	e7ba      	b.n	800a0ec <oslib_test_001_002_execute+0x3c>
 800a176:	f380 8811 	msr	BASEPRI, r0
 800a17a:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800a17e:	6820      	ldr	r0, [r4, #0]
 800a180:	68a3      	ldr	r3, [r4, #8]
 800a182:	4981      	ldr	r1, [pc, #516]	; (800a388 <oslib_test_001_002_execute+0x2d8>)
 800a184:	1ac0      	subs	r0, r0, r3
 800a186:	fab0 f080 	clz	r0, r0
 800a18a:	0940      	lsrs	r0, r0, #5
 800a18c:	f7fb fbd8 	bl	8005940 <_test_assert>
 800a190:	4680      	mov	r8, r0
 800a192:	2800      	cmp	r0, #0
 800a194:	d1da      	bne.n	800a14c <oslib_test_001_002_execute+0x9c>
 800a196:	f380 8811 	msr	BASEPRI, r0
 800a19a:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800a19e:	6820      	ldr	r0, [r4, #0]
 800a1a0:	68e3      	ldr	r3, [r4, #12]
 800a1a2:	497a      	ldr	r1, [pc, #488]	; (800a38c <oslib_test_001_002_execute+0x2dc>)
 800a1a4:	1ac0      	subs	r0, r0, r3
 800a1a6:	fab0 f080 	clz	r0, r0
 800a1aa:	0940      	lsrs	r0, r0, #5
 800a1ac:	f7fb fbc8 	bl	8005940 <_test_assert>
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d1dd      	bne.n	800a170 <oslib_test_001_002_execute+0xc0>
 800a1b4:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	4681      	mov	r9, r0
 800a1bc:	2542      	movs	r5, #66	; 0x42
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800a1be:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 800a390 <oslib_test_001_002_execute+0x2e0>
  mbp->reset = false;
 800a1c2:	7520      	strb	r0, [r4, #20]
  test_set_step(3);
 800a1c4:	603b      	str	r3, [r7, #0]
 800a1c6:	f386 8811 	msr	BASEPRI, r6
      msg1 = chMBPostI(&mb1, 'B' + i);
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	f7fc fc88 	bl	8006ae0 <chMBPostI.constprop.54>
 800a1d0:	f389 8811 	msr	BASEPRI, r9
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800a1d4:	fab0 f080 	clz	r0, r0
 800a1d8:	4651      	mov	r1, sl
 800a1da:	0940      	lsrs	r0, r0, #5
 800a1dc:	f7fb fbb0 	bl	8005940 <_test_assert>
 800a1e0:	3501      	adds	r5, #1
 800a1e2:	4680      	mov	r8, r0
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d181      	bne.n	800a0ec <oslib_test_001_002_execute+0x3c>
    for (i = 0; i < MB_SIZE - 1; i++) {
 800a1e8:	2d45      	cmp	r5, #69	; 0x45
 800a1ea:	d1ec      	bne.n	800a1c6 <oslib_test_001_002_execute+0x116>
 800a1ec:	f386 8811 	msr	BASEPRI, r6
    msg1 = chMBPostAheadI(&mb1, 'A');
 800a1f0:	2041      	movs	r0, #65	; 0x41
 800a1f2:	f7fc fc9d 	bl	8006b30 <chMBPostAheadI.constprop.51>
 800a1f6:	f388 8811 	msr	BASEPRI, r8
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800a1fa:	fab0 f080 	clz	r0, r0
 800a1fe:	4964      	ldr	r1, [pc, #400]	; (800a390 <oslib_test_001_002_execute+0x2e0>)
 800a200:	0940      	lsrs	r0, r0, #5
 800a202:	f7fb fb9d 	bl	8005940 <_test_assert>
 800a206:	4605      	mov	r5, r0
 800a208:	2800      	cmp	r0, #0
 800a20a:	f47f af6f 	bne.w	800a0ec <oslib_test_001_002_execute+0x3c>
  test_set_step(4);
 800a20e:	f04f 0804 	mov.w	r8, #4
 800a212:	f8c7 8000 	str.w	r8, [r7]
 800a216:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 800a21a:	6922      	ldr	r2, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800a21c:	e9d4 1300 	ldrd	r1, r3, [r4]
 800a220:	1a5b      	subs	r3, r3, r1
 800a222:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 800a226:	bf0c      	ite	eq
 800a228:	2001      	moveq	r0, #1
 800a22a:	2000      	movne	r0, #0
 800a22c:	4959      	ldr	r1, [pc, #356]	; (800a394 <oslib_test_001_002_execute+0x2e4>)
 800a22e:	f7fb fb87 	bl	8005940 <_test_assert>
 800a232:	4681      	mov	r9, r0
 800a234:	2800      	cmp	r0, #0
 800a236:	d189      	bne.n	800a14c <oslib_test_001_002_execute+0x9c>
 800a238:	f380 8811 	msr	BASEPRI, r0
 800a23c:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800a240:	6920      	ldr	r0, [r4, #16]
 800a242:	4955      	ldr	r1, [pc, #340]	; (800a398 <oslib_test_001_002_execute+0x2e8>)
 800a244:	f1a0 0004 	sub.w	r0, r0, #4
 800a248:	fab0 f080 	clz	r0, r0
 800a24c:	0940      	lsrs	r0, r0, #5
 800a24e:	f7fb fb77 	bl	8005940 <_test_assert>
 800a252:	4605      	mov	r5, r0
 800a254:	b110      	cbz	r0, 800a25c <oslib_test_001_002_execute+0x1ac>
 800a256:	f389 8811 	msr	BASEPRI, r9
 800a25a:	e747      	b.n	800a0ec <oslib_test_001_002_execute+0x3c>
 800a25c:	f380 8811 	msr	BASEPRI, r0
 800a260:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 800a264:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 800a268:	1ac6      	subs	r6, r0, r3
 800a26a:	4270      	negs	r0, r6
 800a26c:	4170      	adcs	r0, r6
 800a26e:	494b      	ldr	r1, [pc, #300]	; (800a39c <oslib_test_001_002_execute+0x2ec>)
 800a270:	f7fb fb66 	bl	8005940 <_test_assert>
 800a274:	2800      	cmp	r0, #0
 800a276:	f47f af69 	bne.w	800a14c <oslib_test_001_002_execute+0x9c>
 800a27a:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 800a27e:	2305      	movs	r3, #5
 800a280:	4645      	mov	r5, r8
 800a282:	4606      	mov	r6, r0
 800a284:	f04f 0820 	mov.w	r8, #32
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800a288:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800a390 <oslib_test_001_002_execute+0x2e0>
  test_set_step(5);
 800a28c:	603b      	str	r3, [r7, #0]
 800a28e:	f388 8811 	msr	BASEPRI, r8
      msg1 = chMBFetchI(&mb1, &msg2);
 800a292:	a801      	add	r0, sp, #4
 800a294:	f7fc fc74 	bl	8006b80 <chMBFetchI.constprop.48>
 800a298:	f386 8811 	msr	BASEPRI, r6
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800a29c:	fab0 f080 	clz	r0, r0
 800a2a0:	4649      	mov	r1, r9
 800a2a2:	0940      	lsrs	r0, r0, #5
 800a2a4:	f7fb fb4c 	bl	8005940 <_test_assert>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	f47f af1f 	bne.w	800a0ec <oslib_test_001_002_execute+0x3c>
      test_emit_token(msg2);
 800a2ae:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800a2b2:	f7fb fbe5 	bl	8005a80 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 800a2b6:	3d01      	subs	r5, #1
 800a2b8:	d1e9      	bne.n	800a28e <oslib_test_001_002_execute+0x1de>
    test_assert_sequence("ABCD", "wrong get sequence");
 800a2ba:	4939      	ldr	r1, [pc, #228]	; (800a3a0 <oslib_test_001_002_execute+0x2f0>)
 800a2bc:	4839      	ldr	r0, [pc, #228]	; (800a3a4 <oslib_test_001_002_execute+0x2f4>)
 800a2be:	f7fb fc57 	bl	8005b70 <_test_assert_sequence>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	f47f af12 	bne.w	800a0ec <oslib_test_001_002_execute+0x3c>
  test_set_step(6);
 800a2c8:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800a2ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a2ce:	2046      	movs	r0, #70	; 0x46
  test_set_step(6);
 800a2d0:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800a2d2:	f7ff fdb5 	bl	8009e40 <chMBPostTimeout.constprop.55>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800a2d6:	fab0 f080 	clz	r0, r0
 800a2da:	492d      	ldr	r1, [pc, #180]	; (800a390 <oslib_test_001_002_execute+0x2e0>)
 800a2dc:	0940      	lsrs	r0, r0, #5
 800a2de:	f7fb fb2f 	bl	8005940 <_test_assert>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	f47f af02 	bne.w	800a0ec <oslib_test_001_002_execute+0x3c>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 800a2e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a2ec:	a801      	add	r0, sp, #4
 800a2ee:	f7ff fe17 	bl	8009f20 <chMBFetchTimeout.constprop.49>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800a2f2:	fab0 f080 	clz	r0, r0
 800a2f6:	4926      	ldr	r1, [pc, #152]	; (800a390 <oslib_test_001_002_execute+0x2e0>)
 800a2f8:	0940      	lsrs	r0, r0, #5
 800a2fa:	f7fb fb21 	bl	8005940 <_test_assert>
 800a2fe:	2800      	cmp	r0, #0
 800a300:	f47f aef4 	bne.w	800a0ec <oslib_test_001_002_execute+0x3c>
  test_set_step(7);
 800a304:	2307      	movs	r3, #7
 800a306:	603b      	str	r3, [r7, #0]
 800a308:	f388 8811 	msr	BASEPRI, r8
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a30c:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800a30e:	e9d4 1200 	ldrd	r1, r2, [r4]
 800a312:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a314:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800a318:	1f19      	subs	r1, r3, #4
 800a31a:	4248      	negs	r0, r1
 800a31c:	4148      	adcs	r0, r1
 800a31e:	4918      	ldr	r1, [pc, #96]	; (800a380 <oslib_test_001_002_execute+0x2d0>)
 800a320:	f7fb fb0e 	bl	8005940 <_test_assert>
 800a324:	2800      	cmp	r0, #0
 800a326:	f47f af11 	bne.w	800a14c <oslib_test_001_002_execute+0x9c>
 800a32a:	f385 8811 	msr	BASEPRI, r5
 800a32e:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800a332:	6920      	ldr	r0, [r4, #16]
 800a334:	4913      	ldr	r1, [pc, #76]	; (800a384 <oslib_test_001_002_execute+0x2d4>)
 800a336:	fab0 f080 	clz	r0, r0
 800a33a:	0940      	lsrs	r0, r0, #5
 800a33c:	f7fb fb00 	bl	8005940 <_test_assert>
 800a340:	2800      	cmp	r0, #0
 800a342:	f47f af03 	bne.w	800a14c <oslib_test_001_002_execute+0x9c>
 800a346:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800a34a:	6820      	ldr	r0, [r4, #0]
 800a34c:	68a3      	ldr	r3, [r4, #8]
 800a34e:	490e      	ldr	r1, [pc, #56]	; (800a388 <oslib_test_001_002_execute+0x2d8>)
 800a350:	1ac2      	subs	r2, r0, r3
 800a352:	4250      	negs	r0, r2
 800a354:	4150      	adcs	r0, r2
 800a356:	f7fb faf3 	bl	8005940 <_test_assert>
 800a35a:	2800      	cmp	r0, #0
 800a35c:	f47f aec6 	bne.w	800a0ec <oslib_test_001_002_execute+0x3c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800a360:	6820      	ldr	r0, [r4, #0]
 800a362:	68e3      	ldr	r3, [r4, #12]
 800a364:	4909      	ldr	r1, [pc, #36]	; (800a38c <oslib_test_001_002_execute+0x2dc>)
 800a366:	1ac3      	subs	r3, r0, r3
 800a368:	4258      	negs	r0, r3
 800a36a:	4158      	adcs	r0, r3
 800a36c:	f7fb fae8 	bl	8005940 <_test_assert>
 800a370:	e6bc      	b.n	800a0ec <oslib_test_001_002_execute+0x3c>
 800a372:	bf00      	nop
 800a374:	2000283c 	.word	0x2000283c
 800a378:	20001858 	.word	0x20001858
 800a37c:	0800e9e0 	.word	0x0800e9e0
 800a380:	0800e9ec 	.word	0x0800e9ec
 800a384:	0800e9f8 	.word	0x0800e9f8
 800a388:	0800ea04 	.word	0x0800ea04
 800a38c:	0800ea28 	.word	0x0800ea28
 800a390:	0800eaa8 	.word	0x0800eaa8
 800a394:	0800ea4c 	.word	0x0800ea4c
 800a398:	0800ea58 	.word	0x0800ea58
 800a39c:	0800ea64 	.word	0x0800ea64
 800a3a0:	0800ea7c 	.word	0x0800ea7c
 800a3a4:	0800ea90 	.word	0x0800ea90
	...

0800a3b0 <oslib_test_001_001_execute>:
  test_set_step(1);
 800a3b0:	2301      	movs	r3, #1
static void oslib_test_001_001_execute(void) {
 800a3b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800a3b6:	4fb3      	ldr	r7, [pc, #716]	; (800a684 <oslib_test_001_001_execute+0x2d4>)
static void oslib_test_001_001_execute(void) {
 800a3b8:	b082      	sub	sp, #8
 800a3ba:	2620      	movs	r6, #32
  test_set_step(1);
 800a3bc:	603b      	str	r3, [r7, #0]
 800a3be:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 800a3c2:	4cb1      	ldr	r4, [pc, #708]	; (800a688 <oslib_test_001_001_execute+0x2d8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 800a3c4:	49b1      	ldr	r1, [pc, #708]	; (800a68c <oslib_test_001_001_execute+0x2dc>)
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a3c6:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800a3c8:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a3cc:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a3ce:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 800a3d2:	f1a0 0004 	sub.w	r0, r0, #4
 800a3d6:	fab0 f080 	clz	r0, r0
 800a3da:	0940      	lsrs	r0, r0, #5
 800a3dc:	f7fb fab0 	bl	8005940 <_test_assert>
 800a3e0:	b128      	cbz	r0, 800a3ee <oslib_test_001_001_execute+0x3e>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f383 8811 	msr	BASEPRI, r3
}
 800a3e8:	b002      	add	sp, #8
 800a3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 800a3f8:	f7ff fcea 	bl	8009dd0 <chMBReset.constprop.57>
 800a3fc:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 800a400:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a404:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800a406:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a408:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800a40c:	f1a0 0004 	sub.w	r0, r0, #4
 800a410:	fab0 f080 	clz	r0, r0
 800a414:	499e      	ldr	r1, [pc, #632]	; (800a690 <oslib_test_001_001_execute+0x2e0>)
 800a416:	0940      	lsrs	r0, r0, #5
 800a418:	f7fb fa92 	bl	8005940 <_test_assert>
 800a41c:	4680      	mov	r8, r0
 800a41e:	b120      	cbz	r0, 800a42a <oslib_test_001_001_execute+0x7a>
 800a420:	f385 8811 	msr	BASEPRI, r5
}
 800a424:	b002      	add	sp, #8
 800a426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a42a:	f380 8811 	msr	BASEPRI, r0
 800a42e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800a432:	6920      	ldr	r0, [r4, #16]
 800a434:	4997      	ldr	r1, [pc, #604]	; (800a694 <oslib_test_001_001_execute+0x2e4>)
 800a436:	fab0 f080 	clz	r0, r0
 800a43a:	0940      	lsrs	r0, r0, #5
 800a43c:	f7fb fa80 	bl	8005940 <_test_assert>
 800a440:	4605      	mov	r5, r0
 800a442:	b110      	cbz	r0, 800a44a <oslib_test_001_001_execute+0x9a>
 800a444:	f388 8811 	msr	BASEPRI, r8
 800a448:	e7ce      	b.n	800a3e8 <oslib_test_001_001_execute+0x38>
 800a44a:	f380 8811 	msr	BASEPRI, r0
 800a44e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800a452:	6820      	ldr	r0, [r4, #0]
 800a454:	68a3      	ldr	r3, [r4, #8]
 800a456:	4990      	ldr	r1, [pc, #576]	; (800a698 <oslib_test_001_001_execute+0x2e8>)
 800a458:	1ac0      	subs	r0, r0, r3
 800a45a:	fab0 f080 	clz	r0, r0
 800a45e:	0940      	lsrs	r0, r0, #5
 800a460:	f7fb fa6e 	bl	8005940 <_test_assert>
 800a464:	4680      	mov	r8, r0
 800a466:	2800      	cmp	r0, #0
 800a468:	d1da      	bne.n	800a420 <oslib_test_001_001_execute+0x70>
 800a46a:	f380 8811 	msr	BASEPRI, r0
 800a46e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800a472:	6820      	ldr	r0, [r4, #0]
 800a474:	68e3      	ldr	r3, [r4, #12]
 800a476:	4989      	ldr	r1, [pc, #548]	; (800a69c <oslib_test_001_001_execute+0x2ec>)
 800a478:	1ac0      	subs	r0, r0, r3
 800a47a:	fab0 f080 	clz	r0, r0
 800a47e:	0940      	lsrs	r0, r0, #5
 800a480:	f7fb fa5e 	bl	8005940 <_test_assert>
 800a484:	2800      	cmp	r0, #0
 800a486:	d1dd      	bne.n	800a444 <oslib_test_001_001_execute+0x94>
 800a488:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 800a48c:	2303      	movs	r3, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800a48e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  test_set_step(3);
 800a492:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800a494:	f7ff fcd4 	bl	8009e40 <chMBPostTimeout.constprop.55>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 800a498:	1c85      	adds	r5, r0, #2
 800a49a:	bf14      	ite	ne
 800a49c:	2000      	movne	r0, #0
 800a49e:	2001      	moveq	r0, #1
 800a4a0:	497f      	ldr	r1, [pc, #508]	; (800a6a0 <oslib_test_001_001_execute+0x2f0>)
 800a4a2:	f7fb fa4d 	bl	8005940 <_test_assert>
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d19e      	bne.n	800a3e8 <oslib_test_001_001_execute+0x38>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800a4aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a4ae:	f7ff fcff 	bl	8009eb0 <chMBPostAheadTimeout.constprop.52>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 800a4b2:	1c82      	adds	r2, r0, #2
 800a4b4:	bf14      	ite	ne
 800a4b6:	2000      	movne	r0, #0
 800a4b8:	2001      	moveq	r0, #1
 800a4ba:	4979      	ldr	r1, [pc, #484]	; (800a6a0 <oslib_test_001_001_execute+0x2f0>)
 800a4bc:	f7fb fa40 	bl	8005940 <_test_assert>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d191      	bne.n	800a3e8 <oslib_test_001_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 800a4c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a4c8:	a801      	add	r0, sp, #4
 800a4ca:	f7ff fd29 	bl	8009f20 <chMBFetchTimeout.constprop.49>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 800a4ce:	1c83      	adds	r3, r0, #2
 800a4d0:	bf14      	ite	ne
 800a4d2:	2000      	movne	r0, #0
 800a4d4:	2001      	moveq	r0, #1
 800a4d6:	4972      	ldr	r1, [pc, #456]	; (800a6a0 <oslib_test_001_001_execute+0x2f0>)
 800a4d8:	f7fb fa32 	bl	8005940 <_test_assert>
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d183      	bne.n	800a3e8 <oslib_test_001_001_execute+0x38>
  test_set_step(4);
 800a4e0:	2304      	movs	r3, #4
 800a4e2:	2542      	movs	r5, #66	; 0x42
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800a4e4:	4e6f      	ldr	r6, [pc, #444]	; (800a6a4 <oslib_test_001_001_execute+0x2f4>)
  mbp->reset = false;
 800a4e6:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 800a4e8:	603b      	str	r3, [r7, #0]
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800a4ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	f7ff fca6 	bl	8009e40 <chMBPostTimeout.constprop.55>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800a4f4:	fab0 f080 	clz	r0, r0
 800a4f8:	4631      	mov	r1, r6
 800a4fa:	0940      	lsrs	r0, r0, #5
 800a4fc:	f7fb fa20 	bl	8005940 <_test_assert>
 800a500:	3501      	adds	r5, #1
 800a502:	2800      	cmp	r0, #0
 800a504:	f47f af70 	bne.w	800a3e8 <oslib_test_001_001_execute+0x38>
    for (i = 0; i < MB_SIZE - 1; i++) {
 800a508:	2d45      	cmp	r5, #69	; 0x45
 800a50a:	d1ee      	bne.n	800a4ea <oslib_test_001_001_execute+0x13a>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 800a50c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a510:	2041      	movs	r0, #65	; 0x41
 800a512:	f7ff fccd 	bl	8009eb0 <chMBPostAheadTimeout.constprop.52>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800a516:	fab0 f080 	clz	r0, r0
 800a51a:	4962      	ldr	r1, [pc, #392]	; (800a6a4 <oslib_test_001_001_execute+0x2f4>)
 800a51c:	0940      	lsrs	r0, r0, #5
 800a51e:	f7fb fa0f 	bl	8005940 <_test_assert>
 800a522:	4605      	mov	r5, r0
 800a524:	2800      	cmp	r0, #0
 800a526:	f47f af5f 	bne.w	800a3e8 <oslib_test_001_001_execute+0x38>
  test_set_step(5);
 800a52a:	2305      	movs	r3, #5
 800a52c:	2620      	movs	r6, #32
 800a52e:	603b      	str	r3, [r7, #0]
 800a530:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 800a534:	6922      	ldr	r2, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800a536:	e9d4 1300 	ldrd	r1, r3, [r4]
 800a53a:	1a5b      	subs	r3, r3, r1
 800a53c:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 800a540:	bf0c      	ite	eq
 800a542:	2001      	moveq	r0, #1
 800a544:	2000      	movne	r0, #0
 800a546:	4958      	ldr	r1, [pc, #352]	; (800a6a8 <oslib_test_001_001_execute+0x2f8>)
 800a548:	f7fb f9fa 	bl	8005940 <_test_assert>
 800a54c:	4680      	mov	r8, r0
 800a54e:	2800      	cmp	r0, #0
 800a550:	f47f af66 	bne.w	800a420 <oslib_test_001_001_execute+0x70>
 800a554:	f380 8811 	msr	BASEPRI, r0
 800a558:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800a55c:	6920      	ldr	r0, [r4, #16]
 800a55e:	4953      	ldr	r1, [pc, #332]	; (800a6ac <oslib_test_001_001_execute+0x2fc>)
 800a560:	f1a0 0c04 	sub.w	ip, r0, #4
 800a564:	f1dc 0000 	rsbs	r0, ip, #0
 800a568:	eb40 000c 	adc.w	r0, r0, ip
 800a56c:	f7fb f9e8 	bl	8005940 <_test_assert>
 800a570:	4605      	mov	r5, r0
 800a572:	2800      	cmp	r0, #0
 800a574:	f47f af66 	bne.w	800a444 <oslib_test_001_001_execute+0x94>
 800a578:	f380 8811 	msr	BASEPRI, r0
 800a57c:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 800a580:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 800a584:	1ac6      	subs	r6, r0, r3
 800a586:	4270      	negs	r0, r6
 800a588:	4170      	adcs	r0, r6
 800a58a:	4949      	ldr	r1, [pc, #292]	; (800a6b0 <oslib_test_001_001_execute+0x300>)
 800a58c:	f7fb f9d8 	bl	8005940 <_test_assert>
 800a590:	2800      	cmp	r0, #0
 800a592:	f47f af45 	bne.w	800a420 <oslib_test_001_001_execute+0x70>
 800a596:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 800a59a:	2306      	movs	r3, #6
 800a59c:	2504      	movs	r5, #4
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800a59e:	4e41      	ldr	r6, [pc, #260]	; (800a6a4 <oslib_test_001_001_execute+0x2f4>)
  test_set_step(6);
 800a5a0:	603b      	str	r3, [r7, #0]
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 800a5a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a5a6:	a801      	add	r0, sp, #4
 800a5a8:	f7ff fcba 	bl	8009f20 <chMBFetchTimeout.constprop.49>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800a5ac:	fab0 f080 	clz	r0, r0
 800a5b0:	4631      	mov	r1, r6
 800a5b2:	0940      	lsrs	r0, r0, #5
 800a5b4:	f7fb f9c4 	bl	8005940 <_test_assert>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	f47f af15 	bne.w	800a3e8 <oslib_test_001_001_execute+0x38>
      test_emit_token(msg2);
 800a5be:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800a5c2:	f7fb fa5d 	bl	8005a80 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 800a5c6:	3d01      	subs	r5, #1
 800a5c8:	d1eb      	bne.n	800a5a2 <oslib_test_001_001_execute+0x1f2>
    test_assert_sequence("ABCD", "wrong get sequence");
 800a5ca:	493a      	ldr	r1, [pc, #232]	; (800a6b4 <oslib_test_001_001_execute+0x304>)
 800a5cc:	483a      	ldr	r0, [pc, #232]	; (800a6b8 <oslib_test_001_001_execute+0x308>)
 800a5ce:	f7fb facf 	bl	8005b70 <_test_assert_sequence>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	f47f af08 	bne.w	800a3e8 <oslib_test_001_001_execute+0x38>
  test_set_step(7);
 800a5d8:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800a5da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a5de:	2046      	movs	r0, #70	; 0x46
  test_set_step(7);
 800a5e0:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800a5e2:	f7ff fc2d 	bl	8009e40 <chMBPostTimeout.constprop.55>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800a5e6:	fab0 f080 	clz	r0, r0
 800a5ea:	492e      	ldr	r1, [pc, #184]	; (800a6a4 <oslib_test_001_001_execute+0x2f4>)
 800a5ec:	0940      	lsrs	r0, r0, #5
 800a5ee:	f7fb f9a7 	bl	8005940 <_test_assert>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	f47f aef8 	bne.w	800a3e8 <oslib_test_001_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 800a5f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a5fc:	a801      	add	r0, sp, #4
 800a5fe:	f7ff fc8f 	bl	8009f20 <chMBFetchTimeout.constprop.49>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800a602:	fab0 f080 	clz	r0, r0
 800a606:	4927      	ldr	r1, [pc, #156]	; (800a6a4 <oslib_test_001_001_execute+0x2f4>)
 800a608:	0940      	lsrs	r0, r0, #5
 800a60a:	f7fb f999 	bl	8005940 <_test_assert>
 800a60e:	2800      	cmp	r0, #0
 800a610:	f47f aeea 	bne.w	800a3e8 <oslib_test_001_001_execute+0x38>
  test_set_step(8);
 800a614:	2308      	movs	r3, #8
 800a616:	2620      	movs	r6, #32
 800a618:	603b      	str	r3, [r7, #0]
 800a61a:	f386 8811 	msr	BASEPRI, r6
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a61e:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800a620:	e9d4 1200 	ldrd	r1, r2, [r4]
 800a624:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800a626:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800a62a:	1f19      	subs	r1, r3, #4
 800a62c:	4248      	negs	r0, r1
 800a62e:	4148      	adcs	r0, r1
 800a630:	4917      	ldr	r1, [pc, #92]	; (800a690 <oslib_test_001_001_execute+0x2e0>)
 800a632:	f7fb f985 	bl	8005940 <_test_assert>
 800a636:	2800      	cmp	r0, #0
 800a638:	f47f aef2 	bne.w	800a420 <oslib_test_001_001_execute+0x70>
 800a63c:	f385 8811 	msr	BASEPRI, r5
 800a640:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800a644:	6920      	ldr	r0, [r4, #16]
 800a646:	4913      	ldr	r1, [pc, #76]	; (800a694 <oslib_test_001_001_execute+0x2e4>)
 800a648:	fab0 f080 	clz	r0, r0
 800a64c:	0940      	lsrs	r0, r0, #5
 800a64e:	f7fb f977 	bl	8005940 <_test_assert>
 800a652:	2800      	cmp	r0, #0
 800a654:	f47f aee4 	bne.w	800a420 <oslib_test_001_001_execute+0x70>
 800a658:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800a65c:	6820      	ldr	r0, [r4, #0]
 800a65e:	68a3      	ldr	r3, [r4, #8]
 800a660:	490d      	ldr	r1, [pc, #52]	; (800a698 <oslib_test_001_001_execute+0x2e8>)
 800a662:	1ac2      	subs	r2, r0, r3
 800a664:	4250      	negs	r0, r2
 800a666:	4150      	adcs	r0, r2
 800a668:	f7fb f96a 	bl	8005940 <_test_assert>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	f47f aebb 	bne.w	800a3e8 <oslib_test_001_001_execute+0x38>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800a672:	6820      	ldr	r0, [r4, #0]
 800a674:	68e3      	ldr	r3, [r4, #12]
 800a676:	4909      	ldr	r1, [pc, #36]	; (800a69c <oslib_test_001_001_execute+0x2ec>)
 800a678:	1ac3      	subs	r3, r0, r3
 800a67a:	4258      	negs	r0, r3
 800a67c:	4158      	adcs	r0, r3
 800a67e:	f7fb f95f 	bl	8005940 <_test_assert>
 800a682:	e6b1      	b.n	800a3e8 <oslib_test_001_001_execute+0x38>
 800a684:	2000283c 	.word	0x2000283c
 800a688:	20001858 	.word	0x20001858
 800a68c:	0800e9e0 	.word	0x0800e9e0
 800a690:	0800e9ec 	.word	0x0800e9ec
 800a694:	0800e9f8 	.word	0x0800e9f8
 800a698:	0800ea04 	.word	0x0800ea04
 800a69c:	0800ea28 	.word	0x0800ea28
 800a6a0:	0800e9bc 	.word	0x0800e9bc
 800a6a4:	0800eaa8 	.word	0x0800eaa8
 800a6a8:	0800ea4c 	.word	0x0800ea4c
 800a6ac:	0800ea58 	.word	0x0800ea58
 800a6b0:	0800ea64 	.word	0x0800ea64
 800a6b4:	0800ea7c 	.word	0x0800ea7c
 800a6b8:	0800ea90 	.word	0x0800ea90
 800a6bc:	00000000 	.word	0x00000000

0800a6c0 <oslib_test_002_002_execute>:
static void oslib_test_002_002_execute(void) {
 800a6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c4:	4d39      	ldr	r5, [pc, #228]	; (800a7ac <oslib_test_002_002_execute+0xec>)
  test_set_step(1);
 800a6c6:	2301      	movs	r3, #1
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 800a6c8:	46a9      	mov	r9, r5
 800a6ca:	2604      	movs	r6, #4
 800a6cc:	f04f 0820 	mov.w	r8, #32
 800a6d0:	2700      	movs	r7, #0
 800a6d2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800a7bc <oslib_test_002_002_execute+0xfc>
 800a6d6:	4c36      	ldr	r4, [pc, #216]	; (800a7b0 <oslib_test_002_002_execute+0xf0>)
 800a6d8:	f8ca 3000 	str.w	r3, [sl]
 800a6dc:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 800a6e0:	68eb      	ldr	r3, [r5, #12]
  chSemSignalI(&gmp->sem);
 800a6e2:	4648      	mov	r0, r9
  php->next = mp->next;
 800a6e4:	6023      	str	r3, [r4, #0]
  mp->next = php;
 800a6e6:	60ec      	str	r4, [r5, #12]
  chSemSignalI(&gmp->sem);
 800a6e8:	f7fc fb6a 	bl	8006dc0 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 800a6ec:	f7ff fad8 	bl	8009ca0 <chSchRescheduleS>
 800a6f0:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800a6f4:	692b      	ldr	r3, [r5, #16]
  while (n != 0U) {
 800a6f6:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800a6f8:	441c      	add	r4, r3
  while (n != 0U) {
 800a6fa:	d1ef      	bne.n	800a6dc <oslib_test_002_002_execute+0x1c>
  test_set_step(2);
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800a700:	4e2c      	ldr	r6, [pc, #176]	; (800a7b4 <oslib_test_002_002_execute+0xf4>)
  test_set_step(2);
 800a702:	f8ca 3000 	str.w	r3, [sl]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800a706:	2000      	movs	r0, #0
 800a708:	f7fd fdba 	bl	8008280 <chGuardedPoolAllocTimeout.constprop.43>
 800a70c:	3000      	adds	r0, #0
 800a70e:	bf18      	it	ne
 800a710:	2001      	movne	r0, #1
 800a712:	4631      	mov	r1, r6
 800a714:	f7fb f914 	bl	8005940 <_test_assert>
 800a718:	2800      	cmp	r0, #0
 800a71a:	d145      	bne.n	800a7a8 <oslib_test_002_002_execute+0xe8>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800a71c:	3c01      	subs	r4, #1
 800a71e:	d1f2      	bne.n	800a706 <oslib_test_002_002_execute+0x46>
  test_set_step(3);
 800a720:	2303      	movs	r3, #3
 800a722:	f8ca 3000 	str.w	r3, [sl]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800a726:	f7fd fdab 	bl	8008280 <chGuardedPoolAllocTimeout.constprop.43>
 800a72a:	fab0 f080 	clz	r0, r0
 800a72e:	4922      	ldr	r1, [pc, #136]	; (800a7b8 <oslib_test_002_002_execute+0xf8>)
 800a730:	0940      	lsrs	r0, r0, #5
 800a732:	f7fb f905 	bl	8005940 <_test_assert>
 800a736:	bbb8      	cbnz	r0, 800a7a8 <oslib_test_002_002_execute+0xe8>
  test_set_step(4);
 800a738:	2304      	movs	r3, #4
 800a73a:	f04f 0920 	mov.w	r9, #32
 800a73e:	4e1c      	ldr	r6, [pc, #112]	; (800a7b0 <oslib_test_002_002_execute+0xf0>)
  chSemSignalI(&gmp->sem);
 800a740:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800a7ac <oslib_test_002_002_execute+0xec>
 800a744:	f8ca 3000 	str.w	r3, [sl]
 800a748:	f106 0710 	add.w	r7, r6, #16
      chGuardedPoolFree(&gmp1, &objects[i]);
 800a74c:	4632      	mov	r2, r6
 800a74e:	f389 8811 	msr	BASEPRI, r9
  php->next = mp->next;
 800a752:	68eb      	ldr	r3, [r5, #12]
  chSemSignalI(&gmp->sem);
 800a754:	4640      	mov	r0, r8
  php->next = mp->next;
 800a756:	f846 3b04 	str.w	r3, [r6], #4
  mp->next = php;
 800a75a:	60ea      	str	r2, [r5, #12]
  chSemSignalI(&gmp->sem);
 800a75c:	f7fc fb30 	bl	8006dc0 <chSemSignalI>
  chSchRescheduleS();
 800a760:	f7ff fa9e 	bl	8009ca0 <chSchRescheduleS>
 800a764:	f384 8811 	msr	BASEPRI, r4
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800a768:	42b7      	cmp	r7, r6
 800a76a:	d1ef      	bne.n	800a74c <oslib_test_002_002_execute+0x8c>
  test_set_step(5);
 800a76c:	2305      	movs	r3, #5
 800a76e:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800a770:	4d10      	ldr	r5, [pc, #64]	; (800a7b4 <oslib_test_002_002_execute+0xf4>)
  test_set_step(5);
 800a772:	f8ca 3000 	str.w	r3, [sl]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800a776:	2000      	movs	r0, #0
 800a778:	f7fd fd82 	bl	8008280 <chGuardedPoolAllocTimeout.constprop.43>
 800a77c:	3000      	adds	r0, #0
 800a77e:	bf18      	it	ne
 800a780:	2001      	movne	r0, #1
 800a782:	4629      	mov	r1, r5
 800a784:	f7fb f8dc 	bl	8005940 <_test_assert>
 800a788:	b970      	cbnz	r0, 800a7a8 <oslib_test_002_002_execute+0xe8>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800a78a:	3c01      	subs	r4, #1
 800a78c:	d1f3      	bne.n	800a776 <oslib_test_002_002_execute+0xb6>
  test_set_step(6);
 800a78e:	2306      	movs	r3, #6
 800a790:	f8ca 3000 	str.w	r3, [sl]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800a794:	f7fd fd74 	bl	8008280 <chGuardedPoolAllocTimeout.constprop.43>
}
 800a798:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800a79c:	fab0 f080 	clz	r0, r0
 800a7a0:	4905      	ldr	r1, [pc, #20]	; (800a7b8 <oslib_test_002_002_execute+0xf8>)
 800a7a2:	0940      	lsrs	r0, r0, #5
 800a7a4:	f7fb b8cc 	b.w	8005940 <_test_assert>
}
 800a7a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ac:	20001814 	.word	0x20001814
 800a7b0:	200020f8 	.word	0x200020f8
 800a7b4:	0800ead0 	.word	0x0800ead0
 800a7b8:	0800eadc 	.word	0x0800eadc
 800a7bc:	2000283c 	.word	0x2000283c

0800a7c0 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	2520      	movs	r5, #32
 800a7c4:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	480b      	ldr	r0, [pc, #44]	; (800a7f8 <evt_thread7+0x38>)
 800a7cc:	f7fc fa30 	bl	8006c30 <chEvtBroadcastFlagsI>
 800a7d0:	2400      	movs	r4, #0
  chSchRescheduleS();
 800a7d2:	f7ff fa65 	bl	8009ca0 <chSchRescheduleS>
 800a7d6:	f384 8811 	msr	BASEPRI, r4
  chThdSleepMilliseconds(50);
 800a7da:	2064      	movs	r0, #100	; 0x64
 800a7dc:	f7fe f870 	bl	80088c0 <chThdSleep>
 800a7e0:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 800a7e4:	4805      	ldr	r0, [pc, #20]	; (800a7fc <evt_thread7+0x3c>)
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	f7fc fa22 	bl	8006c30 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 800a7ec:	f7ff fa58 	bl	8009ca0 <chSchRescheduleS>
 800a7f0:	f384 8811 	msr	BASEPRI, r4
}
 800a7f4:	bd38      	pop	{r3, r4, r5, pc}
 800a7f6:	bf00      	nop
 800a7f8:	2000180c 	.word	0x2000180c
 800a7fc:	20001810 	.word	0x20001810

0800a800 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 800a800:	b510      	push	{r4, lr}
 800a802:	4604      	mov	r4, r0
  chThdSleepMilliseconds(50);
 800a804:	2064      	movs	r0, #100	; 0x64
 800a806:	f7fe f85b 	bl	80088c0 <chThdSleep>
 800a80a:	2320      	movs	r3, #32
 800a80c:	f383 8811 	msr	BASEPRI, r3
  chEvtSignalI(tp, events);
 800a810:	2101      	movs	r1, #1
 800a812:	4620      	mov	r0, r4
 800a814:	f7fc f9f4 	bl	8006c00 <chEvtSignalI>
  chSchRescheduleS();
 800a818:	f7ff fa42 	bl	8009ca0 <chSchRescheduleS>
 800a81c:	2300      	movs	r3, #0
 800a81e:	f383 8811 	msr	BASEPRI, r3
}
 800a822:	bd10      	pop	{r4, pc}
	...

0800a830 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 800a830:	b510      	push	{r4, lr}
  chThdSleepMilliseconds(150);
 800a832:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a836:	f7fe f843 	bl	80088c0 <chThdSleep>
 800a83a:	2320      	movs	r3, #32
 800a83c:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 800a840:	4c06      	ldr	r4, [pc, #24]	; (800a85c <thread4B+0x2c>)
 800a842:	4620      	mov	r0, r4
 800a844:	f7fe fb7c 	bl	8008f40 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 800a848:	4620      	mov	r0, r4
 800a84a:	f7fc fa91 	bl	8006d70 <chMtxUnlockS>
  chSchRescheduleS();
 800a84e:	f7ff fa27 	bl	8009ca0 <chSchRescheduleS>
 800a852:	2300      	movs	r3, #0
 800a854:	f383 8811 	msr	BASEPRI, r3
}
 800a858:	bd10      	pop	{r4, pc}
 800a85a:	bf00      	nop
 800a85c:	20001848 	.word	0x20001848

0800a860 <thread2>:
static THD_FUNCTION(thread2, p) {
 800a860:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(50);
 800a862:	2064      	movs	r0, #100	; 0x64
 800a864:	f7fe f82c 	bl	80088c0 <chThdSleep>
 800a868:	2320      	movs	r3, #32
 800a86a:	f383 8811 	msr	BASEPRI, r3
  chSemSignalI(&sem1); /* For coverage reasons */
 800a86e:	4804      	ldr	r0, [pc, #16]	; (800a880 <thread2+0x20>)
 800a870:	f7fc faa6 	bl	8006dc0 <chSemSignalI>
  chSchRescheduleS();
 800a874:	f7ff fa14 	bl	8009ca0 <chSchRescheduleS>
 800a878:	2300      	movs	r3, #0
 800a87a:	f383 8811 	msr	BASEPRI, r3
}
 800a87e:	bd08      	pop	{r3, pc}
 800a880:	20002108 	.word	0x20002108
	...

0800a890 <thread4>:
static THD_FUNCTION(thread4, p) {
 800a890:	b508      	push	{r3, lr}
 800a892:	2220      	movs	r2, #32
 800a894:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 800a898:	6883      	ldr	r3, [r0, #8]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	dd05      	ble.n	800a8aa <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800a89e:	f7ff f9ff 	bl	8009ca0 <chSchRescheduleS>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f383 8811 	msr	BASEPRI, r3
}
 800a8a8:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 800a8aa:	f7fc fa89 	bl	8006dc0 <chSemSignalI>
  chSchRescheduleS();
 800a8ae:	f7ff f9f7 	bl	8009ca0 <chSchRescheduleS>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	bd08      	pop	{r3, pc}
 800a8ba:	bf00      	nop
 800a8bc:	0000      	movs	r0, r0
	...

0800a8c0 <thread1.lto_priv.97>:
static THD_FUNCTION(thread1, p) {
 800a8c0:	b510      	push	{r4, lr}
 800a8c2:	2320      	movs	r3, #32
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 800a8ca:	4a09      	ldr	r2, [pc, #36]	; (800a8f0 <thread1.lto_priv.97+0x30>)
 800a8cc:	6813      	ldr	r3, [r2, #0]
 800a8ce:	b12b      	cbz	r3, 800a8dc <thread1.lto_priv.97+0x1c>
    *trp = NULL;
 800a8d0:	2100      	movs	r1, #0
    (void) chSchReadyI(tp);
 800a8d2:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 800a8d4:	6259      	str	r1, [r3, #36]	; 0x24
    *trp = NULL;
 800a8d6:	6011      	str	r1, [r2, #0]
    (void) chSchReadyI(tp);
 800a8d8:	f7fc f8da 	bl	8006a90 <chSchReadyI>
  chSchRescheduleS();
 800a8dc:	f7ff f9e0 	bl	8009ca0 <chSchRescheduleS>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 800a8e6:	7820      	ldrb	r0, [r4, #0]
}
 800a8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 800a8ec:	f7fb b8c8 	b.w	8005a80 <test_emit_token>
 800a8f0:	20002868 	.word	0x20002868
	...

0800a900 <chMtxUnlock>:
  thread_t *ctp = currp;
 800a900:	4b17      	ldr	r3, [pc, #92]	; (800a960 <chMtxUnlock+0x60>)
void chMtxUnlock(mutex_t *mp) {
 800a902:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 800a904:	699d      	ldr	r5, [r3, #24]
 800a906:	2320      	movs	r3, #32
 800a908:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 800a90c:	6804      	ldr	r4, [r0, #0]
    ctp->mtxlist = mp->next;
 800a90e:	68c3      	ldr	r3, [r0, #12]
    if (chMtxQueueNotEmptyS(mp)) {
 800a910:	4284      	cmp	r4, r0
    ctp->mtxlist = mp->next;
 800a912:	63ab      	str	r3, [r5, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 800a914:	d01d      	beq.n	800a952 <chMtxUnlock+0x52>
      tprio_t newprio = ctp->realprio;
 800a916:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      while (lmp != NULL) {
 800a918:	b14b      	cbz	r3, 800a92e <chMtxUnlock+0x2e>
 800a91a:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d003      	beq.n	800a928 <chMtxUnlock+0x28>
 800a920:	6892      	ldr	r2, [r2, #8]
 800a922:	4291      	cmp	r1, r2
 800a924:	bf38      	it	cc
 800a926:	4611      	movcc	r1, r2
        lmp = lmp->next;
 800a928:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1f5      	bne.n	800a91a <chMtxUnlock+0x1a>
 800a92e:	4603      	mov	r3, r0
  tqp->next             = tp->queue.next;
 800a930:	6822      	ldr	r2, [r4, #0]
      mp->next = tp->mtxlist;
 800a932:	6ba6      	ldr	r6, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
 800a934:	4620      	mov	r0, r4
      ctp->prio = newprio;
 800a936:	60a9      	str	r1, [r5, #8]
 800a938:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800a93a:	6053      	str	r3, [r2, #4]
      mp->next = tp->mtxlist;
 800a93c:	e9c3 4602 	strd	r4, r6, [r3, #8]
      tp->mtxlist = mp;
 800a940:	63a3      	str	r3, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
 800a942:	f7fc f8a5 	bl	8006a90 <chSchReadyI>
      chSchRescheduleS();
 800a946:	f7ff f9ab 	bl	8009ca0 <chSchRescheduleS>
 800a94a:	2300      	movs	r3, #0
 800a94c:	f383 8811 	msr	BASEPRI, r3
}
 800a950:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 800a952:	2300      	movs	r3, #0
 800a954:	60a3      	str	r3, [r4, #8]
 800a956:	2300      	movs	r3, #0
 800a958:	f383 8811 	msr	BASEPRI, r3
}
 800a95c:	bd70      	pop	{r4, r5, r6, pc}
 800a95e:	bf00      	nop
 800a960:	20001eb0 	.word	0x20001eb0
	...

0800a970 <chHeapAllocAligned.constprop.60>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 800a970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
    heapp = &default_heap;
 800a974:	4d38      	ldr	r5, [pc, #224]	; (800aa58 <chHeapAllocAligned.constprop.60+0xe8>)
  if (align < CH_HEAP_ALIGNMENT) {
    align = CH_HEAP_ALIGNMENT;
  }

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 800a976:	f101 0807 	add.w	r8, r1, #7
    heapp = &default_heap;
 800a97a:	2800      	cmp	r0, #0
 800a97c:	bf18      	it	ne
 800a97e:	4605      	movne	r5, r0

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 800a980:	f105 070c 	add.w	r7, r5, #12
 800a984:	4638      	mov	r0, r7
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 800a986:	460e      	mov	r6, r1
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 800a988:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  H_LOCK(heapp);
 800a98c:	f7fe fb50 	bl	8009030 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
 800a990:	f105 0c04 	add.w	ip, r5, #4
  while (H_NEXT(qp) != NULL) {
 800a994:	f8dc 3000 	ldr.w	r3, [ip]

    /* Next free block.*/
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 800a998:	f103 000f 	add.w	r0, r3, #15
 800a99c:	f020 0007 	bic.w	r0, r0, #7
 800a9a0:	f1a0 0e08 	sub.w	lr, r0, #8
 800a9a4:	f103 0a08 	add.w	sl, r3, #8
  while (H_NEXT(qp) != NULL) {
 800a9a8:	b173      	cbz	r3, 800a9c8 <chHeapAllocAligned.constprop.60+0x58>

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 800a9aa:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800a9ae:	f109 0201 	add.w	r2, r9, #1
 800a9b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800a9b6:	4596      	cmp	lr, r2
 800a9b8:	d204      	bcs.n	800a9c4 <chHeapAllocAligned.constprop.60+0x54>
 800a9ba:	1a11      	subs	r1, r2, r0
 800a9bc:	10c9      	asrs	r1, r1, #3
 800a9be:	4588      	cmp	r8, r1
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	d913      	bls.n	800a9ec <chHeapAllocAligned.constprop.60+0x7c>
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
          H_NEXT(fp) = H_NEXT(hp);
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
          H_NEXT(qp) = fp;
 800a9c4:	469c      	mov	ip, r3
 800a9c6:	e7e5      	b.n	800a994 <chHeapAllocAligned.constprop.60+0x24>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 800a9c8:	4638      	mov	r0, r7
 800a9ca:	f7ff ff99 	bl	800a900 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 800a9ce:	682c      	ldr	r4, [r5, #0]
 800a9d0:	b14c      	cbz	r4, 800a9e6 <chHeapAllocAligned.constprop.60+0x76>
    ahp = heapp->provider((pages + 1U) * CH_HEAP_ALIGNMENT,
 800a9d2:	2208      	movs	r2, #8
 800a9d4:	f108 0001 	add.w	r0, r8, #1
 800a9d8:	00c0      	lsls	r0, r0, #3
 800a9da:	4611      	mov	r1, r2
 800a9dc:	47a0      	blx	r4
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 800a9de:	4604      	mov	r4, r0
 800a9e0:	b108      	cbz	r0, 800a9e6 <chHeapAllocAligned.constprop.60+0x76>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
      H_SIZE(hp) = size;
 800a9e2:	e940 5602 	strd	r5, r6, [r0, #-8]
      /*lint -restore*/
    }
  }

  return NULL;
}
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ahp > hp) {
 800a9ec:	4573      	cmp	r3, lr
 800a9ee:	d319      	bcc.n	800aa24 <chHeapAllocAligned.constprop.60+0xb4>
        if (H_PAGES(hp) == pages) {
 800a9f0:	45c8      	cmp	r8, r9
 800a9f2:	6818      	ldr	r0, [r3, #0]
 800a9f4:	d02a      	beq.n	800aa4c <chHeapAllocAligned.constprop.60+0xdc>
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 800a9f6:	4654      	mov	r4, sl
          fp = H_BLOCK(hp) + pages;
 800a9f8:	f108 0801 	add.w	r8, r8, #1
 800a9fc:	eb03 01c8 	add.w	r1, r3, r8, lsl #3
          H_NEXT(fp) = H_NEXT(hp);
 800aa00:	f843 0038 	str.w	r0, [r3, r8, lsl #3]
          H_NEXT(qp) = fp;
 800aa04:	469e      	mov	lr, r3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 800aa06:	f101 0308 	add.w	r3, r1, #8
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	10db      	asrs	r3, r3, #3
 800aa0e:	604b      	str	r3, [r1, #4]
          H_NEXT(qp) = fp;
 800aa10:	f8cc 1000 	str.w	r1, [ip]
      H_UNLOCK(heapp);
 800aa14:	4638      	mov	r0, r7
      H_HEAP(hp) = heapp;
 800aa16:	e9ce 5600 	strd	r5, r6, [lr]
      H_UNLOCK(heapp);
 800aa1a:	f7ff ff71 	bl	800a900 <chMtxUnlock>
}
 800aa1e:	4620      	mov	r0, r4
 800aa20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 800aa24:	ebae 0a0a 	sub.w	sl, lr, sl
 800aa28:	ea4f 02ea 	mov.w	r2, sl, asr #3
        if (bpages > pages) {
 800aa2c:	4588      	cmp	r8, r1
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 800aa2e:	605a      	str	r2, [r3, #4]
        if (bpages > pages) {
 800aa30:	d2f0      	bcs.n	800aa14 <chHeapAllocAligned.constprop.60+0xa4>
          H_PAGES(fp) = (bpages - pages) - 1U;
 800aa32:	ea6f 0208 	mvn.w	r2, r8
          H_NEXT(fp) = H_NEXT(hp);
 800aa36:	6818      	ldr	r0, [r3, #0]
          fp = H_BLOCK(ahp) + pages;
 800aa38:	f108 0801 	add.w	r8, r8, #1
          H_PAGES(fp) = (bpages - pages) - 1U;
 800aa3c:	4411      	add	r1, r2
          fp = H_BLOCK(ahp) + pages;
 800aa3e:	eb0e 02c8 	add.w	r2, lr, r8, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 800aa42:	6051      	str	r1, [r2, #4]
          H_NEXT(fp) = H_NEXT(hp);
 800aa44:	f84e 0038 	str.w	r0, [lr, r8, lsl #3]
          H_NEXT(hp) = fp;
 800aa48:	601a      	str	r2, [r3, #0]
 800aa4a:	e7e3      	b.n	800aa14 <chHeapAllocAligned.constprop.60+0xa4>
          H_NEXT(qp) = H_NEXT(hp);
 800aa4c:	f8cc 0000 	str.w	r0, [ip]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 800aa50:	4654      	mov	r4, sl
          H_NEXT(qp) = H_NEXT(hp);
 800aa52:	469e      	mov	lr, r3
 800aa54:	e7de      	b.n	800aa14 <chHeapAllocAligned.constprop.60+0xa4>
 800aa56:	bf00      	nop
 800aa58:	20002048 	.word	0x20002048
 800aa5c:	00000000 	.word	0x00000000

0800aa60 <dyn_create_object_heap>:
                                             size_t size) {
 800aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 800aa62:	680c      	ldr	r4, [r1, #0]
                                             size_t size) {
 800aa64:	460d      	mov	r5, r1
  while (p != (dyn_element_t *)dlp) {
 800aa66:	42a1      	cmp	r1, r4
                                             size_t size) {
 800aa68:	4606      	mov	r6, r0
 800aa6a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 800aa6c:	d103      	bne.n	800aa76 <dyn_create_object_heap+0x16>
 800aa6e:	e00d      	b.n	800aa8c <dyn_create_object_heap+0x2c>
    p = p->next;
 800aa70:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800aa72:	42a5      	cmp	r5, r4
 800aa74:	d00a      	beq.n	800aa8c <dyn_create_object_heap+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800aa76:	2208      	movs	r2, #8
 800aa78:	4631      	mov	r1, r6
 800aa7a:	18a0      	adds	r0, r4, r2
 800aa7c:	f003 fce0 	bl	800e440 <strncmp>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d1f5      	bne.n	800aa70 <dyn_create_object_heap+0x10>
  if (dep != NULL) {
 800aa84:	b114      	cbz	r4, 800aa8c <dyn_create_object_heap+0x2c>
    return NULL;
 800aa86:	4604      	mov	r4, r0
}
 800aa88:	4620      	mov	r0, r4
 800aa8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 800aa8c:	4639      	mov	r1, r7
 800aa8e:	2000      	movs	r0, #0
 800aa90:	f7ff ff6e 	bl	800a970 <chHeapAllocAligned.constprop.60>
  if (dep == NULL) {
 800aa94:	4604      	mov	r4, r0
 800aa96:	b148      	cbz	r0, 800aaac <dyn_create_object_heap+0x4c>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 800aa98:	2208      	movs	r2, #8
 800aa9a:	4631      	mov	r1, r6
 800aa9c:	4410      	add	r0, r2
 800aa9e:	f003 fd19 	bl	800e4d4 <strncpy>
  dep->refs = (ucnt_t)1;
 800aaa2:	2201      	movs	r2, #1
  dep->next = dlp->next;
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->next = dep;
 800aaaa:	602c      	str	r4, [r5, #0]
}
 800aaac:	4620      	mov	r0, r4
 800aaae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aab0 <chThdCreateFromHeap>:
                              tfunc_t pf, void *arg) {
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	4616      	mov	r6, r2
 800aab6:	461d      	mov	r5, r3
 800aab8:	460c      	mov	r4, r1
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 800aaba:	f7ff ff59 	bl	800a970 <chHeapAllocAligned.constprop.60>
  if (wsp == NULL) {
 800aabe:	b1d8      	cbz	r0, 800aaf8 <chThdCreateFromHeap+0x48>
  thread_descriptor_t td = {
 800aac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    (stkalign_t *)((uint8_t *)wsp + size),
 800aac2:	4404      	add	r4, r0
  thread_descriptor_t td = {
 800aac4:	9304      	str	r3, [sp, #16]
 800aac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aac8:	9402      	str	r4, [sp, #8]
 800aaca:	9305      	str	r3, [sp, #20]
 800aacc:	e9cd 6000 	strd	r6, r0, [sp]
 800aad0:	9503      	str	r5, [sp, #12]
 800aad2:	2320      	movs	r3, #32
 800aad4:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(&td);
 800aad8:	4668      	mov	r0, sp
 800aada:	f7fb ff61 	bl	80069a0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 800aade:	2301      	movs	r3, #1
  chSchWakeupS(tp, MSG_OK);
 800aae0:	2100      	movs	r1, #0
  tp->flags = CH_FLAG_MODE_HEAP;
 800aae2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp = chThdCreateSuspendedI(&td);
 800aae6:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800aae8:	f7fd fa12 	bl	8007f10 <chSchWakeupS>
 800aaec:	2300      	movs	r3, #0
 800aaee:	f383 8811 	msr	BASEPRI, r3
}
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	b006      	add	sp, #24
 800aaf6:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 800aaf8:	4604      	mov	r4, r0
 800aafa:	e7fa      	b.n	800aaf2 <chThdCreateFromHeap+0x42>
 800aafc:	0000      	movs	r0, r0
	...

0800ab00 <chFactoryRegisterObject.constprop.40>:
 * @retval NULL         if the object to be registered cannot be allocated or
 *                      a registered object with the same name exists.
 *
 * @api
 */
registered_object_t *chFactoryRegisterObject(const char *name,
 800ab00:	b538      	push	{r3, r4, r5, lr}
 800ab02:	4605      	mov	r5, r0
                                             void *objp) {
  registered_object_t *rop;

  F_LOCK();
 800ab04:	4807      	ldr	r0, [pc, #28]	; (800ab24 <chFactoryRegisterObject.constprop.40+0x24>)
 800ab06:	f7fe fa93 	bl	8009030 <chMtxLock>

  rop = (registered_object_t *)dyn_create_object_pool(name,
 800ab0a:	4a07      	ldr	r2, [pc, #28]	; (800ab28 <chFactoryRegisterObject.constprop.40+0x28>)
 800ab0c:	4807      	ldr	r0, [pc, #28]	; (800ab2c <chFactoryRegisterObject.constprop.40+0x2c>)
 800ab0e:	1f11      	subs	r1, r2, #4
 800ab10:	f7fd f98e 	bl	8007e30 <dyn_create_object_pool>
                                                      &ch_factory.obj_list,
                                                      &ch_factory.obj_pool);
  if (rop != NULL) {
 800ab14:	4604      	mov	r4, r0
 800ab16:	b100      	cbz	r0, 800ab1a <chFactoryRegisterObject.constprop.40+0x1a>
    /* Initializing registered object data.*/
    rop->objp = objp;
 800ab18:	6105      	str	r5, [r0, #16]
  }

  F_UNLOCK();
 800ab1a:	4802      	ldr	r0, [pc, #8]	; (800ab24 <chFactoryRegisterObject.constprop.40+0x24>)
 800ab1c:	f7ff fef0 	bl	800a900 <chMtxUnlock>

  return rop;
}
 800ab20:	4620      	mov	r0, r4
 800ab22:	bd38      	pop	{r3, r4, r5, pc}
 800ab24:	20001f24 	.word	0x20001f24
 800ab28:	20001f38 	.word	0x20001f38
 800ab2c:	0800e5f0 	.word	0x0800e5f0

0800ab30 <chFactoryFindObject.constprop.39>:
 * @retval NULL         if a registered object with the specified name
 *                      does not exist.
 *
 * @api
 */
registered_object_t *chFactoryFindObject(const char *name) {
 800ab30:	b538      	push	{r3, r4, r5, lr}
  registered_object_t *rop;

  F_LOCK();
 800ab32:	4c07      	ldr	r4, [pc, #28]	; (800ab50 <chFactoryFindObject.constprop.39+0x20>)
 800ab34:	4620      	mov	r0, r4
 800ab36:	f7fe fa7b 	bl	8009030 <chMtxLock>

  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
 800ab3a:	f104 0110 	add.w	r1, r4, #16
 800ab3e:	4805      	ldr	r0, [pc, #20]	; (800ab54 <chFactoryFindObject.constprop.39+0x24>)
 800ab40:	f7fd f956 	bl	8007df0 <dyn_find_object>
 800ab44:	4605      	mov	r5, r0

  F_UNLOCK();
 800ab46:	4620      	mov	r0, r4
 800ab48:	f7ff feda 	bl	800a900 <chMtxUnlock>

  return rop;
}
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	20001f24 	.word	0x20001f24
 800ab54:	0800e5f0 	.word	0x0800e5f0
	...

0800ab60 <chFactoryCreateBuffer.constprop.38>:
 * @retval NULL         if the dynamic buffer object cannot be allocated or
 *                      a dynamic buffer object with the same name exists.
 *
 * @api
 */
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
 800ab60:	b510      	push	{r4, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 800ab62:	480a      	ldr	r0, [pc, #40]	; (800ab8c <chFactoryCreateBuffer.constprop.38+0x2c>)
 800ab64:	f7fe fa64 	bl	8009030 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 800ab68:	2280      	movs	r2, #128	; 0x80
 800ab6a:	4909      	ldr	r1, [pc, #36]	; (800ab90 <chFactoryCreateBuffer.constprop.38+0x30>)
 800ab6c:	4809      	ldr	r0, [pc, #36]	; (800ab94 <chFactoryCreateBuffer.constprop.38+0x34>)
 800ab6e:	f7ff ff77 	bl	800aa60 <dyn_create_object_heap>
                                               &ch_factory.buf_list,
                                               size);
  if (dbp != NULL) {
 800ab72:	4604      	mov	r4, r0
 800ab74:	b120      	cbz	r0, 800ab80 <chFactoryCreateBuffer.constprop.38+0x20>
    /* Initializing buffer object data.*/
    memset((void *)dbp->buffer, 0, size);
 800ab76:	2280      	movs	r2, #128	; 0x80
 800ab78:	2100      	movs	r1, #0
 800ab7a:	3010      	adds	r0, #16
 800ab7c:	f003 fba2 	bl	800e2c4 <memset>
  }

  F_UNLOCK();
 800ab80:	4802      	ldr	r0, [pc, #8]	; (800ab8c <chFactoryCreateBuffer.constprop.38+0x2c>)
 800ab82:	f7ff febd 	bl	800a900 <chMtxUnlock>

  return dbp;
}
 800ab86:	4620      	mov	r0, r4
 800ab88:	bd10      	pop	{r4, pc}
 800ab8a:	bf00      	nop
 800ab8c:	20001f24 	.word	0x20001f24
 800ab90:	20001f48 	.word	0x20001f48
 800ab94:	0800e5d0 	.word	0x0800e5d0
	...

0800aba0 <chFactoryFindBuffer.constprop.37>:
 * @retval NULL         if a dynamic buffer object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 800aba0:	b538      	push	{r3, r4, r5, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 800aba2:	4c07      	ldr	r4, [pc, #28]	; (800abc0 <chFactoryFindBuffer.constprop.37+0x20>)
 800aba4:	4620      	mov	r0, r4
 800aba6:	f7fe fa43 	bl	8009030 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
 800abaa:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800abae:	4805      	ldr	r0, [pc, #20]	; (800abc4 <chFactoryFindBuffer.constprop.37+0x24>)
 800abb0:	f7fd f91e 	bl	8007df0 <dyn_find_object>
 800abb4:	4605      	mov	r5, r0

  F_UNLOCK();
 800abb6:	4620      	mov	r0, r4
 800abb8:	f7ff fea2 	bl	800a900 <chMtxUnlock>

  return dbp;
}
 800abbc:	4628      	mov	r0, r5
 800abbe:	bd38      	pop	{r3, r4, r5, pc}
 800abc0:	20001f24 	.word	0x20001f24
 800abc4:	0800e5d0 	.word	0x0800e5d0
	...

0800abd0 <chFactoryCreateSemaphore.constprop.36>:
 * @retval NULL         if the dynamic semaphore object cannot be allocated or
 *                      a dynamic semaphore with the same name exists.
 *
 * @api
 */
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 800abd0:	b510      	push	{r4, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 800abd2:	480a      	ldr	r0, [pc, #40]	; (800abfc <chFactoryCreateSemaphore.constprop.36+0x2c>)
 800abd4:	f7fe fa2c 	bl	8009030 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
 800abd8:	4a09      	ldr	r2, [pc, #36]	; (800ac00 <chFactoryCreateSemaphore.constprop.36+0x30>)
 800abda:	480a      	ldr	r0, [pc, #40]	; (800ac04 <chFactoryCreateSemaphore.constprop.36+0x34>)
 800abdc:	1f11      	subs	r1, r2, #4
 800abde:	f7fd f927 	bl	8007e30 <dyn_create_object_pool>
                                                  &ch_factory.sem_list,
                                                  &ch_factory.sem_pool);
  if (dsp != NULL) {
 800abe2:	4604      	mov	r4, r0
 800abe4:	b128      	cbz	r0, 800abf2 <chFactoryCreateSemaphore.constprop.36+0x22>
  sp->cnt = n;
 800abe6:	2200      	movs	r2, #0
    /* Initializing semaphore object dataa.*/
    chSemObjectInit(&dsp->sem, n);
 800abe8:	f100 0310 	add.w	r3, r0, #16
  tqp->prev = (thread_t *)tqp;
 800abec:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abf0:	6182      	str	r2, [r0, #24]
  }

  F_UNLOCK();
 800abf2:	4802      	ldr	r0, [pc, #8]	; (800abfc <chFactoryCreateSemaphore.constprop.36+0x2c>)
 800abf4:	f7ff fe84 	bl	800a900 <chMtxUnlock>

  return dsp;
}
 800abf8:	4620      	mov	r0, r4
 800abfa:	bd10      	pop	{r4, pc}
 800abfc:	20001f24 	.word	0x20001f24
 800ac00:	20001f50 	.word	0x20001f50
 800ac04:	0800e5e8 	.word	0x0800e5e8
	...

0800ac10 <chFactoryFindSemaphore.constprop.35>:
 * @retval NULL         if a dynamic semaphore object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 800ac10:	b538      	push	{r3, r4, r5, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 800ac12:	4c07      	ldr	r4, [pc, #28]	; (800ac30 <chFactoryFindSemaphore.constprop.35+0x20>)
 800ac14:	4620      	mov	r0, r4
 800ac16:	f7fe fa0b 	bl	8009030 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
 800ac1a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800ac1e:	4805      	ldr	r0, [pc, #20]	; (800ac34 <chFactoryFindSemaphore.constprop.35+0x24>)
 800ac20:	f7fd f8e6 	bl	8007df0 <dyn_find_object>
 800ac24:	4605      	mov	r5, r0

  F_UNLOCK();
 800ac26:	4620      	mov	r0, r4
 800ac28:	f7ff fe6a 	bl	800a900 <chMtxUnlock>

  return dsp;
}
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	bd38      	pop	{r3, r4, r5, pc}
 800ac30:	20001f24 	.word	0x20001f24
 800ac34:	0800e5e8 	.word	0x0800e5e8
	...

0800ac40 <chFactoryCreateMailbox.constprop.34>:
 * @retval NULL         if the dynamic mailbox object cannot be allocated or
 *                      a dynamic mailbox object with the same name exists.
 *
 * @api
 */
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 800ac40:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 800ac42:	4811      	ldr	r0, [pc, #68]	; (800ac88 <chFactoryCreateMailbox.constprop.34+0x48>)
 800ac44:	f7fe f9f4 	bl	8009030 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 800ac48:	2278      	movs	r2, #120	; 0x78
 800ac4a:	4910      	ldr	r1, [pc, #64]	; (800ac8c <chFactoryCreateMailbox.constprop.34+0x4c>)
 800ac4c:	4810      	ldr	r0, [pc, #64]	; (800ac90 <chFactoryCreateMailbox.constprop.34+0x50>)
 800ac4e:	f7ff ff07 	bl	800aa60 <dyn_create_object_heap>
                                                &ch_factory.mbx_list,
                                                sizeof (dyn_mailbox_t) +
                                                (n * sizeof (msg_t)));
  if (dmp != NULL) {
 800ac52:	4604      	mov	r4, r0
 800ac54:	b198      	cbz	r0, 800ac7e <chFactoryCreateMailbox.constprop.34+0x3e>
  mbp->cnt    = (size_t)0;
 800ac56:	2000      	movs	r0, #0
    /* Initializing mailbox object data.*/
    chMBObjectInit(&dmp->mbx, dmp->msgbuf, n);
 800ac58:	f104 0338 	add.w	r3, r4, #56	; 0x38
  chThdQueueObjectInit(&mbp->qw);
 800ac5c:	f104 0128 	add.w	r1, r4, #40	; 0x28
  chThdQueueObjectInit(&mbp->qr);
 800ac60:	f104 0230 	add.w	r2, r4, #48	; 0x30
  mbp->wrptr  = buf;
 800ac64:	e9c4 3306 	strd	r3, r3, [r4, #24]
 800ac68:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
 800ac6c:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  mbp->top    = &buf[n];
 800ac70:	f104 0578 	add.w	r5, r4, #120	; 0x78
  mbp->cnt    = (size_t)0;
 800ac74:	6220      	str	r0, [r4, #32]
  mbp->reset  = false;
 800ac76:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  mbp->buffer = buf;
 800ac7a:	6123      	str	r3, [r4, #16]
  mbp->top    = &buf[n];
 800ac7c:	6165      	str	r5, [r4, #20]
  }

  F_UNLOCK();
 800ac7e:	4802      	ldr	r0, [pc, #8]	; (800ac88 <chFactoryCreateMailbox.constprop.34+0x48>)
 800ac80:	f7ff fe3e 	bl	800a900 <chMtxUnlock>

  return dmp;
}
 800ac84:	4620      	mov	r0, r4
 800ac86:	bd38      	pop	{r3, r4, r5, pc}
 800ac88:	20001f24 	.word	0x20001f24
 800ac8c:	20001f60 	.word	0x20001f60
 800ac90:	0800e5d8 	.word	0x0800e5d8
	...

0800aca0 <chFactoryFindMailbox.constprop.33>:
 * @retval NULL         if a dynamic mailbox object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 800aca0:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 800aca2:	4c07      	ldr	r4, [pc, #28]	; (800acc0 <chFactoryFindMailbox.constprop.33+0x20>)
 800aca4:	4620      	mov	r0, r4
 800aca6:	f7fe f9c3 	bl	8009030 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
 800acaa:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800acae:	4805      	ldr	r0, [pc, #20]	; (800acc4 <chFactoryFindMailbox.constprop.33+0x24>)
 800acb0:	f7fd f89e 	bl	8007df0 <dyn_find_object>
 800acb4:	4605      	mov	r5, r0

  F_UNLOCK();
 800acb6:	4620      	mov	r0, r4
 800acb8:	f7ff fe22 	bl	800a900 <chMtxUnlock>

  return dmp;
}
 800acbc:	4628      	mov	r0, r5
 800acbe:	bd38      	pop	{r3, r4, r5, pc}
 800acc0:	20001f24 	.word	0x20001f24
 800acc4:	0800e5d8 	.word	0x0800e5d8
	...

0800acd0 <chFactoryCreateObjectsFIFO.constprop.32>:
 *                      allocated or a dynamic "objects FIFO" object with
 *                      the same name exists.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 800acd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                                               size_t objsize,
                                               size_t objn,
                                               unsigned objalign) {
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 800acd4:	4823      	ldr	r0, [pc, #140]	; (800ad64 <chFactoryCreateObjectsFIFO.constprop.32+0x94>)
 800acd6:	f7fe f9ab 	bl	8009030 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 800acda:	f44f 72ca 	mov.w	r2, #404	; 0x194
 800acde:	4922      	ldr	r1, [pc, #136]	; (800ad68 <chFactoryCreateObjectsFIFO.constprop.32+0x98>)
 800ace0:	4822      	ldr	r0, [pc, #136]	; (800ad6c <chFactoryCreateObjectsFIFO.constprop.32+0x9c>)
 800ace2:	f7ff febd 	bl	800aa60 <dyn_create_object_heap>
                                                      &ch_factory.fifo_list,
                                                      sizeof (dyn_objects_fifo_t) +
                                                      (objn * sizeof (msg_t)) +
                                                      (objn * objsize));
  if (dofp != NULL) {
 800ace6:	4604      	mov	r4, r0
 800ace8:	b3a8      	cbz	r0, 800ad56 <chFactoryCreateObjectsFIFO.constprop.32+0x86>
  mp->next = NULL;
 800acea:	2300      	movs	r3, #0
  mp->object_size = size;
 800acec:	2210      	movs	r2, #16
  mp->align = align;
 800acee:	2104      	movs	r1, #4
    /* Initializing mailbox object data.*/
    chFifoObjectInit(&dofp->fifo, objsize, objn, objalign,
                     (void *)&dofp->msgbuf[objn], dofp->msgbuf);
 800acf0:	f100 0a94 	add.w	sl, r0, #148	; 0x94
 800acf4:	4698      	mov	r8, r3
 800acf6:	4693      	mov	fp, r2
 800acf8:	4655      	mov	r5, sl
 800acfa:	2720      	movs	r7, #32
 */
static inline void chFifoObjectInit(objects_fifo_t *ofp, size_t objsize,
                                    size_t objn, unsigned objalign,
                                    void *objbuf, msg_t *msgbuf) {

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 800acfc:	1886      	adds	r6, r0, r2
 800acfe:	e9c0 2108 	strd	r2, r1, [r0, #32]
 800ad02:	e9c0 6604 	strd	r6, r6, [r0, #16]
  mp->next = NULL;
 800ad06:	61c3      	str	r3, [r0, #28]
  mp->provider = provider;
 800ad08:	6283      	str	r3, [r0, #40]	; 0x28
 800ad0a:	6183      	str	r3, [r0, #24]
 800ad0c:	f100 0954 	add.w	r9, r0, #84	; 0x54
 800ad10:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 800ad14:	69e3      	ldr	r3, [r4, #28]
  chSemSignalI(&gmp->sem);
 800ad16:	4630      	mov	r0, r6
  php->next = mp->next;
 800ad18:	602b      	str	r3, [r5, #0]
  mp->next = php;
 800ad1a:	61e5      	str	r5, [r4, #28]
  chSemSignalI(&gmp->sem);
 800ad1c:	f7fc f850 	bl	8006dc0 <chSemSignalI>
  chSchRescheduleS();
 800ad20:	f7fe ffbe 	bl	8009ca0 <chSchRescheduleS>
 800ad24:	f388 8811 	msr	BASEPRI, r8
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800ad28:	6a23      	ldr	r3, [r4, #32]
  while (n != 0U) {
 800ad2a:	f1bb 0b01 	subs.w	fp, fp, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800ad2e:	441d      	add	r5, r3
  while (n != 0U) {
 800ad30:	d1ee      	bne.n	800ad10 <chFactoryCreateObjectsFIFO.constprop.32+0x40>
  chThdQueueObjectInit(&mbp->qw);
 800ad32:	f104 0244 	add.w	r2, r4, #68	; 0x44
  chThdQueueObjectInit(&mbp->qr);
 800ad36:	f104 034c 	add.w	r3, r4, #76	; 0x4c
  mbp->wrptr  = buf;
 800ad3a:	e9c4 990d 	strd	r9, r9, [r4, #52]	; 0x34
 800ad3e:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
 800ad42:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  mbp->buffer = buf;
 800ad46:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
  mbp->top    = &buf[n];
 800ad4a:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 800ad4e:	f8c4 b03c 	str.w	fp, [r4, #60]	; 0x3c
  mbp->reset  = false;
 800ad52:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
  }

  F_UNLOCK();
 800ad56:	4803      	ldr	r0, [pc, #12]	; (800ad64 <chFactoryCreateObjectsFIFO.constprop.32+0x94>)
 800ad58:	f7ff fdd2 	bl	800a900 <chMtxUnlock>

  return dofp;
}
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad62:	bf00      	nop
 800ad64:	20001f24 	.word	0x20001f24
 800ad68:	20001f64 	.word	0x20001f64
 800ad6c:	0800e5e0 	.word	0x0800e5e0

0800ad70 <chFactoryFindObjectsFIFO.constprop.31>:
 * @retval NULL         if a dynamic "objects FIFO" object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 800ad70:	b538      	push	{r3, r4, r5, lr}
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 800ad72:	4c07      	ldr	r4, [pc, #28]	; (800ad90 <chFactoryFindObjectsFIFO.constprop.31+0x20>)
 800ad74:	4620      	mov	r0, r4
 800ad76:	f7fe f95b 	bl	8009030 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
 800ad7a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800ad7e:	4805      	ldr	r0, [pc, #20]	; (800ad94 <chFactoryFindObjectsFIFO.constprop.31+0x24>)
 800ad80:	f7fd f836 	bl	8007df0 <dyn_find_object>
 800ad84:	4605      	mov	r5, r0

  F_UNLOCK();
 800ad86:	4620      	mov	r0, r4
 800ad88:	f7ff fdba 	bl	800a900 <chMtxUnlock>

  return dofp;
}
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	bd38      	pop	{r3, r4, r5, pc}
 800ad90:	20001f24 	.word	0x20001f24
 800ad94:	0800e5e0 	.word	0x0800e5e0
	...

0800ada0 <rt_test_010_011_execute>:
static void rt_test_010_011_execute(void) {
 800ada0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 800ada4:	2301      	movs	r3, #1
 800ada6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800ae2c <rt_test_010_011_execute+0x8c>
    n = 0;
 800adaa:	2500      	movs	r5, #0
  test_set_step(1);
 800adac:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 800adb0:	f7fd fe26 	bl	8008a00 <test_wait_tick>
  return (systime_t)STM32_ST_TIM->CNT;
 800adb4:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 800adb8:	4607      	mov	r7, r0
 800adba:	f500 66fa 	add.w	r6, r0, #2000	; 0x7d0
 800adbe:	b2b6      	uxth	r6, r6
      chMtxLock(&mtx1);
 800adc0:	4c17      	ldr	r4, [pc, #92]	; (800ae20 <rt_test_010_011_execute+0x80>)
 800adc2:	1a36      	subs	r6, r6, r0
 800adc4:	4620      	mov	r0, r4
 800adc6:	f7fe f933 	bl	8009030 <chMtxLock>
      chMtxUnlock(&mtx1);
 800adca:	4620      	mov	r0, r4
 800adcc:	f7ff fd98 	bl	800a900 <chMtxUnlock>
      chMtxLock(&mtx1);
 800add0:	4620      	mov	r0, r4
 800add2:	f7fe f92d 	bl	8009030 <chMtxLock>
      chMtxUnlock(&mtx1);
 800add6:	4620      	mov	r0, r4
 800add8:	f7ff fd92 	bl	800a900 <chMtxUnlock>
      chMtxLock(&mtx1);
 800addc:	4620      	mov	r0, r4
 800adde:	f7fe f927 	bl	8009030 <chMtxLock>
      chMtxUnlock(&mtx1);
 800ade2:	4620      	mov	r0, r4
 800ade4:	f7ff fd8c 	bl	800a900 <chMtxUnlock>
      chMtxLock(&mtx1);
 800ade8:	4620      	mov	r0, r4
 800adea:	f7fe f921 	bl	8009030 <chMtxLock>
      chMtxUnlock(&mtx1);
 800adee:	4620      	mov	r0, r4
 800adf0:	f7ff fd86 	bl	800a900 <chMtxUnlock>
 800adf4:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
      n++;
 800adf8:	3501      	adds	r5, #1
  return (bool)((time - start) < (end - start));
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	1bdb      	subs	r3, r3, r7
    } while (chVTIsSystemTimeWithinX(start, end));
 800adfe:	42b3      	cmp	r3, r6
 800ae00:	dbe0      	blt.n	800adc4 <rt_test_010_011_execute+0x24>
  test_set_step(2);
 800ae02:	2302      	movs	r3, #2
    test_print("--- Score : ");
 800ae04:	4807      	ldr	r0, [pc, #28]	; (800ae24 <rt_test_010_011_execute+0x84>)
  test_set_step(2);
 800ae06:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 800ae0a:	f7fa fe99 	bl	8005b40 <test_print>
    test_printn(n * 4);
 800ae0e:	00a8      	lsls	r0, r5, #2
 800ae10:	f7fa fe26 	bl	8005a60 <test_printn>
}
 800ae14:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" lock+unlock/S");
 800ae18:	4803      	ldr	r0, [pc, #12]	; (800ae28 <rt_test_010_011_execute+0x88>)
 800ae1a:	f7fa be71 	b.w	8005b00 <test_println>
 800ae1e:	bf00      	nop
 800ae20:	200020e8 	.word	0x200020e8
 800ae24:	0800fdf0 	.word	0x0800fdf0
 800ae28:	0800fe3c 	.word	0x0800fe3c
 800ae2c:	2000283c 	.word	0x2000283c

0800ae30 <thread8>:
static THD_FUNCTION(thread8, p) {
 800ae30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae32:	4607      	mov	r7, r0
  chMtxLock(&m2);
 800ae34:	481c      	ldr	r0, [pc, #112]	; (800aea8 <thread8+0x78>)
 800ae36:	f7fe f8fb 	bl	8009030 <chMtxLock>
  chMtxLock(&m1);
 800ae3a:	481c      	ldr	r0, [pc, #112]	; (800aeac <thread8+0x7c>)
 800ae3c:	f7fe f8f8 	bl	8009030 <chMtxLock>
 800ae40:	2320      	movs	r3, #32
 800ae42:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 800ae46:	4d1a      	ldr	r5, [pc, #104]	; (800aeb0 <thread8+0x80>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->mtxlist;
 800ae48:	69ab      	ldr	r3, [r5, #24]
 800ae4a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
  chDbgAssert(currp->mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	f7fb ff8f 	bl	8006d70 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 800ae52:	4a18      	ldr	r2, [pc, #96]	; (800aeb4 <thread8+0x84>)
 800ae54:	69ac      	ldr	r4, [r5, #24]
  thread_t *cp = (thread_t *)tqp;
 800ae56:	4610      	mov	r0, r2
 800ae58:	4613      	mov	r3, r2
 800ae5a:	6262      	str	r2, [r4, #36]	; 0x24
 800ae5c:	e003      	b.n	800ae66 <thread8+0x36>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800ae5e:	6899      	ldr	r1, [r3, #8]
 800ae60:	68a2      	ldr	r2, [r4, #8]
 800ae62:	4291      	cmp	r1, r2
 800ae64:	d302      	bcc.n	800ae6c <thread8+0x3c>
    cp = cp->queue.next;
 800ae66:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800ae68:	4283      	cmp	r3, r0
 800ae6a:	d1f8      	bne.n	800ae5e <thread8+0x2e>
  tp->queue.prev             = cp->queue.prev;
 800ae6c:	685a      	ldr	r2, [r3, #4]
    chSchGoSleepS(newstate);
 800ae6e:	2007      	movs	r0, #7
 800ae70:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 800ae74:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 800ae76:	605c      	str	r4, [r3, #4]
 800ae78:	f7fd f92a 	bl	80080d0 <chSchGoSleepS>
  return currp->u.rdymsg;
 800ae7c:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 800ae7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae80:	3301      	adds	r3, #1
 800ae82:	d002      	beq.n	800ae8a <thread8+0x5a>
    chMtxLockS(mp);
 800ae84:	4630      	mov	r0, r6
 800ae86:	f7fe f85b 	bl	8008f40 <chMtxLockS>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 800ae90:	7838      	ldrb	r0, [r7, #0]
 800ae92:	f7fa fdf5 	bl	8005a80 <test_emit_token>
  chMtxUnlock(&m1);
 800ae96:	4805      	ldr	r0, [pc, #20]	; (800aeac <thread8+0x7c>)
 800ae98:	f7ff fd32 	bl	800a900 <chMtxUnlock>
}
 800ae9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m2);
 800aea0:	4801      	ldr	r0, [pc, #4]	; (800aea8 <thread8+0x78>)
 800aea2:	f7ff bd2d 	b.w	800a900 <chMtxUnlock>
 800aea6:	bf00      	nop
 800aea8:	20001848 	.word	0x20001848
 800aeac:	20001838 	.word	0x20001838
 800aeb0:	20001eb0 	.word	0x20001eb0
 800aeb4:	20001804 	.word	0x20001804
	...

0800aec0 <thread6>:
static THD_FUNCTION(thread6, p) {
 800aec0:	b570      	push	{r4, r5, r6, lr}
 800aec2:	4606      	mov	r6, r0
  chMtxLock(&m1);
 800aec4:	4816      	ldr	r0, [pc, #88]	; (800af20 <thread6+0x60>)
 800aec6:	f7fe f8b3 	bl	8009030 <chMtxLock>
 800aeca:	2320      	movs	r3, #32
 800aecc:	f383 8811 	msr	BASEPRI, r3
  thread_t *ctp = currp;
 800aed0:	4b14      	ldr	r3, [pc, #80]	; (800af24 <thread6+0x64>)
 800aed2:	699c      	ldr	r4, [r3, #24]
 800aed4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chMtxUnlockS(mp);
 800aed6:	4628      	mov	r0, r5
 800aed8:	f7fb ff4a 	bl	8006d70 <chMtxUnlockS>
  ctp->u.wtobjp = cp;
 800aedc:	4a12      	ldr	r2, [pc, #72]	; (800af28 <thread6+0x68>)
  thread_t *cp = (thread_t *)tqp;
 800aede:	4610      	mov	r0, r2
 800aee0:	4613      	mov	r3, r2
 800aee2:	6262      	str	r2, [r4, #36]	; 0x24
 800aee4:	e003      	b.n	800aeee <thread6+0x2e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800aee6:	6899      	ldr	r1, [r3, #8]
 800aee8:	68a2      	ldr	r2, [r4, #8]
 800aeea:	4291      	cmp	r1, r2
 800aeec:	d302      	bcc.n	800aef4 <thread6+0x34>
    cp = cp->queue.next;
 800aeee:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800aef0:	4283      	cmp	r3, r0
 800aef2:	d1f8      	bne.n	800aee6 <thread6+0x26>
  tp->queue.prev             = cp->queue.prev;
 800aef4:	685a      	ldr	r2, [r3, #4]
  chSchGoSleepS(CH_STATE_WTCOND);
 800aef6:	2007      	movs	r0, #7
 800aef8:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 800aefc:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 800aefe:	605c      	str	r4, [r3, #4]
 800af00:	f7fd f8e6 	bl	80080d0 <chSchGoSleepS>
  chMtxLockS(mp);
 800af04:	4628      	mov	r0, r5
 800af06:	f7fe f81b 	bl	8008f40 <chMtxLockS>
 800af0a:	2300      	movs	r3, #0
 800af0c:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 800af10:	7830      	ldrb	r0, [r6, #0]
 800af12:	f7fa fdb5 	bl	8005a80 <test_emit_token>
}
 800af16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chMtxUnlock(&m1);
 800af1a:	4801      	ldr	r0, [pc, #4]	; (800af20 <thread6+0x60>)
 800af1c:	f7ff bcf0 	b.w	800a900 <chMtxUnlock>
 800af20:	20001838 	.word	0x20001838
 800af24:	20001eb0 	.word	0x20001eb0
 800af28:	20001804 	.word	0x20001804
 800af2c:	00000000 	.word	0x00000000

0800af30 <thread9>:
static THD_FUNCTION(thread9, p) {
 800af30:	b538      	push	{r3, r4, r5, lr}
 800af32:	4605      	mov	r5, r0
  chMtxLock(&m2);
 800af34:	4c05      	ldr	r4, [pc, #20]	; (800af4c <thread9+0x1c>)
 800af36:	4620      	mov	r0, r4
 800af38:	f7fe f87a 	bl	8009030 <chMtxLock>
  test_emit_token(*(char *)p);
 800af3c:	7828      	ldrb	r0, [r5, #0]
 800af3e:	f7fa fd9f 	bl	8005a80 <test_emit_token>
  chMtxUnlock(&m2);
 800af42:	4620      	mov	r0, r4
}
 800af44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m2);
 800af48:	f7ff bcda 	b.w	800a900 <chMtxUnlock>
 800af4c:	20001848 	.word	0x20001848

0800af50 <rt_test_006_005_execute>:
  test_set_step(2);
 800af50:	2202      	movs	r2, #2
static void rt_test_006_005_execute(void) {
 800af52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af56:	4d4d      	ldr	r5, [pc, #308]	; (800b08c <rt_test_006_005_execute+0x13c>)
  test_set_step(2);
 800af58:	4c4d      	ldr	r4, [pc, #308]	; (800b090 <rt_test_006_005_execute+0x140>)
  return chThdGetSelfX()->prio;
 800af5a:	69ab      	ldr	r3, [r5, #24]
 800af5c:	6022      	str	r2, [r4, #0]
 800af5e:	689e      	ldr	r6, [r3, #8]
    b = chMtxTryLock(&m1);
 800af60:	f7fa fad6 	bl	8005510 <chMtxTryLock.constprop.80>
    test_assert(b, "already locked");
 800af64:	494b      	ldr	r1, [pc, #300]	; (800b094 <rt_test_006_005_execute+0x144>)
 800af66:	f7fa fceb 	bl	8005940 <_test_assert>
 800af6a:	b108      	cbz	r0, 800af70 <rt_test_006_005_execute+0x20>
}
 800af6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(3);
 800af70:	2303      	movs	r3, #3
 800af72:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 800af74:	f7fa facc 	bl	8005510 <chMtxTryLock.constprop.80>
    test_assert(!b, "not locked");
 800af78:	f080 0001 	eor.w	r0, r0, #1
 800af7c:	b2c0      	uxtb	r0, r0
 800af7e:	4946      	ldr	r1, [pc, #280]	; (800b098 <rt_test_006_005_execute+0x148>)
 800af80:	f7fa fcde 	bl	8005940 <_test_assert>
 800af84:	2800      	cmp	r0, #0
 800af86:	d1f1      	bne.n	800af6c <rt_test_006_005_execute+0x1c>
  test_set_step(4);
 800af88:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 800af8a:	4f44      	ldr	r7, [pc, #272]	; (800b09c <rt_test_006_005_execute+0x14c>)
  test_set_step(4);
 800af8c:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 800af8e:	4638      	mov	r0, r7
 800af90:	f7ff fcb6 	bl	800a900 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 800af94:	68b8      	ldr	r0, [r7, #8]
 800af96:	4942      	ldr	r1, [pc, #264]	; (800b0a0 <rt_test_006_005_execute+0x150>)
 800af98:	fab0 f080 	clz	r0, r0
 800af9c:	0940      	lsrs	r0, r0, #5
 800af9e:	f7fa fccf 	bl	8005940 <_test_assert>
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d1e2      	bne.n	800af6c <rt_test_006_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 800afa6:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 800afa8:	493e      	ldr	r1, [pc, #248]	; (800b0a4 <rt_test_006_005_execute+0x154>)
 800afaa:	1bc0      	subs	r0, r0, r7
 800afac:	fab0 f080 	clz	r0, r0
 800afb0:	0940      	lsrs	r0, r0, #5
 800afb2:	f7fa fcc5 	bl	8005940 <_test_assert>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d1d8      	bne.n	800af6c <rt_test_006_005_execute+0x1c>
 800afba:	69ab      	ldr	r3, [r5, #24]
  test_set_step(5);
 800afbc:	2205      	movs	r2, #5
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800afbe:	6898      	ldr	r0, [r3, #8]
 800afc0:	4939      	ldr	r1, [pc, #228]	; (800b0a8 <rt_test_006_005_execute+0x158>)
 800afc2:	1b80      	subs	r0, r0, r6
 800afc4:	fab0 f080 	clz	r0, r0
 800afc8:	0940      	lsrs	r0, r0, #5
  test_set_step(5);
 800afca:	6022      	str	r2, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800afcc:	f7fa fcb8 	bl	8005940 <_test_assert>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d1cb      	bne.n	800af6c <rt_test_006_005_execute+0x1c>
  test_set_step(6);
 800afd4:	2306      	movs	r3, #6
 800afd6:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 800afd8:	f7fa fa9a 	bl	8005510 <chMtxTryLock.constprop.80>
    test_assert(b, "already locked");
 800afdc:	492d      	ldr	r1, [pc, #180]	; (800b094 <rt_test_006_005_execute+0x144>)
 800afde:	f7fa fcaf 	bl	8005940 <_test_assert>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d1c2      	bne.n	800af6c <rt_test_006_005_execute+0x1c>
    b = chMtxTryLock(&m1);
 800afe6:	f7fa fa93 	bl	8005510 <chMtxTryLock.constprop.80>
    test_assert(!b, "not locked");
 800afea:	f080 0001 	eor.w	r0, r0, #1
 800afee:	b2c0      	uxtb	r0, r0
 800aff0:	4929      	ldr	r1, [pc, #164]	; (800b098 <rt_test_006_005_execute+0x148>)
 800aff2:	f7fa fca5 	bl	8005940 <_test_assert>
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d1b8      	bne.n	800af6c <rt_test_006_005_execute+0x1c>
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 800affa:	f8d5 8018 	ldr.w	r8, [r5, #24]
 800affe:	2320      	movs	r3, #32
 800b000:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->mtxlist != NULL) {
 800b004:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800b008:	b1d3      	cbz	r3, 800b040 <rt_test_006_005_execute+0xf0>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 800b00a:	4681      	mov	r9, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 800b00c:	681a      	ldr	r2, [r3, #0]
      ctp->mtxlist = mp->next;
 800b00e:	68d9      	ldr	r1, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 800b010:	4293      	cmp	r3, r2
      ctp->mtxlist = mp->next;
 800b012:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 800b016:	d034      	beq.n	800b082 <rt_test_006_005_execute+0x132>
        mp->next = tp->mtxlist;
 800b018:	6b90      	ldr	r0, [r2, #56]	; 0x38
  tqp->next             = tp->queue.next;
 800b01a:	6811      	ldr	r1, [r2, #0]
 800b01c:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800b01e:	604b      	str	r3, [r1, #4]
 800b020:	e9c3 2002 	strd	r2, r0, [r3, #8]
        tp->mtxlist = mp;
 800b024:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 800b026:	4610      	mov	r0, r2
 800b028:	f7fb fd32 	bl	8006a90 <chSchReadyI>
 800b02c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
      }
    } while (ctp->mtxlist != NULL);
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1eb      	bne.n	800b00c <rt_test_006_005_execute+0xbc>
    ctp->prio = ctp->realprio;
 800b034:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800b038:	f8c8 3008 	str.w	r3, [r8, #8]
    chSchRescheduleS();
 800b03c:	f7fe fe30 	bl	8009ca0 <chSchRescheduleS>
 800b040:	2300      	movs	r3, #0
 800b042:	f383 8811 	msr	BASEPRI, r3
    test_assert(m1.owner == NULL, "still owned");
 800b046:	68b8      	ldr	r0, [r7, #8]
 800b048:	4915      	ldr	r1, [pc, #84]	; (800b0a0 <rt_test_006_005_execute+0x150>)
 800b04a:	fab0 f080 	clz	r0, r0
 800b04e:	0940      	lsrs	r0, r0, #5
 800b050:	f7fa fc76 	bl	8005940 <_test_assert>
 800b054:	2800      	cmp	r0, #0
 800b056:	d189      	bne.n	800af6c <rt_test_006_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 800b058:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 800b05a:	4912      	ldr	r1, [pc, #72]	; (800b0a4 <rt_test_006_005_execute+0x154>)
 800b05c:	1bc2      	subs	r2, r0, r7
 800b05e:	4250      	negs	r0, r2
 800b060:	4150      	adcs	r0, r2
 800b062:	f7fa fc6d 	bl	8005940 <_test_assert>
 800b066:	2800      	cmp	r0, #0
 800b068:	d180      	bne.n	800af6c <rt_test_006_005_execute+0x1c>
  test_set_step(7);
 800b06a:	2307      	movs	r3, #7
 800b06c:	69aa      	ldr	r2, [r5, #24]
 800b06e:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800b070:	6890      	ldr	r0, [r2, #8]
 800b072:	490d      	ldr	r1, [pc, #52]	; (800b0a8 <rt_test_006_005_execute+0x158>)
 800b074:	1b83      	subs	r3, r0, r6
 800b076:	4258      	negs	r0, r3
 800b078:	4158      	adcs	r0, r3
}
 800b07a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800b07e:	f7fa bc5f 	b.w	8005940 <_test_assert>
        mp->owner = NULL;
 800b082:	f8c3 9008 	str.w	r9, [r3, #8]
 800b086:	460b      	mov	r3, r1
 800b088:	e7d2      	b.n	800b030 <rt_test_006_005_execute+0xe0>
 800b08a:	bf00      	nop
 800b08c:	20001eb0 	.word	0x20001eb0
 800b090:	2000283c 	.word	0x2000283c
 800b094:	0800fa90 	.word	0x0800fa90
 800b098:	0800faa0 	.word	0x0800faa0
 800b09c:	20001838 	.word	0x20001838
 800b0a0:	0800faac 	.word	0x0800faac
 800b0a4:	0800f9e4 	.word	0x0800f9e4
 800b0a8:	0800fab8 	.word	0x0800fab8
 800b0ac:	00000000 	.word	0x00000000

0800b0b0 <rt_test_006_004_execute>:
static void rt_test_006_004_execute(void) {
 800b0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(2);
 800b0b4:	2702      	movs	r7, #2
  return ch.rlist.current;
 800b0b6:	4d3e      	ldr	r5, [pc, #248]	; (800b1b0 <rt_test_006_004_execute+0x100>)
 800b0b8:	4e3e      	ldr	r6, [pc, #248]	; (800b1b4 <rt_test_006_004_execute+0x104>)
  return chThdGetSelfX()->prio;
 800b0ba:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800b0bc:	4b3e      	ldr	r3, [pc, #248]	; (800b1b8 <rt_test_006_004_execute+0x108>)
 800b0be:	6894      	ldr	r4, [r2, #8]
 800b0c0:	483e      	ldr	r0, [pc, #248]	; (800b1bc <rt_test_006_004_execute+0x10c>)
    pa = p + 1;
 800b0c2:	f104 0801 	add.w	r8, r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800b0c6:	4a3e      	ldr	r2, [pc, #248]	; (800b1c0 <rt_test_006_004_execute+0x110>)
 800b0c8:	4641      	mov	r1, r8
  test_set_step(2);
 800b0ca:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800b0cc:	f7fc ff50 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800b0d0:	4f3c      	ldr	r7, [pc, #240]	; (800b1c4 <rt_test_006_004_execute+0x114>)
    pb = p + 2;
 800b0d2:	f104 0902 	add.w	r9, r4, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 800b0d6:	4649      	mov	r1, r9
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800b0d8:	6038      	str	r0, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 800b0da:	4b3b      	ldr	r3, [pc, #236]	; (800b1c8 <rt_test_006_004_execute+0x118>)
 800b0dc:	4a3b      	ldr	r2, [pc, #236]	; (800b1cc <rt_test_006_004_execute+0x11c>)
 800b0de:	483c      	ldr	r0, [pc, #240]	; (800b1d0 <rt_test_006_004_execute+0x120>)
 800b0e0:	f7fc ff46 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(3);
 800b0e4:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 800b0e6:	6078      	str	r0, [r7, #4]
    chMtxLock(&m1);
 800b0e8:	483a      	ldr	r0, [pc, #232]	; (800b1d4 <rt_test_006_004_execute+0x124>)
  test_set_step(3);
 800b0ea:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 800b0ec:	f7fd ffa0 	bl	8009030 <chMtxLock>
 800b0f0:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 800b0f2:	4939      	ldr	r1, [pc, #228]	; (800b1d8 <rt_test_006_004_execute+0x128>)
 800b0f4:	6898      	ldr	r0, [r3, #8]
 800b0f6:	1b00      	subs	r0, r0, r4
 800b0f8:	fab0 f080 	clz	r0, r0
 800b0fc:	0940      	lsrs	r0, r0, #5
 800b0fe:	f7fa fc1f 	bl	8005940 <_test_assert>
 800b102:	b108      	cbz	r0, 800b108 <rt_test_006_004_execute+0x58>
}
 800b104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(4);
 800b108:	2304      	movs	r3, #4
    chThdSleepMilliseconds(100);
 800b10a:	20c8      	movs	r0, #200	; 0xc8
  test_set_step(4);
 800b10c:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 800b10e:	f7fd fbd7 	bl	80088c0 <chThdSleep>
 800b112:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 800b114:	4930      	ldr	r1, [pc, #192]	; (800b1d8 <rt_test_006_004_execute+0x128>)
 800b116:	6898      	ldr	r0, [r3, #8]
 800b118:	eba0 0008 	sub.w	r0, r0, r8
 800b11c:	fab0 f080 	clz	r0, r0
 800b120:	0940      	lsrs	r0, r0, #5
 800b122:	f7fa fc0d 	bl	8005940 <_test_assert>
 800b126:	2800      	cmp	r0, #0
 800b128:	d1ec      	bne.n	800b104 <rt_test_006_004_execute+0x54>
  test_set_step(5);
 800b12a:	2305      	movs	r3, #5
    chMtxLock(&m2);
 800b12c:	482b      	ldr	r0, [pc, #172]	; (800b1dc <rt_test_006_004_execute+0x12c>)
  test_set_step(5);
 800b12e:	6033      	str	r3, [r6, #0]
    chMtxLock(&m2);
 800b130:	f7fd ff7e 	bl	8009030 <chMtxLock>
 800b134:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 800b136:	4928      	ldr	r1, [pc, #160]	; (800b1d8 <rt_test_006_004_execute+0x128>)
 800b138:	6898      	ldr	r0, [r3, #8]
 800b13a:	eba0 0008 	sub.w	r0, r0, r8
 800b13e:	fab0 f080 	clz	r0, r0
 800b142:	0940      	lsrs	r0, r0, #5
 800b144:	f7fa fbfc 	bl	8005940 <_test_assert>
 800b148:	2800      	cmp	r0, #0
 800b14a:	d1db      	bne.n	800b104 <rt_test_006_004_execute+0x54>
  test_set_step(6);
 800b14c:	2306      	movs	r3, #6
    chThdSleepMilliseconds(100);
 800b14e:	20c8      	movs	r0, #200	; 0xc8
  test_set_step(6);
 800b150:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 800b152:	f7fd fbb5 	bl	80088c0 <chThdSleep>
 800b156:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 800b158:	491f      	ldr	r1, [pc, #124]	; (800b1d8 <rt_test_006_004_execute+0x128>)
 800b15a:	6898      	ldr	r0, [r3, #8]
 800b15c:	eba0 0009 	sub.w	r0, r0, r9
 800b160:	fab0 f080 	clz	r0, r0
 800b164:	0940      	lsrs	r0, r0, #5
 800b166:	f7fa fbeb 	bl	8005940 <_test_assert>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d1ca      	bne.n	800b104 <rt_test_006_004_execute+0x54>
  test_set_step(7);
 800b16e:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 800b170:	481a      	ldr	r0, [pc, #104]	; (800b1dc <rt_test_006_004_execute+0x12c>)
  test_set_step(7);
 800b172:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m2);
 800b174:	f7ff fbc4 	bl	800a900 <chMtxUnlock>
 800b178:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 800b17a:	4917      	ldr	r1, [pc, #92]	; (800b1d8 <rt_test_006_004_execute+0x128>)
 800b17c:	6898      	ldr	r0, [r3, #8]
 800b17e:	eba0 0008 	sub.w	r0, r0, r8
 800b182:	fab0 f080 	clz	r0, r0
 800b186:	0940      	lsrs	r0, r0, #5
 800b188:	f7fa fbda 	bl	8005940 <_test_assert>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d1b9      	bne.n	800b104 <rt_test_006_004_execute+0x54>
  test_set_step(8);
 800b190:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 800b192:	4810      	ldr	r0, [pc, #64]	; (800b1d4 <rt_test_006_004_execute+0x124>)
  test_set_step(8);
 800b194:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 800b196:	f7ff fbb3 	bl	800a900 <chMtxUnlock>
 800b19a:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 800b19c:	490e      	ldr	r1, [pc, #56]	; (800b1d8 <rt_test_006_004_execute+0x128>)
 800b19e:	6898      	ldr	r0, [r3, #8]
 800b1a0:	1b00      	subs	r0, r0, r4
 800b1a2:	fab0 f080 	clz	r0, r0
}
 800b1a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 800b1aa:	0940      	lsrs	r0, r0, #5
 800b1ac:	f7fa bbc8 	b.w	8005940 <_test_assert>
 800b1b0:	20001eb0 	.word	0x20001eb0
 800b1b4:	2000283c 	.word	0x2000283c
 800b1b8:	0800fa78 	.word	0x0800fa78
 800b1bc:	20002128 	.word	0x20002128
 800b1c0:	0800b1e1 	.word	0x0800b1e1
 800b1c4:	20002854 	.word	0x20002854
 800b1c8:	0800fa7c 	.word	0x0800fa7c
 800b1cc:	0800a831 	.word	0x0800a831
 800b1d0:	20002270 	.word	0x20002270
 800b1d4:	20001838 	.word	0x20001838
 800b1d8:	0800fab8 	.word	0x0800fab8
 800b1dc:	20001848 	.word	0x20001848

0800b1e0 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 800b1e0:	b510      	push	{r4, lr}
  chMtxLock(&m1);
 800b1e2:	4c06      	ldr	r4, [pc, #24]	; (800b1fc <thread4A+0x1c>)
  chThdSleepMilliseconds(50);
 800b1e4:	2064      	movs	r0, #100	; 0x64
 800b1e6:	f7fd fb6b 	bl	80088c0 <chThdSleep>
  chMtxLock(&m1);
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f7fd ff20 	bl	8009030 <chMtxLock>
  chMtxUnlock(&m1);
 800b1f0:	4620      	mov	r0, r4
}
 800b1f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 800b1f6:	f7ff bb83 	b.w	800a900 <chMtxUnlock>
 800b1fa:	bf00      	nop
 800b1fc:	20001838 	.word	0x20001838

0800b200 <thread1.lto_priv.99>:
static THD_FUNCTION(thread1, p) {
 800b200:	b538      	push	{r3, r4, r5, lr}
 800b202:	4605      	mov	r5, r0
  chMtxLock(&m1);
 800b204:	4c05      	ldr	r4, [pc, #20]	; (800b21c <thread1.lto_priv.99+0x1c>)
 800b206:	4620      	mov	r0, r4
 800b208:	f7fd ff12 	bl	8009030 <chMtxLock>
  test_emit_token(*(char *)p);
 800b20c:	7828      	ldrb	r0, [r5, #0]
 800b20e:	f7fa fc37 	bl	8005a80 <test_emit_token>
  chMtxUnlock(&m1);
 800b212:	4620      	mov	r0, r4
}
 800b214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m1);
 800b218:	f7ff bb72 	b.w	800a900 <chMtxUnlock>
 800b21c:	20001838 	.word	0x20001838

0800b220 <chFactoryReleaseSemaphore>:
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4604      	mov	r4, r0
  F_LOCK();
 800b224:	4d16      	ldr	r5, [pc, #88]	; (800b280 <chFactoryReleaseSemaphore+0x60>)
 800b226:	4628      	mov	r0, r5
 800b228:	f7fd ff02 	bl	8009030 <chMtxLock>
  dep->refs--;
 800b22c:	6863      	ldr	r3, [r4, #4]
 800b22e:	3b01      	subs	r3, #1
 800b230:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800b232:	b123      	cbz	r3, 800b23e <chFactoryReleaseSemaphore+0x1e>
}
 800b234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 800b238:	4811      	ldr	r0, [pc, #68]	; (800b280 <chFactoryReleaseSemaphore+0x60>)
 800b23a:	f7ff bb61 	b.w	800a900 <chMtxUnlock>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800b23e:	f105 0128 	add.w	r1, r5, #40	; 0x28
 800b242:	460a      	mov	r2, r1
 800b244:	e002      	b.n	800b24c <chFactoryReleaseSemaphore+0x2c>
    if (prev->next == element) {
 800b246:	429c      	cmp	r4, r3
 800b248:	d00a      	beq.n	800b260 <chFactoryReleaseSemaphore+0x40>
 800b24a:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 800b24c:	6813      	ldr	r3, [r2, #0]
 800b24e:	428b      	cmp	r3, r1
 800b250:	d1f9      	bne.n	800b246 <chFactoryReleaseSemaphore+0x26>
 800b252:	2320      	movs	r3, #32
 800b254:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 800b258:	2300      	movs	r3, #0
 800b25a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800b25c:	601a      	str	r2, [r3, #0]
 800b25e:	deff      	udf	#255	; 0xff
      prev->next = element->next;
 800b260:	6821      	ldr	r1, [r4, #0]
 800b262:	2320      	movs	r3, #32
 800b264:	6011      	str	r1, [r2, #0]
 800b266:	f383 8811 	msr	BASEPRI, r3
 800b26a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800b26c:	2300      	movs	r3, #0
 800b26e:	6022      	str	r2, [r4, #0]
  mp->next = php;
 800b270:	62ec      	str	r4, [r5, #44]	; 0x2c
 800b272:	f383 8811 	msr	BASEPRI, r3
  F_UNLOCK();
 800b276:	4802      	ldr	r0, [pc, #8]	; (800b280 <chFactoryReleaseSemaphore+0x60>)
}
 800b278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 800b27c:	f7ff bb40 	b.w	800a900 <chMtxUnlock>
 800b280:	20001f24 	.word	0x20001f24
	...

0800b290 <oslib_test_004_003_execute>:
      chFactoryReleaseSemaphore(dsp);
    }
  }
}

static void oslib_test_004_003_execute(void) {
 800b290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_semaphore_t *dsp;

  /* [4.3.1] Retrieving a dynamic semaphore by name, must not exist.*/
  test_set_step(1);
 800b292:	2501      	movs	r5, #1
 800b294:	4c41      	ldr	r4, [pc, #260]	; (800b39c <oslib_test_004_003_execute+0x10c>)
 800b296:	6025      	str	r5, [r4, #0]
  {
    dsp = chFactoryFindSemaphore("mysem");
 800b298:	f7ff fcba 	bl	800ac10 <chFactoryFindSemaphore.constprop.35>
    test_assert(dsp == NULL, "found");
 800b29c:	fab0 f080 	clz	r0, r0
 800b2a0:	493f      	ldr	r1, [pc, #252]	; (800b3a0 <oslib_test_004_003_execute+0x110>)
 800b2a2:	0940      	lsrs	r0, r0, #5
 800b2a4:	f7fa fb4c 	bl	8005940 <_test_assert>
 800b2a8:	b100      	cbz	r0, 800b2ac <oslib_test_004_003_execute+0x1c>
  test_set_step(6);
  {
    dsp = chFactoryFindSemaphore("mysem");
    test_assert(dsp == NULL, "found");
  }
}
 800b2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800b2ac:	2302      	movs	r3, #2
 800b2ae:	6023      	str	r3, [r4, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 800b2b0:	f7ff fc8e 	bl	800abd0 <chFactoryCreateSemaphore.constprop.36>
    test_assert(dsp != NULL, "cannot create");
 800b2b4:	4606      	mov	r6, r0
 800b2b6:	3000      	adds	r0, #0
 800b2b8:	bf18      	it	ne
 800b2ba:	2001      	movne	r0, #1
 800b2bc:	4939      	ldr	r1, [pc, #228]	; (800b3a4 <oslib_test_004_003_execute+0x114>)
 800b2be:	f7fa fb3f 	bl	8005940 <_test_assert>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	d1f1      	bne.n	800b2aa <oslib_test_004_003_execute+0x1a>
  test_set_step(3);
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 800b2ca:	f7ff fc81 	bl	800abd0 <chFactoryCreateSemaphore.constprop.36>
    test_assert(dsp1 == NULL, "can create");
 800b2ce:	fab0 f080 	clz	r0, r0
 800b2d2:	4935      	ldr	r1, [pc, #212]	; (800b3a8 <oslib_test_004_003_execute+0x118>)
 800b2d4:	0940      	lsrs	r0, r0, #5
 800b2d6:	f7fa fb33 	bl	8005940 <_test_assert>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d1e5      	bne.n	800b2aa <oslib_test_004_003_execute+0x1a>
  test_set_step(4);
 800b2de:	2304      	movs	r3, #4
 800b2e0:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 800b2e2:	f7ff fc95 	bl	800ac10 <chFactoryFindSemaphore.constprop.35>
    test_assert(dsp1 != NULL, "not found");
 800b2e6:	4607      	mov	r7, r0
 800b2e8:	3000      	adds	r0, #0
 800b2ea:	bf18      	it	ne
 800b2ec:	2001      	movne	r0, #1
 800b2ee:	492f      	ldr	r1, [pc, #188]	; (800b3ac <oslib_test_004_003_execute+0x11c>)
 800b2f0:	f7fa fb26 	bl	8005940 <_test_assert>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d1d8      	bne.n	800b2aa <oslib_test_004_003_execute+0x1a>
    test_assert(dsp == dsp1, "object reference mismatch");
 800b2f8:	1bf0      	subs	r0, r6, r7
 800b2fa:	fab0 f080 	clz	r0, r0
 800b2fe:	492c      	ldr	r1, [pc, #176]	; (800b3b0 <oslib_test_004_003_execute+0x120>)
 800b300:	0940      	lsrs	r0, r0, #5
 800b302:	f7fa fb1d 	bl	8005940 <_test_assert>
 800b306:	2800      	cmp	r0, #0
 800b308:	d1cf      	bne.n	800b2aa <oslib_test_004_003_execute+0x1a>
    test_assert(dsp1->element.refs == 2, "object reference mismatch");
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	4928      	ldr	r1, [pc, #160]	; (800b3b0 <oslib_test_004_003_execute+0x120>)
 800b30e:	f1a0 0002 	sub.w	r0, r0, #2
 800b312:	fab0 f080 	clz	r0, r0
 800b316:	0940      	lsrs	r0, r0, #5
 800b318:	f7fa fb12 	bl	8005940 <_test_assert>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d1c4      	bne.n	800b2aa <oslib_test_004_003_execute+0x1a>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 800b320:	687b      	ldr	r3, [r7, #4]
    test_assert(dsp1 == dsp2, "object reference mismatch");
 800b322:	4628      	mov	r0, r5
 800b324:	442b      	add	r3, r5
 800b326:	607b      	str	r3, [r7, #4]
 800b328:	4921      	ldr	r1, [pc, #132]	; (800b3b0 <oslib_test_004_003_execute+0x120>)
 800b32a:	f7fa fb09 	bl	8005940 <_test_assert>
 800b32e:	2800      	cmp	r0, #0
 800b330:	d1bb      	bne.n	800b2aa <oslib_test_004_003_execute+0x1a>
    test_assert(dsp2->element.refs == 3, "object reference mismatch");
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	491e      	ldr	r1, [pc, #120]	; (800b3b0 <oslib_test_004_003_execute+0x120>)
 800b336:	f1a0 0c03 	sub.w	ip, r0, #3
 800b33a:	f1dc 0000 	rsbs	r0, ip, #0
 800b33e:	eb40 000c 	adc.w	r0, r0, ip
 800b342:	f7fa fafd 	bl	8005940 <_test_assert>
 800b346:	2800      	cmp	r0, #0
 800b348:	d1af      	bne.n	800b2aa <oslib_test_004_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp2);
 800b34a:	4638      	mov	r0, r7
 800b34c:	f7ff ff68 	bl	800b220 <chFactoryReleaseSemaphore>
    test_assert(dsp1->element.refs == 2, "references mismatch");
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	4918      	ldr	r1, [pc, #96]	; (800b3b4 <oslib_test_004_003_execute+0x124>)
 800b354:	1e82      	subs	r2, r0, #2
 800b356:	4250      	negs	r0, r2
 800b358:	4150      	adcs	r0, r2
 800b35a:	f7fa faf1 	bl	8005940 <_test_assert>
 800b35e:	2800      	cmp	r0, #0
 800b360:	d1a3      	bne.n	800b2aa <oslib_test_004_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp1);
 800b362:	4638      	mov	r0, r7
 800b364:	f7ff ff5c 	bl	800b220 <chFactoryReleaseSemaphore>
    test_assert(dsp->element.refs == 1, "references mismatch");
 800b368:	6870      	ldr	r0, [r6, #4]
 800b36a:	4912      	ldr	r1, [pc, #72]	; (800b3b4 <oslib_test_004_003_execute+0x124>)
 800b36c:	1b43      	subs	r3, r0, r5
 800b36e:	4258      	negs	r0, r3
 800b370:	4158      	adcs	r0, r3
 800b372:	f7fa fae5 	bl	8005940 <_test_assert>
 800b376:	2800      	cmp	r0, #0
 800b378:	d197      	bne.n	800b2aa <oslib_test_004_003_execute+0x1a>
  test_set_step(5);
 800b37a:	2305      	movs	r3, #5
    chFactoryReleaseSemaphore(dsp);
 800b37c:	4630      	mov	r0, r6
  test_set_step(5);
 800b37e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseSemaphore(dsp);
 800b380:	f7ff ff4e 	bl	800b220 <chFactoryReleaseSemaphore>
  test_set_step(6);
 800b384:	2306      	movs	r3, #6
 800b386:	6023      	str	r3, [r4, #0]
    dsp = chFactoryFindSemaphore("mysem");
 800b388:	f7ff fc42 	bl	800ac10 <chFactoryFindSemaphore.constprop.35>
}
 800b38c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dsp == NULL, "found");
 800b390:	fab0 f080 	clz	r0, r0
 800b394:	4902      	ldr	r1, [pc, #8]	; (800b3a0 <oslib_test_004_003_execute+0x110>)
 800b396:	0940      	lsrs	r0, r0, #5
 800b398:	f7fa bad2 	b.w	8005940 <_test_assert>
 800b39c:	2000283c 	.word	0x2000283c
 800b3a0:	0800ec50 	.word	0x0800ec50
 800b3a4:	0800ec30 	.word	0x0800ec30
 800b3a8:	0800ec40 	.word	0x0800ec40
 800b3ac:	0800ec4c 	.word	0x0800ec4c
 800b3b0:	0800ec58 	.word	0x0800ec58
 800b3b4:	0800ec74 	.word	0x0800ec74
	...

0800b3c0 <oslib_test_004_003_teardown>:
static void oslib_test_004_003_teardown(void) {
 800b3c0:	b510      	push	{r4, lr}
  dsp = chFactoryFindSemaphore("mysem");
 800b3c2:	f7ff fc25 	bl	800ac10 <chFactoryFindSemaphore.constprop.35>
  if (dsp != NULL) {
 800b3c6:	b140      	cbz	r0, 800b3da <oslib_test_004_003_teardown+0x1a>
    while (dsp->element.refs > 0U) {
 800b3c8:	6843      	ldr	r3, [r0, #4]
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	b12b      	cbz	r3, 800b3da <oslib_test_004_003_teardown+0x1a>
      chFactoryReleaseSemaphore(dsp);
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f7ff ff26 	bl	800b220 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 800b3d4:	6863      	ldr	r3, [r4, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1f9      	bne.n	800b3ce <oslib_test_004_003_teardown+0xe>
}
 800b3da:	bd10      	pop	{r4, pc}
 800b3dc:	0000      	movs	r0, r0
	...

0800b3e0 <chFactoryReleaseObject>:
void chFactoryReleaseObject(registered_object_t *rop){
 800b3e0:	b538      	push	{r3, r4, r5, lr}
 800b3e2:	4604      	mov	r4, r0
  F_LOCK();
 800b3e4:	4d16      	ldr	r5, [pc, #88]	; (800b440 <chFactoryReleaseObject+0x60>)
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	f7fd fe22 	bl	8009030 <chMtxLock>
  dep->refs--;
 800b3ec:	6863      	ldr	r3, [r4, #4]
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800b3f2:	b123      	cbz	r3, 800b3fe <chFactoryReleaseObject+0x1e>
}
 800b3f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 800b3f8:	4811      	ldr	r0, [pc, #68]	; (800b440 <chFactoryReleaseObject+0x60>)
 800b3fa:	f7ff ba81 	b.w	800a900 <chMtxUnlock>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800b3fe:	f105 0110 	add.w	r1, r5, #16
 800b402:	460a      	mov	r2, r1
 800b404:	e002      	b.n	800b40c <chFactoryReleaseObject+0x2c>
    if (prev->next == element) {
 800b406:	429c      	cmp	r4, r3
 800b408:	d00a      	beq.n	800b420 <chFactoryReleaseObject+0x40>
 800b40a:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 800b40c:	6813      	ldr	r3, [r2, #0]
 800b40e:	428b      	cmp	r3, r1
 800b410:	d1f9      	bne.n	800b406 <chFactoryReleaseObject+0x26>
 800b412:	2320      	movs	r3, #32
 800b414:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 800b418:	2300      	movs	r3, #0
 800b41a:	696a      	ldr	r2, [r5, #20]
 800b41c:	601a      	str	r2, [r3, #0]
 800b41e:	deff      	udf	#255	; 0xff
      prev->next = element->next;
 800b420:	6821      	ldr	r1, [r4, #0]
 800b422:	2320      	movs	r3, #32
 800b424:	6011      	str	r1, [r2, #0]
 800b426:	f383 8811 	msr	BASEPRI, r3
 800b42a:	696a      	ldr	r2, [r5, #20]
 800b42c:	2300      	movs	r3, #0
 800b42e:	6022      	str	r2, [r4, #0]
  mp->next = php;
 800b430:	616c      	str	r4, [r5, #20]
 800b432:	f383 8811 	msr	BASEPRI, r3
  F_UNLOCK();
 800b436:	4802      	ldr	r0, [pc, #8]	; (800b440 <chFactoryReleaseObject+0x60>)
}
 800b438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 800b43c:	f7ff ba60 	b.w	800a900 <chMtxUnlock>
 800b440:	20001f24 	.word	0x20001f24
	...

0800b450 <oslib_test_004_001_execute>:
static void oslib_test_004_001_execute(void) {
 800b450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800b454:	2501      	movs	r5, #1
 800b456:	4c51      	ldr	r4, [pc, #324]	; (800b59c <oslib_test_004_001_execute+0x14c>)
 800b458:	6025      	str	r5, [r4, #0]
    rop = chFactoryFindObject("myobj");
 800b45a:	f7ff fb69 	bl	800ab30 <chFactoryFindObject.constprop.39>
    test_assert(rop == NULL, "found");
 800b45e:	fab0 f080 	clz	r0, r0
 800b462:	494f      	ldr	r1, [pc, #316]	; (800b5a0 <oslib_test_004_001_execute+0x150>)
 800b464:	0940      	lsrs	r0, r0, #5
 800b466:	f7fa fa6b 	bl	8005940 <_test_assert>
 800b46a:	b108      	cbz	r0, 800b470 <oslib_test_004_001_execute+0x20>
}
 800b46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 800b470:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 800b472:	484c      	ldr	r0, [pc, #304]	; (800b5a4 <oslib_test_004_001_execute+0x154>)
  test_set_step(2);
 800b474:	6023      	str	r3, [r4, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 800b476:	f7ff fb43 	bl	800ab00 <chFactoryRegisterObject.constprop.40>
    test_assert(rop != NULL, "cannot register");
 800b47a:	4606      	mov	r6, r0
 800b47c:	3000      	adds	r0, #0
 800b47e:	bf18      	it	ne
 800b480:	2001      	movne	r0, #1
 800b482:	4949      	ldr	r1, [pc, #292]	; (800b5a8 <oslib_test_004_001_execute+0x158>)
 800b484:	f7fa fa5c 	bl	8005940 <_test_assert>
 800b488:	2800      	cmp	r0, #0
 800b48a:	d1ef      	bne.n	800b46c <oslib_test_004_001_execute+0x1c>
  test_set_step(3);
 800b48c:	2303      	movs	r3, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800b48e:	4847      	ldr	r0, [pc, #284]	; (800b5ac <oslib_test_004_001_execute+0x15c>)
  test_set_step(3);
 800b490:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800b492:	f7ff fb35 	bl	800ab00 <chFactoryRegisterObject.constprop.40>
    test_assert(rop1 == NULL, "can register");
 800b496:	fab0 f080 	clz	r0, r0
 800b49a:	4945      	ldr	r1, [pc, #276]	; (800b5b0 <oslib_test_004_001_execute+0x160>)
 800b49c:	0940      	lsrs	r0, r0, #5
 800b49e:	f7fa fa4f 	bl	8005940 <_test_assert>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d1e2      	bne.n	800b46c <oslib_test_004_001_execute+0x1c>
  test_set_step(4);
 800b4a6:	2304      	movs	r3, #4
 800b4a8:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryFindObject("myobj");
 800b4aa:	f7ff fb41 	bl	800ab30 <chFactoryFindObject.constprop.39>
    test_assert(rop1 != NULL, "not found");
 800b4ae:	4607      	mov	r7, r0
 800b4b0:	3000      	adds	r0, #0
 800b4b2:	bf18      	it	ne
 800b4b4:	2001      	movne	r0, #1
 800b4b6:	493f      	ldr	r1, [pc, #252]	; (800b5b4 <oslib_test_004_001_execute+0x164>)
 800b4b8:	f7fa fa42 	bl	8005940 <_test_assert>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d1d5      	bne.n	800b46c <oslib_test_004_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 800b4c0:	f245 58aa 	movw	r8, #21930	; 0x55aa
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	493c      	ldr	r1, [pc, #240]	; (800b5b8 <oslib_test_004_001_execute+0x168>)
 800b4c8:	6818      	ldr	r0, [r3, #0]
 800b4ca:	eba0 0008 	sub.w	r0, r0, r8
 800b4ce:	fab0 f080 	clz	r0, r0
 800b4d2:	0940      	lsrs	r0, r0, #5
 800b4d4:	f7fa fa34 	bl	8005940 <_test_assert>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d1c7      	bne.n	800b46c <oslib_test_004_001_execute+0x1c>
    test_assert(rop == rop1, "object reference mismatch");
 800b4dc:	1bf0      	subs	r0, r6, r7
 800b4de:	fab0 f080 	clz	r0, r0
 800b4e2:	4936      	ldr	r1, [pc, #216]	; (800b5bc <oslib_test_004_001_execute+0x16c>)
 800b4e4:	0940      	lsrs	r0, r0, #5
 800b4e6:	f7fa fa2b 	bl	8005940 <_test_assert>
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	d1be      	bne.n	800b46c <oslib_test_004_001_execute+0x1c>
    test_assert(rop1->element.refs == 2, "object reference mismatch");
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	4932      	ldr	r1, [pc, #200]	; (800b5bc <oslib_test_004_001_execute+0x16c>)
 800b4f2:	f1a0 0002 	sub.w	r0, r0, #2
 800b4f6:	fab0 f080 	clz	r0, r0
 800b4fa:	0940      	lsrs	r0, r0, #5
 800b4fc:	f7fa fa20 	bl	8005940 <_test_assert>
 800b500:	2800      	cmp	r0, #0
 800b502:	d1b3      	bne.n	800b46c <oslib_test_004_001_execute+0x1c>
 800b504:	687b      	ldr	r3, [r7, #4]
    test_assert(rop1 == rop2, "object reference mismatch");
 800b506:	4628      	mov	r0, r5
 800b508:	442b      	add	r3, r5
 800b50a:	607b      	str	r3, [r7, #4]
 800b50c:	492b      	ldr	r1, [pc, #172]	; (800b5bc <oslib_test_004_001_execute+0x16c>)
 800b50e:	f7fa fa17 	bl	8005940 <_test_assert>
 800b512:	2800      	cmp	r0, #0
 800b514:	d1aa      	bne.n	800b46c <oslib_test_004_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop2->objp) == 0x55aa, "object mismatch");
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	4927      	ldr	r1, [pc, #156]	; (800b5b8 <oslib_test_004_001_execute+0x168>)
 800b51a:	6818      	ldr	r0, [r3, #0]
 800b51c:	eba0 0e08 	sub.w	lr, r0, r8
 800b520:	f1de 0000 	rsbs	r0, lr, #0
 800b524:	eb40 000e 	adc.w	r0, r0, lr
 800b528:	f7fa fa0a 	bl	8005940 <_test_assert>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d19d      	bne.n	800b46c <oslib_test_004_001_execute+0x1c>
    test_assert(rop2->element.refs == 3, "object reference mismatch");
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	4922      	ldr	r1, [pc, #136]	; (800b5bc <oslib_test_004_001_execute+0x16c>)
 800b534:	f1a0 0c03 	sub.w	ip, r0, #3
 800b538:	f1dc 0000 	rsbs	r0, ip, #0
 800b53c:	eb40 000c 	adc.w	r0, r0, ip
 800b540:	f7fa f9fe 	bl	8005940 <_test_assert>
 800b544:	2800      	cmp	r0, #0
 800b546:	d191      	bne.n	800b46c <oslib_test_004_001_execute+0x1c>
    chFactoryReleaseObject(rop2);
 800b548:	4638      	mov	r0, r7
 800b54a:	f7ff ff49 	bl	800b3e0 <chFactoryReleaseObject>
    test_assert(rop1->element.refs == 2, "references mismatch");
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	491b      	ldr	r1, [pc, #108]	; (800b5c0 <oslib_test_004_001_execute+0x170>)
 800b552:	1e82      	subs	r2, r0, #2
 800b554:	4250      	negs	r0, r2
 800b556:	4150      	adcs	r0, r2
 800b558:	f7fa f9f2 	bl	8005940 <_test_assert>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d185      	bne.n	800b46c <oslib_test_004_001_execute+0x1c>
    chFactoryReleaseObject(rop1);
 800b560:	4638      	mov	r0, r7
 800b562:	f7ff ff3d 	bl	800b3e0 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 800b566:	6870      	ldr	r0, [r6, #4]
 800b568:	4915      	ldr	r1, [pc, #84]	; (800b5c0 <oslib_test_004_001_execute+0x170>)
 800b56a:	1b43      	subs	r3, r0, r5
 800b56c:	4258      	negs	r0, r3
 800b56e:	4158      	adcs	r0, r3
 800b570:	f7fa f9e6 	bl	8005940 <_test_assert>
 800b574:	2800      	cmp	r0, #0
 800b576:	f47f af79 	bne.w	800b46c <oslib_test_004_001_execute+0x1c>
  test_set_step(5);
 800b57a:	2305      	movs	r3, #5
    chFactoryReleaseObject(rop);
 800b57c:	4630      	mov	r0, r6
  test_set_step(5);
 800b57e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObject(rop);
 800b580:	f7ff ff2e 	bl	800b3e0 <chFactoryReleaseObject>
  test_set_step(6);
 800b584:	2306      	movs	r3, #6
 800b586:	6023      	str	r3, [r4, #0]
    rop = chFactoryFindObject("myobj");
 800b588:	f7ff fad2 	bl	800ab30 <chFactoryFindObject.constprop.39>
}
 800b58c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(rop == NULL, "found");
 800b590:	fab0 f080 	clz	r0, r0
 800b594:	4902      	ldr	r1, [pc, #8]	; (800b5a0 <oslib_test_004_001_execute+0x150>)
 800b596:	0940      	lsrs	r0, r0, #5
 800b598:	f7fa b9d2 	b.w	8005940 <_test_assert>
 800b59c:	2000283c 	.word	0x2000283c
 800b5a0:	0800ec50 	.word	0x0800ec50
 800b5a4:	20001890 	.word	0x20001890
 800b5a8:	0800ebe0 	.word	0x0800ebe0
 800b5ac:	20001894 	.word	0x20001894
 800b5b0:	0800ebf0 	.word	0x0800ebf0
 800b5b4:	0800ec4c 	.word	0x0800ec4c
 800b5b8:	0800ec00 	.word	0x0800ec00
 800b5bc:	0800ec58 	.word	0x0800ec58
 800b5c0:	0800ec74 	.word	0x0800ec74
	...

0800b5d0 <oslib_test_004_001_teardown>:
static void oslib_test_004_001_teardown(void) {
 800b5d0:	b510      	push	{r4, lr}
  rop = chFactoryFindObject("myobj");
 800b5d2:	f7ff faad 	bl	800ab30 <chFactoryFindObject.constprop.39>
  if (rop != NULL) {
 800b5d6:	b140      	cbz	r0, 800b5ea <oslib_test_004_001_teardown+0x1a>
    while (rop->element.refs > 0U) {
 800b5d8:	6843      	ldr	r3, [r0, #4]
 800b5da:	4604      	mov	r4, r0
 800b5dc:	b12b      	cbz	r3, 800b5ea <oslib_test_004_001_teardown+0x1a>
      chFactoryReleaseObject(rop);
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f7ff fefe 	bl	800b3e0 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 800b5e4:	6863      	ldr	r3, [r4, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1f9      	bne.n	800b5de <oslib_test_004_001_teardown+0xe>
}
 800b5ea:	bd10      	pop	{r4, pc}
 800b5ec:	0000      	movs	r0, r0
	...

0800b5f0 <chHeapStatus>:
 *                      free free block found space or @ NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 800b5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 800b5f4:	4c17      	ldr	r4, [pc, #92]	; (800b654 <chHeapStatus+0x64>)
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 800b5f6:	4688      	mov	r8, r1
    heapp = &default_heap;
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	bf18      	it	ne
 800b5fc:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 800b5fe:	f104 070c 	add.w	r7, r4, #12
 800b602:	4638      	mov	r0, r7
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 800b604:	4691      	mov	r9, r2
  H_LOCK(heapp);
 800b606:	f7fd fd13 	bl	8009030 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 800b60a:	6863      	ldr	r3, [r4, #4]
 800b60c:	b1f3      	cbz	r3, 800b64c <chHeapStatus+0x5c>
  lpages = 0U;
 800b60e:	2400      	movs	r4, #0
  tpages = 0U;
 800b610:	4625      	mov	r5, r4
  n = 0U;
 800b612:	4626      	mov	r6, r4
    size_t pages = H_PAGES(H_NEXT(qp));
 800b614:	6858      	ldr	r0, [r3, #4]
  while (H_NEXT(qp) != NULL) {
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4284      	cmp	r4, r0

    /* Updating counters.*/
    n++;
 800b61a:	f106 0601 	add.w	r6, r6, #1
    tpages += pages;
 800b61e:	4405      	add	r5, r0
 800b620:	bf38      	it	cc
 800b622:	4604      	movcc	r4, r0
  while (H_NEXT(qp) != NULL) {
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1f5      	bne.n	800b614 <chHeapStatus+0x24>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 800b628:	f1b8 0f00 	cmp.w	r8, #0
 800b62c:	d002      	beq.n	800b634 <chHeapStatus+0x44>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800b62e:	00ed      	lsls	r5, r5, #3
 800b630:	f8c8 5000 	str.w	r5, [r8]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 800b634:	f1b9 0f00 	cmp.w	r9, #0
 800b638:	d002      	beq.n	800b640 <chHeapStatus+0x50>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 800b63a:	00e4      	lsls	r4, r4, #3
 800b63c:	f8c9 4000 	str.w	r4, [r9]
  }
  H_UNLOCK(heapp);
 800b640:	4638      	mov	r0, r7
 800b642:	f7ff f95d 	bl	800a900 <chMtxUnlock>

  return n;
}
 800b646:	4630      	mov	r0, r6
 800b648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  lpages = 0U;
 800b64c:	461c      	mov	r4, r3
  tpages = 0U;
 800b64e:	461d      	mov	r5, r3
  n = 0U;
 800b650:	461e      	mov	r6, r3
 800b652:	e7e9      	b.n	800b628 <chHeapStatus+0x38>
 800b654:	20002048 	.word	0x20002048
	...

0800b660 <cmd_mem>:
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 800b660:	b530      	push	{r4, r5, lr}
  if (argc > 0) {
 800b662:	2900      	cmp	r1, #0
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 800b664:	b083      	sub	sp, #12
  if (argc > 0) {
 800b666:	dd05      	ble.n	800b674 <cmd_mem+0x14>
    shellUsage(chp, "mem");
 800b668:	4a12      	ldr	r2, [pc, #72]	; (800b6b4 <cmd_mem+0x54>)
 800b66a:	4913      	ldr	r1, [pc, #76]	; (800b6b8 <cmd_mem+0x58>)
 800b66c:	f7fb fe00 	bl	8007270 <chprintf>
}
 800b670:	b003      	add	sp, #12
 800b672:	bd30      	pop	{r4, r5, pc}
 800b674:	4604      	mov	r4, r0
  n = chHeapStatus(NULL, &total, &largest);
 800b676:	aa01      	add	r2, sp, #4
 800b678:	4669      	mov	r1, sp
 800b67a:	2000      	movs	r0, #0
 800b67c:	f7ff ffb8 	bl	800b5f0 <chHeapStatus>
 800b680:	4605      	mov	r5, r0
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(ch_memcore.endmem - ch_memcore.nextmem);
 800b682:	4b0e      	ldr	r3, [pc, #56]	; (800b6bc <cmd_mem+0x5c>)
  chprintf(chp, "core free memory : %u bytes"SHELL_NEWLINE_STR, chCoreGetStatusX());
 800b684:	490e      	ldr	r1, [pc, #56]	; (800b6c0 <cmd_mem+0x60>)
 800b686:	685a      	ldr	r2, [r3, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4620      	mov	r0, r4
 800b68c:	1ad2      	subs	r2, r2, r3
 800b68e:	f7fb fdef 	bl	8007270 <chprintf>
  chprintf(chp, "heap fragments   : %u"SHELL_NEWLINE_STR, n);
 800b692:	462a      	mov	r2, r5
 800b694:	490b      	ldr	r1, [pc, #44]	; (800b6c4 <cmd_mem+0x64>)
 800b696:	4620      	mov	r0, r4
 800b698:	f7fb fdea 	bl	8007270 <chprintf>
  chprintf(chp, "heap free total  : %u bytes"SHELL_NEWLINE_STR, total);
 800b69c:	9a00      	ldr	r2, [sp, #0]
 800b69e:	490a      	ldr	r1, [pc, #40]	; (800b6c8 <cmd_mem+0x68>)
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f7fb fde5 	bl	8007270 <chprintf>
  chprintf(chp, "heap free largest: %u bytes"SHELL_NEWLINE_STR, largest);
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	9a01      	ldr	r2, [sp, #4]
 800b6aa:	4908      	ldr	r1, [pc, #32]	; (800b6cc <cmd_mem+0x6c>)
 800b6ac:	f7fb fde0 	bl	8007270 <chprintf>
}
 800b6b0:	b003      	add	sp, #12
 800b6b2:	bd30      	pop	{r4, r5, pc}
 800b6b4:	0800e7bc 	.word	0x0800e7bc
 800b6b8:	0800e840 	.word	0x0800e840
 800b6bc:	20002040 	.word	0x20002040
 800b6c0:	0800e7c0 	.word	0x0800e7c0
 800b6c4:	0800e7e0 	.word	0x0800e7e0
 800b6c8:	0800e7f8 	.word	0x0800e7f8
 800b6cc:	0800e818 	.word	0x0800e818

0800b6d0 <chHeapFree>:
void chHeapFree(void *p) {
 800b6d0:	b570      	push	{r4, r5, r6, lr}
  heapp = H_HEAP(hp);
 800b6d2:	e950 4302 	ldrd	r4, r3, [r0, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800b6d6:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 800b6d8:	08db      	lsrs	r3, r3, #3
  H_LOCK(heapp);
 800b6da:	f104 060c 	add.w	r6, r4, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800b6de:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 800b6e2:	4605      	mov	r5, r0
  qp = &heapp->header;
 800b6e4:	3404      	adds	r4, #4
  H_LOCK(heapp);
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f7fd fca2 	bl	8009030 <chMtxLock>
  qp = &heapp->header;
 800b6ec:	4623      	mov	r3, r4
  hp = (heap_header_t *)p - 1U;
 800b6ee:	f1a5 0108 	sub.w	r1, r5, #8
    if (((qp == &heapp->header) || (hp > qp)) &&
 800b6f2:	42a3      	cmp	r3, r4
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	d001      	beq.n	800b6fc <chHeapFree+0x2c>
 800b6f8:	4299      	cmp	r1, r3
 800b6fa:	d902      	bls.n	800b702 <chHeapFree+0x32>
 800b6fc:	b11a      	cbz	r2, 800b706 <chHeapFree+0x36>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 800b6fe:	4291      	cmp	r1, r2
 800b700:	d301      	bcc.n	800b706 <chHeapFree+0x36>
void chHeapFree(void *p) {
 800b702:	4613      	mov	r3, r2
 800b704:	e7f5      	b.n	800b6f2 <chHeapFree+0x22>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 800b706:	f855 0c04 	ldr.w	r0, [r5, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 800b70a:	f845 2c08 	str.w	r2, [r5, #-8]
      H_NEXT(qp) = hp;
 800b70e:	6019      	str	r1, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 800b710:	1c42      	adds	r2, r0, #1
 800b712:	f855 4c08 	ldr.w	r4, [r5, #-8]
 800b716:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 800b71a:	42a0      	cmp	r0, r4
 800b71c:	d00a      	beq.n	800b734 <chHeapFree+0x64>
      if ((H_LIMIT(qp) == hp)) {
 800b71e:	6858      	ldr	r0, [r3, #4]
 800b720:	1c42      	adds	r2, r0, #1
 800b722:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800b726:	4291      	cmp	r1, r2
 800b728:	d010      	beq.n	800b74c <chHeapFree+0x7c>
  H_UNLOCK(heapp);
 800b72a:	4630      	mov	r0, r6
}
 800b72c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  H_UNLOCK(heapp);
 800b730:	f7ff b8e6 	b.w	800a900 <chMtxUnlock>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 800b734:	6840      	ldr	r0, [r0, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 800b736:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 800b73a:	4402      	add	r2, r0
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 800b73c:	e945 4202 	strd	r4, r2, [r5, #-8]
      if ((H_LIMIT(qp) == hp)) {
 800b740:	6858      	ldr	r0, [r3, #4]
 800b742:	1c42      	adds	r2, r0, #1
 800b744:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800b748:	4291      	cmp	r1, r2
 800b74a:	d1ee      	bne.n	800b72a <chHeapFree+0x5a>
        H_NEXT(qp) = H_NEXT(hp);
 800b74c:	e955 1202 	ldrd	r1, r2, [r5, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 800b750:	3201      	adds	r2, #1
 800b752:	4410      	add	r0, r2
        H_NEXT(qp) = H_NEXT(hp);
 800b754:	e9c3 1000 	strd	r1, r0, [r3]
  H_UNLOCK(heapp);
 800b758:	4630      	mov	r0, r6
}
 800b75a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  H_UNLOCK(heapp);
 800b75e:	f7ff b8cf 	b.w	800a900 <chMtxUnlock>
 800b762:	bf00      	nop
	...

0800b770 <oslib_test_003_002_execute>:
  void *p1;
  size_t total_size, largest_size;

  /* [3.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 800b770:	2301      	movs	r3, #1
static void oslib_test_003_002_execute(void) {
 800b772:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 800b774:	4c13      	ldr	r4, [pc, #76]	; (800b7c4 <oslib_test_003_002_execute+0x54>)
static void oslib_test_003_002_execute(void) {
 800b776:	b082      	sub	sp, #8
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 800b778:	466a      	mov	r2, sp
 800b77a:	a901      	add	r1, sp, #4
 800b77c:	2000      	movs	r0, #0
  test_set_step(1);
 800b77e:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 800b780:	f7ff ff36 	bl	800b5f0 <chHeapStatus>
 800b784:	2110      	movs	r1, #16
 800b786:	4810      	ldr	r0, [pc, #64]	; (800b7c8 <oslib_test_003_002_execute+0x58>)
 800b788:	f7ff f8f2 	bl	800a970 <chHeapAllocAligned.constprop.60>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 800b78c:	4606      	mov	r6, r0
 800b78e:	3000      	adds	r0, #0
 800b790:	bf18      	it	ne
 800b792:	2001      	movne	r0, #1
 800b794:	490d      	ldr	r1, [pc, #52]	; (800b7cc <oslib_test_003_002_execute+0x5c>)
 800b796:	f7fa f8d3 	bl	8005940 <_test_assert>
 800b79a:	b980      	cbnz	r0, 800b7be <oslib_test_003_002_execute+0x4e>
 800b79c:	4605      	mov	r5, r0
    chHeapFree(p1);
 800b79e:	4630      	mov	r0, r6
 800b7a0:	f7ff ff96 	bl	800b6d0 <chHeapFree>
  }

  /* [3.2.2] Testing allocation failure.*/
  test_set_step(2);
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	f7ff f8df 	bl	800a970 <chHeapAllocAligned.constprop.60>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
 800b7b2:	fab0 f080 	clz	r0, r0
 800b7b6:	4906      	ldr	r1, [pc, #24]	; (800b7d0 <oslib_test_003_002_execute+0x60>)
 800b7b8:	0940      	lsrs	r0, r0, #5
 800b7ba:	f7fa f8c1 	bl	8005940 <_test_assert>
  }
}
 800b7be:	b002      	add	sp, #8
 800b7c0:	bd70      	pop	{r4, r5, r6, pc}
 800b7c2:	bf00      	nop
 800b7c4:	2000283c 	.word	0x2000283c
 800b7c8:	2000279c 	.word	0x2000279c
 800b7cc:	0800eba4 	.word	0x0800eba4
 800b7d0:	0800ebb8 	.word	0x0800ebb8
	...

0800b7e0 <oslib_test_003_001_execute>:
  test_set_step(1);
 800b7e0:	2301      	movs	r3, #1
static void oslib_test_003_001_execute(void) {
 800b7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800b7e6:	4cbf      	ldr	r4, [pc, #764]	; (800bae4 <oslib_test_003_001_execute+0x304>)
static void oslib_test_003_001_execute(void) {
 800b7e8:	b084      	sub	sp, #16
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 800b7ea:	4669      	mov	r1, sp
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	48be      	ldr	r0, [pc, #760]	; (800bae8 <oslib_test_003_001_execute+0x308>)
  test_set_step(1);
 800b7f0:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 800b7f2:	f7ff fefd 	bl	800b5f0 <chHeapStatus>
 800b7f6:	f1a0 0001 	sub.w	r0, r0, #1
 800b7fa:	fab0 f080 	clz	r0, r0
 800b7fe:	49bb      	ldr	r1, [pc, #748]	; (800baec <oslib_test_003_001_execute+0x30c>)
 800b800:	0940      	lsrs	r0, r0, #5
 800b802:	f7fa f89d 	bl	8005940 <_test_assert>
 800b806:	b110      	cbz	r0, 800b80e <oslib_test_003_001_execute+0x2e>
}
 800b808:	b004      	add	sp, #16
 800b80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 800b80e:	2302      	movs	r3, #2
 800b810:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b814:	48b4      	ldr	r0, [pc, #720]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b816:	6023      	str	r3, [r4, #0]
 800b818:	f7ff f8aa 	bl	800a970 <chHeapAllocAligned.constprop.60>
    test_assert(p1 == NULL, "allocation not failed");
 800b81c:	fab0 f080 	clz	r0, r0
 800b820:	49b3      	ldr	r1, [pc, #716]	; (800baf0 <oslib_test_003_001_execute+0x310>)
 800b822:	0940      	lsrs	r0, r0, #5
 800b824:	f7fa f88c 	bl	8005940 <_test_assert>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d1ed      	bne.n	800b808 <oslib_test_003_001_execute+0x28>
  test_set_step(3);
 800b82c:	2303      	movs	r3, #3
 800b82e:	2110      	movs	r1, #16
 800b830:	48ad      	ldr	r0, [pc, #692]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b832:	6023      	str	r3, [r4, #0]
 800b834:	f7ff f89c 	bl	800a970 <chHeapAllocAligned.constprop.60>
    test_assert(p1 != NULL, "allocation failed");
 800b838:	4605      	mov	r5, r0
 800b83a:	3000      	adds	r0, #0
 800b83c:	bf18      	it	ne
 800b83e:	2001      	movne	r0, #1
 800b840:	49ac      	ldr	r1, [pc, #688]	; (800baf4 <oslib_test_003_001_execute+0x314>)
 800b842:	f7fa f87d 	bl	8005940 <_test_assert>
 800b846:	2800      	cmp	r0, #0
 800b848:	d1de      	bne.n	800b808 <oslib_test_003_001_execute+0x28>
    chHeapFree(p1);
 800b84a:	4628      	mov	r0, r5
 800b84c:	f7ff ff40 	bl	800b6d0 <chHeapFree>
  test_set_step(4);
 800b850:	2304      	movs	r3, #4
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 800b852:	a903      	add	r1, sp, #12
 800b854:	aa02      	add	r2, sp, #8
 800b856:	48a4      	ldr	r0, [pc, #656]	; (800bae8 <oslib_test_003_001_execute+0x308>)
  test_set_step(4);
 800b858:	6023      	str	r3, [r4, #0]
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 800b85a:	f7ff fec9 	bl	800b5f0 <chHeapStatus>
 800b85e:	4603      	mov	r3, r0
    test_assert(n == 1, "missing free block");
 800b860:	f1a0 0001 	sub.w	r0, r0, #1
 800b864:	fab0 f080 	clz	r0, r0
 800b868:	49a3      	ldr	r1, [pc, #652]	; (800baf8 <oslib_test_003_001_execute+0x318>)
 800b86a:	0940      	lsrs	r0, r0, #5
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 800b86c:	9301      	str	r3, [sp, #4]
    test_assert(n == 1, "missing free block");
 800b86e:	f7fa f867 	bl	8005940 <_test_assert>
 800b872:	2800      	cmp	r0, #0
 800b874:	d1c8      	bne.n	800b808 <oslib_test_003_001_execute+0x28>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 800b876:	9803      	ldr	r0, [sp, #12]
 800b878:	49a0      	ldr	r1, [pc, #640]	; (800bafc <oslib_test_003_001_execute+0x31c>)
 800b87a:	280f      	cmp	r0, #15
 800b87c:	bf94      	ite	ls
 800b87e:	2000      	movls	r0, #0
 800b880:	2001      	movhi	r0, #1
 800b882:	f7fa f85d 	bl	8005940 <_test_assert>
 800b886:	2800      	cmp	r0, #0
 800b888:	d1be      	bne.n	800b808 <oslib_test_003_001_execute+0x28>
    test_assert(total_size == largest_size, "unexpected heap state");
 800b88a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 800b88e:	1ac0      	subs	r0, r0, r3
 800b890:	fab0 f080 	clz	r0, r0
 800b894:	4999      	ldr	r1, [pc, #612]	; (800bafc <oslib_test_003_001_execute+0x31c>)
 800b896:	0940      	lsrs	r0, r0, #5
 800b898:	f7fa f852 	bl	8005940 <_test_assert>
 800b89c:	4605      	mov	r5, r0
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	d1b2      	bne.n	800b808 <oslib_test_003_001_execute+0x28>
  test_set_step(5);
 800b8a2:	2305      	movs	r3, #5
 800b8a4:	2110      	movs	r1, #16
 800b8a6:	4890      	ldr	r0, [pc, #576]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b8a8:	6023      	str	r3, [r4, #0]
 800b8aa:	f7ff f861 	bl	800a970 <chHeapAllocAligned.constprop.60>
 800b8ae:	2110      	movs	r1, #16
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	488d      	ldr	r0, [pc, #564]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b8b4:	f7ff f85c 	bl	800a970 <chHeapAllocAligned.constprop.60>
 800b8b8:	2110      	movs	r1, #16
 800b8ba:	4607      	mov	r7, r0
 800b8bc:	488a      	ldr	r0, [pc, #552]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b8be:	f7ff f857 	bl	800a970 <chHeapAllocAligned.constprop.60>
 800b8c2:	4606      	mov	r6, r0
    chHeapFree(p1);                                 /* Does not merge.*/
 800b8c4:	4640      	mov	r0, r8
 800b8c6:	f7ff ff03 	bl	800b6d0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	f7ff ff00 	bl	800b6d0 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f7ff fefd 	bl	800b6d0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800b8d6:	462a      	mov	r2, r5
 800b8d8:	a901      	add	r1, sp, #4
 800b8da:	4883      	ldr	r0, [pc, #524]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b8dc:	f7ff fe88 	bl	800b5f0 <chHeapStatus>
 800b8e0:	f1a0 0001 	sub.w	r0, r0, #1
 800b8e4:	fab0 f080 	clz	r0, r0
 800b8e8:	4980      	ldr	r1, [pc, #512]	; (800baec <oslib_test_003_001_execute+0x30c>)
 800b8ea:	0940      	lsrs	r0, r0, #5
 800b8ec:	f7fa f828 	bl	8005940 <_test_assert>
 800b8f0:	4605      	mov	r5, r0
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d188      	bne.n	800b808 <oslib_test_003_001_execute+0x28>
  test_set_step(6);
 800b8f6:	2306      	movs	r3, #6
 800b8f8:	2110      	movs	r1, #16
 800b8fa:	487b      	ldr	r0, [pc, #492]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	f7ff f837 	bl	800a970 <chHeapAllocAligned.constprop.60>
 800b902:	2110      	movs	r1, #16
 800b904:	4606      	mov	r6, r0
 800b906:	4878      	ldr	r0, [pc, #480]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b908:	f7ff f832 	bl	800a970 <chHeapAllocAligned.constprop.60>
 800b90c:	4607      	mov	r7, r0
 800b90e:	2110      	movs	r1, #16
 800b910:	4875      	ldr	r0, [pc, #468]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b912:	f7ff f82d 	bl	800a970 <chHeapAllocAligned.constprop.60>
    chHeapFree(p3);                                 /* Merges forward.*/
 800b916:	f7ff fedb 	bl	800b6d0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 800b91a:	4638      	mov	r0, r7
 800b91c:	f7ff fed8 	bl	800b6d0 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 800b920:	4630      	mov	r0, r6
 800b922:	f7ff fed5 	bl	800b6d0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800b926:	462a      	mov	r2, r5
 800b928:	a901      	add	r1, sp, #4
 800b92a:	486f      	ldr	r0, [pc, #444]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b92c:	f7ff fe60 	bl	800b5f0 <chHeapStatus>
 800b930:	1e43      	subs	r3, r0, #1
 800b932:	4258      	negs	r0, r3
 800b934:	496d      	ldr	r1, [pc, #436]	; (800baec <oslib_test_003_001_execute+0x30c>)
 800b936:	4158      	adcs	r0, r3
 800b938:	f7fa f802 	bl	8005940 <_test_assert>
 800b93c:	4605      	mov	r5, r0
 800b93e:	2800      	cmp	r0, #0
 800b940:	f47f af62 	bne.w	800b808 <oslib_test_003_001_execute+0x28>
  test_set_step(7);
 800b944:	2307      	movs	r3, #7
 800b946:	2111      	movs	r1, #17
 800b948:	4867      	ldr	r0, [pc, #412]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b94a:	6023      	str	r3, [r4, #0]
 800b94c:	f7ff f810 	bl	800a970 <chHeapAllocAligned.constprop.60>
 800b950:	2110      	movs	r1, #16
 800b952:	4606      	mov	r6, r0
 800b954:	4864      	ldr	r0, [pc, #400]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b956:	f7ff f80b 	bl	800a970 <chHeapAllocAligned.constprop.60>
 800b95a:	4607      	mov	r7, r0
    chHeapFree(p1);
 800b95c:	4630      	mov	r0, r6
 800b95e:	f7ff feb7 	bl	800b6d0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 800b962:	462a      	mov	r2, r5
 800b964:	a901      	add	r1, sp, #4
 800b966:	4860      	ldr	r0, [pc, #384]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b968:	f7ff fe42 	bl	800b5f0 <chHeapStatus>
 800b96c:	f1a0 0802 	sub.w	r8, r0, #2
 800b970:	f1d8 0000 	rsbs	r0, r8, #0
 800b974:	4962      	ldr	r1, [pc, #392]	; (800bb00 <oslib_test_003_001_execute+0x320>)
 800b976:	eb40 0008 	adc.w	r0, r0, r8
 800b97a:	f7f9 ffe1 	bl	8005940 <_test_assert>
 800b97e:	4605      	mov	r5, r0
 800b980:	2800      	cmp	r0, #0
 800b982:	f47f af41 	bne.w	800b808 <oslib_test_003_001_execute+0x28>
 800b986:	2110      	movs	r1, #16
 800b988:	4857      	ldr	r0, [pc, #348]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b98a:	f7fe fff1 	bl	800a970 <chHeapAllocAligned.constprop.60>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800b98e:	462a      	mov	r2, r5
 800b990:	4606      	mov	r6, r0
 800b992:	a901      	add	r1, sp, #4
 800b994:	4854      	ldr	r0, [pc, #336]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b996:	f7ff fe2b 	bl	800b5f0 <chHeapStatus>
 800b99a:	2801      	cmp	r0, #1
 800b99c:	f000 809f 	beq.w	800bade <oslib_test_003_001_execute+0x2fe>
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	a901      	add	r1, sp, #4
 800b9a4:	4850      	ldr	r0, [pc, #320]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b9a6:	f7ff fe23 	bl	800b5f0 <chHeapStatus>
 800b9aa:	f1a0 0e02 	sub.w	lr, r0, #2
 800b9ae:	f1de 0000 	rsbs	r0, lr, #0
 800b9b2:	eb40 000e 	adc.w	r0, r0, lr
 800b9b6:	494d      	ldr	r1, [pc, #308]	; (800baec <oslib_test_003_001_execute+0x30c>)
 800b9b8:	f7f9 ffc2 	bl	8005940 <_test_assert>
 800b9bc:	4605      	mov	r5, r0
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	f47f af22 	bne.w	800b808 <oslib_test_003_001_execute+0x28>
    chHeapFree(p2);
 800b9c4:	4638      	mov	r0, r7
 800b9c6:	f7ff fe83 	bl	800b6d0 <chHeapFree>
    chHeapFree(p1);
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	f7ff fe80 	bl	800b6d0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800b9d0:	462a      	mov	r2, r5
 800b9d2:	a901      	add	r1, sp, #4
 800b9d4:	4844      	ldr	r0, [pc, #272]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b9d6:	f7ff fe0b 	bl	800b5f0 <chHeapStatus>
 800b9da:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800b9de:	f1dc 0000 	rsbs	r0, ip, #0
 800b9e2:	4942      	ldr	r1, [pc, #264]	; (800baec <oslib_test_003_001_execute+0x30c>)
 800b9e4:	eb40 000c 	adc.w	r0, r0, ip
 800b9e8:	f7f9 ffaa 	bl	8005940 <_test_assert>
 800b9ec:	4605      	mov	r5, r0
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	f47f af0a 	bne.w	800b808 <oslib_test_003_001_execute+0x28>
  test_set_step(8);
 800b9f4:	2308      	movs	r3, #8
 800b9f6:	2110      	movs	r1, #16
 800b9f8:	483b      	ldr	r0, [pc, #236]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800b9fa:	6023      	str	r3, [r4, #0]
 800b9fc:	f7fe ffb8 	bl	800a970 <chHeapAllocAligned.constprop.60>
 800ba00:	2110      	movs	r1, #16
 800ba02:	4607      	mov	r7, r0
 800ba04:	4838      	ldr	r0, [pc, #224]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800ba06:	f7fe ffb3 	bl	800a970 <chHeapAllocAligned.constprop.60>
 800ba0a:	4606      	mov	r6, r0
    chHeapFree(p1);
 800ba0c:	4638      	mov	r0, r7
 800ba0e:	f7ff fe5f 	bl	800b6d0 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 800ba12:	462a      	mov	r2, r5
 800ba14:	a901      	add	r1, sp, #4
 800ba16:	4834      	ldr	r0, [pc, #208]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800ba18:	f7ff fdea 	bl	800b5f0 <chHeapStatus>
 800ba1c:	1e87      	subs	r7, r0, #2
 800ba1e:	4278      	negs	r0, r7
 800ba20:	4937      	ldr	r1, [pc, #220]	; (800bb00 <oslib_test_003_001_execute+0x320>)
 800ba22:	4178      	adcs	r0, r7
 800ba24:	f7f9 ff8c 	bl	8005940 <_test_assert>
 800ba28:	4605      	mov	r5, r0
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	f47f aeec 	bne.w	800b808 <oslib_test_003_001_execute+0x28>
 800ba30:	2120      	movs	r1, #32
 800ba32:	482d      	ldr	r0, [pc, #180]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800ba34:	f7fe ff9c 	bl	800a970 <chHeapAllocAligned.constprop.60>
    chHeapFree(p1);
 800ba38:	f7ff fe4a 	bl	800b6d0 <chHeapFree>
    chHeapFree(p2);
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	f7ff fe47 	bl	800b6d0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800ba42:	462a      	mov	r2, r5
 800ba44:	a901      	add	r1, sp, #4
 800ba46:	4828      	ldr	r0, [pc, #160]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800ba48:	f7ff fdd2 	bl	800b5f0 <chHeapStatus>
 800ba4c:	1e45      	subs	r5, r0, #1
 800ba4e:	4268      	negs	r0, r5
 800ba50:	4926      	ldr	r1, [pc, #152]	; (800baec <oslib_test_003_001_execute+0x30c>)
 800ba52:	4168      	adcs	r0, r5
 800ba54:	f7f9 ff74 	bl	8005940 <_test_assert>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	f47f aed4 	bne.w	800b808 <oslib_test_003_001_execute+0x28>
  test_set_step(9);
 800ba60:	2309      	movs	r3, #9
    (void)chHeapStatus(&test_heap, &n, NULL);
 800ba62:	a901      	add	r1, sp, #4
 800ba64:	4820      	ldr	r0, [pc, #128]	; (800bae8 <oslib_test_003_001_execute+0x308>)
  test_set_step(9);
 800ba66:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 800ba68:	f7ff fdc2 	bl	800b5f0 <chHeapStatus>
 800ba6c:	9901      	ldr	r1, [sp, #4]
 800ba6e:	481e      	ldr	r0, [pc, #120]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800ba70:	f7fe ff7e 	bl	800a970 <chHeapAllocAligned.constprop.60>
    test_assert(p1 != NULL, "allocation failed");
 800ba74:	4606      	mov	r6, r0
 800ba76:	3000      	adds	r0, #0
 800ba78:	491e      	ldr	r1, [pc, #120]	; (800baf4 <oslib_test_003_001_execute+0x314>)
 800ba7a:	bf18      	it	ne
 800ba7c:	2001      	movne	r0, #1
 800ba7e:	f7f9 ff5f 	bl	8005940 <_test_assert>
 800ba82:	4602      	mov	r2, r0
 800ba84:	2800      	cmp	r0, #0
 800ba86:	f47f aebf 	bne.w	800b808 <oslib_test_003_001_execute+0x28>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 800ba8a:	4601      	mov	r1, r0
 800ba8c:	4816      	ldr	r0, [pc, #88]	; (800bae8 <oslib_test_003_001_execute+0x308>)
 800ba8e:	f7ff fdaf 	bl	800b5f0 <chHeapStatus>
 800ba92:	fab0 f080 	clz	r0, r0
 800ba96:	491b      	ldr	r1, [pc, #108]	; (800bb04 <oslib_test_003_001_execute+0x324>)
 800ba98:	0940      	lsrs	r0, r0, #5
 800ba9a:	f7f9 ff51 	bl	8005940 <_test_assert>
 800ba9e:	4605      	mov	r5, r0
 800baa0:	2800      	cmp	r0, #0
 800baa2:	f47f aeb1 	bne.w	800b808 <oslib_test_003_001_execute+0x28>
    chHeapFree(p1);
 800baa6:	4630      	mov	r0, r6
 800baa8:	f7ff fe12 	bl	800b6d0 <chHeapFree>
  test_set_step(10);
 800baac:	230a      	movs	r3, #10
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800baae:	462a      	mov	r2, r5
 800bab0:	a901      	add	r1, sp, #4
 800bab2:	480d      	ldr	r0, [pc, #52]	; (800bae8 <oslib_test_003_001_execute+0x308>)
  test_set_step(10);
 800bab4:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800bab6:	f7ff fd9b 	bl	800b5f0 <chHeapStatus>
 800baba:	1e42      	subs	r2, r0, #1
 800babc:	4250      	negs	r0, r2
 800babe:	4150      	adcs	r0, r2
 800bac0:	490a      	ldr	r1, [pc, #40]	; (800baec <oslib_test_003_001_execute+0x30c>)
 800bac2:	f7f9 ff3d 	bl	8005940 <_test_assert>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	f47f ae9e 	bne.w	800b808 <oslib_test_003_001_execute+0x28>
    test_assert(n == sz, "size changed");
 800bacc:	e9dd 3000 	ldrd	r3, r0, [sp]
 800bad0:	1ac3      	subs	r3, r0, r3
 800bad2:	4258      	negs	r0, r3
 800bad4:	490c      	ldr	r1, [pc, #48]	; (800bb08 <oslib_test_003_001_execute+0x328>)
 800bad6:	4158      	adcs	r0, r3
 800bad8:	f7f9 ff32 	bl	8005940 <_test_assert>
 800badc:	e694      	b.n	800b808 <oslib_test_003_001_execute+0x28>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800bade:	2001      	movs	r0, #1
 800bae0:	e769      	b.n	800b9b6 <oslib_test_003_001_execute+0x1d6>
 800bae2:	bf00      	nop
 800bae4:	2000283c 	.word	0x2000283c
 800bae8:	2000279c 	.word	0x2000279c
 800baec:	0800eb38 	.word	0x0800eb38
 800baf0:	0800ebb8 	.word	0x0800ebb8
 800baf4:	0800eba4 	.word	0x0800eba4
 800baf8:	0800eb48 	.word	0x0800eb48
 800bafc:	0800eb5c 	.word	0x0800eb5c
 800bb00:	0800eb74 	.word	0x0800eb74
 800bb04:	0800e9ec 	.word	0x0800e9ec
 800bb08:	0800eb84 	.word	0x0800eb84
 800bb0c:	00000000 	.word	0x00000000

0800bb10 <dyn_release_object_heap.part.3>:
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800bb10:	460a      	mov	r2, r1
 800bb12:	e002      	b.n	800bb1a <dyn_release_object_heap.part.3+0xa>
    if (prev->next == element) {
 800bb14:	4298      	cmp	r0, r3
 800bb16:	d006      	beq.n	800bb26 <dyn_release_object_heap.part.3+0x16>
 800bb18:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 800bb1a:	6813      	ldr	r3, [r2, #0]
 800bb1c:	428b      	cmp	r3, r1
 800bb1e:	d1f9      	bne.n	800bb14 <dyn_release_object_heap.part.3+0x4>
  return NULL;
 800bb20:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 800bb22:	f7ff bdd5 	b.w	800b6d0 <chHeapFree>
      prev->next = element->next;
 800bb26:	6803      	ldr	r3, [r0, #0]
 800bb28:	6013      	str	r3, [r2, #0]
    chHeapFree((void *)dep);
 800bb2a:	f7ff bdd1 	b.w	800b6d0 <chHeapFree>
 800bb2e:	bf00      	nop

0800bb30 <chFactoryReleaseObjectsFIFO>:
 *
 * @param[in] dofp      dynamic "objects FIFO" object reference
 *
 * @api
 */
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 800bb30:	b510      	push	{r4, lr}
 800bb32:	4604      	mov	r4, r0

  F_LOCK();
 800bb34:	4807      	ldr	r0, [pc, #28]	; (800bb54 <chFactoryReleaseObjectsFIFO+0x24>)
 800bb36:	f7fd fa7b 	bl	8009030 <chMtxLock>
  dep->refs--;
 800bb3a:	6863      	ldr	r3, [r4, #4]
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800bb40:	b91b      	cbnz	r3, 800bb4a <chFactoryReleaseObjectsFIFO+0x1a>
 800bb42:	4620      	mov	r0, r4
 800bb44:	4904      	ldr	r1, [pc, #16]	; (800bb58 <chFactoryReleaseObjectsFIFO+0x28>)
 800bb46:	f7ff ffe3 	bl	800bb10 <dyn_release_object_heap.part.3>

  dyn_release_object_heap(&dofp->element, &ch_factory.fifo_list);

  F_UNLOCK();
}
 800bb4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800bb4e:	4801      	ldr	r0, [pc, #4]	; (800bb54 <chFactoryReleaseObjectsFIFO+0x24>)
 800bb50:	f7fe bed6 	b.w	800a900 <chMtxUnlock>
 800bb54:	20001f24 	.word	0x20001f24
 800bb58:	20001f64 	.word	0x20001f64
 800bb5c:	00000000 	.word	0x00000000

0800bb60 <oslib_test_004_005_execute>:
      chFactoryReleaseObjectsFIFO(dofp);
    }
  }
}

static void oslib_test_004_005_execute(void) {
 800bb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_objects_fifo_t *dofp;

  /* [4.5.1] Retrieving a dynamic objects FIFO by name, must not
     exist.*/
  test_set_step(1);
 800bb62:	2501      	movs	r5, #1
 800bb64:	4c41      	ldr	r4, [pc, #260]	; (800bc6c <oslib_test_004_005_execute+0x10c>)
 800bb66:	6025      	str	r5, [r4, #0]
  {
    dofp = chFactoryFindObjectsFIFO("myfifo");
 800bb68:	f7ff f902 	bl	800ad70 <chFactoryFindObjectsFIFO.constprop.31>
    test_assert(dofp == NULL, "found");
 800bb6c:	fab0 f080 	clz	r0, r0
 800bb70:	493f      	ldr	r1, [pc, #252]	; (800bc70 <oslib_test_004_005_execute+0x110>)
 800bb72:	0940      	lsrs	r0, r0, #5
 800bb74:	f7f9 fee4 	bl	8005940 <_test_assert>
 800bb78:	b100      	cbz	r0, 800bb7c <oslib_test_004_005_execute+0x1c>
  test_set_step(6);
  {
    dofp = chFactoryFindObjectsFIFO("myfifo");
    test_assert(dofp == NULL, "found");
  }
}
 800bb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800bb7c:	2302      	movs	r3, #2
 800bb7e:	6023      	str	r3, [r4, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800bb80:	f7ff f8a6 	bl	800acd0 <chFactoryCreateObjectsFIFO.constprop.32>
    test_assert(dofp != NULL, "cannot create");
 800bb84:	4606      	mov	r6, r0
 800bb86:	3000      	adds	r0, #0
 800bb88:	bf18      	it	ne
 800bb8a:	2001      	movne	r0, #1
 800bb8c:	4939      	ldr	r1, [pc, #228]	; (800bc74 <oslib_test_004_005_execute+0x114>)
 800bb8e:	f7f9 fed7 	bl	8005940 <_test_assert>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d1f1      	bne.n	800bb7a <oslib_test_004_005_execute+0x1a>
  test_set_step(3);
 800bb96:	2303      	movs	r3, #3
 800bb98:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800bb9a:	f7ff f899 	bl	800acd0 <chFactoryCreateObjectsFIFO.constprop.32>
    test_assert(dofp1 == NULL, "can create");
 800bb9e:	fab0 f080 	clz	r0, r0
 800bba2:	4935      	ldr	r1, [pc, #212]	; (800bc78 <oslib_test_004_005_execute+0x118>)
 800bba4:	0940      	lsrs	r0, r0, #5
 800bba6:	f7f9 fecb 	bl	8005940 <_test_assert>
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d1e5      	bne.n	800bb7a <oslib_test_004_005_execute+0x1a>
  test_set_step(4);
 800bbae:	2304      	movs	r3, #4
 800bbb0:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 800bbb2:	f7ff f8dd 	bl	800ad70 <chFactoryFindObjectsFIFO.constprop.31>
    test_assert(dofp1 != NULL, "not found");
 800bbb6:	4607      	mov	r7, r0
 800bbb8:	3000      	adds	r0, #0
 800bbba:	bf18      	it	ne
 800bbbc:	2001      	movne	r0, #1
 800bbbe:	492f      	ldr	r1, [pc, #188]	; (800bc7c <oslib_test_004_005_execute+0x11c>)
 800bbc0:	f7f9 febe 	bl	8005940 <_test_assert>
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d1d8      	bne.n	800bb7a <oslib_test_004_005_execute+0x1a>
    test_assert(dofp == dofp1, "object reference mismatch");
 800bbc8:	1bf0      	subs	r0, r6, r7
 800bbca:	fab0 f080 	clz	r0, r0
 800bbce:	492c      	ldr	r1, [pc, #176]	; (800bc80 <oslib_test_004_005_execute+0x120>)
 800bbd0:	0940      	lsrs	r0, r0, #5
 800bbd2:	f7f9 feb5 	bl	8005940 <_test_assert>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d1cf      	bne.n	800bb7a <oslib_test_004_005_execute+0x1a>
    test_assert(dofp1->element.refs == 2, "object reference mismatch");
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	4928      	ldr	r1, [pc, #160]	; (800bc80 <oslib_test_004_005_execute+0x120>)
 800bbde:	f1a0 0002 	sub.w	r0, r0, #2
 800bbe2:	fab0 f080 	clz	r0, r0
 800bbe6:	0940      	lsrs	r0, r0, #5
 800bbe8:	f7f9 feaa 	bl	8005940 <_test_assert>
 800bbec:	2800      	cmp	r0, #0
 800bbee:	d1c4      	bne.n	800bb7a <oslib_test_004_005_execute+0x1a>
 800bbf0:	687b      	ldr	r3, [r7, #4]
    test_assert(dofp1 == dofp2, "object reference mismatch");
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	442b      	add	r3, r5
 800bbf6:	607b      	str	r3, [r7, #4]
 800bbf8:	4921      	ldr	r1, [pc, #132]	; (800bc80 <oslib_test_004_005_execute+0x120>)
 800bbfa:	f7f9 fea1 	bl	8005940 <_test_assert>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	d1bb      	bne.n	800bb7a <oslib_test_004_005_execute+0x1a>
    test_assert(dofp2->element.refs == 3, "object reference mismatch");
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	491e      	ldr	r1, [pc, #120]	; (800bc80 <oslib_test_004_005_execute+0x120>)
 800bc06:	f1a0 0c03 	sub.w	ip, r0, #3
 800bc0a:	f1dc 0000 	rsbs	r0, ip, #0
 800bc0e:	eb40 000c 	adc.w	r0, r0, ip
 800bc12:	f7f9 fe95 	bl	8005940 <_test_assert>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d1af      	bne.n	800bb7a <oslib_test_004_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp2);
 800bc1a:	4638      	mov	r0, r7
 800bc1c:	f7ff ff88 	bl	800bb30 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp1->element.refs == 2, "references mismatch");
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	4918      	ldr	r1, [pc, #96]	; (800bc84 <oslib_test_004_005_execute+0x124>)
 800bc24:	1e82      	subs	r2, r0, #2
 800bc26:	4250      	negs	r0, r2
 800bc28:	4150      	adcs	r0, r2
 800bc2a:	f7f9 fe89 	bl	8005940 <_test_assert>
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	d1a3      	bne.n	800bb7a <oslib_test_004_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp1);
 800bc32:	4638      	mov	r0, r7
 800bc34:	f7ff ff7c 	bl	800bb30 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp->element.refs == 1, "references mismatch");
 800bc38:	6870      	ldr	r0, [r6, #4]
 800bc3a:	4912      	ldr	r1, [pc, #72]	; (800bc84 <oslib_test_004_005_execute+0x124>)
 800bc3c:	1b43      	subs	r3, r0, r5
 800bc3e:	4258      	negs	r0, r3
 800bc40:	4158      	adcs	r0, r3
 800bc42:	f7f9 fe7d 	bl	8005940 <_test_assert>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	d197      	bne.n	800bb7a <oslib_test_004_005_execute+0x1a>
  test_set_step(5);
 800bc4a:	2305      	movs	r3, #5
    chFactoryReleaseObjectsFIFO(dofp);
 800bc4c:	4630      	mov	r0, r6
  test_set_step(5);
 800bc4e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 800bc50:	f7ff ff6e 	bl	800bb30 <chFactoryReleaseObjectsFIFO>
  test_set_step(6);
 800bc54:	2306      	movs	r3, #6
 800bc56:	6023      	str	r3, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 800bc58:	f7ff f88a 	bl	800ad70 <chFactoryFindObjectsFIFO.constprop.31>
}
 800bc5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dofp == NULL, "found");
 800bc60:	fab0 f080 	clz	r0, r0
 800bc64:	4902      	ldr	r1, [pc, #8]	; (800bc70 <oslib_test_004_005_execute+0x110>)
 800bc66:	0940      	lsrs	r0, r0, #5
 800bc68:	f7f9 be6a 	b.w	8005940 <_test_assert>
 800bc6c:	2000283c 	.word	0x2000283c
 800bc70:	0800ec50 	.word	0x0800ec50
 800bc74:	0800ec30 	.word	0x0800ec30
 800bc78:	0800ec40 	.word	0x0800ec40
 800bc7c:	0800ec4c 	.word	0x0800ec4c
 800bc80:	0800ec58 	.word	0x0800ec58
 800bc84:	0800ec74 	.word	0x0800ec74
	...

0800bc90 <oslib_test_004_005_teardown>:
static void oslib_test_004_005_teardown(void) {
 800bc90:	b510      	push	{r4, lr}
  dofp = chFactoryFindObjectsFIFO("myfifo");
 800bc92:	f7ff f86d 	bl	800ad70 <chFactoryFindObjectsFIFO.constprop.31>
  if (dofp != NULL) {
 800bc96:	b140      	cbz	r0, 800bcaa <oslib_test_004_005_teardown+0x1a>
    while (dofp->element.refs > 0U) {
 800bc98:	6843      	ldr	r3, [r0, #4]
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	b12b      	cbz	r3, 800bcaa <oslib_test_004_005_teardown+0x1a>
      chFactoryReleaseObjectsFIFO(dofp);
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f7ff ff46 	bl	800bb30 <chFactoryReleaseObjectsFIFO>
    while (dofp->element.refs > 0U) {
 800bca4:	6863      	ldr	r3, [r4, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1f9      	bne.n	800bc9e <oslib_test_004_005_teardown+0xe>
}
 800bcaa:	bd10      	pop	{r4, pc}
 800bcac:	0000      	movs	r0, r0
	...

0800bcb0 <chFactoryReleaseMailbox>:
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 800bcb0:	b510      	push	{r4, lr}
 800bcb2:	4604      	mov	r4, r0
  F_LOCK();
 800bcb4:	4807      	ldr	r0, [pc, #28]	; (800bcd4 <chFactoryReleaseMailbox+0x24>)
 800bcb6:	f7fd f9bb 	bl	8009030 <chMtxLock>
  dep->refs--;
 800bcba:	6863      	ldr	r3, [r4, #4]
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800bcc0:	b91b      	cbnz	r3, 800bcca <chFactoryReleaseMailbox+0x1a>
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	4904      	ldr	r1, [pc, #16]	; (800bcd8 <chFactoryReleaseMailbox+0x28>)
 800bcc6:	f7ff ff23 	bl	800bb10 <dyn_release_object_heap.part.3>
}
 800bcca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800bcce:	4801      	ldr	r0, [pc, #4]	; (800bcd4 <chFactoryReleaseMailbox+0x24>)
 800bcd0:	f7fe be16 	b.w	800a900 <chMtxUnlock>
 800bcd4:	20001f24 	.word	0x20001f24
 800bcd8:	20001f60 	.word	0x20001f60
 800bcdc:	00000000 	.word	0x00000000

0800bce0 <oslib_test_004_004_execute>:
static void oslib_test_004_004_execute(void) {
 800bce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800bce2:	2501      	movs	r5, #1
 800bce4:	4c41      	ldr	r4, [pc, #260]	; (800bdec <oslib_test_004_004_execute+0x10c>)
 800bce6:	6025      	str	r5, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 800bce8:	f7fe ffda 	bl	800aca0 <chFactoryFindMailbox.constprop.33>
    test_assert(dmp == NULL, "found");
 800bcec:	fab0 f080 	clz	r0, r0
 800bcf0:	493f      	ldr	r1, [pc, #252]	; (800bdf0 <oslib_test_004_004_execute+0x110>)
 800bcf2:	0940      	lsrs	r0, r0, #5
 800bcf4:	f7f9 fe24 	bl	8005940 <_test_assert>
 800bcf8:	b100      	cbz	r0, 800bcfc <oslib_test_004_004_execute+0x1c>
}
 800bcfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800bcfc:	2302      	movs	r3, #2
 800bcfe:	6023      	str	r3, [r4, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 800bd00:	f7fe ff9e 	bl	800ac40 <chFactoryCreateMailbox.constprop.34>
    test_assert(dmp != NULL, "cannot create");
 800bd04:	4606      	mov	r6, r0
 800bd06:	3000      	adds	r0, #0
 800bd08:	bf18      	it	ne
 800bd0a:	2001      	movne	r0, #1
 800bd0c:	4939      	ldr	r1, [pc, #228]	; (800bdf4 <oslib_test_004_004_execute+0x114>)
 800bd0e:	f7f9 fe17 	bl	8005940 <_test_assert>
 800bd12:	2800      	cmp	r0, #0
 800bd14:	d1f1      	bne.n	800bcfa <oslib_test_004_004_execute+0x1a>
  test_set_step(3);
 800bd16:	2303      	movs	r3, #3
 800bd18:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 800bd1a:	f7fe ff91 	bl	800ac40 <chFactoryCreateMailbox.constprop.34>
    test_assert(dmp1 == NULL, "can create");
 800bd1e:	fab0 f080 	clz	r0, r0
 800bd22:	4935      	ldr	r1, [pc, #212]	; (800bdf8 <oslib_test_004_004_execute+0x118>)
 800bd24:	0940      	lsrs	r0, r0, #5
 800bd26:	f7f9 fe0b 	bl	8005940 <_test_assert>
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d1e5      	bne.n	800bcfa <oslib_test_004_004_execute+0x1a>
  test_set_step(4);
 800bd2e:	2304      	movs	r3, #4
 800bd30:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 800bd32:	f7fe ffb5 	bl	800aca0 <chFactoryFindMailbox.constprop.33>
    test_assert(dmp1 != NULL, "not found");
 800bd36:	4607      	mov	r7, r0
 800bd38:	3000      	adds	r0, #0
 800bd3a:	bf18      	it	ne
 800bd3c:	2001      	movne	r0, #1
 800bd3e:	492f      	ldr	r1, [pc, #188]	; (800bdfc <oslib_test_004_004_execute+0x11c>)
 800bd40:	f7f9 fdfe 	bl	8005940 <_test_assert>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d1d8      	bne.n	800bcfa <oslib_test_004_004_execute+0x1a>
    test_assert(dmp == dmp1, "object reference mismatch");
 800bd48:	1bf0      	subs	r0, r6, r7
 800bd4a:	fab0 f080 	clz	r0, r0
 800bd4e:	492c      	ldr	r1, [pc, #176]	; (800be00 <oslib_test_004_004_execute+0x120>)
 800bd50:	0940      	lsrs	r0, r0, #5
 800bd52:	f7f9 fdf5 	bl	8005940 <_test_assert>
 800bd56:	2800      	cmp	r0, #0
 800bd58:	d1cf      	bne.n	800bcfa <oslib_test_004_004_execute+0x1a>
    test_assert(dmp1->element.refs == 2, "object reference mismatch");
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	4928      	ldr	r1, [pc, #160]	; (800be00 <oslib_test_004_004_execute+0x120>)
 800bd5e:	f1a0 0002 	sub.w	r0, r0, #2
 800bd62:	fab0 f080 	clz	r0, r0
 800bd66:	0940      	lsrs	r0, r0, #5
 800bd68:	f7f9 fdea 	bl	8005940 <_test_assert>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d1c4      	bne.n	800bcfa <oslib_test_004_004_execute+0x1a>
 800bd70:	687b      	ldr	r3, [r7, #4]
    test_assert(dmp1 == dmp2, "object reference mismatch");
 800bd72:	4628      	mov	r0, r5
 800bd74:	442b      	add	r3, r5
 800bd76:	607b      	str	r3, [r7, #4]
 800bd78:	4921      	ldr	r1, [pc, #132]	; (800be00 <oslib_test_004_004_execute+0x120>)
 800bd7a:	f7f9 fde1 	bl	8005940 <_test_assert>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d1bb      	bne.n	800bcfa <oslib_test_004_004_execute+0x1a>
    test_assert(dmp2->element.refs == 3, "object reference mismatch");
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	491e      	ldr	r1, [pc, #120]	; (800be00 <oslib_test_004_004_execute+0x120>)
 800bd86:	f1a0 0c03 	sub.w	ip, r0, #3
 800bd8a:	f1dc 0000 	rsbs	r0, ip, #0
 800bd8e:	eb40 000c 	adc.w	r0, r0, ip
 800bd92:	f7f9 fdd5 	bl	8005940 <_test_assert>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d1af      	bne.n	800bcfa <oslib_test_004_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp2);
 800bd9a:	4638      	mov	r0, r7
 800bd9c:	f7ff ff88 	bl	800bcb0 <chFactoryReleaseMailbox>
    test_assert(dmp1->element.refs == 2, "references mismatch");
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	4918      	ldr	r1, [pc, #96]	; (800be04 <oslib_test_004_004_execute+0x124>)
 800bda4:	1e82      	subs	r2, r0, #2
 800bda6:	4250      	negs	r0, r2
 800bda8:	4150      	adcs	r0, r2
 800bdaa:	f7f9 fdc9 	bl	8005940 <_test_assert>
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	d1a3      	bne.n	800bcfa <oslib_test_004_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp1);
 800bdb2:	4638      	mov	r0, r7
 800bdb4:	f7ff ff7c 	bl	800bcb0 <chFactoryReleaseMailbox>
    test_assert(dmp->element.refs == 1, "references mismatch");
 800bdb8:	6870      	ldr	r0, [r6, #4]
 800bdba:	4912      	ldr	r1, [pc, #72]	; (800be04 <oslib_test_004_004_execute+0x124>)
 800bdbc:	1b43      	subs	r3, r0, r5
 800bdbe:	4258      	negs	r0, r3
 800bdc0:	4158      	adcs	r0, r3
 800bdc2:	f7f9 fdbd 	bl	8005940 <_test_assert>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d197      	bne.n	800bcfa <oslib_test_004_004_execute+0x1a>
  test_set_step(5);
 800bdca:	2305      	movs	r3, #5
    chFactoryReleaseMailbox(dmp);
 800bdcc:	4630      	mov	r0, r6
  test_set_step(5);
 800bdce:	6023      	str	r3, [r4, #0]
    chFactoryReleaseMailbox(dmp);
 800bdd0:	f7ff ff6e 	bl	800bcb0 <chFactoryReleaseMailbox>
  test_set_step(6);
 800bdd4:	2306      	movs	r3, #6
 800bdd6:	6023      	str	r3, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 800bdd8:	f7fe ff62 	bl	800aca0 <chFactoryFindMailbox.constprop.33>
}
 800bddc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dmp == NULL, "found");
 800bde0:	fab0 f080 	clz	r0, r0
 800bde4:	4902      	ldr	r1, [pc, #8]	; (800bdf0 <oslib_test_004_004_execute+0x110>)
 800bde6:	0940      	lsrs	r0, r0, #5
 800bde8:	f7f9 bdaa 	b.w	8005940 <_test_assert>
 800bdec:	2000283c 	.word	0x2000283c
 800bdf0:	0800ec50 	.word	0x0800ec50
 800bdf4:	0800ec30 	.word	0x0800ec30
 800bdf8:	0800ec40 	.word	0x0800ec40
 800bdfc:	0800ec4c 	.word	0x0800ec4c
 800be00:	0800ec58 	.word	0x0800ec58
 800be04:	0800ec74 	.word	0x0800ec74
	...

0800be10 <oslib_test_004_004_teardown>:
static void oslib_test_004_004_teardown(void) {
 800be10:	b510      	push	{r4, lr}
  dmp = chFactoryFindMailbox("mymbx");
 800be12:	f7fe ff45 	bl	800aca0 <chFactoryFindMailbox.constprop.33>
  if (dmp != NULL) {
 800be16:	b140      	cbz	r0, 800be2a <oslib_test_004_004_teardown+0x1a>
    while (dmp->element.refs > 0U) {
 800be18:	6843      	ldr	r3, [r0, #4]
 800be1a:	4604      	mov	r4, r0
 800be1c:	b12b      	cbz	r3, 800be2a <oslib_test_004_004_teardown+0x1a>
      chFactoryReleaseMailbox(dmp);
 800be1e:	4620      	mov	r0, r4
 800be20:	f7ff ff46 	bl	800bcb0 <chFactoryReleaseMailbox>
    while (dmp->element.refs > 0U) {
 800be24:	6863      	ldr	r3, [r4, #4]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1f9      	bne.n	800be1e <oslib_test_004_004_teardown+0xe>
}
 800be2a:	bd10      	pop	{r4, pc}
 800be2c:	0000      	movs	r0, r0
	...

0800be30 <chFactoryReleaseBuffer>:
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 800be30:	b510      	push	{r4, lr}
 800be32:	4604      	mov	r4, r0
  F_LOCK();
 800be34:	4807      	ldr	r0, [pc, #28]	; (800be54 <chFactoryReleaseBuffer+0x24>)
 800be36:	f7fd f8fb 	bl	8009030 <chMtxLock>
  dep->refs--;
 800be3a:	6863      	ldr	r3, [r4, #4]
 800be3c:	3b01      	subs	r3, #1
 800be3e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800be40:	b91b      	cbnz	r3, 800be4a <chFactoryReleaseBuffer+0x1a>
 800be42:	4620      	mov	r0, r4
 800be44:	4904      	ldr	r1, [pc, #16]	; (800be58 <chFactoryReleaseBuffer+0x28>)
 800be46:	f7ff fe63 	bl	800bb10 <dyn_release_object_heap.part.3>
}
 800be4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800be4e:	4801      	ldr	r0, [pc, #4]	; (800be54 <chFactoryReleaseBuffer+0x24>)
 800be50:	f7fe bd56 	b.w	800a900 <chMtxUnlock>
 800be54:	20001f24 	.word	0x20001f24
 800be58:	20001f48 	.word	0x20001f48
 800be5c:	00000000 	.word	0x00000000

0800be60 <oslib_test_004_002_execute>:
static void oslib_test_004_002_execute(void) {
 800be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800be62:	2501      	movs	r5, #1
 800be64:	4c41      	ldr	r4, [pc, #260]	; (800bf6c <oslib_test_004_002_execute+0x10c>)
 800be66:	6025      	str	r5, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 800be68:	f7fe fe9a 	bl	800aba0 <chFactoryFindBuffer.constprop.37>
    test_assert(dbp == NULL, "found");
 800be6c:	fab0 f080 	clz	r0, r0
 800be70:	493f      	ldr	r1, [pc, #252]	; (800bf70 <oslib_test_004_002_execute+0x110>)
 800be72:	0940      	lsrs	r0, r0, #5
 800be74:	f7f9 fd64 	bl	8005940 <_test_assert>
 800be78:	b100      	cbz	r0, 800be7c <oslib_test_004_002_execute+0x1c>
}
 800be7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800be7c:	2302      	movs	r3, #2
 800be7e:	6023      	str	r3, [r4, #0]
    dbp = chFactoryCreateBuffer("mybuf", 128U);
 800be80:	f7fe fe6e 	bl	800ab60 <chFactoryCreateBuffer.constprop.38>
    test_assert(dbp != NULL, "cannot create");
 800be84:	4606      	mov	r6, r0
 800be86:	3000      	adds	r0, #0
 800be88:	bf18      	it	ne
 800be8a:	2001      	movne	r0, #1
 800be8c:	4939      	ldr	r1, [pc, #228]	; (800bf74 <oslib_test_004_002_execute+0x114>)
 800be8e:	f7f9 fd57 	bl	8005940 <_test_assert>
 800be92:	2800      	cmp	r0, #0
 800be94:	d1f1      	bne.n	800be7a <oslib_test_004_002_execute+0x1a>
  test_set_step(3);
 800be96:	2303      	movs	r3, #3
 800be98:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryCreateBuffer("mybuf", 128U);
 800be9a:	f7fe fe61 	bl	800ab60 <chFactoryCreateBuffer.constprop.38>
    test_assert(dbp1 == NULL, "can create");
 800be9e:	fab0 f080 	clz	r0, r0
 800bea2:	4935      	ldr	r1, [pc, #212]	; (800bf78 <oslib_test_004_002_execute+0x118>)
 800bea4:	0940      	lsrs	r0, r0, #5
 800bea6:	f7f9 fd4b 	bl	8005940 <_test_assert>
 800beaa:	2800      	cmp	r0, #0
 800beac:	d1e5      	bne.n	800be7a <oslib_test_004_002_execute+0x1a>
  test_set_step(4);
 800beae:	2304      	movs	r3, #4
 800beb0:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 800beb2:	f7fe fe75 	bl	800aba0 <chFactoryFindBuffer.constprop.37>
    test_assert(dbp1 != NULL, "not found");
 800beb6:	4607      	mov	r7, r0
 800beb8:	3000      	adds	r0, #0
 800beba:	bf18      	it	ne
 800bebc:	2001      	movne	r0, #1
 800bebe:	492f      	ldr	r1, [pc, #188]	; (800bf7c <oslib_test_004_002_execute+0x11c>)
 800bec0:	f7f9 fd3e 	bl	8005940 <_test_assert>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d1d8      	bne.n	800be7a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp == dbp1, "object reference mismatch");
 800bec8:	1bf0      	subs	r0, r6, r7
 800beca:	fab0 f080 	clz	r0, r0
 800bece:	492c      	ldr	r1, [pc, #176]	; (800bf80 <oslib_test_004_002_execute+0x120>)
 800bed0:	0940      	lsrs	r0, r0, #5
 800bed2:	f7f9 fd35 	bl	8005940 <_test_assert>
 800bed6:	2800      	cmp	r0, #0
 800bed8:	d1cf      	bne.n	800be7a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp1->element.refs == 2, "object reference mismatch");
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	4928      	ldr	r1, [pc, #160]	; (800bf80 <oslib_test_004_002_execute+0x120>)
 800bede:	f1a0 0002 	sub.w	r0, r0, #2
 800bee2:	fab0 f080 	clz	r0, r0
 800bee6:	0940      	lsrs	r0, r0, #5
 800bee8:	f7f9 fd2a 	bl	8005940 <_test_assert>
 800beec:	2800      	cmp	r0, #0
 800beee:	d1c4      	bne.n	800be7a <oslib_test_004_002_execute+0x1a>
 800bef0:	687b      	ldr	r3, [r7, #4]
    test_assert(dbp1 == dbp2, "object reference mismatch");
 800bef2:	4628      	mov	r0, r5
 800bef4:	442b      	add	r3, r5
 800bef6:	607b      	str	r3, [r7, #4]
 800bef8:	4921      	ldr	r1, [pc, #132]	; (800bf80 <oslib_test_004_002_execute+0x120>)
 800befa:	f7f9 fd21 	bl	8005940 <_test_assert>
 800befe:	2800      	cmp	r0, #0
 800bf00:	d1bb      	bne.n	800be7a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp2->element.refs == 3, "object reference mismatch");
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	491e      	ldr	r1, [pc, #120]	; (800bf80 <oslib_test_004_002_execute+0x120>)
 800bf06:	f1a0 0c03 	sub.w	ip, r0, #3
 800bf0a:	f1dc 0000 	rsbs	r0, ip, #0
 800bf0e:	eb40 000c 	adc.w	r0, r0, ip
 800bf12:	f7f9 fd15 	bl	8005940 <_test_assert>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d1af      	bne.n	800be7a <oslib_test_004_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp2);
 800bf1a:	4638      	mov	r0, r7
 800bf1c:	f7ff ff88 	bl	800be30 <chFactoryReleaseBuffer>
    test_assert(dbp1->element.refs == 2, "references mismatch");
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	4918      	ldr	r1, [pc, #96]	; (800bf84 <oslib_test_004_002_execute+0x124>)
 800bf24:	1e82      	subs	r2, r0, #2
 800bf26:	4250      	negs	r0, r2
 800bf28:	4150      	adcs	r0, r2
 800bf2a:	f7f9 fd09 	bl	8005940 <_test_assert>
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	d1a3      	bne.n	800be7a <oslib_test_004_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp1);
 800bf32:	4638      	mov	r0, r7
 800bf34:	f7ff ff7c 	bl	800be30 <chFactoryReleaseBuffer>
    test_assert(dbp->element.refs == 1, "references mismatch");
 800bf38:	6870      	ldr	r0, [r6, #4]
 800bf3a:	4912      	ldr	r1, [pc, #72]	; (800bf84 <oslib_test_004_002_execute+0x124>)
 800bf3c:	1b43      	subs	r3, r0, r5
 800bf3e:	4258      	negs	r0, r3
 800bf40:	4158      	adcs	r0, r3
 800bf42:	f7f9 fcfd 	bl	8005940 <_test_assert>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d197      	bne.n	800be7a <oslib_test_004_002_execute+0x1a>
  test_set_step(5);
 800bf4a:	2305      	movs	r3, #5
    chFactoryReleaseBuffer(dbp);
 800bf4c:	4630      	mov	r0, r6
  test_set_step(5);
 800bf4e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseBuffer(dbp);
 800bf50:	f7ff ff6e 	bl	800be30 <chFactoryReleaseBuffer>
  test_set_step(6);
 800bf54:	2306      	movs	r3, #6
 800bf56:	6023      	str	r3, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 800bf58:	f7fe fe22 	bl	800aba0 <chFactoryFindBuffer.constprop.37>
}
 800bf5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dbp == NULL, "found");
 800bf60:	fab0 f080 	clz	r0, r0
 800bf64:	4902      	ldr	r1, [pc, #8]	; (800bf70 <oslib_test_004_002_execute+0x110>)
 800bf66:	0940      	lsrs	r0, r0, #5
 800bf68:	f7f9 bcea 	b.w	8005940 <_test_assert>
 800bf6c:	2000283c 	.word	0x2000283c
 800bf70:	0800ec50 	.word	0x0800ec50
 800bf74:	0800ec30 	.word	0x0800ec30
 800bf78:	0800ec40 	.word	0x0800ec40
 800bf7c:	0800ec4c 	.word	0x0800ec4c
 800bf80:	0800ec58 	.word	0x0800ec58
 800bf84:	0800ec74 	.word	0x0800ec74
	...

0800bf90 <oslib_test_004_002_teardown>:
static void oslib_test_004_002_teardown(void) {
 800bf90:	b510      	push	{r4, lr}
  dbp = chFactoryFindBuffer("mybuf");
 800bf92:	f7fe fe05 	bl	800aba0 <chFactoryFindBuffer.constprop.37>
  if (dbp != NULL) {
 800bf96:	b140      	cbz	r0, 800bfaa <oslib_test_004_002_teardown+0x1a>
    while (dbp->element.refs > 0U) {
 800bf98:	6843      	ldr	r3, [r0, #4]
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	b12b      	cbz	r3, 800bfaa <oslib_test_004_002_teardown+0x1a>
      chFactoryReleaseBuffer(dbp);
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f7ff ff46 	bl	800be30 <chFactoryReleaseBuffer>
    while (dbp->element.refs > 0U) {
 800bfa4:	6863      	ldr	r3, [r4, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d1f9      	bne.n	800bf9e <oslib_test_004_002_teardown+0xe>
}
 800bfaa:	bd10      	pop	{r4, pc}
 800bfac:	0000      	movs	r0, r0
	...

0800bfb0 <chThdRelease>:
 800bfb0:	2220      	movs	r2, #32
 800bfb2:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 800bfb6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 800bfc0:	6a03      	ldr	r3, [r0, #32]
 800bfc2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800bfc6:	2b0f      	cmp	r3, #15
 800bfc8:	d003      	beq.n	800bfd2 <chThdRelease+0x22>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f383 8811 	msr	BASEPRI, r3
 800bfd0:	4770      	bx	lr
void chThdRelease(thread_t *tp) {
 800bfd2:	b410      	push	{r4}
    REG_REMOVE(tp);
 800bfd4:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 800bfd8:	611c      	str	r4, [r3, #16]
 800bfda:	6904      	ldr	r4, [r0, #16]
 800bfdc:	2100      	movs	r1, #0
 800bfde:	6163      	str	r3, [r4, #20]
 800bfe0:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 800bfe4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800bfe8:	f003 0303 	and.w	r3, r3, #3
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d00c      	beq.n	800c00a <chThdRelease+0x5a>
 800bff0:	2b02      	cmp	r3, #2
 800bff2:	d108      	bne.n	800c006 <chThdRelease+0x56>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 800bff4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bff6:	69c0      	ldr	r0, [r0, #28]
 800bff8:	f382 8811 	msr	BASEPRI, r2
  php->next = mp->next;
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	6002      	str	r2, [r0, #0]
  mp->next = php;
 800c000:	6018      	str	r0, [r3, #0]
 800c002:	f381 8811 	msr	BASEPRI, r1
}
 800c006:	bc10      	pop	{r4}
 800c008:	4770      	bx	lr
      chHeapFree(chThdGetWorkingAreaX(tp));
 800c00a:	69c0      	ldr	r0, [r0, #28]
}
 800c00c:	bc10      	pop	{r4}
      chHeapFree(chThdGetWorkingAreaX(tp));
 800c00e:	f7ff bb5f 	b.w	800b6d0 <chHeapFree>
 800c012:	bf00      	nop
	...

0800c020 <cmd_threads>:
  if (argc > 0) {
 800c020:	2900      	cmp	r1, #0
 800c022:	dd03      	ble.n	800c02c <cmd_threads+0xc>
    shellUsage(chp, "threads");
 800c024:	4a28      	ldr	r2, [pc, #160]	; (800c0c8 <cmd_threads+0xa8>)
 800c026:	4929      	ldr	r1, [pc, #164]	; (800c0cc <cmd_threads+0xac>)
 800c028:	f7fb b922 	b.w	8007270 <chprintf>
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800c02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n"SHELL_NEWLINE_STR);
 800c030:	4927      	ldr	r1, [pc, #156]	; (800c0d0 <cmd_threads+0xb0>)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800c032:	b087      	sub	sp, #28
 800c034:	4605      	mov	r5, r0
 800c036:	2620      	movs	r6, #32
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n"SHELL_NEWLINE_STR);
 800c038:	f7fb f91a 	bl	8007270 <chprintf>
 800c03c:	f386 8811 	msr	BASEPRI, r6
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 800c040:	4f24      	ldr	r7, [pc, #144]	; (800c0d4 <cmd_threads+0xb4>)
 800c042:	2200      	movs	r2, #0
 800c044:	693c      	ldr	r4, [r7, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 800c046:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800c04a:	3301      	adds	r3, #1
 800c04c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800c050:	f382 8811 	msr	BASEPRI, r2
 800c054:	f8df a080 	ldr.w	sl, [pc, #128]	; 800c0d8 <cmd_threads+0xb8>
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s"SHELL_NEWLINE_STR,
 800c058:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800c0dc <cmd_threads+0xbc>
 800c05c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800c0e0 <cmd_threads+0xc0>
 800c060:	e00b      	b.n	800c07a <cmd_threads+0x5a>
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
    ntp->refs++;
 800c062:	f89b 3022 	ldrb.w	r3, [fp, #34]	; 0x22
 800c066:	2200      	movs	r2, #0
 800c068:	3301      	adds	r3, #1
 800c06a:	f88b 3022 	strb.w	r3, [fp, #34]	; 0x22
 800c06e:	f382 8811 	msr	BASEPRI, r2
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 800c072:	4620      	mov	r0, r4
 800c074:	f7ff ff9c 	bl	800bfb0 <chThdRelease>
 800c078:	465c      	mov	r4, fp
             tp->name == NULL ? "" : tp->name);
 800c07a:	69a1      	ldr	r1, [r4, #24]
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 800c07c:	f894 3020 	ldrb.w	r3, [r4, #32]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s"SHELL_NEWLINE_STR,
 800c080:	2900      	cmp	r1, #0
 800c082:	bf08      	it	eq
 800c084:	4649      	moveq	r1, r9
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 800c086:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s"SHELL_NEWLINE_STR,
 800c08a:	f85a e023 	ldr.w	lr, [sl, r3, lsl #2]
 800c08e:	3801      	subs	r0, #1
    uint32_t stklimit = (uint32_t)tp->wabase;
 800c090:	69e2      	ldr	r2, [r4, #28]
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 800c092:	e9d4 c302 	ldrd	ip, r3, [r4, #8]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s"SHELL_NEWLINE_STR,
 800c096:	e9cd e103 	strd	lr, r1, [sp, #12]
 800c09a:	e9cd 0c01 	strd	r0, ip, [sp, #4]
 800c09e:	9400      	str	r4, [sp, #0]
 800c0a0:	4641      	mov	r1, r8
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	f7fb f8e4 	bl	8007270 <chprintf>
 800c0a8:	f386 8811 	msr	BASEPRI, r6
  ntp = tp->newer;
 800c0ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
  if (ntp == (thread_t *)&ch.rlist) {
 800c0b0:	45bb      	cmp	fp, r7
 800c0b2:	d1d6      	bne.n	800c062 <cmd_threads+0x42>
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 800c0ba:	4620      	mov	r0, r4
}
 800c0bc:	b007      	add	sp, #28
 800c0be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c2:	f7ff bf75 	b.w	800bfb0 <chThdRelease>
 800c0c6:	bf00      	nop
 800c0c8:	08010728 	.word	0x08010728
 800c0cc:	0800e840 	.word	0x0800e840
 800c0d0:	0800e878 	.word	0x0800e878
 800c0d4:	20001eb0 	.word	0x20001eb0
 800c0d8:	08010118 	.word	0x08010118
 800c0dc:	080100cc 	.word	0x080100cc
 800c0e0:	0800e8b8 	.word	0x0800e8b8
	...

0800c0f0 <rt_test_010_006_execute>:
  test_set_step(1);
 800c0f0:	2201      	movs	r2, #1
  return ch.rlist.current;
 800c0f2:	4b1a      	ldr	r3, [pc, #104]	; (800c15c <rt_test_010_006_execute+0x6c>)
static void rt_test_010_006_execute(void) {
 800c0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return chThdGetSelfX()->prio;
 800c0f8:	699b      	ldr	r3, [r3, #24]
  test_set_step(1);
 800c0fa:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800c168 <rt_test_010_006_execute+0x78>
  tprio_t prio = chThdGetPriorityX() + 1;
 800c0fe:	689f      	ldr	r7, [r3, #8]
  test_set_step(1);
 800c100:	f8ca 2000 	str.w	r2, [sl]
  tprio_t prio = chThdGetPriorityX() + 1;
 800c104:	4417      	add	r7, r2
    start = test_wait_tick();
 800c106:	f7fc fc7b 	bl	8008a00 <test_wait_tick>
    n = 0;
 800c10a:	2400      	movs	r4, #0
    start = test_wait_tick();
 800c10c:	4606      	mov	r6, r0
  return systime + (systime_t)interval;
 800c10e:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 800c112:	b2ad      	uxth	r5, r5
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800c114:	f8df 9054 	ldr.w	r9, [pc, #84]	; 800c16c <rt_test_010_006_execute+0x7c>
 800c118:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800c170 <rt_test_010_006_execute+0x80>
 800c11c:	1a2d      	subs	r5, r5, r0
 800c11e:	2300      	movs	r3, #0
 800c120:	464a      	mov	r2, r9
 800c122:	4639      	mov	r1, r7
 800c124:	4640      	mov	r0, r8
 800c126:	f7fb ff23 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800c12a:	f7ff ff41 	bl	800bfb0 <chThdRelease>
 800c12e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 800c134:	3401      	adds	r4, #1
  return (bool)((time - start) < (end - start));
 800c136:	b29b      	uxth	r3, r3
 800c138:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 800c13a:	42ab      	cmp	r3, r5
 800c13c:	dbef      	blt.n	800c11e <rt_test_010_006_execute+0x2e>
  test_set_step(2);
 800c13e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 800c140:	4807      	ldr	r0, [pc, #28]	; (800c160 <rt_test_010_006_execute+0x70>)
  test_set_step(2);
 800c142:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 800c146:	f7f9 fcfb 	bl	8005b40 <test_print>
    test_printn(n);
 800c14a:	4620      	mov	r0, r4
 800c14c:	f7f9 fc88 	bl	8005a60 <test_printn>
}
 800c150:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" threads/S");
 800c154:	4803      	ldr	r0, [pc, #12]	; (800c164 <rt_test_010_006_execute+0x74>)
 800c156:	f7f9 bcd3 	b.w	8005b00 <test_println>
 800c15a:	bf00      	nop
 800c15c:	20001eb0 	.word	0x20001eb0
 800c160:	0800fdf0 	.word	0x0800fdf0
 800c164:	0800fd94 	.word	0x0800fd94
 800c168:	2000283c 	.word	0x2000283c
 800c16c:	08009c51 	.word	0x08009c51
 800c170:	20002128 	.word	0x20002128
	...

0800c180 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	4604      	mov	r4, r0
 800c184:	2320      	movs	r3, #32
 800c186:	f383 8811 	msr	BASEPRI, r3
  if (tp->state != CH_STATE_FINAL) {
 800c18a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c18e:	2b0f      	cmp	r3, #15
 800c190:	d007      	beq.n	800c1a2 <chThdWait+0x22>
    list_insert(currp, &tp->waiting);
 800c192:	4b08      	ldr	r3, [pc, #32]	; (800c1b4 <chThdWait+0x34>)
  tp->queue.next = tlp->next;
 800c194:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800c196:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 800c198:	2009      	movs	r0, #9
 800c19a:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
 800c19c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c19e:	f7fb ff97 	bl	80080d0 <chSchGoSleepS>
  msg = tp->u.exitcode;
 800c1a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	f7ff ff00 	bl	800bfb0 <chThdRelease>
}
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	bd38      	pop	{r3, r4, r5, pc}
 800c1b4:	20001eb0 	.word	0x20001eb0
	...

0800c1c0 <main>:
  rccResetAPB1(0xFFFFFFFF);
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800c1c6:	f44f 7080 	mov.w	r0, #256	; 0x100
}

/*
 * Application entry point.
 */
int main(void) {
 800c1ca:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800c1ce:	2160      	movs	r1, #96	; 0x60
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800c1d0:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800c1d4:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800c1d8:	f44f 7700 	mov.w	r7, #512	; 0x200
 800c1dc:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800c1e0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 800c1e4:	4bce      	ldr	r3, [pc, #824]	; (800c520 <main+0x360>)

#if PAL_USE_CALLBACKS || PAL_USE_WAIT || defined(__DOXYGEN__)
  unsigned i;

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
 800c1e6:	4616      	mov	r6, r2
 800c1e8:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800c1ec:	f8c3 8010 	str.w	r8, [r3, #16]
 800c1f0:	611a      	str	r2, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 800c1f2:	f8d3 900c 	ldr.w	r9, [r3, #12]
 800c1f6:	f8c3 800c 	str.w	r8, [r3, #12]
 800c1fa:	60da      	str	r2, [r3, #12]
  rccEnablePWRInterface(true);
 800c1fc:	69da      	ldr	r2, [r3, #28]
 800c1fe:	b083      	sub	sp, #12
 800c200:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c204:	61da      	str	r2, [r3, #28]
  rccEnableBKPInterface(true);
 800c206:	69da      	ldr	r2, [r3, #28]
 800c208:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800c20c:	61da      	str	r2, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 800c20e:	4ac5      	ldr	r2, [pc, #788]	; (800c524 <main+0x364>)
 800c210:	6813      	ldr	r3, [r2, #0]
 800c212:	4303      	orrs	r3, r0
 800c214:	6013      	str	r3, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800c216:	4bc4      	ldr	r3, [pc, #784]	; (800c528 <main+0x368>)
 800c218:	4ac4      	ldr	r2, [pc, #784]	; (800c52c <main+0x36c>)
 800c21a:	f883 1306 	strb.w	r1, [r3, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800c21e:	f8c3 e180 	str.w	lr, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800c222:	f8c3 e000 	str.w	lr, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800c226:	f883 1307 	strb.w	r1, [r3, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800c22a:	f8c3 c180 	str.w	ip, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800c22e:	f8c3 c000 	str.w	ip, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800c232:	f883 1308 	strb.w	r1, [r3, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800c236:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800c23a:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800c23c:	f883 1309 	strb.w	r1, [r3, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800c240:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800c244:	601f      	str	r7, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800c246:	f883 130a 	strb.w	r1, [r3, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800c24a:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800c24e:	601d      	str	r5, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800c250:	f883 1317 	strb.w	r1, [r3, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800c254:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800c258:	601c      	str	r4, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800c25a:	f883 1328 	strb.w	r1, [r3, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800c25e:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
 800c262:	1811      	adds	r1, r2, r0
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800c264:	6058      	str	r0, [r3, #4]
  tqp->prev = (thread_t *)tqp;
 800c266:	e9c2 2200 	strd	r2, r2, [r2]
 800c26a:	e9c2 6602 	strd	r6, r6, [r2, #8]
 800c26e:	3210      	adds	r2, #16
  for (i = 0; i < 16; i++) {
 800c270:	428a      	cmp	r2, r1
 800c272:	d1f8      	bne.n	800c266 <main+0xa6>
  rccEnableAPB2(APB2_EN_MASK, true);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 800c274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 800c278:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
  usbp->state        = USB_STOP;
 800c27c:	2701      	movs	r7, #1
    usbp->in_params[i]  = NULL;
 800c27e:	2400      	movs	r4, #0
  rccEnableAPB2(APB2_EN_MASK, true);
 800c280:	4da7      	ldr	r5, [pc, #668]	; (800c520 <main+0x360>)
  GPIOA->ODR = config->PAData.odr;
 800c282:	49ab      	ldr	r1, [pc, #684]	; (800c530 <main+0x370>)
  rccEnableAPB2(APB2_EN_MASK, true);
 800c284:	69a8      	ldr	r0, [r5, #24]
 800c286:	f040 007d 	orr.w	r0, r0, #125	; 0x7d
 800c28a:	61a8      	str	r0, [r5, #24]
  GPIOA->CRH = config->PAData.crh;
 800c28c:	48a9      	ldr	r0, [pc, #676]	; (800c534 <main+0x374>)
  GPIOA->ODR = config->PAData.odr;
 800c28e:	60ca      	str	r2, [r1, #12]
  GPIOA->CRH = config->PAData.crh;
 800c290:	6048      	str	r0, [r1, #4]
  GPIOA->CRL = config->PAData.crl;
 800c292:	f5a0 5064 	sub.w	r0, r0, #14592	; 0x3900
 800c296:	3830      	subs	r0, #48	; 0x30
 800c298:	6008      	str	r0, [r1, #0]
  GPIOB->CRH = config->PBData.crh;
 800c29a:	f500 5072 	add.w	r0, r0, #15488	; 0x3c80
 800c29e:	3030      	adds	r0, #48	; 0x30
  GPIOB->ODR = config->PBData.odr;
 800c2a0:	f8c1 240c 	str.w	r2, [r1, #1036]	; 0x40c
  GPIOB->CRH = config->PBData.crh;
 800c2a4:	f8c1 0404 	str.w	r0, [r1, #1028]	; 0x404
  GPIOB->CRL = config->PBData.crl;
 800c2a8:	f8c1 0400 	str.w	r0, [r1, #1024]	; 0x400
  GPIOC->ODR = config->PCData.odr;
 800c2ac:	48a2      	ldr	r0, [pc, #648]	; (800c538 <main+0x378>)
  usbp->state        = USB_STOP;
 800c2ae:	4da3      	ldr	r5, [pc, #652]	; (800c53c <main+0x37c>)
 800c2b0:	60c2      	str	r2, [r0, #12]
  GPIOC->CRH = config->PCData.crh;
 800c2b2:	6043      	str	r3, [r0, #4]
  GPIOC->CRL = config->PCData.crl;
 800c2b4:	6003      	str	r3, [r0, #0]
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 800c2b6:	48a2      	ldr	r0, [pc, #648]	; (800c540 <main+0x380>)
  GPIOD->ODR = config->PDData.odr;
 800c2b8:	f8c1 2c0c 	str.w	r2, [r1, #3084]	; 0xc0c
  GPIOD->CRH = config->PDData.crh;
 800c2bc:	f8c1 3c04 	str.w	r3, [r1, #3076]	; 0xc04
  GPIOD->CRL = config->PDData.crl;
 800c2c0:	f8c1 0c00 	str.w	r0, [r1, #3072]	; 0xc00
  GPIOB->ODR = config->PBData.odr;
 800c2c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 800c2c8:	f8c1 2c0c 	str.w	r2, [r1, #3084]	; 0xc0c
  usbp->config       = NULL;
 800c2cc:	606e      	str	r6, [r5, #4]
 800c2ce:	f105 0248 	add.w	r2, r5, #72	; 0x48
  GPIOE->CRH = config->PEData.crh;
 800c2d2:	f8c1 3c04 	str.w	r3, [r1, #3076]	; 0xc04
  GPIOE->CRL = config->PEData.crl;
 800c2d6:	f8c1 3c00 	str.w	r3, [r1, #3072]	; 0xc00
 800c2da:	f105 032c 	add.w	r3, r5, #44	; 0x2c
  usbp->state        = USB_STOP;
 800c2de:	702f      	strb	r7, [r5, #0]
    usbp->in_params[i]  = NULL;
 800c2e0:	f843 4b04 	str.w	r4, [r3], #4
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 800c2e4:	429a      	cmp	r2, r3
    usbp->out_params[i] = NULL;
 800c2e6:	619c      	str	r4, [r3, #24]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 800c2e8:	d1fa      	bne.n	800c2e0 <main+0x120>
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800c2ea:	2601      	movs	r6, #1
  ST_ENABLE_CLOCK();
 800c2ec:	4f8c      	ldr	r7, [pc, #560]	; (800c520 <main+0x360>)
  ST_ENABLE_STOP();
 800c2ee:	f8df e290 	ldr.w	lr, [pc, #656]	; 800c580 <main+0x3c0>
  ST_ENABLE_CLOCK();
 800c2f2:	69f9      	ldr	r1, [r7, #28]
  usbp->transmitting = 0;
 800c2f4:	60ac      	str	r4, [r5, #8]
 800c2f6:	4331      	orrs	r1, r6
 800c2f8:	61f9      	str	r1, [r7, #28]
  ST_ENABLE_STOP();
 800c2fa:	f8de 1004 	ldr.w	r1, [lr, #4]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800c2fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  ST_ENABLE_STOP();
 800c302:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800c306:	f8ce 1004 	str.w	r1, [lr, #4]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800c30a:	f648 419f 	movw	r1, #35999	; 0x8c9f
 800c30e:	6299      	str	r1, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800c310:	f64f 71ff 	movw	r1, #65535	; 0xffff
  ch.vtlist.delta = (sysinterval_t)-1;
 800c314:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800c318:	2280      	movs	r2, #128	; 0x80
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800c31a:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c31e:	f04f 0a10 	mov.w	sl, #16
 800c322:	62d9      	str	r1, [r3, #44]	; 0x2c
  default_heap.provider = chCoreAllocAlignedWithOffset;
 800c324:	f8df e25c 	ldr.w	lr, [pc, #604]	; 800c584 <main+0x3c4>
  tqp->next = (thread_t *)tqp;
 800c328:	4986      	ldr	r1, [pc, #536]	; (800c544 <main+0x384>)
  STM32_ST_TIM->CCMR1  = 0;
 800c32a:	619c      	str	r4, [r3, #24]
  tqp->prev = (thread_t *)tqp;
 800c32c:	6049      	str	r1, [r1, #4]
  STM32_ST_TIM->CCR[0] = 0;
 800c32e:	635c      	str	r4, [r3, #52]	; 0x34
  ch.rlist.prio = NOPRIO;
 800c330:	608c      	str	r4, [r1, #8]
  STM32_ST_TIM->DIER   = 0;
 800c332:	60dc      	str	r4, [r3, #12]
  ch.vtlist.lasttime = (systime_t)0;
 800c334:	850c      	strh	r4, [r1, #40]	; 0x28
  STM32_ST_TIM->CR2    = 0;
 800c336:	605c      	str	r4, [r3, #4]
  ch.vtlist.delta = (sysinterval_t)-1;
 800c338:	f8c1 9024 	str.w	r9, [r1, #36]	; 0x24
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800c33c:	615e      	str	r6, [r3, #20]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800c33e:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 800c528 <main+0x368>
  H_NEXT(&default_heap.header) = NULL;
 800c342:	f8ce 4004 	str.w	r4, [lr, #4]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800c346:	601e      	str	r6, [r3, #0]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 800c348:	4b7f      	ldr	r3, [pc, #508]	; (800c548 <main+0x388>)
  H_PAGES(&default_heap.header) = 0;
 800c34a:	f8ce 4008 	str.w	r4, [lr, #8]
 800c34e:	f889 231c 	strb.w	r2, [r9, #796]	; 0x31c
  mp->owner = NULL;
 800c352:	f8ce 4014 	str.w	r4, [lr, #20]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800c356:	f8c9 c180 	str.w	ip, [r9, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800c35a:	f8c9 c000 	str.w	ip, [r9]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 800c35e:	f8ce 3000 	str.w	r3, [lr]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 800c362:	f101 0c1c 	add.w	ip, r1, #28
  tqp->next = (thread_t *)tqp;
 800c366:	f10e 030c 	add.w	r3, lr, #12
  tqp->prev = (thread_t *)tqp;
 800c36a:	e9ce 3303 	strd	r3, r3, [lr, #12]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 800c36e:	e9c1 cc07 	strd	ip, ip, [r1, #28]
  ch_memcore.nextmem = __heap_base__;
 800c372:	4b76      	ldr	r3, [pc, #472]	; (800c54c <main+0x38c>)
 800c374:	f8df c210 	ldr.w	ip, [pc, #528]	; 800c588 <main+0x3c8>
  tqp->next = (thread_t *)tqp;
 800c378:	6009      	str	r1, [r1, #0]
 800c37a:	f8c3 c000 	str.w	ip, [r3]
  ch_memcore.endmem  = __heap_end__;
 800c37e:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800c58c <main+0x3cc>
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c382:	f64f 0bff 	movw	fp, #63743	; 0xf8ff
 800c386:	f8c3 c004 	str.w	ip, [r3, #4]
 800c38a:	4b71      	ldr	r3, [pc, #452]	; (800c550 <main+0x390>)
  mp->align = align;
 800c38c:	2004      	movs	r0, #4
  tqp->prev = (thread_t *)tqp;
 800c38e:	e9c3 3300 	strd	r3, r3, [r3]
  tp->prio      = prio;
 800c392:	638a      	str	r2, [r1, #56]	; 0x38
  tp->realprio  = prio;
 800c394:	66ca      	str	r2, [r1, #108]	; 0x6c
  tp->name      = name;
 800c396:	4a6f      	ldr	r2, [pc, #444]	; (800c554 <main+0x394>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c398:	f04f 0820 	mov.w	r8, #32
 800c39c:	648a      	str	r2, [r1, #72]	; 0x48
  dlp->next = (dyn_element_t *)dlp;
 800c39e:	eb03 020a 	add.w	r2, r3, sl
 800c3a2:	611a      	str	r2, [r3, #16]
  mp->object_size = size;
 800c3a4:	2214      	movs	r2, #20
 800c3a6:	619a      	str	r2, [r3, #24]
 800c3a8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c3ac:	625a      	str	r2, [r3, #36]	; 0x24
 800c3ae:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800c3b2:	629a      	str	r2, [r3, #40]	; 0x28
 800c3b4:	221c      	movs	r2, #28
  tp->epending  = (eventmask_t)0;
 800c3b6:	e9c1 4419 	strd	r4, r4, [r1, #100]	; 0x64
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c3ba:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 800c590 <main+0x3d0>
  currp->wabase = NULL;
 800c3be:	64cc      	str	r4, [r1, #76]	; 0x4c
 800c3c0:	f8a1 6050 	strh.w	r6, [r1, #80]	; 0x50
  tp->flags     = CH_FLAG_MODE_STATIC;
 800c3c4:	f881 6052 	strb.w	r6, [r1, #82]	; 0x52
 800c3c8:	f8dc e00c 	ldr.w	lr, [ip, #12]
 800c3cc:	631a      	str	r2, [r3, #48]	; 0x30
 800c3ce:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800c3d2:	63da      	str	r2, [r3, #60]	; 0x3c
 800c3d4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800c3d8:	641a      	str	r2, [r3, #64]	; 0x40
  tlp->next = (thread_t *)tlp;
 800c3da:	f101 0258 	add.w	r2, r1, #88	; 0x58
 800c3de:	658a      	str	r2, [r1, #88]	; 0x58
  reg_value  =  (reg_value                                   |
 800c3e0:	4a5d      	ldr	r2, [pc, #372]	; (800c558 <main+0x398>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c3e2:	ea0e 0e0b 	and.w	lr, lr, fp
  reg_value  =  (reg_value                                   |
 800c3e6:	ea4e 0202 	orr.w	r2, lr, r2
 800c3ea:	609c      	str	r4, [r3, #8]
  mp->next = NULL;
 800c3ec:	615c      	str	r4, [r3, #20]
 800c3ee:	62dc      	str	r4, [r3, #44]	; 0x2c
  mp->align = align;
 800c3f0:	61d8      	str	r0, [r3, #28]
  REG_INSERT(tp);
 800c3f2:	e9c1 1110 	strd	r1, r1, [r1, #64]	; 0x40
  SCB->AIRCR =  reg_value;
 800c3f6:	f8cc 200c 	str.w	r2, [ip, #12]
 800c3fa:	6358      	str	r0, [r3, #52]	; 0x34
  mp->provider = provider;
 800c3fc:	4857      	ldr	r0, [pc, #348]	; (800c55c <main+0x39c>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800c3fe:	4a58      	ldr	r2, [pc, #352]	; (800c560 <main+0x3a0>)
 800c400:	6218      	str	r0, [r3, #32]
 800c402:	6398      	str	r0, [r3, #56]	; 0x38
 800c404:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800c408:	e9c1 3304 	strd	r3, r3, [r1, #16]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800c40c:	618b      	str	r3, [r1, #24]
  tqp->next = (thread_t *)tqp;
 800c40e:	f101 035c 	add.w	r3, r1, #92	; 0x5c
  tqp->prev = (thread_t *)tqp;
 800c412:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
 800c416:	68d3      	ldr	r3, [r2, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800c418:	4952      	ldr	r1, [pc, #328]	; (800c564 <main+0x3a4>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800c41a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c41e:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800c420:	680b      	ldr	r3, [r1, #0]
 800c422:	4333      	orrs	r3, r6
 800c424:	600b      	str	r3, [r1, #0]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c426:	f88c a01f 	strb.w	sl, [ip, #31]
 800c42a:	f88c 8022 	strb.w	r8, [ip, #34]	; 0x22
 800c42e:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 800c432:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800c434:	f388 8811 	msr	BASEPRI, r8
  tp = chThdCreateSuspendedI(tdp);
 800c438:	484b      	ldr	r0, [pc, #300]	; (800c568 <main+0x3a8>)
 800c43a:	f7fa fab1 	bl	80069a0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 800c43e:	2100      	movs	r1, #0
 800c440:	f7fb fd66 	bl	8007f10 <chSchWakeupS>
 800c444:	f384 8811 	msr	BASEPRI, r4
  sdup->vmt = &vmt;
 800c448:	f8df a148 	ldr.w	sl, [pc, #328]	; 800c594 <main+0x3d4>
  ibqp->bn        = n;
 800c44c:	2302      	movs	r3, #2
 800c44e:	4652      	mov	r2, sl
  ibqp->bsize     = size + sizeof (size_t);
 800c450:	f44f 7082 	mov.w	r0, #260	; 0x104
 800c454:	4945      	ldr	r1, [pc, #276]	; (800c56c <main+0x3ac>)
  sdup->state = SDU_STOP;
 800c456:	f88a 6008 	strb.w	r6, [sl, #8]
  sdup->vmt = &vmt;
 800c45a:	f842 1b04 	str.w	r1, [r2], #4
  ibqp->suspended = suspended;
 800c45e:	f88a 6014 	strb.w	r6, [sl, #20]
  obqp->suspended = suspended;
 800c462:	f88a 604c 	strb.w	r6, [sl, #76]	; 0x4c
  obqp->notify    = onfy;
 800c466:	4942      	ldr	r1, [pc, #264]	; (800c570 <main+0x3b0>)
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800c468:	f20a 468c 	addw	r6, sl, #1164	; 0x48c
  ibqp->notify    = infy;
 800c46c:	f8df c128 	ldr.w	ip, [pc, #296]	; 800c598 <main+0x3d8>
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800c470:	f8ca 605c 	str.w	r6, [sl, #92]	; 0x5c
  tqp->next = (thread_t *)tqp;
 800c474:	f10a 060c 	add.w	r6, sl, #12
  obqp->notify    = onfy;
 800c478:	f8ca 1074 	str.w	r1, [sl, #116]	; 0x74
  esp->next = (event_listener_t *)esp;
 800c47c:	f8ca 2004 	str.w	r2, [sl, #4]
  ibqp->brdptr    = bp;
 800c480:	f10a 017c 	add.w	r1, sl, #124	; 0x7c
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800c484:	f50a 7221 	add.w	r2, sl, #644	; 0x284
  tqp->prev = (thread_t *)tqp;
 800c488:	e9ca 6603 	strd	r6, r6, [sl, #12]
  tqp->next = (thread_t *)tqp;
 800c48c:	f10a 0644 	add.w	r6, sl, #68	; 0x44
  ibqp->bcounter  = 0;
 800c490:	f8ca 4018 	str.w	r4, [sl, #24]
  ibqp->top       = NULL;
 800c494:	e9ca 440d 	strd	r4, r4, [sl, #52]	; 0x34
  obqp->top       = NULL;
 800c498:	e9ca 441b 	strd	r4, r4, [sl, #108]	; 0x6c
  ibqp->link      = link;
 800c49c:	f8ca a040 	str.w	sl, [sl, #64]	; 0x40
  obqp->link      = link;
 800c4a0:	f8ca a078 	str.w	sl, [sl, #120]	; 0x78
  ibqp->notify    = infy;
 800c4a4:	f8ca c03c 	str.w	ip, [sl, #60]	; 0x3c
  ibqp->bwrptr    = bp;
 800c4a8:	e9ca 1107 	strd	r1, r1, [sl, #28]
  ibqp->buffers   = bp;
 800c4ac:	f8ca 1030 	str.w	r1, [sl, #48]	; 0x30
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800c4b0:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
  obqp->bwrptr    = bp;
 800c4b4:	e9ca 2215 	strd	r2, r2, [sl, #84]	; 0x54
  obqp->buffers   = bp;
 800c4b8:	f8ca 2068 	str.w	r2, [sl, #104]	; 0x68
  tqp->prev = (thread_t *)tqp;
 800c4bc:	e9ca 6611 	strd	r6, r6, [sl, #68]	; 0x44
  ibqp->bsize     = size + sizeof (size_t);
 800c4c0:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
  obqp->bsize     = size + sizeof (size_t);
 800c4c4:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
  ibqp->bn        = n;
 800c4c8:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
  obqp->bcounter  = n;
 800c4cc:	f8ca 3050 	str.w	r3, [sl, #80]	; 0x50
  obqp->bn        = n;
 800c4d0:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 800c4d4:	f388 8811 	msr	BASEPRI, r8
  sdup->config = config;
 800c4d8:	4a26      	ldr	r2, [pc, #152]	; (800c574 <main+0x3b4>)
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 800c4da:	f8c5 a02c 	str.w	sl, [r5, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1U] = sdup;
 800c4de:	f8c5 a048 	str.w	sl, [r5, #72]	; 0x48
    usbp->in_params[config->int_in - 1U]  = sdup;
 800c4e2:	f8c5 a030 	str.w	sl, [r5, #48]	; 0x30
  sdup->state = SDU_READY;
 800c4e6:	f88a 3008 	strb.w	r3, [sl, #8]
  sdup->config = config;
 800c4ea:	f8ca 248c 	str.w	r2, [sl, #1164]	; 0x48c
 800c4ee:	f384 8811 	msr	BASEPRI, r4
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 800c4f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c4f6:	4b20      	ldr	r3, [pc, #128]	; (800c578 <main+0x3b8>)
  chThdSleepMilliseconds(1500);
 800c4f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
  usbDisconnectBus(serusbcfg.usbp);
 800c4fc:	611a      	str	r2, [r3, #16]
  chThdSleepMilliseconds(1500);
 800c4fe:	f7fc f9df 	bl	80088c0 <chThdSleep>
 800c502:	f388 8811 	msr	BASEPRI, r8
  if (usbp->state == USB_STOP) {
 800c506:	7828      	ldrb	r0, [r5, #0]
  usbp->config = config;
 800c508:	4b1c      	ldr	r3, [pc, #112]	; (800c57c <main+0x3bc>)
 800c50a:	2801      	cmp	r0, #1
    usbp->epc[i] = NULL;
 800c50c:	e9c5 4403 	strd	r4, r4, [r5, #12]
 800c510:	e9c5 4405 	strd	r4, r4, [r5, #20]
 800c514:	e9c5 4407 	strd	r4, r4, [r5, #28]
 800c518:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  usbp->config = config;
 800c51c:	606b      	str	r3, [r5, #4]
 800c51e:	e03d      	b.n	800c59c <main+0x3dc>
 800c520:	40021000 	.word	0x40021000
 800c524:	40007000 	.word	0x40007000
 800c528:	e000e100 	.word	0xe000e100
 800c52c:	20001db0 	.word	0x20001db0
 800c530:	40010800 	.word	0x40010800
 800c534:	888884b8 	.word	0x888884b8
 800c538:	40011000 	.word	0x40011000
 800c53c:	20001d28 	.word	0x20001d28
 800c540:	88888844 	.word	0x88888844
 800c544:	20001eb0 	.word	0x20001eb0
 800c548:	080055b1 	.word	0x080055b1
 800c54c:	20002040 	.word	0x20002040
 800c550:	20001f24 	.word	0x20001f24
 800c554:	0800e600 	.word	0x0800e600
 800c558:	05fa0300 	.word	0x05fa0300
 800c55c:	080066d1 	.word	0x080066d1
 800c560:	e000edf0 	.word	0xe000edf0
 800c564:	e0001000 	.word	0xe0001000
 800c568:	0800e98c 	.word	0x0800e98c
 800c56c:	08010ca8 	.word	0x08010ca8
 800c570:	08006591 	.word	0x08006591
 800c574:	08010058 	.word	0x08010058
 800c578:	40010c00 	.word	0x40010c00
 800c57c:	08010ba4 	.word	0x08010ba4
 800c580:	e0042000 	.word	0xe0042000
 800c584:	20002048 	.word	0x20002048
 800c588:	200029e0 	.word	0x200029e0
 800c58c:	20005000 	.word	0x20005000
 800c590:	e000ed00 	.word	0xe000ed00
 800c594:	20001898 	.word	0x20001898
 800c598:	08006561 	.word	0x08006561
 800c59c:	d029      	beq.n	800c5f2 <main+0x432>
  usbp->state = USB_READY;
 800c59e:	2202      	movs	r2, #2
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	702a      	strb	r2, [r5, #0]
 800c5a4:	f383 8811 	msr	BASEPRI, r3
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 800c5a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c5ac:	4a20      	ldr	r2, [pc, #128]	; (800c630 <main+0x470>)
 800c5ae:	4c21      	ldr	r4, [pc, #132]	; (800c634 <main+0x474>)
 800c5b0:	6151      	str	r1, [r2, #20]
  shellInit();

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800c5b2:	4821      	ldr	r0, [pc, #132]	; (800c638 <main+0x478>)
 800c5b4:	4a21      	ldr	r2, [pc, #132]	; (800c63c <main+0x47c>)
 800c5b6:	2180      	movs	r1, #128	; 0x80
 800c5b8:	6024      	str	r4, [r4, #0]
 800c5ba:	4e21      	ldr	r6, [pc, #132]	; (800c640 <main+0x480>)
 800c5bc:	f7fb fcd8 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800c5c0:	4d20      	ldr	r5, [pc, #128]	; (800c644 <main+0x484>)
  /*
   * Normal main() thread activity, spawning shells.
   */
  while (true) {
    if (SDU1.config->usbp->state == USB_ACTIVE) {
      thread_t *shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
 800c5c2:	4c21      	ldr	r4, [pc, #132]	; (800c648 <main+0x488>)
 800c5c4:	e003      	b.n	800c5ce <main+0x40e>
                                              "shell", NORMALPRIO + 1,
                                              shellThread, (void *)&shell_cfg1);
      chThdWait(shelltp);               /* Waiting termination.             */
    }
    chThdSleepMilliseconds(1000);
 800c5c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c5ca:	f7fc f979 	bl	80088c0 <chThdSleep>
    if (SDU1.config->usbp->state == USB_ACTIVE) {
 800c5ce:	f8da 348c 	ldr.w	r3, [sl, #1164]	; 0x48c
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	2b04      	cmp	r3, #4
 800c5d8:	d1f5      	bne.n	800c5c6 <main+0x406>
      thread_t *shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
 800c5da:	2381      	movs	r3, #129	; 0x81
 800c5dc:	4622      	mov	r2, r4
 800c5de:	f640 01c8 	movw	r1, #2248	; 0x8c8
 800c5e2:	e9cd 5600 	strd	r5, r6, [sp]
 800c5e6:	2000      	movs	r0, #0
 800c5e8:	f7fe fa62 	bl	800aab0 <chThdCreateFromHeap>
      chThdWait(shelltp);               /* Waiting termination.             */
 800c5ec:	f7ff fdc8 	bl	800c180 <chThdWait>
 800c5f0:	e7e9      	b.n	800c5c6 <main+0x406>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800c5f2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c5f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800c5fa:	f04f 0cd0 	mov.w	ip, #208	; 0xd0
 800c5fe:	26e0      	movs	r6, #224	; 0xe0
      rccEnableUSB(true);
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c606:	61fb      	str	r3, [r7, #28]
      STM32_USB->CNTR = CNTR_FRES;
 800c608:	4b10      	ldr	r3, [pc, #64]	; (800c64c <main+0x48c>)
 800c60a:	6418      	str	r0, [r3, #64]	; 0x40
 800c60c:	f889 c313 	strb.w	ip, [r9, #787]	; 0x313
    usb_lld_reset(usbp);
 800c610:	480f      	ldr	r0, [pc, #60]	; (800c650 <main+0x490>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800c612:	f8c9 1180 	str.w	r1, [r9, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800c616:	f8c9 1000 	str.w	r1, [r9]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800c61a:	f889 6314 	strb.w	r6, [r9, #788]	; 0x314
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800c61e:	f8c9 2180 	str.w	r2, [r9, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800c622:	f8c9 2000 	str.w	r2, [r9]
      STM32_USB->CNTR = 0;
 800c626:	641c      	str	r4, [r3, #64]	; 0x40
    usb_lld_reset(usbp);
 800c628:	f7f9 fbe2 	bl	8005df0 <usb_lld_reset>
 800c62c:	e7b7      	b.n	800c59e <main+0x3de>
 800c62e:	bf00      	nop
 800c630:	40010c00 	.word	0x40010c00
 800c634:	20002120 	.word	0x20002120
 800c638:	20002898 	.word	0x20002898
 800c63c:	080088e1 	.word	0x080088e1
 800c640:	080100d0 	.word	0x080100d0
 800c644:	080091f1 	.word	0x080091f1
 800c648:	0800e9a4 	.word	0x0800e9a4
 800c64c:	40005c00 	.word	0x40005c00
 800c650:	20001d28 	.word	0x20001d28
	...

0800c660 <cmd_test>:
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 800c660:	b530      	push	{r4, r5, lr}
  thread_t *tp;
  tfunc_t tfp;

  (void)argv;
  if (argc != 1) {
 800c662:	2901      	cmp	r1, #1
static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 800c664:	b083      	sub	sp, #12
 800c666:	4604      	mov	r4, r0
  if (argc != 1) {
 800c668:	d11c      	bne.n	800c6a4 <cmd_test+0x44>
    shellUsage(chp, "test rt|oslib");
    return;
  }
  if (!strcmp(argv[0], "rt")) {
 800c66a:	6815      	ldr	r5, [r2, #0]
 800c66c:	4916      	ldr	r1, [pc, #88]	; (800c6c8 <cmd_test+0x68>)
 800c66e:	4628      	mov	r0, r5
 800c670:	f7f8 fe70 	bl	8005354 <strcmp>
 800c674:	b1f0      	cbz	r0, 800c6b4 <cmd_test+0x54>
    tfp = test_rt;
  }
  else if (!strcmp(argv[0], "oslib")) {
 800c676:	4628      	mov	r0, r5
 800c678:	4914      	ldr	r1, [pc, #80]	; (800c6cc <cmd_test+0x6c>)
 800c67a:	f7f8 fe6b 	bl	8005354 <strcmp>
 800c67e:	b988      	cbnz	r0, 800c6a4 <cmd_test+0x44>
    tfp = test_oslib;
 800c680:	4813      	ldr	r0, [pc, #76]	; (800c6d0 <cmd_test+0x70>)
  return ch.rlist.current;
 800c682:	4b14      	ldr	r3, [pc, #80]	; (800c6d4 <cmd_test+0x74>)
  }
  else {
    shellUsage(chp, "test rt|oslib");
    return;
  }
  tp = chThdCreateFromHeap(NULL, SHELL_CMD_TEST_WA_SIZE,
 800c684:	4a14      	ldr	r2, [pc, #80]	; (800c6d8 <cmd_test+0x78>)
  return chThdGetSelfX()->prio;
 800c686:	699b      	ldr	r3, [r3, #24]
 800c688:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	e9cd 0400 	strd	r0, r4, [sp]
 800c692:	2000      	movs	r0, #0
 800c694:	f7fe fa0c 	bl	800aab0 <chThdCreateFromHeap>
                           "test", chThdGetPriorityX(),
                           tfp, chp);
  if (tp == NULL) {
 800c698:	b170      	cbz	r0, 800c6b8 <cmd_test+0x58>
    chprintf(chp, "out of memory"SHELL_NEWLINE_STR);
    return;
  }
  chThdWait(tp);
}
 800c69a:	b003      	add	sp, #12
 800c69c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  chThdWait(tp);
 800c6a0:	f7ff bd6e 	b.w	800c180 <chThdWait>
    shellUsage(chp, "test rt|oslib");
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	4a0d      	ldr	r2, [pc, #52]	; (800c6dc <cmd_test+0x7c>)
 800c6a8:	490d      	ldr	r1, [pc, #52]	; (800c6e0 <cmd_test+0x80>)
}
 800c6aa:	b003      	add	sp, #12
 800c6ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    shellUsage(chp, "test rt|oslib");
 800c6b0:	f7fa bdde 	b.w	8007270 <chprintf>
    tfp = test_rt;
 800c6b4:	480b      	ldr	r0, [pc, #44]	; (800c6e4 <cmd_test+0x84>)
 800c6b6:	e7e4      	b.n	800c682 <cmd_test+0x22>
    chprintf(chp, "out of memory"SHELL_NEWLINE_STR);
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	490b      	ldr	r1, [pc, #44]	; (800c6e8 <cmd_test+0x88>)
}
 800c6bc:	b003      	add	sp, #12
 800c6be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    chprintf(chp, "out of memory"SHELL_NEWLINE_STR);
 800c6c2:	f7fa bdd5 	b.w	8007270 <chprintf>
 800c6c6:	bf00      	nop
 800c6c8:	0800e864 	.word	0x0800e864
 800c6cc:	0800e85c 	.word	0x0800e85c
 800c6d0:	08008e21 	.word	0x08008e21
 800c6d4:	20001eb0 	.word	0x20001eb0
 800c6d8:	0801060c 	.word	0x0801060c
 800c6dc:	0800e854 	.word	0x0800e854
 800c6e0:	0800e840 	.word	0x0800e840
 800c6e4:	08008e11 	.word	0x08008e11
 800c6e8:	0800e868 	.word	0x0800e868
 800c6ec:	00000000 	.word	0x00000000

0800c6f0 <rt_test_010_005_execute>:
  test_set_step(1);
 800c6f0:	2201      	movs	r2, #1
  return ch.rlist.current;
 800c6f2:	4b1a      	ldr	r3, [pc, #104]	; (800c75c <rt_test_010_005_execute+0x6c>)
static void rt_test_010_005_execute(void) {
 800c6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return chThdGetSelfX()->prio;
 800c6f8:	699b      	ldr	r3, [r3, #24]
  test_set_step(1);
 800c6fa:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800c768 <rt_test_010_005_execute+0x78>
  tprio_t prio = chThdGetPriorityX() - 1;
 800c6fe:	689f      	ldr	r7, [r3, #8]
  test_set_step(1);
 800c700:	f8ca 2000 	str.w	r2, [sl]
    start = test_wait_tick();
 800c704:	f7fc f97c 	bl	8008a00 <test_wait_tick>
    n = 0;
 800c708:	2400      	movs	r4, #0
    start = test_wait_tick();
 800c70a:	4606      	mov	r6, r0
  return systime + (systime_t)interval;
 800c70c:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 800c710:	b2ad      	uxth	r5, r5
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800c712:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800c76c <rt_test_010_005_execute+0x7c>
 800c716:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800c770 <rt_test_010_005_execute+0x80>
  tprio_t prio = chThdGetPriorityX() - 1;
 800c71a:	3f01      	subs	r7, #1
 800c71c:	1a2d      	subs	r5, r5, r0
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800c71e:	2300      	movs	r3, #0
 800c720:	464a      	mov	r2, r9
 800c722:	4639      	mov	r1, r7
 800c724:	4640      	mov	r0, r8
 800c726:	f7fb fc23 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800c72a:	f7ff fd29 	bl	800c180 <chThdWait>
 800c72e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 800c734:	3401      	adds	r4, #1
  return (bool)((time - start) < (end - start));
 800c736:	b29b      	uxth	r3, r3
 800c738:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 800c73a:	42ab      	cmp	r3, r5
 800c73c:	dbef      	blt.n	800c71e <rt_test_010_005_execute+0x2e>
  test_set_step(2);
 800c73e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 800c740:	4807      	ldr	r0, [pc, #28]	; (800c760 <rt_test_010_005_execute+0x70>)
  test_set_step(2);
 800c742:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 800c746:	f7f9 f9fb 	bl	8005b40 <test_print>
    test_printn(n);
 800c74a:	4620      	mov	r0, r4
 800c74c:	f7f9 f988 	bl	8005a60 <test_printn>
}
 800c750:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" threads/S");
 800c754:	4803      	ldr	r0, [pc, #12]	; (800c764 <rt_test_010_005_execute+0x74>)
 800c756:	f7f9 b9d3 	b.w	8005b00 <test_println>
 800c75a:	bf00      	nop
 800c75c:	20001eb0 	.word	0x20001eb0
 800c760:	0800fdf0 	.word	0x0800fdf0
 800c764:	0800fd94 	.word	0x0800fd94
 800c768:	2000283c 	.word	0x2000283c
 800c76c:	08009c51 	.word	0x08009c51
 800c770:	20002128 	.word	0x20002128
	...

0800c780 <test_wait_threads>:
void test_wait_threads(void) {
 800c780:	b570      	push	{r4, r5, r6, lr}
      threads[i] = NULL;
 800c782:	2600      	movs	r6, #0
 800c784:	4c06      	ldr	r4, [pc, #24]	; (800c7a0 <test_wait_threads+0x20>)
 800c786:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 800c78a:	f854 0b04 	ldr.w	r0, [r4], #4
 800c78e:	b118      	cbz	r0, 800c798 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 800c790:	f7ff fcf6 	bl	800c180 <chThdWait>
      threads[i] = NULL;
 800c794:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800c798:	42ac      	cmp	r4, r5
 800c79a:	d1f6      	bne.n	800c78a <test_wait_threads+0xa>
}
 800c79c:	bd70      	pop	{r4, r5, r6, pc}
 800c79e:	bf00      	nop
 800c7a0:	20002854 	.word	0x20002854
	...

0800c7b0 <rt_test_010_008_execute>:
  test_set_step(1);
 800c7b0:	2201      	movs	r2, #1
    n = 0;
 800c7b2:	2300      	movs	r3, #0
static void rt_test_010_008_execute(void) {
 800c7b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 800c7b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c88c <rt_test_010_008_execute+0xdc>
 800c7bc:	b083      	sub	sp, #12
  test_set_step(1);
 800c7be:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800c890 <rt_test_010_008_execute+0xe0>
    n = 0;
 800c7c2:	ac02      	add	r4, sp, #8
 800c7c4:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_set_step(1);
 800c7c8:	f8c9 2000 	str.w	r2, [r9]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800c7cc:	f7fc f918 	bl	8008a00 <test_wait_tick>
  return chThdGetSelfX()->prio;
 800c7d0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800c7d4:	4f28      	ldr	r7, [pc, #160]	; (800c878 <rt_test_010_008_execute+0xc8>)
 800c7d6:	4e29      	ldr	r6, [pc, #164]	; (800c87c <rt_test_010_008_execute+0xcc>)
 800c7d8:	6899      	ldr	r1, [r3, #8]
 800c7da:	463a      	mov	r2, r7
 800c7dc:	4623      	mov	r3, r4
 800c7de:	3901      	subs	r1, #1
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	f7fb fbc5 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800c7e6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800c7ea:	4d25      	ldr	r5, [pc, #148]	; (800c880 <rt_test_010_008_execute+0xd0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800c7ec:	6899      	ldr	r1, [r3, #8]
 800c7ee:	463a      	mov	r2, r7
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800c7f0:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800c7f2:	4623      	mov	r3, r4
 800c7f4:	3901      	subs	r1, #1
 800c7f6:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 800c7fa:	f7fb fbb9 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800c7fe:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800c802:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800c804:	6899      	ldr	r1, [r3, #8]
 800c806:	463a      	mov	r2, r7
 800c808:	4623      	mov	r3, r4
 800c80a:	3901      	subs	r1, #1
 800c80c:	f506 7024 	add.w	r0, r6, #656	; 0x290
 800c810:	f7fb fbae 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800c814:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800c818:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800c81a:	6899      	ldr	r1, [r3, #8]
 800c81c:	463a      	mov	r2, r7
 800c81e:	4623      	mov	r3, r4
 800c820:	3901      	subs	r1, #1
 800c822:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 800c826:	f7fb fba3 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800c82a:	f8d8 3018 	ldr.w	r3, [r8, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800c82e:	463a      	mov	r2, r7
 800c830:	6899      	ldr	r1, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800c832:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800c834:	3901      	subs	r1, #1
 800c836:	4623      	mov	r3, r4
 800c838:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 800c83c:	f7fb fb98 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(2);
 800c840:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800c842:	6128      	str	r0, [r5, #16]
    chThdSleepSeconds(1);
 800c844:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  test_set_step(2);
 800c848:	f8c9 3000 	str.w	r3, [r9]
    chThdSleepSeconds(1);
 800c84c:	f7fc f838 	bl	80088c0 <chThdSleep>
    test_terminate_threads();
 800c850:	f7f9 f8b6 	bl	80059c0 <test_terminate_threads>
    test_wait_threads();
 800c854:	f7ff ff94 	bl	800c780 <test_wait_threads>
  test_set_step(3);
 800c858:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800c85a:	480a      	ldr	r0, [pc, #40]	; (800c884 <rt_test_010_008_execute+0xd4>)
  test_set_step(3);
 800c85c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 800c860:	f7f9 f96e 	bl	8005b40 <test_print>
    test_printn(n);
 800c864:	9801      	ldr	r0, [sp, #4]
 800c866:	f7f9 f8fb 	bl	8005a60 <test_printn>
    test_println(" ctxswc/S");
 800c86a:	4807      	ldr	r0, [pc, #28]	; (800c888 <rt_test_010_008_execute+0xd8>)
 800c86c:	f7f9 f948 	bl	8005b00 <test_println>
}
 800c870:	b003      	add	sp, #12
 800c872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c876:	bf00      	nop
 800c878:	08007ee1 	.word	0x08007ee1
 800c87c:	20002128 	.word	0x20002128
 800c880:	20002854 	.word	0x20002854
 800c884:	0800fdf0 	.word	0x0800fdf0
 800c888:	0800fdd4 	.word	0x0800fdd4
 800c88c:	20001eb0 	.word	0x20001eb0
 800c890:	2000283c 	.word	0x2000283c
	...

0800c8a0 <rt_test_010_004_execute>:
static void rt_test_010_004_execute(void) {
 800c8a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 800c8a4:	2401      	movs	r4, #1
  return ch.rlist.current;
 800c8a6:	4b2b      	ldr	r3, [pc, #172]	; (800c954 <rt_test_010_004_execute+0xb4>)
 800c8a8:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 800c96c <rt_test_010_004_execute+0xcc>
  return chThdGetSelfX()->prio;
 800c8ac:	699a      	ldr	r2, [r3, #24]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800c8ae:	482a      	ldr	r0, [pc, #168]	; (800c958 <rt_test_010_004_execute+0xb8>)
 800c8b0:	6891      	ldr	r1, [r2, #8]
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	4421      	add	r1, r4
 800c8b6:	4a29      	ldr	r2, [pc, #164]	; (800c95c <rt_test_010_004_execute+0xbc>)
  test_set_step(1);
 800c8b8:	f8cb 4000 	str.w	r4, [fp]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800c8bc:	f7fb fb58 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(2);
 800c8c0:	2202      	movs	r2, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800c8c2:	4b27      	ldr	r3, [pc, #156]	; (800c960 <rt_test_010_004_execute+0xc0>)
 800c8c4:	4604      	mov	r4, r0
    n = 0;
 800c8c6:	2500      	movs	r5, #0
  test_set_step(2);
 800c8c8:	f8cb 2000 	str.w	r2, [fp]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800c8cc:	6018      	str	r0, [r3, #0]
    start = test_wait_tick();
 800c8ce:	f7fc f897 	bl	8008a00 <test_wait_tick>
      chSchWakeupS(tp, MSG_OK);
 800c8d2:	46a8      	mov	r8, r5
    start = test_wait_tick();
 800c8d4:	4607      	mov	r7, r0
 800c8d6:	f04f 0920 	mov.w	r9, #32
 800c8da:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 800c8de:	f500 66fa 	add.w	r6, r0, #2000	; 0x7d0
 800c8e2:	b2b6      	uxth	r6, r6
 800c8e4:	1a36      	subs	r6, r6, r0
 800c8e6:	f389 8811 	msr	BASEPRI, r9
      chSchWakeupS(tp, MSG_OK);
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f7fb fb0f 	bl	8007f10 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	2100      	movs	r1, #0
 800c8f6:	f7fb fb0b 	bl	8007f10 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	f7fb fb07 	bl	8007f10 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800c902:	4620      	mov	r0, r4
 800c904:	2100      	movs	r1, #0
 800c906:	f7fb fb03 	bl	8007f10 <chSchWakeupS>
 800c90a:	f388 8811 	msr	BASEPRI, r8
 800c90e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
      n += 4;
 800c912:	3504      	adds	r5, #4
  return (bool)((time - start) < (end - start));
 800c914:	b29b      	uxth	r3, r3
 800c916:	1bdb      	subs	r3, r3, r7
    } while (chVTIsSystemTimeWithinX(start, end));
 800c918:	42b3      	cmp	r3, r6
 800c91a:	dbe4      	blt.n	800c8e6 <rt_test_010_004_execute+0x46>
  test_set_step(3);
 800c91c:	2303      	movs	r3, #3
 800c91e:	f8cb 3000 	str.w	r3, [fp]
 800c922:	f389 8811 	msr	BASEPRI, r9
    chSchWakeupS(tp, MSG_TIMEOUT);
 800c926:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c92a:	4620      	mov	r0, r4
 800c92c:	f7fb faf0 	bl	8007f10 <chSchWakeupS>
 800c930:	f388 8811 	msr	BASEPRI, r8
    test_wait_threads();
 800c934:	f7ff ff24 	bl	800c780 <test_wait_threads>
  test_set_step(4);
 800c938:	2304      	movs	r3, #4
    test_print("--- Score : ");
 800c93a:	480a      	ldr	r0, [pc, #40]	; (800c964 <rt_test_010_004_execute+0xc4>)
  test_set_step(4);
 800c93c:	f8cb 3000 	str.w	r3, [fp]
    test_print("--- Score : ");
 800c940:	f7f9 f8fe 	bl	8005b40 <test_print>
    test_printn(n * 2);
 800c944:	0068      	lsls	r0, r5, #1
 800c946:	f7f9 f88b 	bl	8005a60 <test_printn>
}
 800c94a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" ctxswc/S");
 800c94e:	4806      	ldr	r0, [pc, #24]	; (800c968 <rt_test_010_004_execute+0xc8>)
 800c950:	f7f9 b8d6 	b.w	8005b00 <test_println>
 800c954:	20001eb0 	.word	0x20001eb0
 800c958:	20002128 	.word	0x20002128
 800c95c:	080081b1 	.word	0x080081b1
 800c960:	20002854 	.word	0x20002854
 800c964:	0800fdf0 	.word	0x0800fdf0
 800c968:	0800fdd4 	.word	0x0800fdd4
 800c96c:	2000283c 	.word	0x2000283c

0800c970 <rt_test_010_003_execute>:
static void rt_test_010_003_execute(void) {
 800c970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800c974:	2401      	movs	r4, #1
  return ch.rlist.current;
 800c976:	4e2b      	ldr	r6, [pc, #172]	; (800ca24 <rt_test_010_003_execute+0xb4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800c978:	4d2b      	ldr	r5, [pc, #172]	; (800ca28 <rt_test_010_003_execute+0xb8>)
  return chThdGetSelfX()->prio;
 800c97a:	69b3      	ldr	r3, [r6, #24]
  test_set_step(1);
 800c97c:	4f2b      	ldr	r7, [pc, #172]	; (800ca2c <rt_test_010_003_execute+0xbc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800c97e:	6899      	ldr	r1, [r3, #8]
 800c980:	4628      	mov	r0, r5
 800c982:	4421      	add	r1, r4
 800c984:	2300      	movs	r3, #0
 800c986:	4a2a      	ldr	r2, [pc, #168]	; (800ca30 <rt_test_010_003_execute+0xc0>)
  test_set_step(1);
 800c988:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800c98a:	f7fb faf1 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(2);
 800c98e:	f04f 0c02 	mov.w	ip, #2
 800c992:	69b3      	ldr	r3, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800c994:	4c27      	ldr	r4, [pc, #156]	; (800ca34 <rt_test_010_003_execute+0xc4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 800c996:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800ca44 <rt_test_010_003_execute+0xd4>
 800c99a:	6899      	ldr	r1, [r3, #8]
 800c99c:	4642      	mov	r2, r8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800c99e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 800c9a0:	3902      	subs	r1, #2
 800c9a2:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 800c9a6:	2300      	movs	r3, #0
  test_set_step(2);
 800c9a8:	f8c7 c000 	str.w	ip, [r7]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 800c9ac:	f7fb fae0 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800c9b0:	69b3      	ldr	r3, [r6, #24]
 800c9b2:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 800c9b4:	6899      	ldr	r1, [r3, #8]
 800c9b6:	4642      	mov	r2, r8
 800c9b8:	3903      	subs	r1, #3
 800c9ba:	f505 7024 	add.w	r0, r5, #656	; 0x290
 800c9be:	2300      	movs	r3, #0
 800c9c0:	f7fb fad6 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800c9c4:	69b3      	ldr	r3, [r6, #24]
 800c9c6:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800c9c8:	6899      	ldr	r1, [r3, #8]
 800c9ca:	4642      	mov	r2, r8
 800c9cc:	3904      	subs	r1, #4
 800c9ce:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	f7fb facc 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800c9d8:	69b3      	ldr	r3, [r6, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 800c9da:	4642      	mov	r2, r8
 800c9dc:	6899      	ldr	r1, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800c9de:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 800c9e0:	3905      	subs	r1, #5
 800c9e2:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	f7fb fac2 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(3);
 800c9ec:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 800c9ee:	6120      	str	r0, [r4, #16]
    n = msg_loop_test(threads[0]);
 800c9f0:	6820      	ldr	r0, [r4, #0]
  test_set_step(3);
 800c9f2:	603b      	str	r3, [r7, #0]
    n = msg_loop_test(threads[0]);
 800c9f4:	f7fc fa6c 	bl	8008ed0 <msg_loop_test>
 800c9f8:	4604      	mov	r4, r0
    test_wait_threads();
 800c9fa:	f7ff fec1 	bl	800c780 <test_wait_threads>
  test_set_step(4);
 800c9fe:	2304      	movs	r3, #4
    test_print("--- Score : ");
 800ca00:	480d      	ldr	r0, [pc, #52]	; (800ca38 <rt_test_010_003_execute+0xc8>)
  test_set_step(4);
 800ca02:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 800ca04:	f7f9 f89c 	bl	8005b40 <test_print>
    test_printn(n);
 800ca08:	4620      	mov	r0, r4
 800ca0a:	f7f9 f829 	bl	8005a60 <test_printn>
    test_print(" msgs/S, ");
 800ca0e:	480b      	ldr	r0, [pc, #44]	; (800ca3c <rt_test_010_003_execute+0xcc>)
 800ca10:	f7f9 f896 	bl	8005b40 <test_print>
    test_printn(n << 1);
 800ca14:	0060      	lsls	r0, r4, #1
 800ca16:	f7f9 f823 	bl	8005a60 <test_printn>
}
 800ca1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 800ca1e:	4808      	ldr	r0, [pc, #32]	; (800ca40 <rt_test_010_003_execute+0xd0>)
 800ca20:	f7f9 b86e 	b.w	8005b00 <test_println>
 800ca24:	20001eb0 	.word	0x20001eb0
 800ca28:	20002128 	.word	0x20002128
 800ca2c:	2000283c 	.word	0x2000283c
 800ca30:	08008e71 	.word	0x08008e71
 800ca34:	20002854 	.word	0x20002854
 800ca38:	0800fdf0 	.word	0x0800fdf0
 800ca3c:	0800fd58 	.word	0x0800fd58
 800ca40:	0800fdd4 	.word	0x0800fdd4
 800ca44:	08009c51 	.word	0x08009c51
	...

0800ca50 <rt_test_010_002_execute>:
static void rt_test_010_002_execute(void) {
 800ca50:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 800ca52:	2501      	movs	r5, #1
  return ch.rlist.current;
 800ca54:	4b13      	ldr	r3, [pc, #76]	; (800caa4 <rt_test_010_002_execute+0x54>)
 800ca56:	4c14      	ldr	r4, [pc, #80]	; (800caa8 <rt_test_010_002_execute+0x58>)
  return chThdGetSelfX()->prio;
 800ca58:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800ca5a:	4814      	ldr	r0, [pc, #80]	; (800caac <rt_test_010_002_execute+0x5c>)
 800ca5c:	6891      	ldr	r1, [r2, #8]
 800ca5e:	2300      	movs	r3, #0
 800ca60:	4429      	add	r1, r5
 800ca62:	4a13      	ldr	r2, [pc, #76]	; (800cab0 <rt_test_010_002_execute+0x60>)
  test_set_step(1);
 800ca64:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800ca66:	f7fb fa83 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(2);
 800ca6a:	2202      	movs	r2, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800ca6c:	4b11      	ldr	r3, [pc, #68]	; (800cab4 <rt_test_010_002_execute+0x64>)
  test_set_step(2);
 800ca6e:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800ca70:	6018      	str	r0, [r3, #0]
    n = msg_loop_test(threads[0]);
 800ca72:	f7fc fa2d 	bl	8008ed0 <msg_loop_test>
 800ca76:	4605      	mov	r5, r0
    test_wait_threads();
 800ca78:	f7ff fe82 	bl	800c780 <test_wait_threads>
  test_set_step(3);
 800ca7c:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800ca7e:	480e      	ldr	r0, [pc, #56]	; (800cab8 <rt_test_010_002_execute+0x68>)
  test_set_step(3);
 800ca80:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
 800ca82:	f7f9 f85d 	bl	8005b40 <test_print>
    test_printn(n);
 800ca86:	4628      	mov	r0, r5
 800ca88:	f7f8 ffea 	bl	8005a60 <test_printn>
    test_print(" msgs/S, ");
 800ca8c:	480b      	ldr	r0, [pc, #44]	; (800cabc <rt_test_010_002_execute+0x6c>)
 800ca8e:	f7f9 f857 	bl	8005b40 <test_print>
    test_printn(n << 1);
 800ca92:	0068      	lsls	r0, r5, #1
 800ca94:	f7f8 ffe4 	bl	8005a60 <test_printn>
}
 800ca98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 800ca9c:	4808      	ldr	r0, [pc, #32]	; (800cac0 <rt_test_010_002_execute+0x70>)
 800ca9e:	f7f9 b82f 	b.w	8005b00 <test_println>
 800caa2:	bf00      	nop
 800caa4:	20001eb0 	.word	0x20001eb0
 800caa8:	2000283c 	.word	0x2000283c
 800caac:	20002128 	.word	0x20002128
 800cab0:	08008e71 	.word	0x08008e71
 800cab4:	20002854 	.word	0x20002854
 800cab8:	0800fdf0 	.word	0x0800fdf0
 800cabc:	0800fd58 	.word	0x0800fd58
 800cac0:	0800fdd4 	.word	0x0800fdd4
	...

0800cad0 <rt_test_010_001_execute>:
static void rt_test_010_001_execute(void) {
 800cad0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 800cad2:	2501      	movs	r5, #1
  return ch.rlist.current;
 800cad4:	4b13      	ldr	r3, [pc, #76]	; (800cb24 <rt_test_010_001_execute+0x54>)
 800cad6:	4c14      	ldr	r4, [pc, #80]	; (800cb28 <rt_test_010_001_execute+0x58>)
  return chThdGetSelfX()->prio;
 800cad8:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800cada:	4814      	ldr	r0, [pc, #80]	; (800cb2c <rt_test_010_001_execute+0x5c>)
 800cadc:	6891      	ldr	r1, [r2, #8]
 800cade:	2300      	movs	r3, #0
 800cae0:	3901      	subs	r1, #1
 800cae2:	4a13      	ldr	r2, [pc, #76]	; (800cb30 <rt_test_010_001_execute+0x60>)
  test_set_step(1);
 800cae4:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800cae6:	f7fb fa43 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(2);
 800caea:	2202      	movs	r2, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800caec:	4b11      	ldr	r3, [pc, #68]	; (800cb34 <rt_test_010_001_execute+0x64>)
  test_set_step(2);
 800caee:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800caf0:	6018      	str	r0, [r3, #0]
    n = msg_loop_test(threads[0]);
 800caf2:	f7fc f9ed 	bl	8008ed0 <msg_loop_test>
 800caf6:	4605      	mov	r5, r0
    test_wait_threads();
 800caf8:	f7ff fe42 	bl	800c780 <test_wait_threads>
  test_set_step(3);
 800cafc:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800cafe:	480e      	ldr	r0, [pc, #56]	; (800cb38 <rt_test_010_001_execute+0x68>)
  test_set_step(3);
 800cb00:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
 800cb02:	f7f9 f81d 	bl	8005b40 <test_print>
    test_printn(n);
 800cb06:	4628      	mov	r0, r5
 800cb08:	f7f8 ffaa 	bl	8005a60 <test_printn>
    test_print(" msgs/S, ");
 800cb0c:	480b      	ldr	r0, [pc, #44]	; (800cb3c <rt_test_010_001_execute+0x6c>)
 800cb0e:	f7f9 f817 	bl	8005b40 <test_print>
    test_printn(n << 1);
 800cb12:	0068      	lsls	r0, r5, #1
 800cb14:	f7f8 ffa4 	bl	8005a60 <test_printn>
}
 800cb18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 800cb1c:	4808      	ldr	r0, [pc, #32]	; (800cb40 <rt_test_010_001_execute+0x70>)
 800cb1e:	f7f8 bfef 	b.w	8005b00 <test_println>
 800cb22:	bf00      	nop
 800cb24:	20001eb0 	.word	0x20001eb0
 800cb28:	2000283c 	.word	0x2000283c
 800cb2c:	20002128 	.word	0x20002128
 800cb30:	08008e71 	.word	0x08008e71
 800cb34:	20002854 	.word	0x20002854
 800cb38:	0800fdf0 	.word	0x0800fdf0
 800cb3c:	0800fd58 	.word	0x0800fd58
 800cb40:	0800fdd4 	.word	0x0800fdd4
	...

0800cb50 <rt_test_009_002_execute>:
static void rt_test_009_002_execute(void) {
  unsigned i;
  tprio_t prio;

  /* [9.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 800cb50:	2001      	movs	r0, #1
static void rt_test_009_002_execute(void) {
 800cb52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb54:	2720      	movs	r7, #32
 800cb56:	2600      	movs	r6, #0
  test_set_step(1);
 800cb58:	4d3b      	ldr	r5, [pc, #236]	; (800cc48 <rt_test_009_002_execute+0xf8>)
 800cb5a:	4b3c      	ldr	r3, [pc, #240]	; (800cc4c <rt_test_009_002_execute+0xfc>)
 800cb5c:	4a3c      	ldr	r2, [pc, #240]	; (800cc50 <rt_test_009_002_execute+0x100>)
 800cb5e:	493d      	ldr	r1, [pc, #244]	; (800cc54 <rt_test_009_002_execute+0x104>)
 800cb60:	6028      	str	r0, [r5, #0]
 800cb62:	f103 040c 	add.w	r4, r3, #12
 800cb66:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 800cb6a:	6808      	ldr	r0, [r1, #0]
 800cb6c:	6010      	str	r0, [r2, #0]
  mp->next = php;
 800cb6e:	600a      	str	r2, [r1, #0]
 800cb70:	f386 8811 	msr	BASEPRI, r6
  {
    for (i = 0; i < 4; i++)
 800cb74:	429c      	cmp	r4, r3
 800cb76:	d002      	beq.n	800cb7e <rt_test_009_002_execute+0x2e>
 800cb78:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb7c:	e7f3      	b.n	800cb66 <rt_test_009_002_execute+0x16>
  {
    prio = chThdGetPriorityX();
  }

  /* [9.2.3] Creating the five threads.*/
  test_set_step(3);
 800cb7e:	2303      	movs	r3, #3
  return ch.rlist.current;
 800cb80:	4935      	ldr	r1, [pc, #212]	; (800cc58 <rt_test_009_002_execute+0x108>)
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 800cb82:	4a36      	ldr	r2, [pc, #216]	; (800cc5c <rt_test_009_002_execute+0x10c>)
  return chThdGetSelfX()->prio;
 800cb84:	6989      	ldr	r1, [r1, #24]
 800cb86:	4836      	ldr	r0, [pc, #216]	; (800cc60 <rt_test_009_002_execute+0x110>)
 800cb88:	688e      	ldr	r6, [r1, #8]
  test_set_step(3);
 800cb8a:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 800cb8c:	1e71      	subs	r1, r6, #1
 800cb8e:	f7fb fa4f 	bl	8008030 <chThdCreateFromMemoryPool.constprop.59>
 800cb92:	4c34      	ldr	r4, [pc, #208]	; (800cc64 <rt_test_009_002_execute+0x114>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 800cb94:	1eb1      	subs	r1, r6, #2
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 800cb96:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 800cb98:	4a33      	ldr	r2, [pc, #204]	; (800cc68 <rt_test_009_002_execute+0x118>)
 800cb9a:	4834      	ldr	r0, [pc, #208]	; (800cc6c <rt_test_009_002_execute+0x11c>)
 800cb9c:	f7fb fa48 	bl	8008030 <chThdCreateFromMemoryPool.constprop.59>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 800cba0:	1ef1      	subs	r1, r6, #3
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 800cba2:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 800cba4:	4a32      	ldr	r2, [pc, #200]	; (800cc70 <rt_test_009_002_execute+0x120>)
 800cba6:	4833      	ldr	r0, [pc, #204]	; (800cc74 <rt_test_009_002_execute+0x124>)
 800cba8:	f7fb fa42 	bl	8008030 <chThdCreateFromMemoryPool.constprop.59>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 800cbac:	1f31      	subs	r1, r6, #4
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 800cbae:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 800cbb0:	4a31      	ldr	r2, [pc, #196]	; (800cc78 <rt_test_009_002_execute+0x128>)
 800cbb2:	4832      	ldr	r0, [pc, #200]	; (800cc7c <rt_test_009_002_execute+0x12c>)
 800cbb4:	f7fb fa3c 	bl	8008030 <chThdCreateFromMemoryPool.constprop.59>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 800cbb8:	1f71      	subs	r1, r6, #5
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 800cbba:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 800cbbc:	4a30      	ldr	r2, [pc, #192]	; (800cc80 <rt_test_009_002_execute+0x130>)
 800cbbe:	4831      	ldr	r0, [pc, #196]	; (800cc84 <rt_test_009_002_execute+0x134>)
 800cbc0:	f7fb fa36 	bl	8008030 <chThdCreateFromMemoryPool.constprop.59>
  }

  /* [9.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
 800cbc4:	2304      	movs	r3, #4
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 800cbc6:	4606      	mov	r6, r0
  {
    test_assert((threads[0] != NULL) &&
 800cbc8:	6820      	ldr	r0, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 800cbca:	6126      	str	r6, [r4, #16]
  test_set_step(4);
 800cbcc:	602b      	str	r3, [r5, #0]
    test_assert((threads[0] != NULL) &&
 800cbce:	b138      	cbz	r0, 800cbe0 <rt_test_009_002_execute+0x90>
 800cbd0:	6860      	ldr	r0, [r4, #4]
 800cbd2:	b128      	cbz	r0, 800cbe0 <rt_test_009_002_execute+0x90>
 800cbd4:	68a0      	ldr	r0, [r4, #8]
 800cbd6:	b118      	cbz	r0, 800cbe0 <rt_test_009_002_execute+0x90>
 800cbd8:	68e0      	ldr	r0, [r4, #12]
 800cbda:	3000      	adds	r0, #0
 800cbdc:	bf18      	it	ne
 800cbde:	2001      	movne	r0, #1
 800cbe0:	4929      	ldr	r1, [pc, #164]	; (800cc88 <rt_test_009_002_execute+0x138>)
 800cbe2:	f7f8 fead 	bl	8005940 <_test_assert>
 800cbe6:	b100      	cbz	r0, 800cbea <rt_test_009_002_execute+0x9a>
  {
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
}
 800cbe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert(threads[4] == NULL,
 800cbea:	fab6 f086 	clz	r0, r6
 800cbee:	4927      	ldr	r1, [pc, #156]	; (800cc8c <rt_test_009_002_execute+0x13c>)
 800cbf0:	0940      	lsrs	r0, r0, #5
 800cbf2:	f7f8 fea5 	bl	8005940 <_test_assert>
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d1f6      	bne.n	800cbe8 <rt_test_009_002_execute+0x98>
  test_set_step(5);
 800cbfa:	2305      	movs	r3, #5
 800cbfc:	602b      	str	r3, [r5, #0]
    test_wait_threads();
 800cbfe:	f7ff fdbf 	bl	800c780 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 800cc02:	4923      	ldr	r1, [pc, #140]	; (800cc90 <rt_test_009_002_execute+0x140>)
 800cc04:	4823      	ldr	r0, [pc, #140]	; (800cc94 <rt_test_009_002_execute+0x144>)
 800cc06:	f7f8 ffb3 	bl	8005b70 <_test_assert_sequence>
 800cc0a:	2800      	cmp	r0, #0
 800cc0c:	d1ec      	bne.n	800cbe8 <rt_test_009_002_execute+0x98>
  test_set_step(6);
 800cc0e:	2306      	movs	r3, #6
 800cc10:	2404      	movs	r4, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 800cc12:	4f10      	ldr	r7, [pc, #64]	; (800cc54 <rt_test_009_002_execute+0x104>)
 800cc14:	4e20      	ldr	r6, [pc, #128]	; (800cc98 <rt_test_009_002_execute+0x148>)
  test_set_step(6);
 800cc16:	602b      	str	r3, [r5, #0]
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 800cc18:	4638      	mov	r0, r7
 800cc1a:	f7f9 fd79 	bl	8006710 <chPoolAlloc>
 800cc1e:	3000      	adds	r0, #0
 800cc20:	bf18      	it	ne
 800cc22:	2001      	movne	r0, #1
 800cc24:	4631      	mov	r1, r6
 800cc26:	f7f8 fe8b 	bl	8005940 <_test_assert>
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	d1dc      	bne.n	800cbe8 <rt_test_009_002_execute+0x98>
    for (i = 0; i < 4; i++)
 800cc2e:	3c01      	subs	r4, #1
 800cc30:	d1f2      	bne.n	800cc18 <rt_test_009_002_execute+0xc8>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800cc32:	4808      	ldr	r0, [pc, #32]	; (800cc54 <rt_test_009_002_execute+0x104>)
 800cc34:	f7f9 fd6c 	bl	8006710 <chPoolAlloc>
}
 800cc38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800cc3c:	fab0 f080 	clz	r0, r0
 800cc40:	4916      	ldr	r1, [pc, #88]	; (800cc9c <rt_test_009_002_execute+0x14c>)
 800cc42:	0940      	lsrs	r0, r0, #5
 800cc44:	f7f8 be7c 	b.w	8005940 <_test_assert>
 800cc48:	2000283c 	.word	0x2000283c
 800cc4c:	08010cd0 	.word	0x08010cd0
 800cc50:	20002128 	.word	0x20002128
 800cc54:	200020d8 	.word	0x200020d8
 800cc58:	20001eb0 	.word	0x20001eb0
 800cc5c:	0800fa78 	.word	0x0800fa78
 800cc60:	0800fca4 	.word	0x0800fca4
 800cc64:	20002854 	.word	0x20002854
 800cc68:	0800fa7c 	.word	0x0800fa7c
 800cc6c:	0800fcac 	.word	0x0800fcac
 800cc70:	0800fcb4 	.word	0x0800fcb4
 800cc74:	0800fcb8 	.word	0x0800fcb8
 800cc78:	08010a0c 	.word	0x08010a0c
 800cc7c:	0800fcc0 	.word	0x0800fcc0
 800cc80:	0800faf4 	.word	0x0800faf4
 800cc84:	0800fcc8 	.word	0x0800fcc8
 800cc88:	0800fcd0 	.word	0x0800fcd0
 800cc8c:	0800fce8 	.word	0x0800fce8
 800cc90:	0800fb54 	.word	0x0800fb54
 800cc94:	0800ea90 	.word	0x0800ea90
 800cc98:	0800fd04 	.word	0x0800fd04
 800cc9c:	0800fd14 	.word	0x0800fd14

0800cca0 <rt_test_009_001_execute>:
  test_set_step(2);
 800cca0:	2302      	movs	r3, #2
static void rt_test_009_001_execute(void) {
 800cca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 800cca6:	4a48      	ldr	r2, [pc, #288]	; (800cdc8 <rt_test_009_001_execute+0x128>)
 800cca8:	b086      	sub	sp, #24
  return chThdGetSelfX()->prio;
 800ccaa:	6995      	ldr	r5, [r2, #24]
  test_set_step(2);
 800ccac:	4c47      	ldr	r4, [pc, #284]	; (800cdcc <rt_test_009_001_execute+0x12c>)
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 800ccae:	a905      	add	r1, sp, #20
 800ccb0:	aa04      	add	r2, sp, #16
 800ccb2:	4847      	ldr	r0, [pc, #284]	; (800cdd0 <rt_test_009_001_execute+0x130>)
 800ccb4:	68ae      	ldr	r6, [r5, #8]
  test_set_step(2);
 800ccb6:	6023      	str	r3, [r4, #0]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 800ccb8:	f7fe fc9a 	bl	800b5f0 <chHeapStatus>
 800ccbc:	4605      	mov	r5, r0
    test_assert(n1 == 1, "heap fragmented");
 800ccbe:	f1a0 0001 	sub.w	r0, r0, #1
 800ccc2:	fab0 f080 	clz	r0, r0
 800ccc6:	4943      	ldr	r1, [pc, #268]	; (800cdd4 <rt_test_009_001_execute+0x134>)
 800ccc8:	0940      	lsrs	r0, r0, #5
 800ccca:	f7f8 fe39 	bl	8005940 <_test_assert>
 800ccce:	b110      	cbz	r0, 800ccd6 <rt_test_009_001_execute+0x36>
}
 800ccd0:	b006      	add	sp, #24
 800ccd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(3);
 800ccd6:	2703      	movs	r7, #3
    threads[0] = chThdCreateFromHeap(&heap1,
 800ccd8:	4b3f      	ldr	r3, [pc, #252]	; (800cdd8 <rt_test_009_001_execute+0x138>)
 800ccda:	f8df 8134 	ldr.w	r8, [pc, #308]	; 800ce10 <rt_test_009_001_execute+0x170>
 800ccde:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800cce2:	e9cd 8300 	strd	r8, r3, [sp]
 800cce6:	4a3d      	ldr	r2, [pc, #244]	; (800cddc <rt_test_009_001_execute+0x13c>)
 800cce8:	1e73      	subs	r3, r6, #1
 800ccea:	4839      	ldr	r0, [pc, #228]	; (800cdd0 <rt_test_009_001_execute+0x130>)
  test_set_step(3);
 800ccec:	6027      	str	r7, [r4, #0]
    threads[0] = chThdCreateFromHeap(&heap1,
 800ccee:	f7fd fedf 	bl	800aab0 <chThdCreateFromHeap>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	4f3a      	ldr	r7, [pc, #232]	; (800cde0 <rt_test_009_001_execute+0x140>)
    test_assert(threads[0] != NULL, "thread creation failed");
 800ccf6:	3000      	adds	r0, #0
 800ccf8:	bf18      	it	ne
 800ccfa:	2001      	movne	r0, #1
 800ccfc:	4939      	ldr	r1, [pc, #228]	; (800cde4 <rt_test_009_001_execute+0x144>)
    threads[0] = chThdCreateFromHeap(&heap1,
 800ccfe:	603b      	str	r3, [r7, #0]
    test_assert(threads[0] != NULL, "thread creation failed");
 800cd00:	f7f8 fe1e 	bl	8005940 <_test_assert>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d1e3      	bne.n	800ccd0 <rt_test_009_001_execute+0x30>
  test_set_step(4);
 800cd08:	f04f 0c04 	mov.w	ip, #4
    threads[1] = chThdCreateFromHeap(&heap1,
 800cd0c:	4b36      	ldr	r3, [pc, #216]	; (800cde8 <rt_test_009_001_execute+0x148>)
 800cd0e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800cd12:	e9cd 8300 	strd	r8, r3, [sp]
 800cd16:	4a35      	ldr	r2, [pc, #212]	; (800cdec <rt_test_009_001_execute+0x14c>)
 800cd18:	1eb3      	subs	r3, r6, #2
 800cd1a:	482d      	ldr	r0, [pc, #180]	; (800cdd0 <rt_test_009_001_execute+0x130>)
  test_set_step(4);
 800cd1c:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateFromHeap(&heap1,
 800cd20:	f7fd fec6 	bl	800aab0 <chThdCreateFromHeap>
 800cd24:	4603      	mov	r3, r0
    test_assert(threads[1] != NULL, "thread creation failed");
 800cd26:	3000      	adds	r0, #0
 800cd28:	bf18      	it	ne
 800cd2a:	2001      	movne	r0, #1
 800cd2c:	492d      	ldr	r1, [pc, #180]	; (800cde4 <rt_test_009_001_execute+0x144>)
    threads[1] = chThdCreateFromHeap(&heap1,
 800cd2e:	607b      	str	r3, [r7, #4]
    test_assert(threads[1] != NULL, "thread creation failed");
 800cd30:	f7f8 fe06 	bl	8005940 <_test_assert>
 800cd34:	2800      	cmp	r0, #0
 800cd36:	d1cb      	bne.n	800ccd0 <rt_test_009_001_execute+0x30>
  test_set_step(5);
 800cd38:	f04f 0c05 	mov.w	ip, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 800cd3c:	4a2c      	ldr	r2, [pc, #176]	; (800cdf0 <rt_test_009_001_execute+0x150>)
 800cd3e:	1ef3      	subs	r3, r6, #3
 800cd40:	9201      	str	r2, [sp, #4]
 800cd42:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cd46:	f8cd 8000 	str.w	r8, [sp]
 800cd4a:	4a2a      	ldr	r2, [pc, #168]	; (800cdf4 <rt_test_009_001_execute+0x154>)
 800cd4c:	4820      	ldr	r0, [pc, #128]	; (800cdd0 <rt_test_009_001_execute+0x130>)
  test_set_step(5);
 800cd4e:	f8c4 c000 	str.w	ip, [r4]
    threads[2] = chThdCreateFromHeap(&heap1,
 800cd52:	f7fd fead 	bl	800aab0 <chThdCreateFromHeap>
 800cd56:	4603      	mov	r3, r0
    test_assert(threads[2] == NULL, "thread creation not failed");
 800cd58:	fab0 f080 	clz	r0, r0
 800cd5c:	4926      	ldr	r1, [pc, #152]	; (800cdf8 <rt_test_009_001_execute+0x158>)
 800cd5e:	0940      	lsrs	r0, r0, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 800cd60:	60bb      	str	r3, [r7, #8]
    test_assert(threads[2] == NULL, "thread creation not failed");
 800cd62:	f7f8 fded 	bl	8005940 <_test_assert>
 800cd66:	2800      	cmp	r0, #0
 800cd68:	d1b2      	bne.n	800ccd0 <rt_test_009_001_execute+0x30>
  test_set_step(6);
 800cd6a:	2306      	movs	r3, #6
 800cd6c:	6023      	str	r3, [r4, #0]
    test_wait_threads();
 800cd6e:	f7ff fd07 	bl	800c780 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 800cd72:	4922      	ldr	r1, [pc, #136]	; (800cdfc <rt_test_009_001_execute+0x15c>)
 800cd74:	4822      	ldr	r0, [pc, #136]	; (800ce00 <rt_test_009_001_execute+0x160>)
 800cd76:	f7f8 fefb 	bl	8005b70 <_test_assert_sequence>
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	d1a8      	bne.n	800ccd0 <rt_test_009_001_execute+0x30>
  test_set_step(7);
 800cd7e:	2307      	movs	r3, #7
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 800cd80:	a903      	add	r1, sp, #12
 800cd82:	aa02      	add	r2, sp, #8
 800cd84:	4812      	ldr	r0, [pc, #72]	; (800cdd0 <rt_test_009_001_execute+0x130>)
  test_set_step(7);
 800cd86:	6023      	str	r3, [r4, #0]
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 800cd88:	f7fe fc32 	bl	800b5f0 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 800cd8c:	1a28      	subs	r0, r5, r0
 800cd8e:	fab0 f080 	clz	r0, r0
 800cd92:	491c      	ldr	r1, [pc, #112]	; (800ce04 <rt_test_009_001_execute+0x164>)
 800cd94:	0940      	lsrs	r0, r0, #5
 800cd96:	f7f8 fdd3 	bl	8005940 <_test_assert>
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	d198      	bne.n	800ccd0 <rt_test_009_001_execute+0x30>
    test_assert(total1 == total2, "total free space changed");
 800cd9e:	9805      	ldr	r0, [sp, #20]
 800cda0:	9b03      	ldr	r3, [sp, #12]
 800cda2:	4919      	ldr	r1, [pc, #100]	; (800ce08 <rt_test_009_001_execute+0x168>)
 800cda4:	1ac0      	subs	r0, r0, r3
 800cda6:	fab0 f080 	clz	r0, r0
 800cdaa:	0940      	lsrs	r0, r0, #5
 800cdac:	f7f8 fdc8 	bl	8005940 <_test_assert>
 800cdb0:	2800      	cmp	r0, #0
 800cdb2:	d18d      	bne.n	800ccd0 <rt_test_009_001_execute+0x30>
    test_assert(largest1 == largest2, "largest fragment size changed");
 800cdb4:	9804      	ldr	r0, [sp, #16]
 800cdb6:	9b02      	ldr	r3, [sp, #8]
 800cdb8:	4914      	ldr	r1, [pc, #80]	; (800ce0c <rt_test_009_001_execute+0x16c>)
 800cdba:	1ac3      	subs	r3, r0, r3
 800cdbc:	4258      	negs	r0, r3
 800cdbe:	4158      	adcs	r0, r3
 800cdc0:	f7f8 fdbe 	bl	8005940 <_test_assert>
 800cdc4:	e784      	b.n	800ccd0 <rt_test_009_001_execute+0x30>
 800cdc6:	bf00      	nop
 800cdc8:	20001eb0 	.word	0x20001eb0
 800cdcc:	2000283c 	.word	0x2000283c
 800cdd0:	200020ac 	.word	0x200020ac
 800cdd4:	0800eb38 	.word	0x0800eb38
 800cdd8:	0800fa78 	.word	0x0800fa78
 800cddc:	0800fca4 	.word	0x0800fca4
 800cde0:	20002854 	.word	0x20002854
 800cde4:	0800fcd0 	.word	0x0800fcd0
 800cde8:	0800fa7c 	.word	0x0800fa7c
 800cdec:	0800fcac 	.word	0x0800fcac
 800cdf0:	0800fcb4 	.word	0x0800fcb4
 800cdf4:	0800fcb8 	.word	0x0800fcb8
 800cdf8:	0800fce8 	.word	0x0800fce8
 800cdfc:	0800fb54 	.word	0x0800fb54
 800ce00:	0800fc3c 	.word	0x0800fc3c
 800ce04:	0800fc40 	.word	0x0800fc40
 800ce08:	0800fc58 	.word	0x0800fc58
 800ce0c:	0800fc74 	.word	0x0800fc74
 800ce10:	08005af1 	.word	0x08005af1
	...

0800ce20 <rt_test_008_007_execute>:

static void rt_test_008_007_execute(void) {
 800ce20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [8.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 800ce24:	2501      	movs	r5, #1
 800ce26:	4e3f      	ldr	r6, [pc, #252]	; (800cf24 <rt_test_008_007_execute+0x104>)
static void rt_test_008_007_execute(void) {
 800ce28:	b08b      	sub	sp, #44	; 0x2c
 800ce2a:	2420      	movs	r4, #32
  test_set_step(1);
 800ce2c:	6035      	str	r5, [r6, #0]
 800ce2e:	f384 8811 	msr	BASEPRI, r4
  elp->flags    = (eventflags_t)0;
 800ce32:	2300      	movs	r3, #0
  elp->wflags   = wflags;
 800ce34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  elp->next     = esp->next;
 800ce38:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800cf40 <rt_test_008_007_execute+0x120>
  elp->listener = currp;
 800ce3c:	f8df b104 	ldr.w	fp, [pc, #260]	; 800cf44 <rt_test_008_007_execute+0x124>
  elp->next     = esp->next;
 800ce40:	f8d8 1000 	ldr.w	r1, [r8]
 800ce44:	af0a      	add	r7, sp, #40	; 0x28
  elp->listener = currp;
 800ce46:	f8db 2018 	ldr.w	r2, [fp, #24]
  elp->next     = esp->next;
 800ce4a:	f847 1d14 	str.w	r1, [r7, #-20]!
  elp->listener = currp;
 800ce4e:	e9cd 2506 	strd	r2, r5, [sp, #24]
  esp->next     = elp;
 800ce52:	f8c8 7000 	str.w	r7, [r8]
  elp->wflags   = wflags;
 800ce56:	e9cd 3008 	strd	r3, r0, [sp, #32]
 800ce5a:	f383 8811 	msr	BASEPRI, r3
 800ce5e:	f384 8811 	msr	BASEPRI, r4
  elp->events   = events;
 800ce62:	f04f 0a04 	mov.w	sl, #4
  elp->next     = esp->next;
 800ce66:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800cf48 <rt_test_008_007_execute+0x128>
 800ce6a:	ad0a      	add	r5, sp, #40	; 0x28
 800ce6c:	f8d9 1000 	ldr.w	r1, [r9]
  elp->listener = currp;
 800ce70:	f8db 2018 	ldr.w	r2, [fp, #24]
  elp->next     = esp->next;
 800ce74:	f845 1d28 	str.w	r1, [r5, #-40]!
  elp->flags    = (eventflags_t)0;
 800ce78:	9303      	str	r3, [sp, #12]
  elp->wflags   = wflags;
 800ce7a:	9004      	str	r0, [sp, #16]
  elp->listener = currp;
 800ce7c:	9201      	str	r2, [sp, #4]
  esp->next     = elp;
 800ce7e:	f8c9 5000 	str.w	r5, [r9]
  elp->events   = events;
 800ce82:	f8cd a008 	str.w	sl, [sp, #8]
 800ce86:	f383 8811 	msr	BASEPRI, r3
  }

  /* [8.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 800ce8a:	2302      	movs	r3, #2
 800ce8c:	6033      	str	r3, [r6, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800ce8e:	f7fb fdb7 	bl	8008a00 <test_wait_tick>
 800ce92:	f8db 2018 	ldr.w	r2, [fp, #24]
 800ce96:	4604      	mov	r4, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800ce98:	6891      	ldr	r1, [r2, #8]
 800ce9a:	4b23      	ldr	r3, [pc, #140]	; (800cf28 <rt_test_008_007_execute+0x108>)
 800ce9c:	3901      	subs	r1, #1
 800ce9e:	4a23      	ldr	r2, [pc, #140]	; (800cf2c <rt_test_008_007_execute+0x10c>)
 800cea0:	4823      	ldr	r0, [pc, #140]	; (800cf30 <rt_test_008_007_execute+0x110>)
 800cea2:	f7fb f865 	bl	8007f70 <chThdCreateStatic.constprop.89>
  }

  /* [8.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 800cea6:	2203      	movs	r2, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800cea8:	4b22      	ldr	r3, [pc, #136]	; (800cf34 <rt_test_008_007_execute+0x114>)
  test_set_step(3);
 800ceaa:	6032      	str	r2, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800ceac:	6018      	str	r0, [r3, #0]
  {
    m = chEvtWaitAll(5);
 800ceae:	f7fb f95f 	bl	8008170 <chEvtWaitAll.constprop.64>
  return systime + (systime_t)interval;
 800ceb2:	f104 0168 	add.w	r1, r4, #104	; 0x68
 800ceb6:	f104 0064 	add.w	r0, r4, #100	; 0x64
    test_assert_time_window(target_time,
 800ceba:	b289      	uxth	r1, r1
 800cebc:	b280      	uxth	r0, r0
 800cebe:	f7f8 fb57 	bl	8005570 <_test_assert_time_window.constprop.3>
 800cec2:	b110      	cbz	r0, 800ceca <rt_test_008_007_execute+0xaa>
    chEvtUnregister(&es1, &el1);
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
}
 800cec4:	b00b      	add	sp, #44	; 0x2c
 800cec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800ceca:	f7f8 fb41 	bl	8005550 <chEvtGetAndClearEvents.constprop.70>
    test_assert(m == 0, "stuck event");
 800cece:	fab0 f080 	clz	r0, r0
 800ced2:	4919      	ldr	r1, [pc, #100]	; (800cf38 <rt_test_008_007_execute+0x118>)
 800ced4:	0940      	lsrs	r0, r0, #5
 800ced6:	f7f8 fd33 	bl	8005940 <_test_assert>
 800ceda:	2800      	cmp	r0, #0
 800cedc:	d1f2      	bne.n	800cec4 <rt_test_008_007_execute+0xa4>
    test_wait_threads();
 800cede:	f7ff fc4f 	bl	800c780 <test_wait_threads>
    chEvtUnregister(&es1, &el1);
 800cee2:	4639      	mov	r1, r7
 800cee4:	4640      	mov	r0, r8
  test_set_step(4);
 800cee6:	f8c6 a000 	str.w	sl, [r6]
    chEvtUnregister(&es1, &el1);
 800ceea:	f7f9 fcc1 	bl	8006870 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 800ceee:	4629      	mov	r1, r5
 800cef0:	4648      	mov	r0, r9
 800cef2:	f7f9 fcbd 	bl	8006870 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 800cef6:	f8d8 0000 	ldr.w	r0, [r8]
 800cefa:	4910      	ldr	r1, [pc, #64]	; (800cf3c <rt_test_008_007_execute+0x11c>)
 800cefc:	eba0 0008 	sub.w	r0, r0, r8
 800cf00:	fab0 f080 	clz	r0, r0
 800cf04:	0940      	lsrs	r0, r0, #5
 800cf06:	f7f8 fd1b 	bl	8005940 <_test_assert>
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d1da      	bne.n	800cec4 <rt_test_008_007_execute+0xa4>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 800cf0e:	f8d9 0000 	ldr.w	r0, [r9]
 800cf12:	490a      	ldr	r1, [pc, #40]	; (800cf3c <rt_test_008_007_execute+0x11c>)
 800cf14:	eba0 0009 	sub.w	r0, r0, r9
 800cf18:	fab0 f080 	clz	r0, r0
 800cf1c:	0940      	lsrs	r0, r0, #5
 800cf1e:	f7f8 fd0f 	bl	8005940 <_test_assert>
 800cf22:	e7cf      	b.n	800cec4 <rt_test_008_007_execute+0xa4>
 800cf24:	2000283c 	.word	0x2000283c
 800cf28:	0800fa78 	.word	0x0800fa78
 800cf2c:	0800a7c1 	.word	0x0800a7c1
 800cf30:	20002128 	.word	0x20002128
 800cf34:	20002854 	.word	0x20002854
 800cf38:	0800fc20 	.word	0x0800fc20
 800cf3c:	0800fb34 	.word	0x0800fb34
 800cf40:	2000180c 	.word	0x2000180c
 800cf44:	20001eb0 	.word	0x20001eb0
 800cf48:	20001810 	.word	0x20001810
 800cf4c:	00000000 	.word	0x00000000

0800cf50 <rt_test_008_005_execute>:
static void rt_test_008_005_execute(void) {
 800cf50:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(5);
 800cf52:	2005      	movs	r0, #5
 800cf54:	f7f9 fc7c 	bl	8006850 <chEvtAddEvents>
  test_set_step(2);
 800cf58:	2302      	movs	r3, #2
 800cf5a:	4c28      	ldr	r4, [pc, #160]	; (800cffc <rt_test_008_005_execute+0xac>)
 800cf5c:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAll(5);
 800cf5e:	f7fb f907 	bl	8008170 <chEvtWaitAll.constprop.64>
    test_assert(m == 5, "unexpected pending bit");
 800cf62:	f1a0 0005 	sub.w	r0, r0, #5
 800cf66:	fab0 f080 	clz	r0, r0
 800cf6a:	4925      	ldr	r1, [pc, #148]	; (800d000 <rt_test_008_005_execute+0xb0>)
 800cf6c:	0940      	lsrs	r0, r0, #5
 800cf6e:	f7f8 fce7 	bl	8005940 <_test_assert>
 800cf72:	b100      	cbz	r0, 800cf76 <rt_test_008_005_execute+0x26>
}
 800cf74:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800cf76:	f7f8 faeb 	bl	8005550 <chEvtGetAndClearEvents.constprop.70>
    test_assert(m == 0, "stuck event");
 800cf7a:	fab0 f080 	clz	r0, r0
 800cf7e:	4921      	ldr	r1, [pc, #132]	; (800d004 <rt_test_008_005_execute+0xb4>)
 800cf80:	0940      	lsrs	r0, r0, #5
 800cf82:	f7f8 fcdd 	bl	8005940 <_test_assert>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	d1f4      	bne.n	800cf74 <rt_test_008_005_execute+0x24>
    chEvtAddEvents(4);
 800cf8a:	2004      	movs	r0, #4
 800cf8c:	f7f9 fc60 	bl	8006850 <chEvtAddEvents>
  test_set_step(4);
 800cf90:	2304      	movs	r3, #4
 800cf92:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800cf94:	f7fb fd34 	bl	8008a00 <test_wait_tick>
  return ch.rlist.current;
 800cf98:	4b1b      	ldr	r3, [pc, #108]	; (800d008 <rt_test_008_005_execute+0xb8>)
 800cf9a:	4605      	mov	r5, r0
 800cf9c:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800cf9e:	4a1b      	ldr	r2, [pc, #108]	; (800d00c <rt_test_008_005_execute+0xbc>)
 800cfa0:	6899      	ldr	r1, [r3, #8]
 800cfa2:	481b      	ldr	r0, [pc, #108]	; (800d010 <rt_test_008_005_execute+0xc0>)
 800cfa4:	3901      	subs	r1, #1
 800cfa6:	f7fa ffe3 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(5);
 800cfaa:	2205      	movs	r2, #5
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800cfac:	4b19      	ldr	r3, [pc, #100]	; (800d014 <rt_test_008_005_execute+0xc4>)
  test_set_step(5);
 800cfae:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800cfb0:	6018      	str	r0, [r3, #0]
    m = chEvtWaitAll(5);
 800cfb2:	f7fb f8dd 	bl	8008170 <chEvtWaitAll.constprop.64>
 800cfb6:	f105 0168 	add.w	r1, r5, #104	; 0x68
 800cfba:	4604      	mov	r4, r0
 800cfbc:	f105 0064 	add.w	r0, r5, #100	; 0x64
    test_assert_time_window(target_time,
 800cfc0:	b289      	uxth	r1, r1
 800cfc2:	b280      	uxth	r0, r0
 800cfc4:	f7f8 fad4 	bl	8005570 <_test_assert_time_window.constprop.3>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	d1d3      	bne.n	800cf74 <rt_test_008_005_execute+0x24>
    test_assert(m == 5, "event flags error");
 800cfcc:	f1a4 0005 	sub.w	r0, r4, #5
 800cfd0:	fab0 f080 	clz	r0, r0
 800cfd4:	4910      	ldr	r1, [pc, #64]	; (800d018 <rt_test_008_005_execute+0xc8>)
 800cfd6:	0940      	lsrs	r0, r0, #5
 800cfd8:	f7f8 fcb2 	bl	8005940 <_test_assert>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	d1c9      	bne.n	800cf74 <rt_test_008_005_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800cfe0:	f7f8 fab6 	bl	8005550 <chEvtGetAndClearEvents.constprop.70>
    test_assert(m == 0, "stuck event");
 800cfe4:	fab0 f080 	clz	r0, r0
 800cfe8:	4906      	ldr	r1, [pc, #24]	; (800d004 <rt_test_008_005_execute+0xb4>)
 800cfea:	0940      	lsrs	r0, r0, #5
 800cfec:	f7f8 fca8 	bl	8005940 <_test_assert>
 800cff0:	2800      	cmp	r0, #0
 800cff2:	d1bf      	bne.n	800cf74 <rt_test_008_005_execute+0x24>
}
 800cff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 800cff8:	f7ff bbc2 	b.w	800c780 <test_wait_threads>
 800cffc:	2000283c 	.word	0x2000283c
 800d000:	0800fbc4 	.word	0x0800fbc4
 800d004:	0800fc20 	.word	0x0800fc20
 800d008:	20001eb0 	.word	0x20001eb0
 800d00c:	0800a801 	.word	0x0800a801
 800d010:	20002128 	.word	0x20002128
 800d014:	20002854 	.word	0x20002854
 800d018:	0800fbdc 	.word	0x0800fbdc
 800d01c:	00000000 	.word	0x00000000

0800d020 <rt_test_008_004_execute>:
static void rt_test_008_004_execute(void) {
 800d020:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(5);
 800d022:	2005      	movs	r0, #5
 800d024:	f7f9 fc14 	bl	8006850 <chEvtAddEvents>
  test_set_step(2);
 800d028:	2302      	movs	r3, #2
 800d02a:	4c27      	ldr	r4, [pc, #156]	; (800d0c8 <rt_test_008_004_execute+0xa8>)
 800d02c:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 800d02e:	f7fb f887 	bl	8008140 <chEvtWaitAny.constprop.65>
    test_assert(m == 5, "unexpected pending bit");
 800d032:	f1a0 0005 	sub.w	r0, r0, #5
 800d036:	fab0 f080 	clz	r0, r0
 800d03a:	4924      	ldr	r1, [pc, #144]	; (800d0cc <rt_test_008_004_execute+0xac>)
 800d03c:	0940      	lsrs	r0, r0, #5
 800d03e:	f7f8 fc7f 	bl	8005940 <_test_assert>
 800d042:	b100      	cbz	r0, 800d046 <rt_test_008_004_execute+0x26>
}
 800d044:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800d046:	f7f8 fa83 	bl	8005550 <chEvtGetAndClearEvents.constprop.70>
    test_assert(m == 0, "stuck event");
 800d04a:	fab0 f080 	clz	r0, r0
 800d04e:	4920      	ldr	r1, [pc, #128]	; (800d0d0 <rt_test_008_004_execute+0xb0>)
 800d050:	0940      	lsrs	r0, r0, #5
 800d052:	f7f8 fc75 	bl	8005940 <_test_assert>
 800d056:	2800      	cmp	r0, #0
 800d058:	d1f4      	bne.n	800d044 <rt_test_008_004_execute+0x24>
  test_set_step(3);
 800d05a:	2303      	movs	r3, #3
 800d05c:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800d05e:	f7fb fccf 	bl	8008a00 <test_wait_tick>
 800d062:	4b1c      	ldr	r3, [pc, #112]	; (800d0d4 <rt_test_008_004_execute+0xb4>)
 800d064:	4605      	mov	r5, r0
 800d066:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800d068:	4a1b      	ldr	r2, [pc, #108]	; (800d0d8 <rt_test_008_004_execute+0xb8>)
 800d06a:	6899      	ldr	r1, [r3, #8]
 800d06c:	481b      	ldr	r0, [pc, #108]	; (800d0dc <rt_test_008_004_execute+0xbc>)
 800d06e:	3901      	subs	r1, #1
 800d070:	f7fa ff7e 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(4);
 800d074:	2204      	movs	r2, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800d076:	4b1a      	ldr	r3, [pc, #104]	; (800d0e0 <rt_test_008_004_execute+0xc0>)
  test_set_step(4);
 800d078:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800d07a:	6018      	str	r0, [r3, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 800d07c:	f7fb f860 	bl	8008140 <chEvtWaitAny.constprop.65>
 800d080:	f105 0168 	add.w	r1, r5, #104	; 0x68
 800d084:	4604      	mov	r4, r0
 800d086:	f105 0064 	add.w	r0, r5, #100	; 0x64
    test_assert_time_window(target_time,
 800d08a:	b289      	uxth	r1, r1
 800d08c:	b280      	uxth	r0, r0
 800d08e:	f7f8 fa6f 	bl	8005570 <_test_assert_time_window.constprop.3>
 800d092:	2800      	cmp	r0, #0
 800d094:	d1d6      	bne.n	800d044 <rt_test_008_004_execute+0x24>
    test_assert(m == 1, "event flag error");
 800d096:	f1a4 0001 	sub.w	r0, r4, #1
 800d09a:	fab0 f080 	clz	r0, r0
 800d09e:	4911      	ldr	r1, [pc, #68]	; (800d0e4 <rt_test_008_004_execute+0xc4>)
 800d0a0:	0940      	lsrs	r0, r0, #5
 800d0a2:	f7f8 fc4d 	bl	8005940 <_test_assert>
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d1cc      	bne.n	800d044 <rt_test_008_004_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800d0aa:	f7f8 fa51 	bl	8005550 <chEvtGetAndClearEvents.constprop.70>
    test_assert(m == 0, "stuck event");
 800d0ae:	fab0 f080 	clz	r0, r0
 800d0b2:	4907      	ldr	r1, [pc, #28]	; (800d0d0 <rt_test_008_004_execute+0xb0>)
 800d0b4:	0940      	lsrs	r0, r0, #5
 800d0b6:	f7f8 fc43 	bl	8005940 <_test_assert>
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	d1c2      	bne.n	800d044 <rt_test_008_004_execute+0x24>
}
 800d0be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 800d0c2:	f7ff bb5d 	b.w	800c780 <test_wait_threads>
 800d0c6:	bf00      	nop
 800d0c8:	2000283c 	.word	0x2000283c
 800d0cc:	0800fbc4 	.word	0x0800fbc4
 800d0d0:	0800fc20 	.word	0x0800fc20
 800d0d4:	20001eb0 	.word	0x20001eb0
 800d0d8:	0800a801 	.word	0x0800a801
 800d0dc:	20002128 	.word	0x20002128
 800d0e0:	20002854 	.word	0x20002854
 800d0e4:	0800fba0 	.word	0x0800fba0
	...

0800d0f0 <rt_test_008_003_execute>:
static void rt_test_008_003_execute(void) {
 800d0f0:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(7);
 800d0f2:	2007      	movs	r0, #7
 800d0f4:	f7f9 fbac 	bl	8006850 <chEvtAddEvents>
  test_set_step(2);
 800d0f8:	2302      	movs	r3, #2
 800d0fa:	4c33      	ldr	r4, [pc, #204]	; (800d1c8 <rt_test_008_003_execute+0xd8>)
 800d0fc:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 800d0fe:	f7fa ffff 	bl	8008100 <chEvtWaitOne.constprop.66>
    test_assert(m == 1, "single event error");
 800d102:	f1a0 0001 	sub.w	r0, r0, #1
 800d106:	fab0 f080 	clz	r0, r0
 800d10a:	4930      	ldr	r1, [pc, #192]	; (800d1cc <rt_test_008_003_execute+0xdc>)
 800d10c:	0940      	lsrs	r0, r0, #5
 800d10e:	f7f8 fc17 	bl	8005940 <_test_assert>
 800d112:	b100      	cbz	r0, 800d116 <rt_test_008_003_execute+0x26>
}
 800d114:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtWaitOne(ALL_EVENTS);
 800d116:	f7fa fff3 	bl	8008100 <chEvtWaitOne.constprop.66>
    test_assert(m == 2, "single event error");
 800d11a:	f1a0 0002 	sub.w	r0, r0, #2
 800d11e:	fab0 f080 	clz	r0, r0
 800d122:	492a      	ldr	r1, [pc, #168]	; (800d1cc <rt_test_008_003_execute+0xdc>)
 800d124:	0940      	lsrs	r0, r0, #5
 800d126:	f7f8 fc0b 	bl	8005940 <_test_assert>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	d1f2      	bne.n	800d114 <rt_test_008_003_execute+0x24>
    m = chEvtWaitOne(ALL_EVENTS);
 800d12e:	f7fa ffe7 	bl	8008100 <chEvtWaitOne.constprop.66>
    test_assert(m == 4, "single event error");
 800d132:	f1a0 0004 	sub.w	r0, r0, #4
 800d136:	fab0 f080 	clz	r0, r0
 800d13a:	4924      	ldr	r1, [pc, #144]	; (800d1cc <rt_test_008_003_execute+0xdc>)
 800d13c:	0940      	lsrs	r0, r0, #5
 800d13e:	f7f8 fbff 	bl	8005940 <_test_assert>
 800d142:	2800      	cmp	r0, #0
 800d144:	d1e6      	bne.n	800d114 <rt_test_008_003_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800d146:	f7f8 fa03 	bl	8005550 <chEvtGetAndClearEvents.constprop.70>
    test_assert(m == 0, "stuck event");
 800d14a:	fab0 f080 	clz	r0, r0
 800d14e:	4920      	ldr	r1, [pc, #128]	; (800d1d0 <rt_test_008_003_execute+0xe0>)
 800d150:	0940      	lsrs	r0, r0, #5
 800d152:	f7f8 fbf5 	bl	8005940 <_test_assert>
 800d156:	2800      	cmp	r0, #0
 800d158:	d1dc      	bne.n	800d114 <rt_test_008_003_execute+0x24>
  test_set_step(3);
 800d15a:	2303      	movs	r3, #3
 800d15c:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800d15e:	f7fb fc4f 	bl	8008a00 <test_wait_tick>
 800d162:	4b1c      	ldr	r3, [pc, #112]	; (800d1d4 <rt_test_008_003_execute+0xe4>)
 800d164:	4605      	mov	r5, r0
 800d166:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800d168:	4a1b      	ldr	r2, [pc, #108]	; (800d1d8 <rt_test_008_003_execute+0xe8>)
 800d16a:	6899      	ldr	r1, [r3, #8]
 800d16c:	481b      	ldr	r0, [pc, #108]	; (800d1dc <rt_test_008_003_execute+0xec>)
 800d16e:	3901      	subs	r1, #1
 800d170:	f7fa fefe 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(4);
 800d174:	2204      	movs	r2, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800d176:	4b1a      	ldr	r3, [pc, #104]	; (800d1e0 <rt_test_008_003_execute+0xf0>)
  test_set_step(4);
 800d178:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800d17a:	6018      	str	r0, [r3, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 800d17c:	f7fa ffc0 	bl	8008100 <chEvtWaitOne.constprop.66>
 800d180:	f105 0168 	add.w	r1, r5, #104	; 0x68
 800d184:	4604      	mov	r4, r0
 800d186:	f105 0064 	add.w	r0, r5, #100	; 0x64
    test_assert_time_window(target_time,
 800d18a:	b289      	uxth	r1, r1
 800d18c:	b280      	uxth	r0, r0
 800d18e:	f7f8 f9ef 	bl	8005570 <_test_assert_time_window.constprop.3>
 800d192:	2800      	cmp	r0, #0
 800d194:	d1be      	bne.n	800d114 <rt_test_008_003_execute+0x24>
    test_assert(m == 1, "event flag error");
 800d196:	f1a4 0001 	sub.w	r0, r4, #1
 800d19a:	fab0 f080 	clz	r0, r0
 800d19e:	4911      	ldr	r1, [pc, #68]	; (800d1e4 <rt_test_008_003_execute+0xf4>)
 800d1a0:	0940      	lsrs	r0, r0, #5
 800d1a2:	f7f8 fbcd 	bl	8005940 <_test_assert>
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	d1b4      	bne.n	800d114 <rt_test_008_003_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800d1aa:	f7f8 f9d1 	bl	8005550 <chEvtGetAndClearEvents.constprop.70>
    test_assert(m == 0, "stuck event");
 800d1ae:	fab0 f080 	clz	r0, r0
 800d1b2:	4907      	ldr	r1, [pc, #28]	; (800d1d0 <rt_test_008_003_execute+0xe0>)
 800d1b4:	0940      	lsrs	r0, r0, #5
 800d1b6:	f7f8 fbc3 	bl	8005940 <_test_assert>
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	d1aa      	bne.n	800d114 <rt_test_008_003_execute+0x24>
}
 800d1be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 800d1c2:	f7ff badd 	b.w	800c780 <test_wait_threads>
 800d1c6:	bf00      	nop
 800d1c8:	2000283c 	.word	0x2000283c
 800d1cc:	0800fb7c 	.word	0x0800fb7c
 800d1d0:	0800fc20 	.word	0x0800fc20
 800d1d4:	20001eb0 	.word	0x20001eb0
 800d1d8:	0800a801 	.word	0x0800a801
 800d1dc:	20002128 	.word	0x20002128
 800d1e0:	20002854 	.word	0x20002854
 800d1e4:	0800fba0 	.word	0x0800fba0
	...

0800d1f0 <rt_test_007_001_execute>:
 * - [7.1.1] Starting the messenger thread.
 * - [7.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_007_001_execute(void) {
 800d1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *tp;
  msg_t msg;

  /* [7.1.1] Starting the messenger thread.*/
  test_set_step(1);
 800d1f2:	2401      	movs	r4, #1
 800d1f4:	4b13      	ldr	r3, [pc, #76]	; (800d244 <rt_test_007_001_execute+0x54>)
 800d1f6:	4d14      	ldr	r5, [pc, #80]	; (800d248 <rt_test_007_001_execute+0x58>)
 800d1f8:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 800d1fa:	4a14      	ldr	r2, [pc, #80]	; (800d24c <rt_test_007_001_execute+0x5c>)
 800d1fc:	6899      	ldr	r1, [r3, #8]
 800d1fe:	4814      	ldr	r0, [pc, #80]	; (800d250 <rt_test_007_001_execute+0x60>)
 800d200:	4421      	add	r1, r4
  test_set_step(1);
 800d202:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 800d204:	f7fa feb4 	bl	8007f70 <chThdCreateStatic.constprop.89>
                                   msg_thread1, chThdGetSelfX());
  }

  /* [7.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 800d208:	2202      	movs	r2, #2
 800d20a:	2404      	movs	r4, #4
 800d20c:	2720      	movs	r7, #32
 800d20e:	2600      	movs	r6, #0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 800d210:	4b10      	ldr	r3, [pc, #64]	; (800d254 <rt_test_007_001_execute+0x64>)
  test_set_step(2);
 800d212:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 800d214:	6018      	str	r0, [r3, #0]
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
 800d216:	f7fb fe0b 	bl	8008e30 <chMsgWait>
 800d21a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d21c:	f387 8811 	msr	BASEPRI, r7
 800d220:	4629      	mov	r1, r5
 800d222:	f7fa fe75 	bl	8007f10 <chSchWakeupS>
 800d226:	f386 8811 	msr	BASEPRI, r6
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 800d22a:	b2e8      	uxtb	r0, r5
 800d22c:	f7f8 fc28 	bl	8005a80 <test_emit_token>
    for (i = 0; i < 4; i++) {
 800d230:	3c01      	subs	r4, #1
 800d232:	d1f0      	bne.n	800d216 <rt_test_007_001_execute+0x26>
    }
    test_wait_threads();
 800d234:	f7ff faa4 	bl	800c780 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
  }
}
 800d238:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 800d23c:	4906      	ldr	r1, [pc, #24]	; (800d258 <rt_test_007_001_execute+0x68>)
 800d23e:	4807      	ldr	r0, [pc, #28]	; (800d25c <rt_test_007_001_execute+0x6c>)
 800d240:	f7f8 bc96 	b.w	8005b70 <_test_assert_sequence>
 800d244:	20001eb0 	.word	0x20001eb0
 800d248:	2000283c 	.word	0x2000283c
 800d24c:	08008f11 	.word	0x08008f11
 800d250:	20002128 	.word	0x20002128
 800d254:	20002854 	.word	0x20002854
 800d258:	0800fb54 	.word	0x0800fb54
 800d25c:	0800ea90 	.word	0x0800ea90

0800d260 <rt_test_006_009_execute>:

static void rt_test_006_009_execute(void) {
 800d260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    prio = chThdGetPriorityX();
  }

  /* [6.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 800d262:	2502      	movs	r5, #2
 800d264:	4b1b      	ldr	r3, [pc, #108]	; (800d2d4 <rt_test_006_009_execute+0x74>)
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 800d266:	4e1c      	ldr	r6, [pc, #112]	; (800d2d8 <rt_test_006_009_execute+0x78>)
  return chThdGetSelfX()->prio;
 800d268:	699b      	ldr	r3, [r3, #24]
  test_set_step(2);
 800d26a:	4c1c      	ldr	r4, [pc, #112]	; (800d2dc <rt_test_006_009_execute+0x7c>)
 800d26c:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 800d26e:	4630      	mov	r0, r6
 800d270:	1c79      	adds	r1, r7, #1
 800d272:	4b1b      	ldr	r3, [pc, #108]	; (800d2e0 <rt_test_006_009_execute+0x80>)
 800d274:	4a1b      	ldr	r2, [pc, #108]	; (800d2e4 <rt_test_006_009_execute+0x84>)
  test_set_step(2);
 800d276:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 800d278:	f7fa fe7a 	bl	8007f70 <chThdCreateStatic.constprop.89>
  }

  /* [6.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 800d27c:	f04f 0c03 	mov.w	ip, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 800d280:	4d19      	ldr	r5, [pc, #100]	; (800d2e8 <rt_test_006_009_execute+0x88>)
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 800d282:	1cb9      	adds	r1, r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 800d284:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 800d286:	4b19      	ldr	r3, [pc, #100]	; (800d2ec <rt_test_006_009_execute+0x8c>)
 800d288:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 800d28c:	4a18      	ldr	r2, [pc, #96]	; (800d2f0 <rt_test_006_009_execute+0x90>)
  test_set_step(3);
 800d28e:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 800d292:	f7fa fe6d 	bl	8007f70 <chThdCreateStatic.constprop.89>
  }

  /* [6.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
 800d296:	f04f 0c04 	mov.w	ip, #4
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 800d29a:	1cf9      	adds	r1, r7, #3
 800d29c:	4a15      	ldr	r2, [pc, #84]	; (800d2f4 <rt_test_006_009_execute+0x94>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 800d29e:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 800d2a0:	4b15      	ldr	r3, [pc, #84]	; (800d2f8 <rt_test_006_009_execute+0x98>)
 800d2a2:	f506 7024 	add.w	r0, r6, #656	; 0x290
  test_set_step(4);
 800d2a6:	f8c4 c000 	str.w	ip, [r4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 800d2aa:	f7fa fe61 	bl	8007f70 <chThdCreateStatic.constprop.89>
  }

  /* [6.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 800d2ae:	2305      	movs	r3, #5
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 800d2b0:	60a8      	str	r0, [r5, #8]
  test_set_step(5);
 800d2b2:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 800d2b4:	f7fa fea4 	bl	8008000 <chCondSignal.constprop.78>
  }

  /* [6.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 800d2b8:	2306      	movs	r3, #6
 800d2ba:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 800d2bc:	f7fa fea0 	bl	8008000 <chCondSignal.constprop.78>
  }

  /* [6.9.7] Checking the order of operations.*/
  test_set_step(7);
 800d2c0:	2307      	movs	r3, #7
 800d2c2:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
 800d2c4:	f7ff fa5c 	bl	800c780 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
  }
}
 800d2c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 800d2cc:	490b      	ldr	r1, [pc, #44]	; (800d2fc <rt_test_006_009_execute+0x9c>)
 800d2ce:	480c      	ldr	r0, [pc, #48]	; (800d300 <rt_test_006_009_execute+0xa0>)
 800d2d0:	f7f8 bc4e 	b.w	8005b70 <_test_assert_sequence>
 800d2d4:	20001eb0 	.word	0x20001eb0
 800d2d8:	20002128 	.word	0x20002128
 800d2dc:	2000283c 	.word	0x2000283c
 800d2e0:	0800fa78 	.word	0x0800fa78
 800d2e4:	0800ae31 	.word	0x0800ae31
 800d2e8:	20002854 	.word	0x20002854
 800d2ec:	0800fcb4 	.word	0x0800fcb4
 800d2f0:	0800aec1 	.word	0x0800aec1
 800d2f4:	0800af31 	.word	0x0800af31
 800d2f8:	0800fa7c 	.word	0x0800fa7c
 800d2fc:	0800fb54 	.word	0x0800fb54
 800d300:	0800fb68 	.word	0x0800fb68
	...

0800d310 <rt_test_006_008_execute>:
static void rt_test_006_008_execute(void) {
 800d310:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 800d312:	2401      	movs	r4, #1
  return ch.rlist.current;
 800d314:	4b25      	ldr	r3, [pc, #148]	; (800d3ac <rt_test_006_008_execute+0x9c>)
 800d316:	4e26      	ldr	r6, [pc, #152]	; (800d3b0 <rt_test_006_008_execute+0xa0>)
  return chThdGetSelfX()->prio;
 800d318:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800d31a:	4826      	ldr	r0, [pc, #152]	; (800d3b4 <rt_test_006_008_execute+0xa4>)
 800d31c:	6895      	ldr	r5, [r2, #8]
 800d31e:	4b26      	ldr	r3, [pc, #152]	; (800d3b8 <rt_test_006_008_execute+0xa8>)
 800d320:	1929      	adds	r1, r5, r4
 800d322:	4a26      	ldr	r2, [pc, #152]	; (800d3bc <rt_test_006_008_execute+0xac>)
  test_set_step(1);
 800d324:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800d326:	f7fa fe23 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800d32a:	4c25      	ldr	r4, [pc, #148]	; (800d3c0 <rt_test_006_008_execute+0xb0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800d32c:	1ca9      	adds	r1, r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800d32e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800d330:	4b24      	ldr	r3, [pc, #144]	; (800d3c4 <rt_test_006_008_execute+0xb4>)
 800d332:	4a22      	ldr	r2, [pc, #136]	; (800d3bc <rt_test_006_008_execute+0xac>)
 800d334:	4824      	ldr	r0, [pc, #144]	; (800d3c8 <rt_test_006_008_execute+0xb8>)
 800d336:	f7fa fe1b 	bl	8007f70 <chThdCreateStatic.constprop.89>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800d33a:	1ce9      	adds	r1, r5, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800d33c:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800d33e:	4b23      	ldr	r3, [pc, #140]	; (800d3cc <rt_test_006_008_execute+0xbc>)
 800d340:	4a1e      	ldr	r2, [pc, #120]	; (800d3bc <rt_test_006_008_execute+0xac>)
 800d342:	4823      	ldr	r0, [pc, #140]	; (800d3d0 <rt_test_006_008_execute+0xc0>)
 800d344:	f7fa fe14 	bl	8007f70 <chThdCreateStatic.constprop.89>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800d348:	1d29      	adds	r1, r5, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800d34a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800d34c:	4b21      	ldr	r3, [pc, #132]	; (800d3d4 <rt_test_006_008_execute+0xc4>)
 800d34e:	4a1b      	ldr	r2, [pc, #108]	; (800d3bc <rt_test_006_008_execute+0xac>)
 800d350:	4821      	ldr	r0, [pc, #132]	; (800d3d8 <rt_test_006_008_execute+0xc8>)
 800d352:	f7fa fe0d 	bl	8007f70 <chThdCreateStatic.constprop.89>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800d356:	1d69      	adds	r1, r5, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800d358:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800d35a:	4b20      	ldr	r3, [pc, #128]	; (800d3dc <rt_test_006_008_execute+0xcc>)
 800d35c:	4a17      	ldr	r2, [pc, #92]	; (800d3bc <rt_test_006_008_execute+0xac>)
 800d35e:	4820      	ldr	r0, [pc, #128]	; (800d3e0 <rt_test_006_008_execute+0xd0>)
 800d360:	f7fa fe06 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(2);
 800d364:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800d366:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 800d368:	6033      	str	r3, [r6, #0]
 800d36a:	2320      	movs	r3, #32
 800d36c:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 800d370:	4c1c      	ldr	r4, [pc, #112]	; (800d3e4 <rt_test_006_008_execute+0xd4>)
 800d372:	6823      	ldr	r3, [r4, #0]
  while (queue_notempty(&cp->queue)) {
 800d374:	42a3      	cmp	r3, r4
 800d376:	d00b      	beq.n	800d390 <rt_test_006_008_execute+0x80>
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 800d378:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 800d380:	6054      	str	r4, [r2, #4]
  tqp->next             = tp->queue.next;
 800d382:	6022      	str	r2, [r4, #0]
 800d384:	f7f9 fb84 	bl	8006a90 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800d388:	6823      	ldr	r3, [r4, #0]
 800d38a:	6245      	str	r5, [r0, #36]	; 0x24
  while (queue_notempty(&cp->queue)) {
 800d38c:	42a3      	cmp	r3, r4
 800d38e:	d1f5      	bne.n	800d37c <rt_test_006_008_execute+0x6c>
  chSchRescheduleS();
 800d390:	f7fc fc86 	bl	8009ca0 <chSchRescheduleS>
 800d394:	2300      	movs	r3, #0
 800d396:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 800d39a:	f7ff f9f1 	bl	800c780 <test_wait_threads>
}
 800d39e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800d3a2:	4911      	ldr	r1, [pc, #68]	; (800d3e8 <rt_test_006_008_execute+0xd8>)
 800d3a4:	4811      	ldr	r0, [pc, #68]	; (800d3ec <rt_test_006_008_execute+0xdc>)
 800d3a6:	f7f8 bbe3 	b.w	8005b70 <_test_assert_sequence>
 800d3aa:	bf00      	nop
 800d3ac:	20001eb0 	.word	0x20001eb0
 800d3b0:	2000283c 	.word	0x2000283c
 800d3b4:	20002128 	.word	0x20002128
 800d3b8:	0800faf4 	.word	0x0800faf4
 800d3bc:	0800aec1 	.word	0x0800aec1
 800d3c0:	20002854 	.word	0x20002854
 800d3c4:	08010a0c 	.word	0x08010a0c
 800d3c8:	20002270 	.word	0x20002270
 800d3cc:	0800fcb4 	.word	0x0800fcb4
 800d3d0:	200023b8 	.word	0x200023b8
 800d3d4:	0800fa7c 	.word	0x0800fa7c
 800d3d8:	20002500 	.word	0x20002500
 800d3dc:	0800fa78 	.word	0x0800fa78
 800d3e0:	20002648 	.word	0x20002648
 800d3e4:	20001804 	.word	0x20001804
 800d3e8:	0800fb54 	.word	0x0800fb54
 800d3ec:	0800faf0 	.word	0x0800faf0

0800d3f0 <rt_test_006_007_execute>:
static void rt_test_006_007_execute(void) {
 800d3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800d3f4:	2401      	movs	r4, #1
  return ch.rlist.current;
 800d3f6:	4b27      	ldr	r3, [pc, #156]	; (800d494 <rt_test_006_007_execute+0xa4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800d3f8:	4e27      	ldr	r6, [pc, #156]	; (800d498 <rt_test_006_007_execute+0xa8>)
  return chThdGetSelfX()->prio;
 800d3fa:	699b      	ldr	r3, [r3, #24]
 800d3fc:	4d27      	ldr	r5, [pc, #156]	; (800d49c <rt_test_006_007_execute+0xac>)
 800d3fe:	689f      	ldr	r7, [r3, #8]
  test_set_step(1);
 800d400:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800d4c0 <rt_test_006_007_execute+0xd0>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800d404:	1939      	adds	r1, r7, r4
 800d406:	4632      	mov	r2, r6
 800d408:	4628      	mov	r0, r5
 800d40a:	4b25      	ldr	r3, [pc, #148]	; (800d4a0 <rt_test_006_007_execute+0xb0>)
  test_set_step(1);
 800d40c:	f8c8 4000 	str.w	r4, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800d410:	f7fa fdae 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800d414:	4c23      	ldr	r4, [pc, #140]	; (800d4a4 <rt_test_006_007_execute+0xb4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800d416:	1cb9      	adds	r1, r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800d418:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800d41a:	4632      	mov	r2, r6
 800d41c:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 800d420:	4b21      	ldr	r3, [pc, #132]	; (800d4a8 <rt_test_006_007_execute+0xb8>)
 800d422:	f7fa fda5 	bl	8007f70 <chThdCreateStatic.constprop.89>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800d426:	1cf9      	adds	r1, r7, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800d428:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800d42a:	4632      	mov	r2, r6
 800d42c:	f505 7024 	add.w	r0, r5, #656	; 0x290
 800d430:	4b1e      	ldr	r3, [pc, #120]	; (800d4ac <rt_test_006_007_execute+0xbc>)
 800d432:	f7fa fd9d 	bl	8007f70 <chThdCreateStatic.constprop.89>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800d436:	1d39      	adds	r1, r7, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800d438:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800d43a:	4632      	mov	r2, r6
 800d43c:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 800d440:	4b1b      	ldr	r3, [pc, #108]	; (800d4b0 <rt_test_006_007_execute+0xc0>)
 800d442:	f7fa fd95 	bl	8007f70 <chThdCreateStatic.constprop.89>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800d446:	1d79      	adds	r1, r7, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800d448:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800d44a:	4632      	mov	r2, r6
 800d44c:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800d450:	4b18      	ldr	r3, [pc, #96]	; (800d4b4 <rt_test_006_007_execute+0xc4>)
 800d452:	f7fa fd8d 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(2);
 800d456:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800d458:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 800d45a:	f8c8 3000 	str.w	r3, [r8]
 800d45e:	2320      	movs	r3, #32
 800d460:	f383 8811 	msr	BASEPRI, r3
    chCondSignalI(&c1);
 800d464:	f7f9 fbb4 	bl	8006bd0 <chCondSignalI.constprop.77>
    chCondSignalI(&c1);
 800d468:	f7f9 fbb2 	bl	8006bd0 <chCondSignalI.constprop.77>
    chCondSignalI(&c1);
 800d46c:	f7f9 fbb0 	bl	8006bd0 <chCondSignalI.constprop.77>
    chCondSignalI(&c1);
 800d470:	f7f9 fbae 	bl	8006bd0 <chCondSignalI.constprop.77>
    chCondSignalI(&c1);
 800d474:	f7f9 fbac 	bl	8006bd0 <chCondSignalI.constprop.77>
    chSchRescheduleS();
 800d478:	f7fc fc12 	bl	8009ca0 <chSchRescheduleS>
 800d47c:	2300      	movs	r3, #0
 800d47e:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 800d482:	f7ff f97d 	bl	800c780 <test_wait_threads>
}
 800d486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800d48a:	490b      	ldr	r1, [pc, #44]	; (800d4b8 <rt_test_006_007_execute+0xc8>)
 800d48c:	480b      	ldr	r0, [pc, #44]	; (800d4bc <rt_test_006_007_execute+0xcc>)
 800d48e:	f7f8 bb6f 	b.w	8005b70 <_test_assert_sequence>
 800d492:	bf00      	nop
 800d494:	20001eb0 	.word	0x20001eb0
 800d498:	0800aec1 	.word	0x0800aec1
 800d49c:	20002128 	.word	0x20002128
 800d4a0:	0800faf4 	.word	0x0800faf4
 800d4a4:	20002854 	.word	0x20002854
 800d4a8:	08010a0c 	.word	0x08010a0c
 800d4ac:	0800fcb4 	.word	0x0800fcb4
 800d4b0:	0800fa7c 	.word	0x0800fa7c
 800d4b4:	0800fa78 	.word	0x0800fa78
 800d4b8:	0800fb54 	.word	0x0800fb54
 800d4bc:	0800faf0 	.word	0x0800faf0
 800d4c0:	2000283c 	.word	0x2000283c
	...

0800d4d0 <rt_test_005_006_teardown>:
 *   must not change from "not taken".
 * .
 */

static void rt_test_005_006_teardown(void) {
  test_wait_threads();
 800d4d0:	f7ff b956 	b.w	800c780 <test_wait_threads>
	...

0800d4e0 <rt_test_006_004_teardown>:
 800d4e0:	f7ff b94e 	b.w	800c780 <test_wait_threads>
	...

0800d4f0 <rt_test_006_001_execute>:
static void rt_test_006_001_execute(void) {
 800d4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(2);
 800d4f2:	2302      	movs	r3, #2
  test_set_step(3);
 800d4f4:	2503      	movs	r5, #3
  return ch.rlist.current;
 800d4f6:	4f22      	ldr	r7, [pc, #136]	; (800d580 <rt_test_006_001_execute+0x90>)
  test_set_step(2);
 800d4f8:	4e22      	ldr	r6, [pc, #136]	; (800d584 <rt_test_006_001_execute+0x94>)
  return chThdGetSelfX()->prio;
 800d4fa:	69ba      	ldr	r2, [r7, #24]
    chMtxLock(&m1);
 800d4fc:	4822      	ldr	r0, [pc, #136]	; (800d588 <rt_test_006_001_execute+0x98>)
 800d4fe:	6894      	ldr	r4, [r2, #8]
  test_set_step(2);
 800d500:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 800d502:	f7fb fd95 	bl	8009030 <chMtxLock>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800d506:	1c61      	adds	r1, r4, #1
 800d508:	4b20      	ldr	r3, [pc, #128]	; (800d58c <rt_test_006_001_execute+0x9c>)
 800d50a:	4a21      	ldr	r2, [pc, #132]	; (800d590 <rt_test_006_001_execute+0xa0>)
 800d50c:	4821      	ldr	r0, [pc, #132]	; (800d594 <rt_test_006_001_execute+0xa4>)
  test_set_step(3);
 800d50e:	6035      	str	r5, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800d510:	f7fa fd2e 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800d514:	4d20      	ldr	r5, [pc, #128]	; (800d598 <rt_test_006_001_execute+0xa8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800d516:	1ca1      	adds	r1, r4, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800d518:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800d51a:	4b20      	ldr	r3, [pc, #128]	; (800d59c <rt_test_006_001_execute+0xac>)
 800d51c:	4a1c      	ldr	r2, [pc, #112]	; (800d590 <rt_test_006_001_execute+0xa0>)
 800d51e:	4820      	ldr	r0, [pc, #128]	; (800d5a0 <rt_test_006_001_execute+0xb0>)
 800d520:	f7fa fd26 	bl	8007f70 <chThdCreateStatic.constprop.89>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800d524:	1ce1      	adds	r1, r4, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800d526:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800d528:	4b1e      	ldr	r3, [pc, #120]	; (800d5a4 <rt_test_006_001_execute+0xb4>)
 800d52a:	4a19      	ldr	r2, [pc, #100]	; (800d590 <rt_test_006_001_execute+0xa0>)
 800d52c:	481e      	ldr	r0, [pc, #120]	; (800d5a8 <rt_test_006_001_execute+0xb8>)
 800d52e:	f7fa fd1f 	bl	8007f70 <chThdCreateStatic.constprop.89>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800d532:	1d21      	adds	r1, r4, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800d534:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800d536:	4b1d      	ldr	r3, [pc, #116]	; (800d5ac <rt_test_006_001_execute+0xbc>)
 800d538:	4a15      	ldr	r2, [pc, #84]	; (800d590 <rt_test_006_001_execute+0xa0>)
 800d53a:	481d      	ldr	r0, [pc, #116]	; (800d5b0 <rt_test_006_001_execute+0xc0>)
 800d53c:	f7fa fd18 	bl	8007f70 <chThdCreateStatic.constprop.89>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 800d540:	1d61      	adds	r1, r4, #5
 800d542:	4a13      	ldr	r2, [pc, #76]	; (800d590 <rt_test_006_001_execute+0xa0>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800d544:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 800d546:	4b1b      	ldr	r3, [pc, #108]	; (800d5b4 <rt_test_006_001_execute+0xc4>)
 800d548:	481b      	ldr	r0, [pc, #108]	; (800d5b8 <rt_test_006_001_execute+0xc8>)
 800d54a:	f7fa fd11 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(4);
 800d54e:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 800d550:	6128      	str	r0, [r5, #16]
    chMtxUnlock(&m1);
 800d552:	480d      	ldr	r0, [pc, #52]	; (800d588 <rt_test_006_001_execute+0x98>)
  test_set_step(4);
 800d554:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 800d556:	f7fd f9d3 	bl	800a900 <chMtxUnlock>
    test_wait_threads();
 800d55a:	f7ff f911 	bl	800c780 <test_wait_threads>
 800d55e:	69bb      	ldr	r3, [r7, #24]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 800d560:	4916      	ldr	r1, [pc, #88]	; (800d5bc <rt_test_006_001_execute+0xcc>)
 800d562:	6898      	ldr	r0, [r3, #8]
 800d564:	1b00      	subs	r0, r0, r4
 800d566:	fab0 f080 	clz	r0, r0
 800d56a:	0940      	lsrs	r0, r0, #5
 800d56c:	f7f8 f9e8 	bl	8005940 <_test_assert>
 800d570:	b100      	cbz	r0, 800d574 <rt_test_006_001_execute+0x84>
}
 800d572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert_sequence("ABCDE", "invalid sequence");
 800d574:	4912      	ldr	r1, [pc, #72]	; (800d5c0 <rt_test_006_001_execute+0xd0>)
 800d576:	4813      	ldr	r0, [pc, #76]	; (800d5c4 <rt_test_006_001_execute+0xd4>)
}
 800d578:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800d57c:	f7f8 baf8 	b.w	8005b70 <_test_assert_sequence>
 800d580:	20001eb0 	.word	0x20001eb0
 800d584:	2000283c 	.word	0x2000283c
 800d588:	20001838 	.word	0x20001838
 800d58c:	0800faf4 	.word	0x0800faf4
 800d590:	0800b201 	.word	0x0800b201
 800d594:	20002128 	.word	0x20002128
 800d598:	20002854 	.word	0x20002854
 800d59c:	08010a0c 	.word	0x08010a0c
 800d5a0:	20002270 	.word	0x20002270
 800d5a4:	0800fcb4 	.word	0x0800fcb4
 800d5a8:	200023b8 	.word	0x200023b8
 800d5ac:	0800fa7c 	.word	0x0800fa7c
 800d5b0:	20002500 	.word	0x20002500
 800d5b4:	0800fa78 	.word	0x0800fa78
 800d5b8:	20002648 	.word	0x20002648
 800d5bc:	0800fab8 	.word	0x0800fab8
 800d5c0:	0800fb54 	.word	0x0800fb54
 800d5c4:	0800faf0 	.word	0x0800faf0
	...

0800d5d0 <rt_test_005_005_teardown>:
 800d5d0:	f7ff b8d6 	b.w	800c780 <test_wait_threads>
	...

0800d5e0 <rt_test_005_004_execute>:
static void rt_test_005_004_execute(void) {
 800d5e0:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 800d5e2:	2501      	movs	r5, #1
  return ch.rlist.current;
 800d5e4:	4b22      	ldr	r3, [pc, #136]	; (800d670 <rt_test_005_004_execute+0x90>)
 800d5e6:	4c23      	ldr	r4, [pc, #140]	; (800d674 <rt_test_005_004_execute+0x94>)
  return chThdGetSelfX()->prio;
 800d5e8:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 800d5ea:	4823      	ldr	r0, [pc, #140]	; (800d678 <rt_test_005_004_execute+0x98>)
 800d5ec:	6891      	ldr	r1, [r2, #8]
 800d5ee:	4b23      	ldr	r3, [pc, #140]	; (800d67c <rt_test_005_004_execute+0x9c>)
 800d5f0:	4429      	add	r1, r5
 800d5f2:	4a23      	ldr	r2, [pc, #140]	; (800d680 <rt_test_005_004_execute+0xa0>)
  test_set_step(1);
 800d5f4:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 800d5f6:	f7fa fcbb 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(2);
 800d5fa:	2502      	movs	r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 800d5fc:	4b21      	ldr	r3, [pc, #132]	; (800d684 <rt_test_005_004_execute+0xa4>)
  test_set_step(2);
 800d5fe:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 800d600:	6018      	str	r0, [r3, #0]
 800d602:	2320      	movs	r3, #32
 800d604:	f383 8811 	msr	BASEPRI, r3
 800d608:	4c1f      	ldr	r4, [pc, #124]	; (800d688 <rt_test_005_004_execute+0xa8>)
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 800d60a:	2600      	movs	r6, #0
 800d60c:	e002      	b.n	800d614 <rt_test_005_004_execute+0x34>
  while (n > (cnt_t)0) {
 800d60e:	2d01      	cmp	r5, #1
 800d610:	d00e      	beq.n	800d630 <rt_test_005_004_execute+0x50>
 800d612:	2501      	movs	r5, #1
    if (++sp->cnt <= (cnt_t)0) {
 800d614:	68a3      	ldr	r3, [r4, #8]
 800d616:	3301      	adds	r3, #1
 800d618:	2b00      	cmp	r3, #0
 800d61a:	60a3      	str	r3, [r4, #8]
 800d61c:	dcf7      	bgt.n	800d60e <rt_test_005_004_execute+0x2e>
  thread_t *tp = tqp->next;
 800d61e:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 800d620:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800d622:	605c      	str	r4, [r3, #4]
  tqp->next             = tp->queue.next;
 800d624:	6023      	str	r3, [r4, #0]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 800d626:	f7f9 fa33 	bl	8006a90 <chSchReadyI>
  while (n > (cnt_t)0) {
 800d62a:	2d01      	cmp	r5, #1
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 800d62c:	6246      	str	r6, [r0, #36]	; 0x24
  while (n > (cnt_t)0) {
 800d62e:	d1f0      	bne.n	800d612 <rt_test_005_004_execute+0x32>
    chSchRescheduleS();
 800d630:	f7fc fb36 	bl	8009ca0 <chSchRescheduleS>
 800d634:	2500      	movs	r5, #0
 800d636:	f385 8811 	msr	BASEPRI, r5
    test_wait_threads();
 800d63a:	f7ff f8a1 	bl	800c780 <test_wait_threads>
 800d63e:	2320      	movs	r3, #32
 800d640:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 800d644:	68a0      	ldr	r0, [r4, #8]
 800d646:	4911      	ldr	r1, [pc, #68]	; (800d68c <rt_test_005_004_execute+0xac>)
 800d648:	f1a0 0001 	sub.w	r0, r0, #1
 800d64c:	fab0 f080 	clz	r0, r0
 800d650:	0940      	lsrs	r0, r0, #5
 800d652:	f7f8 f975 	bl	8005940 <_test_assert>
 800d656:	b110      	cbz	r0, 800d65e <rt_test_005_004_execute+0x7e>
 800d658:	f385 8811 	msr	BASEPRI, r5
}
 800d65c:	bd70      	pop	{r4, r5, r6, pc}
 800d65e:	f380 8811 	msr	BASEPRI, r0
    test_assert_sequence("A", "invalid sequence");
 800d662:	490b      	ldr	r1, [pc, #44]	; (800d690 <rt_test_005_004_execute+0xb0>)
 800d664:	4805      	ldr	r0, [pc, #20]	; (800d67c <rt_test_005_004_execute+0x9c>)
}
 800d666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("A", "invalid sequence");
 800d66a:	f7f8 ba81 	b.w	8005b70 <_test_assert_sequence>
 800d66e:	bf00      	nop
 800d670:	20001eb0 	.word	0x20001eb0
 800d674:	2000283c 	.word	0x2000283c
 800d678:	20002128 	.word	0x20002128
 800d67c:	0800fa78 	.word	0x0800fa78
 800d680:	08009181 	.word	0x08009181
 800d684:	20002854 	.word	0x20002854
 800d688:	20002108 	.word	0x20002108
 800d68c:	0800f9c4 	.word	0x0800f9c4
 800d690:	0800fb54 	.word	0x0800fb54
	...

0800d6a0 <rt_test_005_003_execute>:
  test_set_step(1);
 800d6a0:	2001      	movs	r0, #1
static void rt_test_005_003_execute(void) {
 800d6a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 800d6a6:	4d4b      	ldr	r5, [pc, #300]	; (800d7d4 <rt_test_005_003_execute+0x134>)
 800d6a8:	2320      	movs	r3, #32
 800d6aa:	6028      	str	r0, [r5, #0]
 800d6ac:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 800d6b0:	4c49      	ldr	r4, [pc, #292]	; (800d7d8 <rt_test_005_003_execute+0x138>)
 800d6b2:	68a3      	ldr	r3, [r4, #8]
 800d6b4:	3b01      	subs	r3, #1
 800d6b6:	bf5c      	itt	pl
 800d6b8:	60a3      	strpl	r3, [r4, #8]
 800d6ba:	2000      	movpl	r0, #0
 800d6bc:	2300      	movs	r3, #0
 800d6be:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 800d6c2:	4946      	ldr	r1, [pc, #280]	; (800d7dc <rt_test_005_003_execute+0x13c>)
 800d6c4:	f7f8 f93c 	bl	8005940 <_test_assert>
 800d6c8:	b108      	cbz	r0, 800d6ce <rt_test_005_003_execute+0x2e>
}
 800d6ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return (bool)(tqp->next == (const thread_t *)tqp);
 800d6ce:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800d6d0:	4943      	ldr	r1, [pc, #268]	; (800d7e0 <rt_test_005_003_execute+0x140>)
 800d6d2:	1b00      	subs	r0, r0, r4
 800d6d4:	fab0 f080 	clz	r0, r0
 800d6d8:	0940      	lsrs	r0, r0, #5
 800d6da:	f7f8 f931 	bl	8005940 <_test_assert>
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	d1f3      	bne.n	800d6ca <rt_test_005_003_execute+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 800d6e2:	68a0      	ldr	r0, [r4, #8]
 800d6e4:	493f      	ldr	r1, [pc, #252]	; (800d7e4 <rt_test_005_003_execute+0x144>)
 800d6e6:	fab0 f080 	clz	r0, r0
 800d6ea:	0940      	lsrs	r0, r0, #5
 800d6ec:	f7f8 f928 	bl	8005940 <_test_assert>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d1ea      	bne.n	800d6ca <rt_test_005_003_execute+0x2a>
  test_set_step(2);
 800d6f4:	2602      	movs	r6, #2
  return ch.rlist.current;
 800d6f6:	4a3c      	ldr	r2, [pc, #240]	; (800d7e8 <rt_test_005_003_execute+0x148>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800d6f8:	4603      	mov	r3, r0
  return chThdGetSelfX()->prio;
 800d6fa:	6991      	ldr	r1, [r2, #24]
 800d6fc:	483b      	ldr	r0, [pc, #236]	; (800d7ec <rt_test_005_003_execute+0x14c>)
 800d6fe:	6889      	ldr	r1, [r1, #8]
 800d700:	4a3b      	ldr	r2, [pc, #236]	; (800d7f0 <rt_test_005_003_execute+0x150>)
 800d702:	3901      	subs	r1, #1
  test_set_step(2);
 800d704:	602e      	str	r6, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800d706:	f7fa fc33 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800d70a:	4b3a      	ldr	r3, [pc, #232]	; (800d7f4 <rt_test_005_003_execute+0x154>)
 800d70c:	6018      	str	r0, [r3, #0]
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 800d70e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d712:	f7fa fd8d 	bl	8008230 <chSemWaitTimeout.constprop.85>
 800d716:	4606      	mov	r6, r0
    test_wait_threads();
 800d718:	f7ff f832 	bl	800c780 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 800d71c:	fab6 f086 	clz	r0, r6
 800d720:	492e      	ldr	r1, [pc, #184]	; (800d7dc <rt_test_005_003_execute+0x13c>)
 800d722:	0940      	lsrs	r0, r0, #5
 800d724:	f7f8 f90c 	bl	8005940 <_test_assert>
 800d728:	2800      	cmp	r0, #0
 800d72a:	d1ce      	bne.n	800d6ca <rt_test_005_003_execute+0x2a>
 800d72c:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800d72e:	492c      	ldr	r1, [pc, #176]	; (800d7e0 <rt_test_005_003_execute+0x140>)
 800d730:	1b00      	subs	r0, r0, r4
 800d732:	fab0 f080 	clz	r0, r0
 800d736:	0940      	lsrs	r0, r0, #5
 800d738:	f7f8 f902 	bl	8005940 <_test_assert>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d1c4      	bne.n	800d6ca <rt_test_005_003_execute+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 800d740:	68a0      	ldr	r0, [r4, #8]
 800d742:	4928      	ldr	r1, [pc, #160]	; (800d7e4 <rt_test_005_003_execute+0x144>)
 800d744:	fab0 f080 	clz	r0, r0
 800d748:	0940      	lsrs	r0, r0, #5
 800d74a:	f7f8 f8f9 	bl	8005940 <_test_assert>
 800d74e:	2800      	cmp	r0, #0
 800d750:	d1bb      	bne.n	800d6ca <rt_test_005_003_execute+0x2a>
  test_set_step(3);
 800d752:	2303      	movs	r3, #3
 800d754:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 800d756:	f7fb f953 	bl	8008a00 <test_wait_tick>
 800d75a:	2641      	movs	r6, #65	; 0x41
 800d75c:	4681      	mov	r9, r0
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 800d75e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800d7dc <rt_test_005_003_execute+0x13c>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800d762:	4f1f      	ldr	r7, [pc, #124]	; (800d7e0 <rt_test_005_003_execute+0x140>)
      test_assert(sem1.cnt == 0, "counter not zero");
 800d764:	4d1f      	ldr	r5, [pc, #124]	; (800d7e4 <rt_test_005_003_execute+0x144>)
      test_emit_token('A' + i);
 800d766:	4630      	mov	r0, r6
 800d768:	f7f8 f98a 	bl	8005a80 <test_emit_token>
      msg = chSemWaitTimeout(&sem1, TIME_MS2I(50));
 800d76c:	2064      	movs	r0, #100	; 0x64
 800d76e:	f7fa fd5f 	bl	8008230 <chSemWaitTimeout.constprop.85>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 800d772:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800d776:	fab0 f080 	clz	r0, r0
 800d77a:	4641      	mov	r1, r8
 800d77c:	0940      	lsrs	r0, r0, #5
 800d77e:	f7f8 f8df 	bl	8005940 <_test_assert>
 800d782:	2800      	cmp	r0, #0
 800d784:	d1a1      	bne.n	800d6ca <rt_test_005_003_execute+0x2a>
 800d786:	6820      	ldr	r0, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800d788:	4639      	mov	r1, r7
 800d78a:	1b00      	subs	r0, r0, r4
 800d78c:	fab0 f080 	clz	r0, r0
 800d790:	0940      	lsrs	r0, r0, #5
 800d792:	f7f8 f8d5 	bl	8005940 <_test_assert>
 800d796:	2800      	cmp	r0, #0
 800d798:	d197      	bne.n	800d6ca <rt_test_005_003_execute+0x2a>
      test_assert(sem1.cnt == 0, "counter not zero");
 800d79a:	68a0      	ldr	r0, [r4, #8]
 800d79c:	4629      	mov	r1, r5
 800d79e:	fab0 f080 	clz	r0, r0
 800d7a2:	0940      	lsrs	r0, r0, #5
 800d7a4:	f7f8 f8cc 	bl	8005940 <_test_assert>
 800d7a8:	3601      	adds	r6, #1
 800d7aa:	b2f6      	uxtb	r6, r6
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	d18c      	bne.n	800d6ca <rt_test_005_003_execute+0x2a>
    for (i = 0; i < 5; i++) {
 800d7b0:	2e46      	cmp	r6, #70	; 0x46
 800d7b2:	d1d8      	bne.n	800d766 <rt_test_005_003_execute+0xc6>
    test_assert_sequence("ABCDE", "invalid sequence");
 800d7b4:	4910      	ldr	r1, [pc, #64]	; (800d7f8 <rt_test_005_003_execute+0x158>)
 800d7b6:	4811      	ldr	r0, [pc, #68]	; (800d7fc <rt_test_005_003_execute+0x15c>)
 800d7b8:	f7f8 f9da 	bl	8005b70 <_test_assert_sequence>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d184      	bne.n	800d6ca <rt_test_005_003_execute+0x2a>
 800d7c0:	f509 71fc 	add.w	r1, r9, #504	; 0x1f8
 800d7c4:	f509 70fa 	add.w	r0, r9, #500	; 0x1f4
    test_assert_time_window(target_time,
 800d7c8:	b289      	uxth	r1, r1
 800d7ca:	b280      	uxth	r0, r0
}
 800d7cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert_time_window(target_time,
 800d7d0:	f7f7 bece 	b.w	8005570 <_test_assert_time_window.constprop.3>
 800d7d4:	2000283c 	.word	0x2000283c
 800d7d8:	20002108 	.word	0x20002108
 800d7dc:	0800eaa8 	.word	0x0800eaa8
 800d7e0:	0800f9e4 	.word	0x0800f9e4
 800d7e4:	0800f9f4 	.word	0x0800f9f4
 800d7e8:	20001eb0 	.word	0x20001eb0
 800d7ec:	20002128 	.word	0x20002128
 800d7f0:	0800a861 	.word	0x0800a861
 800d7f4:	20002854 	.word	0x20002854
 800d7f8:	0800fb54 	.word	0x0800fb54
 800d7fc:	0800faf0 	.word	0x0800faf0

0800d800 <rt_test_005_002_execute>:
static void rt_test_005_002_execute(void) {
 800d800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800d804:	2501      	movs	r5, #1
  return ch.rlist.current;
 800d806:	4f2a      	ldr	r7, [pc, #168]	; (800d8b0 <rt_test_005_002_execute+0xb0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800d808:	4e2a      	ldr	r6, [pc, #168]	; (800d8b4 <rt_test_005_002_execute+0xb4>)
  return chThdGetSelfX()->prio;
 800d80a:	69bb      	ldr	r3, [r7, #24]
 800d80c:	4c2a      	ldr	r4, [pc, #168]	; (800d8b8 <rt_test_005_002_execute+0xb8>)
 800d80e:	6899      	ldr	r1, [r3, #8]
  test_set_step(1);
 800d810:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800d8e0 <rt_test_005_002_execute+0xe0>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800d814:	4632      	mov	r2, r6
 800d816:	3105      	adds	r1, #5
 800d818:	4620      	mov	r0, r4
 800d81a:	4b28      	ldr	r3, [pc, #160]	; (800d8bc <rt_test_005_002_execute+0xbc>)
  test_set_step(1);
 800d81c:	f8c8 5000 	str.w	r5, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800d820:	f7fa fba6 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800d824:	69bb      	ldr	r3, [r7, #24]
 800d826:	4d26      	ldr	r5, [pc, #152]	; (800d8c0 <rt_test_005_002_execute+0xc0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 800d828:	6899      	ldr	r1, [r3, #8]
 800d82a:	4632      	mov	r2, r6
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800d82c:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 800d82e:	3101      	adds	r1, #1
 800d830:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 800d834:	4b23      	ldr	r3, [pc, #140]	; (800d8c4 <rt_test_005_002_execute+0xc4>)
 800d836:	f7fa fb9b 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 800d83e:	6899      	ldr	r1, [r3, #8]
 800d840:	4632      	mov	r2, r6
 800d842:	3103      	adds	r1, #3
 800d844:	f504 7024 	add.w	r0, r4, #656	; 0x290
 800d848:	4b1f      	ldr	r3, [pc, #124]	; (800d8c8 <rt_test_005_002_execute+0xc8>)
 800d84a:	f7fa fb91 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 800d852:	6899      	ldr	r1, [r3, #8]
 800d854:	4632      	mov	r2, r6
 800d856:	3104      	adds	r1, #4
 800d858:	f504 7076 	add.w	r0, r4, #984	; 0x3d8
 800d85c:	4b1b      	ldr	r3, [pc, #108]	; (800d8cc <rt_test_005_002_execute+0xcc>)
 800d85e:	f7fa fb87 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800d862:	69bb      	ldr	r3, [r7, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 800d864:	4632      	mov	r2, r6
 800d866:	6899      	ldr	r1, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 800d868:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 800d86a:	3102      	adds	r1, #2
 800d86c:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 800d870:	4b17      	ldr	r3, [pc, #92]	; (800d8d0 <rt_test_005_002_execute+0xd0>)
 800d872:	f7fa fb7d 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(2);
 800d876:	2302      	movs	r3, #2
    chSemSignal(&sem1);
 800d878:	4c16      	ldr	r4, [pc, #88]	; (800d8d4 <rt_test_005_002_execute+0xd4>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 800d87a:	6128      	str	r0, [r5, #16]
    chSemSignal(&sem1);
 800d87c:	4620      	mov	r0, r4
  test_set_step(2);
 800d87e:	f8c8 3000 	str.w	r3, [r8]
    chSemSignal(&sem1);
 800d882:	f7fa fc05 	bl	8008090 <chSemSignal>
    chSemSignal(&sem1);
 800d886:	4620      	mov	r0, r4
 800d888:	f7fa fc02 	bl	8008090 <chSemSignal>
    chSemSignal(&sem1);
 800d88c:	4620      	mov	r0, r4
 800d88e:	f7fa fbff 	bl	8008090 <chSemSignal>
    chSemSignal(&sem1);
 800d892:	4620      	mov	r0, r4
 800d894:	f7fa fbfc 	bl	8008090 <chSemSignal>
    chSemSignal(&sem1);
 800d898:	4620      	mov	r0, r4
 800d89a:	f7fa fbf9 	bl	8008090 <chSemSignal>
    test_wait_threads();
 800d89e:	f7fe ff6f 	bl	800c780 <test_wait_threads>
}
 800d8a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800d8a6:	490c      	ldr	r1, [pc, #48]	; (800d8d8 <rt_test_005_002_execute+0xd8>)
 800d8a8:	480c      	ldr	r0, [pc, #48]	; (800d8dc <rt_test_005_002_execute+0xdc>)
 800d8aa:	f7f8 b961 	b.w	8005b70 <_test_assert_sequence>
 800d8ae:	bf00      	nop
 800d8b0:	20001eb0 	.word	0x20001eb0
 800d8b4:	08009181 	.word	0x08009181
 800d8b8:	20002128 	.word	0x20002128
 800d8bc:	0800fa78 	.word	0x0800fa78
 800d8c0:	20002854 	.word	0x20002854
 800d8c4:	0800fa7c 	.word	0x0800fa7c
 800d8c8:	0800fcb4 	.word	0x0800fcb4
 800d8cc:	08010a0c 	.word	0x08010a0c
 800d8d0:	0800faf4 	.word	0x0800faf4
 800d8d4:	20002108 	.word	0x20002108
 800d8d8:	0800fb54 	.word	0x0800fb54
 800d8dc:	0800faf0 	.word	0x0800faf0
 800d8e0:	2000283c 	.word	0x2000283c
	...

0800d8f0 <rt_test_004_001_execute>:

static void rt_test_004_001_execute(void) {
 800d8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  msg_t msg;

  /* [4.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 800d8f4:	2401      	movs	r4, #1
  return ch.rlist.current;
 800d8f6:	4d31      	ldr	r5, [pc, #196]	; (800d9bc <rt_test_004_001_execute+0xcc>)
 800d8f8:	4f31      	ldr	r7, [pc, #196]	; (800d9c0 <rt_test_004_001_execute+0xd0>)
  return chThdGetSelfX()->prio;
 800d8fa:	69aa      	ldr	r2, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 800d8fc:	4b31      	ldr	r3, [pc, #196]	; (800d9c4 <rt_test_004_001_execute+0xd4>)
 800d8fe:	6891      	ldr	r1, [r2, #8]
 800d900:	4831      	ldr	r0, [pc, #196]	; (800d9c8 <rt_test_004_001_execute+0xd8>)
 800d902:	4a32      	ldr	r2, [pc, #200]	; (800d9cc <rt_test_004_001_execute+0xdc>)
 800d904:	3901      	subs	r1, #1
  test_set_step(1);
 800d906:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 800d908:	f7fa fb32 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800d90c:	4b30      	ldr	r3, [pc, #192]	; (800d9d0 <rt_test_004_001_execute+0xe0>)
 800d90e:	2620      	movs	r6, #32
 800d910:	6018      	str	r0, [r3, #0]
 800d912:	f386 8811 	msr	BASEPRI, r6
  *trp = tp;
 800d916:	4c2f      	ldr	r4, [pc, #188]	; (800d9d4 <rt_test_004_001_execute+0xe4>)
  return ch.rlist.current;
 800d918:	69ab      	ldr	r3, [r5, #24]
    chSchGoSleepS(newstate);
 800d91a:	2003      	movs	r0, #3
  tp->u.wttrp = trp;
 800d91c:	625c      	str	r4, [r3, #36]	; 0x24
  *trp = tp;
 800d91e:	6023      	str	r3, [r4, #0]
 800d920:	f7fa fbd6 	bl	80080d0 <chSchGoSleepS>
  return currp->u.rdymsg;
 800d924:	69aa      	ldr	r2, [r5, #24]
 800d926:	2300      	movs	r3, #0
 800d928:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 800d92c:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
 800d930:	6820      	ldr	r0, [r4, #0]
 800d932:	4929      	ldr	r1, [pc, #164]	; (800d9d8 <rt_test_004_001_execute+0xe8>)
 800d934:	fab0 f080 	clz	r0, r0
 800d938:	0940      	lsrs	r0, r0, #5
 800d93a:	f7f8 f801 	bl	8005940 <_test_assert>
 800d93e:	b108      	cbz	r0, 800d944 <rt_test_004_001_execute+0x54>
                            chTimeAddX(time, TIME_MS2I(1000) + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
}
 800d940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(MSG_OK == msg,"wrong returned message");
 800d944:	fab8 f088 	clz	r0, r8
 800d948:	4924      	ldr	r1, [pc, #144]	; (800d9dc <rt_test_004_001_execute+0xec>)
 800d94a:	0940      	lsrs	r0, r0, #5
 800d94c:	f7f7 fff8 	bl	8005940 <_test_assert>
 800d950:	4680      	mov	r8, r0
 800d952:	2800      	cmp	r0, #0
 800d954:	d1f4      	bne.n	800d940 <rt_test_004_001_execute+0x50>
    test_wait_threads();
 800d956:	f7fe ff13 	bl	800c780 <test_wait_threads>
  test_set_step(2);
 800d95a:	2302      	movs	r3, #2
 800d95c:	603b      	str	r3, [r7, #0]
 800d95e:	f386 8811 	msr	BASEPRI, r6
 800d962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d966:	69ab      	ldr	r3, [r5, #24]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800d968:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d96c:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800d96e:	2003      	movs	r0, #3
  tp->u.wttrp = trp;
 800d970:	625c      	str	r4, [r3, #36]	; 0x24
  *trp = tp;
 800d972:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800d974:	f7fa fc34 	bl	80081e0 <chSchGoSleepTimeoutS>
 800d978:	b2ad      	uxth	r5, r5
 800d97a:	4606      	mov	r6, r0
 800d97c:	f388 8811 	msr	BASEPRI, r8
 800d980:	f205 71d3 	addw	r1, r5, #2003	; 0x7d3
 800d984:	f505 60fa 	add.w	r0, r5, #2000	; 0x7d0
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(1000)),
 800d988:	b289      	uxth	r1, r1
 800d98a:	b280      	uxth	r0, r0
 800d98c:	f7f7 fdf0 	bl	8005570 <_test_assert_time_window.constprop.3>
 800d990:	2800      	cmp	r0, #0
 800d992:	d1d5      	bne.n	800d940 <rt_test_004_001_execute+0x50>
    test_assert(NULL == tr1, "not NULL");
 800d994:	6820      	ldr	r0, [r4, #0]
 800d996:	4910      	ldr	r1, [pc, #64]	; (800d9d8 <rt_test_004_001_execute+0xe8>)
 800d998:	fab0 f080 	clz	r0, r0
 800d99c:	0940      	lsrs	r0, r0, #5
 800d99e:	f7f7 ffcf 	bl	8005940 <_test_assert>
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	d1cc      	bne.n	800d940 <rt_test_004_001_execute+0x50>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 800d9a6:	f1a6 30ff 	sub.w	r0, r6, #4294967295	; 0xffffffff
 800d9aa:	fab0 f080 	clz	r0, r0
}
 800d9ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 800d9b2:	0940      	lsrs	r0, r0, #5
 800d9b4:	4909      	ldr	r1, [pc, #36]	; (800d9dc <rt_test_004_001_execute+0xec>)
 800d9b6:	f7f7 bfc3 	b.w	8005940 <_test_assert>
 800d9ba:	bf00      	nop
 800d9bc:	20001eb0 	.word	0x20001eb0
 800d9c0:	2000283c 	.word	0x2000283c
 800d9c4:	0800fa78 	.word	0x0800fa78
 800d9c8:	20002128 	.word	0x20002128
 800d9cc:	0800a8c1 	.word	0x0800a8c1
 800d9d0:	20002854 	.word	0x20002854
 800d9d4:	20002868 	.word	0x20002868
 800d9d8:	0800f94c 	.word	0x0800f94c
 800d9dc:	0800f958 	.word	0x0800f958

0800d9e0 <rt_test_003_002_execute>:
 * - [3.2.3] Creating 5 threads with pseudo-random priority, execution
 *   sequence is tested.
 * .
 */

static void rt_test_003_002_execute(void) {
 800d9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* [3.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 800d9e2:	2401      	movs	r4, #1
 800d9e4:	4d53      	ldr	r5, [pc, #332]	; (800db34 <rt_test_003_002_execute+0x154>)
 800d9e6:	4e54      	ldr	r6, [pc, #336]	; (800db38 <rt_test_003_002_execute+0x158>)
  return chThdGetSelfX()->prio;
 800d9e8:	69aa      	ldr	r2, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800d9ea:	4b54      	ldr	r3, [pc, #336]	; (800db3c <rt_test_003_002_execute+0x15c>)
 800d9ec:	6891      	ldr	r1, [r2, #8]
 800d9ee:	4854      	ldr	r0, [pc, #336]	; (800db40 <rt_test_003_002_execute+0x160>)
 800d9f0:	4a54      	ldr	r2, [pc, #336]	; (800db44 <rt_test_003_002_execute+0x164>)
 800d9f2:	3905      	subs	r1, #5
  test_set_step(1);
 800d9f4:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800d9f6:	f7fa fabb 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800d9fa:	69ab      	ldr	r3, [r5, #24]
 800d9fc:	4c52      	ldr	r4, [pc, #328]	; (800db48 <rt_test_003_002_execute+0x168>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800d9fe:	6899      	ldr	r1, [r3, #8]
 800da00:	4a50      	ldr	r2, [pc, #320]	; (800db44 <rt_test_003_002_execute+0x164>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800da02:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800da04:	3904      	subs	r1, #4
 800da06:	4b51      	ldr	r3, [pc, #324]	; (800db4c <rt_test_003_002_execute+0x16c>)
 800da08:	4851      	ldr	r0, [pc, #324]	; (800db50 <rt_test_003_002_execute+0x170>)
 800da0a:	f7fa fab1 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800da0e:	69ab      	ldr	r3, [r5, #24]
 800da10:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800da12:	6899      	ldr	r1, [r3, #8]
 800da14:	4a4b      	ldr	r2, [pc, #300]	; (800db44 <rt_test_003_002_execute+0x164>)
 800da16:	4b4f      	ldr	r3, [pc, #316]	; (800db54 <rt_test_003_002_execute+0x174>)
 800da18:	3903      	subs	r1, #3
 800da1a:	484f      	ldr	r0, [pc, #316]	; (800db58 <rt_test_003_002_execute+0x178>)
 800da1c:	f7fa faa8 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800da20:	69ab      	ldr	r3, [r5, #24]
 800da22:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800da24:	6899      	ldr	r1, [r3, #8]
 800da26:	4a47      	ldr	r2, [pc, #284]	; (800db44 <rt_test_003_002_execute+0x164>)
 800da28:	4b4c      	ldr	r3, [pc, #304]	; (800db5c <rt_test_003_002_execute+0x17c>)
 800da2a:	3902      	subs	r1, #2
 800da2c:	484c      	ldr	r0, [pc, #304]	; (800db60 <rt_test_003_002_execute+0x180>)
 800da2e:	f7fa fa9f 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800da32:	69ab      	ldr	r3, [r5, #24]
 800da34:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800da36:	6899      	ldr	r1, [r3, #8]
 800da38:	4a42      	ldr	r2, [pc, #264]	; (800db44 <rt_test_003_002_execute+0x164>)
 800da3a:	3901      	subs	r1, #1
 800da3c:	4b49      	ldr	r3, [pc, #292]	; (800db64 <rt_test_003_002_execute+0x184>)
 800da3e:	484a      	ldr	r0, [pc, #296]	; (800db68 <rt_test_003_002_execute+0x188>)
 800da40:	f7fa fa96 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800da44:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 800da46:	f7fe fe9b 	bl	800c780 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800da4a:	4948      	ldr	r1, [pc, #288]	; (800db6c <rt_test_003_002_execute+0x18c>)
 800da4c:	4848      	ldr	r0, [pc, #288]	; (800db70 <rt_test_003_002_execute+0x190>)
 800da4e:	f7f8 f88f 	bl	8005b70 <_test_assert_sequence>
 800da52:	b100      	cbz	r0, 800da56 <rt_test_003_002_execute+0x76>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
    test_wait_threads();
    test_assert_sequence("ABCDE", "invalid sequence");
  }
}
 800da54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800da56:	2702      	movs	r7, #2
 800da58:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800da5a:	4b42      	ldr	r3, [pc, #264]	; (800db64 <rt_test_003_002_execute+0x184>)
 800da5c:	6891      	ldr	r1, [r2, #8]
 800da5e:	4842      	ldr	r0, [pc, #264]	; (800db68 <rt_test_003_002_execute+0x188>)
 800da60:	4a38      	ldr	r2, [pc, #224]	; (800db44 <rt_test_003_002_execute+0x164>)
 800da62:	3901      	subs	r1, #1
  test_set_step(2);
 800da64:	6037      	str	r7, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800da66:	f7fa fa83 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800da6a:	69ab      	ldr	r3, [r5, #24]
 800da6c:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800da6e:	6899      	ldr	r1, [r3, #8]
 800da70:	4a34      	ldr	r2, [pc, #208]	; (800db44 <rt_test_003_002_execute+0x164>)
 800da72:	4b3a      	ldr	r3, [pc, #232]	; (800db5c <rt_test_003_002_execute+0x17c>)
 800da74:	3902      	subs	r1, #2
 800da76:	483a      	ldr	r0, [pc, #232]	; (800db60 <rt_test_003_002_execute+0x180>)
 800da78:	f7fa fa7a 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800da7c:	69ab      	ldr	r3, [r5, #24]
 800da7e:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800da80:	6899      	ldr	r1, [r3, #8]
 800da82:	4a30      	ldr	r2, [pc, #192]	; (800db44 <rt_test_003_002_execute+0x164>)
 800da84:	4b33      	ldr	r3, [pc, #204]	; (800db54 <rt_test_003_002_execute+0x174>)
 800da86:	3903      	subs	r1, #3
 800da88:	4833      	ldr	r0, [pc, #204]	; (800db58 <rt_test_003_002_execute+0x178>)
 800da8a:	f7fa fa71 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800da8e:	69ab      	ldr	r3, [r5, #24]
 800da90:	60a0      	str	r0, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800da92:	6899      	ldr	r1, [r3, #8]
 800da94:	4a2b      	ldr	r2, [pc, #172]	; (800db44 <rt_test_003_002_execute+0x164>)
 800da96:	4b2d      	ldr	r3, [pc, #180]	; (800db4c <rt_test_003_002_execute+0x16c>)
 800da98:	3904      	subs	r1, #4
 800da9a:	482d      	ldr	r0, [pc, #180]	; (800db50 <rt_test_003_002_execute+0x170>)
 800da9c:	f7fa fa68 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800daa0:	69ab      	ldr	r3, [r5, #24]
 800daa2:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800daa4:	6899      	ldr	r1, [r3, #8]
 800daa6:	4a27      	ldr	r2, [pc, #156]	; (800db44 <rt_test_003_002_execute+0x164>)
 800daa8:	3905      	subs	r1, #5
 800daaa:	4b24      	ldr	r3, [pc, #144]	; (800db3c <rt_test_003_002_execute+0x15c>)
 800daac:	4824      	ldr	r0, [pc, #144]	; (800db40 <rt_test_003_002_execute+0x160>)
 800daae:	f7fa fa5f 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800dab2:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 800dab4:	f7fe fe64 	bl	800c780 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800dab8:	492c      	ldr	r1, [pc, #176]	; (800db6c <rt_test_003_002_execute+0x18c>)
 800daba:	482d      	ldr	r0, [pc, #180]	; (800db70 <rt_test_003_002_execute+0x190>)
 800dabc:	f7f8 f858 	bl	8005b70 <_test_assert_sequence>
 800dac0:	2800      	cmp	r0, #0
 800dac2:	d1c7      	bne.n	800da54 <rt_test_003_002_execute+0x74>
  test_set_step(3);
 800dac4:	2003      	movs	r0, #3
 800dac6:	69aa      	ldr	r2, [r5, #24]
 800dac8:	6030      	str	r0, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800daca:	6891      	ldr	r1, [r2, #8]
 800dacc:	4b1f      	ldr	r3, [pc, #124]	; (800db4c <rt_test_003_002_execute+0x16c>)
 800dace:	4a1d      	ldr	r2, [pc, #116]	; (800db44 <rt_test_003_002_execute+0x164>)
 800dad0:	3904      	subs	r1, #4
 800dad2:	481f      	ldr	r0, [pc, #124]	; (800db50 <rt_test_003_002_execute+0x170>)
 800dad4:	f7fa fa4c 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800dad8:	69ab      	ldr	r3, [r5, #24]
 800dada:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800dadc:	6899      	ldr	r1, [r3, #8]
 800dade:	4a19      	ldr	r2, [pc, #100]	; (800db44 <rt_test_003_002_execute+0x164>)
 800dae0:	4b16      	ldr	r3, [pc, #88]	; (800db3c <rt_test_003_002_execute+0x15c>)
 800dae2:	3905      	subs	r1, #5
 800dae4:	4816      	ldr	r0, [pc, #88]	; (800db40 <rt_test_003_002_execute+0x160>)
 800dae6:	f7fa fa43 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800daea:	69ab      	ldr	r3, [r5, #24]
 800daec:	6020      	str	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800daee:	6899      	ldr	r1, [r3, #8]
 800daf0:	4a14      	ldr	r2, [pc, #80]	; (800db44 <rt_test_003_002_execute+0x164>)
 800daf2:	4b1c      	ldr	r3, [pc, #112]	; (800db64 <rt_test_003_002_execute+0x184>)
 800daf4:	3901      	subs	r1, #1
 800daf6:	481c      	ldr	r0, [pc, #112]	; (800db68 <rt_test_003_002_execute+0x188>)
 800daf8:	f7fa fa3a 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800dafc:	69ab      	ldr	r3, [r5, #24]
 800dafe:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800db00:	6899      	ldr	r1, [r3, #8]
 800db02:	4a10      	ldr	r2, [pc, #64]	; (800db44 <rt_test_003_002_execute+0x164>)
 800db04:	4b15      	ldr	r3, [pc, #84]	; (800db5c <rt_test_003_002_execute+0x17c>)
 800db06:	3902      	subs	r1, #2
 800db08:	4815      	ldr	r0, [pc, #84]	; (800db60 <rt_test_003_002_execute+0x180>)
 800db0a:	f7fa fa31 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800db0e:	69ab      	ldr	r3, [r5, #24]
 800db10:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800db12:	6899      	ldr	r1, [r3, #8]
 800db14:	4a0b      	ldr	r2, [pc, #44]	; (800db44 <rt_test_003_002_execute+0x164>)
 800db16:	4b0f      	ldr	r3, [pc, #60]	; (800db54 <rt_test_003_002_execute+0x174>)
 800db18:	3903      	subs	r1, #3
 800db1a:	480f      	ldr	r0, [pc, #60]	; (800db58 <rt_test_003_002_execute+0x178>)
 800db1c:	f7fa fa28 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800db20:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 800db22:	f7fe fe2d 	bl	800c780 <test_wait_threads>
}
 800db26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800db2a:	4910      	ldr	r1, [pc, #64]	; (800db6c <rt_test_003_002_execute+0x18c>)
 800db2c:	4810      	ldr	r0, [pc, #64]	; (800db70 <rt_test_003_002_execute+0x190>)
 800db2e:	f7f8 b81f 	b.w	8005b70 <_test_assert_sequence>
 800db32:	bf00      	nop
 800db34:	20001eb0 	.word	0x20001eb0
 800db38:	2000283c 	.word	0x2000283c
 800db3c:	0800faf4 	.word	0x0800faf4
 800db40:	20002128 	.word	0x20002128
 800db44:	08005ae1 	.word	0x08005ae1
 800db48:	20002854 	.word	0x20002854
 800db4c:	08010a0c 	.word	0x08010a0c
 800db50:	20002270 	.word	0x20002270
 800db54:	0800fcb4 	.word	0x0800fcb4
 800db58:	200023b8 	.word	0x200023b8
 800db5c:	0800fa7c 	.word	0x0800fa7c
 800db60:	20002500 	.word	0x20002500
 800db64:	0800fa78 	.word	0x0800fa78
 800db68:	20002648 	.word	0x20002648
 800db6c:	0800fb54 	.word	0x0800fb54
 800db70:	0800faf0 	.word	0x0800faf0
	...

0800db80 <chSemReset>:
void chSemReset(semaphore_t *sp, cnt_t n) {
 800db80:	b570      	push	{r4, r5, r6, lr}
 800db82:	2320      	movs	r3, #32
 800db84:	f383 8811 	msr	BASEPRI, r3
  cnt = sp->cnt;
 800db88:	6884      	ldr	r4, [r0, #8]
  sp->cnt = n;
 800db8a:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 800db8c:	3401      	adds	r4, #1
 800db8e:	2c00      	cmp	r4, #0
 800db90:	dc0c      	bgt.n	800dbac <chSemReset+0x2c>
 800db92:	4605      	mov	r5, r0
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 800db94:	f06f 0601 	mvn.w	r6, #1
  thread_t *tp = tqp->prev;
 800db98:	6868      	ldr	r0, [r5, #4]
  while (++cnt <= (cnt_t)0) {
 800db9a:	3401      	adds	r4, #1
  tqp->prev             = tp->queue.prev;
 800db9c:	6843      	ldr	r3, [r0, #4]
 800db9e:	606b      	str	r3, [r5, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 800dba0:	601d      	str	r5, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 800dba2:	f7f8 ff75 	bl	8006a90 <chSchReadyI>
  while (++cnt <= (cnt_t)0) {
 800dba6:	2c01      	cmp	r4, #1
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 800dba8:	6246      	str	r6, [r0, #36]	; 0x24
  while (++cnt <= (cnt_t)0) {
 800dbaa:	d1f5      	bne.n	800db98 <chSemReset+0x18>
  chSchRescheduleS();
 800dbac:	f7fc f878 	bl	8009ca0 <chSchRescheduleS>
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	f383 8811 	msr	BASEPRI, r3
}
 800dbb6:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dbc0 <rt_test_010_007_execute>:
static void rt_test_010_007_execute(void) {
 800dbc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 800dbc4:	2401      	movs	r4, #1
  return ch.rlist.current;
 800dbc6:	4d37      	ldr	r5, [pc, #220]	; (800dca4 <rt_test_010_007_execute+0xe4>)
 800dbc8:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800dcd4 <rt_test_010_007_execute+0x114>
  return chThdGetSelfX()->prio;
 800dbcc:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800dbce:	2300      	movs	r3, #0
 800dbd0:	6891      	ldr	r1, [r2, #8]
 800dbd2:	4835      	ldr	r0, [pc, #212]	; (800dca8 <rt_test_010_007_execute+0xe8>)
 800dbd4:	4a35      	ldr	r2, [pc, #212]	; (800dcac <rt_test_010_007_execute+0xec>)
 800dbd6:	3105      	adds	r1, #5
  test_set_step(1);
 800dbd8:	f8c8 4000 	str.w	r4, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800dbdc:	f7fa f9c8 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800dbe0:	69ab      	ldr	r3, [r5, #24]
 800dbe2:	4c33      	ldr	r4, [pc, #204]	; (800dcb0 <rt_test_010_007_execute+0xf0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800dbe4:	6899      	ldr	r1, [r3, #8]
 800dbe6:	4a31      	ldr	r2, [pc, #196]	; (800dcac <rt_test_010_007_execute+0xec>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800dbe8:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800dbea:	3104      	adds	r1, #4
 800dbec:	2300      	movs	r3, #0
 800dbee:	4831      	ldr	r0, [pc, #196]	; (800dcb4 <rt_test_010_007_execute+0xf4>)
 800dbf0:	f7fa f9be 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800dbf4:	69ab      	ldr	r3, [r5, #24]
 800dbf6:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 800dbf8:	6899      	ldr	r1, [r3, #8]
 800dbfa:	4a2c      	ldr	r2, [pc, #176]	; (800dcac <rt_test_010_007_execute+0xec>)
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	3103      	adds	r1, #3
 800dc00:	482d      	ldr	r0, [pc, #180]	; (800dcb8 <rt_test_010_007_execute+0xf8>)
 800dc02:	f7fa f9b5 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800dc06:	69ab      	ldr	r3, [r5, #24]
 800dc08:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800dc0a:	6899      	ldr	r1, [r3, #8]
 800dc0c:	4a27      	ldr	r2, [pc, #156]	; (800dcac <rt_test_010_007_execute+0xec>)
 800dc0e:	2300      	movs	r3, #0
 800dc10:	3102      	adds	r1, #2
 800dc12:	482a      	ldr	r0, [pc, #168]	; (800dcbc <rt_test_010_007_execute+0xfc>)
 800dc14:	f7fa f9ac 	bl	8007f70 <chThdCreateStatic.constprop.89>
 800dc18:	69ab      	ldr	r3, [r5, #24]
 800dc1a:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800dc1c:	6899      	ldr	r1, [r3, #8]
 800dc1e:	4a23      	ldr	r2, [pc, #140]	; (800dcac <rt_test_010_007_execute+0xec>)
 800dc20:	2300      	movs	r3, #0
 800dc22:	3101      	adds	r1, #1
 800dc24:	4826      	ldr	r0, [pc, #152]	; (800dcc0 <rt_test_010_007_execute+0x100>)
 800dc26:	f7fa f9a3 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(2);
 800dc2a:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800dc2c:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 800dc2e:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 800dc32:	f7fa fee5 	bl	8008a00 <test_wait_tick>
    n = 0;
 800dc36:	f04f 0900 	mov.w	r9, #0
    start = test_wait_tick();
 800dc3a:	4605      	mov	r5, r0
 800dc3c:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 800dc40:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
 800dc44:	b2a4      	uxth	r4, r4
      chSemReset(&sem1, 0);
 800dc46:	4e1f      	ldr	r6, [pc, #124]	; (800dcc4 <rt_test_010_007_execute+0x104>)
 800dc48:	1a24      	subs	r4, r4, r0
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	f7ff ff97 	bl	800db80 <chSemReset>
 800dc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      n++;
 800dc54:	f109 0901 	add.w	r9, r9, #1
  return (bool)((time - start) < (end - start));
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	1b5b      	subs	r3, r3, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 800dc5c:	429c      	cmp	r4, r3
 800dc5e:	dcf4      	bgt.n	800dc4a <rt_test_010_007_execute+0x8a>
  test_set_step(3);
 800dc60:	2303      	movs	r3, #3
 800dc62:	f8c8 3000 	str.w	r3, [r8]
    test_terminate_threads();
 800dc66:	f7f7 feab 	bl	80059c0 <test_terminate_threads>
    chSemReset(&sem1, 0);
 800dc6a:	2100      	movs	r1, #0
 800dc6c:	4815      	ldr	r0, [pc, #84]	; (800dcc4 <rt_test_010_007_execute+0x104>)
 800dc6e:	f7ff ff87 	bl	800db80 <chSemReset>
    test_wait_threads();
 800dc72:	f7fe fd85 	bl	800c780 <test_wait_threads>
  test_set_step(4);
 800dc76:	2304      	movs	r3, #4
    test_print("--- Score : ");
 800dc78:	4813      	ldr	r0, [pc, #76]	; (800dcc8 <rt_test_010_007_execute+0x108>)
  test_set_step(4);
 800dc7a:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 800dc7e:	f7f7 ff5f 	bl	8005b40 <test_print>
    test_printn(n);
 800dc82:	4648      	mov	r0, r9
 800dc84:	f7f7 feec 	bl	8005a60 <test_printn>
    test_printn(n * 6);
 800dc88:	eb09 0949 	add.w	r9, r9, r9, lsl #1
    test_print(" reschedules/S, ");
 800dc8c:	480f      	ldr	r0, [pc, #60]	; (800dccc <rt_test_010_007_execute+0x10c>)
 800dc8e:	f7f7 ff57 	bl	8005b40 <test_print>
    test_printn(n * 6);
 800dc92:	ea4f 0049 	mov.w	r0, r9, lsl #1
 800dc96:	f7f7 fee3 	bl	8005a60 <test_printn>
}
 800dc9a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" ctxswc/S");
 800dc9e:	480c      	ldr	r0, [pc, #48]	; (800dcd0 <rt_test_010_007_execute+0x110>)
 800dca0:	f7f7 bf2e 	b.w	8005b00 <test_println>
 800dca4:	20001eb0 	.word	0x20001eb0
 800dca8:	20002128 	.word	0x20002128
 800dcac:	08009131 	.word	0x08009131
 800dcb0:	20002854 	.word	0x20002854
 800dcb4:	20002270 	.word	0x20002270
 800dcb8:	200023b8 	.word	0x200023b8
 800dcbc:	20002500 	.word	0x20002500
 800dcc0:	20002648 	.word	0x20002648
 800dcc4:	20002114 	.word	0x20002114
 800dcc8:	0800fdf0 	.word	0x0800fdf0
 800dccc:	0800fdb0 	.word	0x0800fdb0
 800dcd0:	0800fdd4 	.word	0x0800fdd4
 800dcd4:	2000283c 	.word	0x2000283c
	...

0800dce0 <rt_test_005_006_execute>:
}

static void rt_test_005_006_execute(void) {
 800dce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [5.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 800dce4:	2301      	movs	r3, #1
  sp->cnt = n;
 800dce6:	2600      	movs	r6, #0
static void rt_test_005_006_execute(void) {
 800dce8:	b084      	sub	sp, #16
  test_set_step(1);
 800dcea:	4f5f      	ldr	r7, [pc, #380]	; (800de68 <rt_test_005_006_execute+0x188>)
  tqp->next = (thread_t *)tqp;
 800dcec:	ac01      	add	r4, sp, #4
 800dcee:	603b      	str	r3, [r7, #0]
 800dcf0:	9603      	str	r6, [sp, #12]
  tqp->prev = (thread_t *)tqp;
 800dcf2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800dcf6:	f04f 0820 	mov.w	r8, #32
 800dcfa:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 800dcfe:	9803      	ldr	r0, [sp, #12]
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 800dd00:	495a      	ldr	r1, [pc, #360]	; (800de6c <rt_test_005_006_execute+0x18c>)
 800dd02:	42b0      	cmp	r0, r6
 800dd04:	bfcc      	ite	gt
 800dd06:	2000      	movgt	r0, #0
 800dd08:	2001      	movle	r0, #1
 800dd0a:	f7f7 fe19 	bl	8005940 <_test_assert>
 800dd0e:	b120      	cbz	r0, 800dd1a <rt_test_005_006_execute+0x3a>
 800dd10:	f386 8811 	msr	BASEPRI, r6
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
}
 800dd14:	b004      	add	sp, #16
 800dd16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd1a:	4605      	mov	r5, r0
 800dd1c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 800dd20:	2302      	movs	r3, #2
  chSemReset(&bsp->sem, taken ? (cnt_t)0 : (cnt_t)1);
 800dd22:	4601      	mov	r1, r0
 800dd24:	4620      	mov	r0, r4
 800dd26:	603b      	str	r3, [r7, #0]
 800dd28:	f7ff ff2a 	bl	800db80 <chSemReset>
 800dd2c:	f388 8811 	msr	BASEPRI, r8
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 800dd30:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 800dd32:	494e      	ldr	r1, [pc, #312]	; (800de6c <rt_test_005_006_execute+0x18c>)
 800dd34:	2800      	cmp	r0, #0
 800dd36:	bfcc      	ite	gt
 800dd38:	2000      	movgt	r0, #0
 800dd3a:	2001      	movle	r0, #1
 800dd3c:	f7f7 fe00 	bl	8005940 <_test_assert>
 800dd40:	4606      	mov	r6, r0
 800dd42:	b120      	cbz	r0, 800dd4e <rt_test_005_006_execute+0x6e>
 800dd44:	f385 8811 	msr	BASEPRI, r5
}
 800dd48:	b004      	add	sp, #16
 800dd4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd4e:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 800dd52:	2503      	movs	r5, #3
  return ch.rlist.current;
 800dd54:	4a46      	ldr	r2, [pc, #280]	; (800de70 <rt_test_005_006_execute+0x190>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800dd56:	4623      	mov	r3, r4
  return chThdGetSelfX()->prio;
 800dd58:	6991      	ldr	r1, [r2, #24]
 800dd5a:	4846      	ldr	r0, [pc, #280]	; (800de74 <rt_test_005_006_execute+0x194>)
 800dd5c:	6889      	ldr	r1, [r1, #8]
 800dd5e:	4a46      	ldr	r2, [pc, #280]	; (800de78 <rt_test_005_006_execute+0x198>)
 800dd60:	3901      	subs	r1, #1
  test_set_step(3);
 800dd62:	603d      	str	r5, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800dd64:	f7fa f904 	bl	8007f70 <chThdCreateStatic.constprop.89>
  test_set_step(4);
 800dd68:	2204      	movs	r2, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800dd6a:	4b44      	ldr	r3, [pc, #272]	; (800de7c <rt_test_005_006_execute+0x19c>)
  test_set_step(4);
 800dd6c:	603a      	str	r2, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800dd6e:	6018      	str	r0, [r3, #0]
  return chSemWait(&bsp->sem);
 800dd70:	4620      	mov	r0, r4
 800dd72:	f7fb f96d 	bl	8009050 <chSemWait>
 800dd76:	4605      	mov	r5, r0
 800dd78:	f388 8811 	msr	BASEPRI, r8
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 800dd7c:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 800dd7e:	493b      	ldr	r1, [pc, #236]	; (800de6c <rt_test_005_006_execute+0x18c>)
 800dd80:	2800      	cmp	r0, #0
 800dd82:	bfcc      	ite	gt
 800dd84:	2000      	movgt	r0, #0
 800dd86:	2001      	movle	r0, #1
 800dd88:	f7f7 fdda 	bl	8005940 <_test_assert>
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	d1bf      	bne.n	800dd10 <rt_test_005_006_execute+0x30>
 800dd90:	f380 8811 	msr	BASEPRI, r0
    test_assert(msg == MSG_OK, "unexpected message");
 800dd94:	fab5 f085 	clz	r0, r5
 800dd98:	4939      	ldr	r1, [pc, #228]	; (800de80 <rt_test_005_006_execute+0x1a0>)
 800dd9a:	0940      	lsrs	r0, r0, #5
 800dd9c:	f7f7 fdd0 	bl	8005940 <_test_assert>
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d1b7      	bne.n	800dd14 <rt_test_005_006_execute+0x34>
  test_set_step(5);
 800dda4:	2305      	movs	r3, #5
 800dda6:	603b      	str	r3, [r7, #0]
 800dda8:	f388 8811 	msr	BASEPRI, r8
  if (bsp->sem.cnt < (cnt_t)1) {
 800ddac:	9b03      	ldr	r3, [sp, #12]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	dd4e      	ble.n	800de50 <rt_test_005_006_execute+0x170>
  chSchRescheduleS();
 800ddb2:	f7fb ff75 	bl	8009ca0 <chSchRescheduleS>
 800ddb6:	2500      	movs	r5, #0
 800ddb8:	f385 8811 	msr	BASEPRI, r5
 800ddbc:	f04f 0820 	mov.w	r8, #32
 800ddc0:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 800ddc4:	9803      	ldr	r0, [sp, #12]
 800ddc6:	492f      	ldr	r1, [pc, #188]	; (800de84 <rt_test_005_006_execute+0x1a4>)
 800ddc8:	42a8      	cmp	r0, r5
 800ddca:	bfd4      	ite	le
 800ddcc:	2000      	movle	r0, #0
 800ddce:	2001      	movgt	r0, #1
 800ddd0:	f7f7 fdb6 	bl	8005940 <_test_assert>
 800ddd4:	4606      	mov	r6, r0
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d1b4      	bne.n	800dd44 <rt_test_005_006_execute+0x64>
 800ddda:	f380 8811 	msr	BASEPRI, r0
 800ddde:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 800dde2:	9803      	ldr	r0, [sp, #12]
 800dde4:	4928      	ldr	r1, [pc, #160]	; (800de88 <rt_test_005_006_execute+0x1a8>)
 800dde6:	f1a0 0001 	sub.w	r0, r0, #1
 800ddea:	fab0 f080 	clz	r0, r0
 800ddee:	0940      	lsrs	r0, r0, #5
 800ddf0:	f7f7 fda6 	bl	8005940 <_test_assert>
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	d18b      	bne.n	800dd10 <rt_test_005_006_execute+0x30>
 800ddf8:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 800ddfc:	2306      	movs	r3, #6
 800ddfe:	603b      	str	r3, [r7, #0]
 800de00:	f388 8811 	msr	BASEPRI, r8
  if (bsp->sem.cnt < (cnt_t)1) {
 800de04:	9b03      	ldr	r3, [sp, #12]
 800de06:	2b00      	cmp	r3, #0
 800de08:	dd26      	ble.n	800de58 <rt_test_005_006_execute+0x178>
  chSchRescheduleS();
 800de0a:	f7fb ff49 	bl	8009ca0 <chSchRescheduleS>
 800de0e:	2600      	movs	r6, #0
 800de10:	f386 8811 	msr	BASEPRI, r6
 800de14:	2520      	movs	r5, #32
 800de16:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 800de1a:	9803      	ldr	r0, [sp, #12]
 800de1c:	491b      	ldr	r1, [pc, #108]	; (800de8c <rt_test_005_006_execute+0x1ac>)
 800de1e:	42b0      	cmp	r0, r6
 800de20:	bfd4      	ite	le
 800de22:	2000      	movle	r0, #0
 800de24:	2001      	movgt	r0, #1
 800de26:	f7f7 fd8b 	bl	8005940 <_test_assert>
 800de2a:	4604      	mov	r4, r0
 800de2c:	2800      	cmp	r0, #0
 800de2e:	f47f af6f 	bne.w	800dd10 <rt_test_005_006_execute+0x30>
 800de32:	f380 8811 	msr	BASEPRI, r0
 800de36:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 800de3a:	9803      	ldr	r0, [sp, #12]
 800de3c:	4912      	ldr	r1, [pc, #72]	; (800de88 <rt_test_005_006_execute+0x1a8>)
 800de3e:	1e43      	subs	r3, r0, #1
 800de40:	4258      	negs	r0, r3
 800de42:	4158      	adcs	r0, r3
 800de44:	f7f7 fd7c 	bl	8005940 <_test_assert>
 800de48:	b150      	cbz	r0, 800de60 <rt_test_005_006_execute+0x180>
 800de4a:	f384 8811 	msr	BASEPRI, r4
 800de4e:	e761      	b.n	800dd14 <rt_test_005_006_execute+0x34>
    chSemSignalI(&bsp->sem);
 800de50:	4620      	mov	r0, r4
 800de52:	f7f8 ffb5 	bl	8006dc0 <chSemSignalI>
 800de56:	e7ac      	b.n	800ddb2 <rt_test_005_006_execute+0xd2>
 800de58:	4620      	mov	r0, r4
 800de5a:	f7f8 ffb1 	bl	8006dc0 <chSemSignalI>
 800de5e:	e7d4      	b.n	800de0a <rt_test_005_006_execute+0x12a>
 800de60:	f380 8811 	msr	BASEPRI, r0
 800de64:	e756      	b.n	800dd14 <rt_test_005_006_execute+0x34>
 800de66:	bf00      	nop
 800de68:	2000283c 	.word	0x2000283c
 800de6c:	0800fa18 	.word	0x0800fa18
 800de70:	20001eb0 	.word	0x20001eb0
 800de74:	20002128 	.word	0x20002128
 800de78:	0800a891 	.word	0x0800a891
 800de7c:	20002854 	.word	0x20002854
 800de80:	0800fa24 	.word	0x0800fa24
 800de84:	0800fa38 	.word	0x0800fa38
 800de88:	0800fa44 	.word	0x0800fa44
 800de8c:	0800fa1c 	.word	0x0800fa1c

0800de90 <rt_test_005_001_execute>:
static void rt_test_005_001_execute(void) {
 800de90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 800de94:	2301      	movs	r3, #1
    msg = chSemWait(&sem1);
 800de96:	4c29      	ldr	r4, [pc, #164]	; (800df3c <rt_test_005_001_execute+0xac>)
  test_set_step(1);
 800de98:	4e29      	ldr	r6, [pc, #164]	; (800df40 <rt_test_005_001_execute+0xb0>)
    msg = chSemWait(&sem1);
 800de9a:	4620      	mov	r0, r4
  test_set_step(1);
 800de9c:	6033      	str	r3, [r6, #0]
    msg = chSemWait(&sem1);
 800de9e:	f7fb f8d7 	bl	8009050 <chSemWait>
 800dea2:	2520      	movs	r5, #32
 800dea4:	4607      	mov	r7, r0
 800dea6:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 800deaa:	68a0      	ldr	r0, [r4, #8]
 800deac:	4925      	ldr	r1, [pc, #148]	; (800df44 <rt_test_005_001_execute+0xb4>)
 800deae:	fab0 f080 	clz	r0, r0
 800deb2:	0940      	lsrs	r0, r0, #5
 800deb4:	f7f7 fd44 	bl	8005940 <_test_assert>
 800deb8:	b120      	cbz	r0, 800dec4 <rt_test_005_001_execute+0x34>
 800deba:	2300      	movs	r3, #0
 800debc:	f383 8811 	msr	BASEPRI, r3
}
 800dec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dec4:	f380 8811 	msr	BASEPRI, r0
    test_assert(MSG_OK == msg, "wrong returned message");
 800dec8:	fab7 f087 	clz	r0, r7
 800decc:	491e      	ldr	r1, [pc, #120]	; (800df48 <rt_test_005_001_execute+0xb8>)
 800dece:	0940      	lsrs	r0, r0, #5
 800ded0:	f7f7 fd36 	bl	8005940 <_test_assert>
 800ded4:	4607      	mov	r7, r0
 800ded6:	2800      	cmp	r0, #0
 800ded8:	d1f2      	bne.n	800dec0 <rt_test_005_001_execute+0x30>
  test_set_step(2);
 800deda:	f04f 0902 	mov.w	r9, #2
    chSemSignal(&sem1);
 800dede:	4620      	mov	r0, r4
  test_set_step(2);
 800dee0:	f8c6 9000 	str.w	r9, [r6]
    chSemSignal(&sem1);
 800dee4:	f7fa f8d4 	bl	8008090 <chSemSignal>
 800dee8:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 800deec:	68a0      	ldr	r0, [r4, #8]
 800deee:	4915      	ldr	r1, [pc, #84]	; (800df44 <rt_test_005_001_execute+0xb4>)
 800def0:	f1a0 0001 	sub.w	r0, r0, #1
 800def4:	fab0 f080 	clz	r0, r0
 800def8:	0940      	lsrs	r0, r0, #5
 800defa:	f7f7 fd21 	bl	8005940 <_test_assert>
 800defe:	4680      	mov	r8, r0
 800df00:	b110      	cbz	r0, 800df08 <rt_test_005_001_execute+0x78>
 800df02:	f387 8811 	msr	BASEPRI, r7
 800df06:	e7db      	b.n	800dec0 <rt_test_005_001_execute+0x30>
 800df08:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 800df0c:	2303      	movs	r3, #3
    chSemReset(&sem1, 2);
 800df0e:	4649      	mov	r1, r9
 800df10:	4620      	mov	r0, r4
  test_set_step(3);
 800df12:	6033      	str	r3, [r6, #0]
    chSemReset(&sem1, 2);
 800df14:	f7ff fe34 	bl	800db80 <chSemReset>
 800df18:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 800df1c:	68a0      	ldr	r0, [r4, #8]
 800df1e:	4909      	ldr	r1, [pc, #36]	; (800df44 <rt_test_005_001_execute+0xb4>)
 800df20:	f1a0 0002 	sub.w	r0, r0, #2
 800df24:	fab0 f080 	clz	r0, r0
 800df28:	0940      	lsrs	r0, r0, #5
 800df2a:	f7f7 fd09 	bl	8005940 <_test_assert>
 800df2e:	b910      	cbnz	r0, 800df36 <rt_test_005_001_execute+0xa6>
 800df30:	f380 8811 	msr	BASEPRI, r0
 800df34:	e7c4      	b.n	800dec0 <rt_test_005_001_execute+0x30>
 800df36:	f388 8811 	msr	BASEPRI, r8
 800df3a:	e7c1      	b.n	800dec0 <rt_test_005_001_execute+0x30>
 800df3c:	20002108 	.word	0x20002108
 800df40:	2000283c 	.word	0x2000283c
 800df44:	0800f980 	.word	0x0800f980
 800df48:	0800f958 	.word	0x0800f958
 800df4c:	00000000 	.word	0x00000000

0800df50 <rt_test_005_001_teardown>:
  chSemReset(&sem1, 0);
 800df50:	2100      	movs	r1, #0
 800df52:	4801      	ldr	r0, [pc, #4]	; (800df58 <rt_test_005_001_teardown+0x8>)
 800df54:	f7ff be14 	b.w	800db80 <chSemReset>
 800df58:	20002108 	.word	0x20002108
 800df5c:	00000000 	.word	0x00000000

0800df60 <chThdSetPriority>:
tprio_t chThdSetPriority(tprio_t newprio) {
 800df60:	b510      	push	{r4, lr}
 800df62:	2320      	movs	r3, #32
 800df64:	f383 8811 	msr	BASEPRI, r3
  oldprio = currp->realprio;
 800df68:	4b08      	ldr	r3, [pc, #32]	; (800df8c <chThdSetPriority+0x2c>)
 800df6a:	699b      	ldr	r3, [r3, #24]
 800df6c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 800df6e:	6899      	ldr	r1, [r3, #8]
 800df70:	42a1      	cmp	r1, r4
 800df72:	d001      	beq.n	800df78 <chThdSetPriority+0x18>
 800df74:	4281      	cmp	r1, r0
 800df76:	d200      	bcs.n	800df7a <chThdSetPriority+0x1a>
    currp->prio = newprio;
 800df78:	6098      	str	r0, [r3, #8]
  currp->realprio = newprio;
 800df7a:	63d8      	str	r0, [r3, #60]	; 0x3c
  chSchRescheduleS();
 800df7c:	f7fb fe90 	bl	8009ca0 <chSchRescheduleS>
 800df80:	2300      	movs	r3, #0
 800df82:	f383 8811 	msr	BASEPRI, r3
}
 800df86:	4620      	mov	r0, r4
 800df88:	bd10      	pop	{r4, pc}
 800df8a:	bf00      	nop
 800df8c:	20001eb0 	.word	0x20001eb0

0800df90 <rt_test_003_004_execute>:
    test_assert(chThdGetPriorityX() == prio + 2, "unexpected priority level");
  }

  /* [3.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 800df90:	2202      	movs	r2, #2
static void rt_test_003_004_execute(void) {
 800df92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 800df96:	4d2f      	ldr	r5, [pc, #188]	; (800e054 <rt_test_003_004_execute+0xc4>)
  test_set_step(2);
 800df98:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800e068 <rt_test_003_004_execute+0xd8>
 800df9c:	69ab      	ldr	r3, [r5, #24]
 800df9e:	f8c8 2000 	str.w	r2, [r8]
  return chThdGetSelfX()->prio;
 800dfa2:	689c      	ldr	r4, [r3, #8]
    chThdGetSelfX()->prio += 2;
 800dfa4:	18a6      	adds	r6, r4, r2
  {
    p1 = chThdSetPriority(prio + 1);
 800dfa6:	1c67      	adds	r7, r4, #1
    chThdGetSelfX()->prio += 2;
 800dfa8:	609e      	str	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 800dfaa:	4638      	mov	r0, r7
 800dfac:	f7ff ffd8 	bl	800df60 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 800dfb0:	1b00      	subs	r0, r0, r4
 800dfb2:	fab0 f080 	clz	r0, r0
 800dfb6:	4928      	ldr	r1, [pc, #160]	; (800e058 <rt_test_003_004_execute+0xc8>)
 800dfb8:	0940      	lsrs	r0, r0, #5
 800dfba:	f7f7 fcc1 	bl	8005940 <_test_assert>
 800dfbe:	b108      	cbz	r0, 800dfc4 <rt_test_003_004_execute+0x34>
    chSysLock();
    chThdGetSelfX()->prio = prio;
    chThdGetSelfX()->realprio = prio;
    chSysUnlock();
  }
}
 800dfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
 800dfc4:	69ab      	ldr	r3, [r5, #24]
 800dfc6:	4925      	ldr	r1, [pc, #148]	; (800e05c <rt_test_003_004_execute+0xcc>)
 800dfc8:	6898      	ldr	r0, [r3, #8]
 800dfca:	1b80      	subs	r0, r0, r6
 800dfcc:	fab0 f080 	clz	r0, r0
 800dfd0:	0940      	lsrs	r0, r0, #5
 800dfd2:	f7f7 fcb5 	bl	8005940 <_test_assert>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d1f2      	bne.n	800dfc0 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 800dfda:	69ab      	ldr	r3, [r5, #24]
 800dfdc:	4920      	ldr	r1, [pc, #128]	; (800e060 <rt_test_003_004_execute+0xd0>)
 800dfde:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800dfe0:	1bc0      	subs	r0, r0, r7
 800dfe2:	fab0 f080 	clz	r0, r0
 800dfe6:	0940      	lsrs	r0, r0, #5
 800dfe8:	f7f7 fcaa 	bl	8005940 <_test_assert>
 800dfec:	2800      	cmp	r0, #0
 800dfee:	d1e7      	bne.n	800dfc0 <rt_test_003_004_execute+0x30>
  test_set_step(3);
 800dff0:	2303      	movs	r3, #3
    p1 = chThdSetPriority(prio + 3);
 800dff2:	18e6      	adds	r6, r4, r3
 800dff4:	4630      	mov	r0, r6
  test_set_step(3);
 800dff6:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 3);
 800dffa:	f7ff ffb1 	bl	800df60 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 800dffe:	1a38      	subs	r0, r7, r0
 800e000:	fab0 f080 	clz	r0, r0
 800e004:	4914      	ldr	r1, [pc, #80]	; (800e058 <rt_test_003_004_execute+0xc8>)
 800e006:	0940      	lsrs	r0, r0, #5
 800e008:	f7f7 fc9a 	bl	8005940 <_test_assert>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	d1d7      	bne.n	800dfc0 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
 800e010:	69ab      	ldr	r3, [r5, #24]
 800e012:	4912      	ldr	r1, [pc, #72]	; (800e05c <rt_test_003_004_execute+0xcc>)
 800e014:	6898      	ldr	r0, [r3, #8]
 800e016:	1b80      	subs	r0, r0, r6
 800e018:	fab0 f080 	clz	r0, r0
 800e01c:	0940      	lsrs	r0, r0, #5
 800e01e:	f7f7 fc8f 	bl	8005940 <_test_assert>
 800e022:	2800      	cmp	r0, #0
 800e024:	d1cc      	bne.n	800dfc0 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 800e026:	69ab      	ldr	r3, [r5, #24]
 800e028:	490e      	ldr	r1, [pc, #56]	; (800e064 <rt_test_003_004_execute+0xd4>)
 800e02a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e02c:	1b80      	subs	r0, r0, r6
 800e02e:	fab0 f080 	clz	r0, r0
 800e032:	0940      	lsrs	r0, r0, #5
 800e034:	f7f7 fc84 	bl	8005940 <_test_assert>
 800e038:	2800      	cmp	r0, #0
 800e03a:	d1c1      	bne.n	800dfc0 <rt_test_003_004_execute+0x30>
  test_set_step(4);
 800e03c:	2304      	movs	r3, #4
 800e03e:	f8c8 3000 	str.w	r3, [r8]
 800e042:	2320      	movs	r3, #32
 800e044:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 800e048:	69ab      	ldr	r3, [r5, #24]
    chThdGetSelfX()->prio = prio;
 800e04a:	609c      	str	r4, [r3, #8]
    chThdGetSelfX()->realprio = prio;
 800e04c:	63dc      	str	r4, [r3, #60]	; 0x3c
 800e04e:	f380 8811 	msr	BASEPRI, r0
 800e052:	e7b5      	b.n	800dfc0 <rt_test_003_004_execute+0x30>
 800e054:	20001eb0 	.word	0x20001eb0
 800e058:	0800f8b4 	.word	0x0800f8b4
 800e05c:	0800f8d8 	.word	0x0800f8d8
 800e060:	0800f8f4 	.word	0x0800f8f4
 800e064:	0800f91c 	.word	0x0800f91c
 800e068:	2000283c 	.word	0x2000283c
 800e06c:	00000000 	.word	0x00000000

0800e070 <rt_test_003_003_execute>:
  test_set_step(1);
 800e070:	2201      	movs	r2, #1
static void rt_test_003_003_execute(void) {
 800e072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e076:	4e1c      	ldr	r6, [pc, #112]	; (800e0e8 <rt_test_003_003_execute+0x78>)
  test_set_step(1);
 800e078:	4f1c      	ldr	r7, [pc, #112]	; (800e0ec <rt_test_003_003_execute+0x7c>)
  return chThdGetSelfX()->prio;
 800e07a:	69b3      	ldr	r3, [r6, #24]
 800e07c:	603a      	str	r2, [r7, #0]
 800e07e:	689c      	ldr	r4, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 800e080:	18a5      	adds	r5, r4, r2
 800e082:	4628      	mov	r0, r5
 800e084:	f7ff ff6c 	bl	800df60 <chThdSetPriority>
 800e088:	4680      	mov	r8, r0
    test_assert(p1 == prio, "unexpected returned priority level");
 800e08a:	1b00      	subs	r0, r0, r4
 800e08c:	fab0 f080 	clz	r0, r0
 800e090:	4917      	ldr	r1, [pc, #92]	; (800e0f0 <rt_test_003_003_execute+0x80>)
 800e092:	0940      	lsrs	r0, r0, #5
 800e094:	f7f7 fc54 	bl	8005940 <_test_assert>
 800e098:	b108      	cbz	r0, 800e09e <rt_test_003_003_execute+0x2e>
}
 800e09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e09e:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 800e0a0:	4914      	ldr	r1, [pc, #80]	; (800e0f4 <rt_test_003_003_execute+0x84>)
 800e0a2:	6898      	ldr	r0, [r3, #8]
 800e0a4:	1b40      	subs	r0, r0, r5
 800e0a6:	fab0 f080 	clz	r0, r0
 800e0aa:	0940      	lsrs	r0, r0, #5
 800e0ac:	f7f7 fc48 	bl	8005940 <_test_assert>
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	d1f2      	bne.n	800e09a <rt_test_003_003_execute+0x2a>
  test_set_step(2);
 800e0b4:	2302      	movs	r3, #2
    p1 = chThdSetPriority(p1);
 800e0b6:	4640      	mov	r0, r8
  test_set_step(2);
 800e0b8:	603b      	str	r3, [r7, #0]
    p1 = chThdSetPriority(p1);
 800e0ba:	f7ff ff51 	bl	800df60 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 800e0be:	1a28      	subs	r0, r5, r0
 800e0c0:	fab0 f080 	clz	r0, r0
 800e0c4:	490a      	ldr	r1, [pc, #40]	; (800e0f0 <rt_test_003_003_execute+0x80>)
 800e0c6:	0940      	lsrs	r0, r0, #5
 800e0c8:	f7f7 fc3a 	bl	8005940 <_test_assert>
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d1e4      	bne.n	800e09a <rt_test_003_003_execute+0x2a>
 800e0d0:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 800e0d2:	4908      	ldr	r1, [pc, #32]	; (800e0f4 <rt_test_003_003_execute+0x84>)
 800e0d4:	6898      	ldr	r0, [r3, #8]
 800e0d6:	1b00      	subs	r0, r0, r4
 800e0d8:	fab0 f080 	clz	r0, r0
}
 800e0dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 800e0e0:	0940      	lsrs	r0, r0, #5
 800e0e2:	f7f7 bc2d 	b.w	8005940 <_test_assert>
 800e0e6:	bf00      	nop
 800e0e8:	20001eb0 	.word	0x20001eb0
 800e0ec:	2000283c 	.word	0x2000283c
 800e0f0:	0800f8b4 	.word	0x0800f8b4
 800e0f4:	0800f8d8 	.word	0x0800f8d8
	...

0800e100 <chSysRestoreStatusX.part.2>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 800e100:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e102:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 800e106:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 800e10a:	b11c      	cbz	r4, 800e114 <chSysRestoreStatusX.part.2+0x14>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800e10c:	2300      	movs	r3, #0
 800e10e:	f383 8811 	msr	BASEPRI, r3
    else {
      chSchRescheduleS();
      chSysUnlock();
    }
  }
}
 800e112:	bd10      	pop	{r4, pc}
      chSchRescheduleS();
 800e114:	f7fb fdc4 	bl	8009ca0 <chSchRescheduleS>
 800e118:	f384 8811 	msr	BASEPRI, r4
}
 800e11c:	bd10      	pop	{r4, pc}
 800e11e:	bf00      	nop

0800e120 <rt_test_002_002_execute>:
  test_set_step(1);
 800e120:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 800e122:	b510      	push	{r4, lr}
  test_set_step(1);
 800e124:	4c30      	ldr	r4, [pc, #192]	; (800e1e8 <rt_test_002_002_execute+0xc8>)
static void rt_test_002_002_execute(void) {
 800e126:	b086      	sub	sp, #24
  test_set_step(1);
 800e128:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e12a:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 800e12e:	b91b      	cbnz	r3, 800e138 <rt_test_002_002_execute+0x18>
 800e130:	f7f8 ff26 	bl	8006f80 <chSysGetStatusAndLockX.part.1>
 800e134:	f7ff ffe4 	bl	800e100 <chSysRestoreStatusX.part.2>
  test_set_step(2);
 800e138:	2202      	movs	r2, #2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800e13a:	2320      	movs	r3, #32
 800e13c:	6022      	str	r2, [r4, #0]
 800e13e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e142:	f3ef 8311 	mrs	r3, BASEPRI
 800e146:	b91b      	cbnz	r3, 800e150 <rt_test_002_002_execute+0x30>
 800e148:	f7f8 ff1a 	bl	8006f80 <chSysGetStatusAndLockX.part.1>
 800e14c:	f7ff ffd8 	bl	800e100 <chSysRestoreStatusX.part.2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800e150:	2300      	movs	r3, #0
 800e152:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 800e156:	2303      	movs	r3, #3
 800e158:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e15a:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 800e15e:	b913      	cbnz	r3, 800e166 <rt_test_002_002_execute+0x46>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800e160:	2320      	movs	r3, #32
 800e162:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e166:	f3ef 8311 	mrs	r3, BASEPRI
 800e16a:	b913      	cbnz	r3, 800e172 <rt_test_002_002_execute+0x52>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800e16c:	2320      	movs	r3, #32
 800e16e:	f383 8811 	msr	BASEPRI, r3
 800e172:	2300      	movs	r3, #0
 800e174:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 800e178:	2104      	movs	r1, #4
 800e17a:	2220      	movs	r2, #32
 800e17c:	6021      	str	r1, [r4, #0]
 800e17e:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e182:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 800e186:	b10a      	cbz	r2, 800e18c <rt_test_002_002_execute+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800e188:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e18c:	f3ef 8311 	mrs	r3, BASEPRI
 800e190:	b113      	cbz	r3, 800e198 <rt_test_002_002_execute+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800e192:	2300      	movs	r3, #0
 800e194:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 800e198:	2205      	movs	r2, #5
  vtp->func = NULL;
 800e19a:	2300      	movs	r3, #0
 800e19c:	6022      	str	r2, [r4, #0]
 800e19e:	9304      	str	r3, [sp, #16]
 800e1a0:	2320      	movs	r3, #32
 800e1a2:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 800e1a6:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 800e1a8:	ac01      	add	r4, sp, #4
  if (chVTIsArmedI(vtp)) {
 800e1aa:	b113      	cbz	r3, 800e1b2 <rt_test_002_002_execute+0x92>
    chVTDoResetI(vtp);
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	f7f8 fe37 	bl	8006e20 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	4a0d      	ldr	r2, [pc, #52]	; (800e1ec <rt_test_002_002_execute+0xcc>)
 800e1b8:	2101      	movs	r1, #1
 800e1ba:	f7f8 fe79 	bl	8006eb0 <chVTDoSetI>
 800e1be:	2400      	movs	r4, #0
 800e1c0:	f384 8811 	msr	BASEPRI, r4
    chThdSleep(10);
 800e1c4:	200a      	movs	r0, #10
 800e1c6:	f7fa fb7b 	bl	80088c0 <chThdSleep>
 800e1ca:	2320      	movs	r3, #32
 800e1cc:	f383 8811 	msr	BASEPRI, r3
 800e1d0:	9804      	ldr	r0, [sp, #16]
 800e1d2:	f384 8811 	msr	BASEPRI, r4
    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 800e1d6:	fab0 f080 	clz	r0, r0
 800e1da:	4905      	ldr	r1, [pc, #20]	; (800e1f0 <rt_test_002_002_execute+0xd0>)
 800e1dc:	0940      	lsrs	r0, r0, #5
 800e1de:	f7f7 fbaf 	bl	8005940 <_test_assert>
}
 800e1e2:	b006      	add	sp, #24
 800e1e4:	bd10      	pop	{r4, pc}
 800e1e6:	bf00      	nop
 800e1e8:	2000283c 	.word	0x2000283c
 800e1ec:	0800e201 	.word	0x0800e201
 800e1f0:	0800f840 	.word	0x0800f840
	...

0800e200 <vtcb>:
static void vtcb(void *p) {
 800e200:	b508      	push	{r3, lr}
 800e202:	2320      	movs	r3, #32
 800e204:	f383 8811 	msr	BASEPRI, r3
 800e208:	2200      	movs	r2, #0
 800e20a:	f382 8811 	msr	BASEPRI, r2
 800e20e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e212:	f3ef 8311 	mrs	r3, BASEPRI
 800e216:	b91b      	cbnz	r3, 800e220 <vtcb+0x20>
 800e218:	f7f8 feb2 	bl	8006f80 <chSysGetStatusAndLockX.part.1>
 800e21c:	f7ff ff70 	bl	800e100 <chSysRestoreStatusX.part.2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800e220:	2300      	movs	r3, #0
 800e222:	f383 8811 	msr	BASEPRI, r3
}
 800e226:	bd08      	pop	{r3, pc}
	...

0800e230 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 800e230:	b4f0      	push	{r4, r5, r6, r7}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 800e232:	2700      	movs	r7, #0
 800e234:	4e13      	ldr	r6, [pc, #76]	; (800e284 <__init_ram_areas+0x54>)
void __init_ram_areas(void) {
 800e236:	4d14      	ldr	r5, [pc, #80]	; (800e288 <__init_ram_areas+0x58>)
 800e238:	4c14      	ldr	r4, [pc, #80]	; (800e28c <__init_ram_areas+0x5c>)
 800e23a:	4b15      	ldr	r3, [pc, #84]	; (800e290 <__init_ram_areas+0x60>)
 800e23c:	4915      	ldr	r1, [pc, #84]	; (800e294 <__init_ram_areas+0x64>)
 800e23e:	f106 0c70 	add.w	ip, r6, #112	; 0x70
    while (p < rap->clear_area) {
 800e242:	429c      	cmp	r4, r3
 800e244:	d911      	bls.n	800e26a <__init_ram_areas+0x3a>
 800e246:	461a      	mov	r2, r3
 800e248:	3904      	subs	r1, #4
      *p = *tp;
 800e24a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800e24e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 800e252:	4294      	cmp	r4, r2
 800e254:	d8f9      	bhi.n	800e24a <__init_ram_areas+0x1a>
 800e256:	43da      	mvns	r2, r3
 800e258:	4414      	add	r4, r2
 800e25a:	f024 0403 	bic.w	r4, r4, #3
 800e25e:	3404      	adds	r4, #4
 800e260:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 800e262:	429d      	cmp	r5, r3
 800e264:	d903      	bls.n	800e26e <__init_ram_areas+0x3e>
      *p = 0;
 800e266:	f843 7b04 	str.w	r7, [r3], #4
    while (p < rap->no_init_area) {
 800e26a:	429d      	cmp	r5, r3
 800e26c:	d8fb      	bhi.n	800e266 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800e26e:	4566      	cmp	r6, ip
 800e270:	d005      	beq.n	800e27e <__init_ram_areas+0x4e>
 800e272:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
 800e276:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
 800e27a:	3610      	adds	r6, #16
 800e27c:	e7e1      	b.n	800e242 <__init_ram_areas+0x12>
#endif
}
 800e27e:	bcf0      	pop	{r4, r5, r6, r7}
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	0800ed2c 	.word	0x0800ed2c
 800e288:	200029e0 	.word	0x200029e0
 800e28c:	200029e0 	.word	0x200029e0
 800e290:	200029e0 	.word	0x200029e0
 800e294:	0801117c 	.word	0x0801117c
	...

0800e2a0 <__default_exit>:
void __default_exit(void) {
 800e2a0:	e7fe      	b.n	800e2a0 <__default_exit>
 800e2a2:	bf00      	nop
	...

0800e2b0 <__late_init>:
 800e2b0:	4770      	bx	lr
 800e2b2:	bf00      	nop
	...

0800e2c0 <__core_init>:
}
 800e2c0:	4770      	bx	lr
 800e2c2:	bf00      	nop

0800e2c4 <memset>:
 800e2c4:	b4f0      	push	{r4, r5, r6, r7}
 800e2c6:	0786      	lsls	r6, r0, #30
 800e2c8:	d043      	beq.n	800e352 <memset+0x8e>
 800e2ca:	1e54      	subs	r4, r2, #1
 800e2cc:	2a00      	cmp	r2, #0
 800e2ce:	d03e      	beq.n	800e34e <memset+0x8a>
 800e2d0:	b2ca      	uxtb	r2, r1
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	e002      	b.n	800e2dc <memset+0x18>
 800e2d6:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800e2da:	d338      	bcc.n	800e34e <memset+0x8a>
 800e2dc:	f803 2b01 	strb.w	r2, [r3], #1
 800e2e0:	079d      	lsls	r5, r3, #30
 800e2e2:	d1f8      	bne.n	800e2d6 <memset+0x12>
 800e2e4:	2c03      	cmp	r4, #3
 800e2e6:	d92b      	bls.n	800e340 <memset+0x7c>
 800e2e8:	b2cd      	uxtb	r5, r1
 800e2ea:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800e2ee:	2c0f      	cmp	r4, #15
 800e2f0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800e2f4:	d916      	bls.n	800e324 <memset+0x60>
 800e2f6:	f1a4 0710 	sub.w	r7, r4, #16
 800e2fa:	093f      	lsrs	r7, r7, #4
 800e2fc:	f103 0620 	add.w	r6, r3, #32
 800e300:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800e304:	f103 0210 	add.w	r2, r3, #16
 800e308:	e942 5504 	strd	r5, r5, [r2, #-16]
 800e30c:	e942 5502 	strd	r5, r5, [r2, #-8]
 800e310:	3210      	adds	r2, #16
 800e312:	42b2      	cmp	r2, r6
 800e314:	d1f8      	bne.n	800e308 <memset+0x44>
 800e316:	f004 040f 	and.w	r4, r4, #15
 800e31a:	3701      	adds	r7, #1
 800e31c:	2c03      	cmp	r4, #3
 800e31e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800e322:	d90d      	bls.n	800e340 <memset+0x7c>
 800e324:	461e      	mov	r6, r3
 800e326:	4622      	mov	r2, r4
 800e328:	3a04      	subs	r2, #4
 800e32a:	2a03      	cmp	r2, #3
 800e32c:	f846 5b04 	str.w	r5, [r6], #4
 800e330:	d8fa      	bhi.n	800e328 <memset+0x64>
 800e332:	1f22      	subs	r2, r4, #4
 800e334:	f022 0203 	bic.w	r2, r2, #3
 800e338:	3204      	adds	r2, #4
 800e33a:	4413      	add	r3, r2
 800e33c:	f004 0403 	and.w	r4, r4, #3
 800e340:	b12c      	cbz	r4, 800e34e <memset+0x8a>
 800e342:	b2c9      	uxtb	r1, r1
 800e344:	441c      	add	r4, r3
 800e346:	f803 1b01 	strb.w	r1, [r3], #1
 800e34a:	429c      	cmp	r4, r3
 800e34c:	d1fb      	bne.n	800e346 <memset+0x82>
 800e34e:	bcf0      	pop	{r4, r5, r6, r7}
 800e350:	4770      	bx	lr
 800e352:	4614      	mov	r4, r2
 800e354:	4603      	mov	r3, r0
 800e356:	e7c5      	b.n	800e2e4 <memset+0x20>

0800e358 <strchr>:
 800e358:	b2c9      	uxtb	r1, r1
 800e35a:	f000 0303 	and.w	r3, r0, #3
 800e35e:	2900      	cmp	r1, #0
 800e360:	d043      	beq.n	800e3ea <strchr+0x92>
 800e362:	b17b      	cbz	r3, 800e384 <strchr+0x2c>
 800e364:	7803      	ldrb	r3, [r0, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d067      	beq.n	800e43a <strchr+0xe2>
 800e36a:	4299      	cmp	r1, r3
 800e36c:	d03c      	beq.n	800e3e8 <strchr+0x90>
 800e36e:	1c43      	adds	r3, r0, #1
 800e370:	e005      	b.n	800e37e <strchr+0x26>
 800e372:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e376:	2a00      	cmp	r2, #0
 800e378:	d05d      	beq.n	800e436 <strchr+0xde>
 800e37a:	428a      	cmp	r2, r1
 800e37c:	d034      	beq.n	800e3e8 <strchr+0x90>
 800e37e:	079a      	lsls	r2, r3, #30
 800e380:	4618      	mov	r0, r3
 800e382:	d1f6      	bne.n	800e372 <strchr+0x1a>
 800e384:	b470      	push	{r4, r5, r6}
 800e386:	6804      	ldr	r4, [r0, #0]
 800e388:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800e38c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800e390:	ea86 0504 	eor.w	r5, r6, r4
 800e394:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 800e398:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800e39c:	ea23 0305 	bic.w	r3, r3, r5
 800e3a0:	ea22 0204 	bic.w	r2, r2, r4
 800e3a4:	4313      	orrs	r3, r2
 800e3a6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800e3aa:	d10f      	bne.n	800e3cc <strchr+0x74>
 800e3ac:	f850 4f04 	ldr.w	r4, [r0, #4]!
 800e3b0:	ea84 0506 	eor.w	r5, r4, r6
 800e3b4:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 800e3b8:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 800e3bc:	ea22 0205 	bic.w	r2, r2, r5
 800e3c0:	ea23 0304 	bic.w	r3, r3, r4
 800e3c4:	4313      	orrs	r3, r2
 800e3c6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800e3ca:	d0ef      	beq.n	800e3ac <strchr+0x54>
 800e3cc:	7803      	ldrb	r3, [r0, #0]
 800e3ce:	b143      	cbz	r3, 800e3e2 <strchr+0x8a>
 800e3d0:	4299      	cmp	r1, r3
 800e3d2:	d102      	bne.n	800e3da <strchr+0x82>
 800e3d4:	e006      	b.n	800e3e4 <strchr+0x8c>
 800e3d6:	428b      	cmp	r3, r1
 800e3d8:	d004      	beq.n	800e3e4 <strchr+0x8c>
 800e3da:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d1f9      	bne.n	800e3d6 <strchr+0x7e>
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	bc70      	pop	{r4, r5, r6}
 800e3e6:	4770      	bx	lr
 800e3e8:	4770      	bx	lr
 800e3ea:	b15b      	cbz	r3, 800e404 <strchr+0xac>
 800e3ec:	7803      	ldrb	r3, [r0, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d0fa      	beq.n	800e3e8 <strchr+0x90>
 800e3f2:	1c43      	adds	r3, r0, #1
 800e3f4:	e003      	b.n	800e3fe <strchr+0xa6>
 800e3f6:	7802      	ldrb	r2, [r0, #0]
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	2a00      	cmp	r2, #0
 800e3fc:	d0f4      	beq.n	800e3e8 <strchr+0x90>
 800e3fe:	0799      	lsls	r1, r3, #30
 800e400:	4618      	mov	r0, r3
 800e402:	d1f8      	bne.n	800e3f6 <strchr+0x9e>
 800e404:	6802      	ldr	r2, [r0, #0]
 800e406:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800e40a:	ea23 0302 	bic.w	r3, r3, r2
 800e40e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800e412:	d108      	bne.n	800e426 <strchr+0xce>
 800e414:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800e418:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800e41c:	ea23 0302 	bic.w	r3, r3, r2
 800e420:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800e424:	d0f6      	beq.n	800e414 <strchr+0xbc>
 800e426:	7803      	ldrb	r3, [r0, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d0dd      	beq.n	800e3e8 <strchr+0x90>
 800e42c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e430:	2b00      	cmp	r3, #0
 800e432:	d1fb      	bne.n	800e42c <strchr+0xd4>
 800e434:	4770      	bx	lr
 800e436:	4610      	mov	r0, r2
 800e438:	4770      	bx	lr
 800e43a:	4618      	mov	r0, r3
 800e43c:	4770      	bx	lr
 800e43e:	bf00      	nop

0800e440 <strncmp>:
 800e440:	2a00      	cmp	r2, #0
 800e442:	d03f      	beq.n	800e4c4 <strncmp+0x84>
 800e444:	ea40 0301 	orr.w	r3, r0, r1
 800e448:	f013 0303 	ands.w	r3, r3, #3
 800e44c:	b4f0      	push	{r4, r5, r6, r7}
 800e44e:	d125      	bne.n	800e49c <strncmp+0x5c>
 800e450:	2a03      	cmp	r2, #3
 800e452:	d923      	bls.n	800e49c <strncmp+0x5c>
 800e454:	6804      	ldr	r4, [r0, #0]
 800e456:	680d      	ldr	r5, [r1, #0]
 800e458:	42ac      	cmp	r4, r5
 800e45a:	d11f      	bne.n	800e49c <strncmp+0x5c>
 800e45c:	3a04      	subs	r2, #4
 800e45e:	d033      	beq.n	800e4c8 <strncmp+0x88>
 800e460:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 800e464:	ea25 0404 	bic.w	r4, r5, r4
 800e468:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800e46c:	d12f      	bne.n	800e4ce <strncmp+0x8e>
 800e46e:	1d07      	adds	r7, r0, #4
 800e470:	1d0d      	adds	r5, r1, #4
 800e472:	e00d      	b.n	800e490 <strncmp+0x50>
 800e474:	f857 3b04 	ldr.w	r3, [r7], #4
 800e478:	680e      	ldr	r6, [r1, #0]
 800e47a:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 800e47e:	42b3      	cmp	r3, r6
 800e480:	ea24 0403 	bic.w	r4, r4, r3
 800e484:	d10a      	bne.n	800e49c <strncmp+0x5c>
 800e486:	3a04      	subs	r2, #4
 800e488:	d01e      	beq.n	800e4c8 <strncmp+0x88>
 800e48a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800e48e:	d11b      	bne.n	800e4c8 <strncmp+0x88>
 800e490:	2a03      	cmp	r2, #3
 800e492:	4629      	mov	r1, r5
 800e494:	4638      	mov	r0, r7
 800e496:	f105 0504 	add.w	r5, r5, #4
 800e49a:	d8eb      	bhi.n	800e474 <strncmp+0x34>
 800e49c:	7803      	ldrb	r3, [r0, #0]
 800e49e:	780c      	ldrb	r4, [r1, #0]
 800e4a0:	3a01      	subs	r2, #1
 800e4a2:	429c      	cmp	r4, r3
 800e4a4:	d10b      	bne.n	800e4be <strncmp+0x7e>
 800e4a6:	b17a      	cbz	r2, 800e4c8 <strncmp+0x88>
 800e4a8:	b914      	cbnz	r4, 800e4b0 <strncmp+0x70>
 800e4aa:	e00d      	b.n	800e4c8 <strncmp+0x88>
 800e4ac:	b162      	cbz	r2, 800e4c8 <strncmp+0x88>
 800e4ae:	b173      	cbz	r3, 800e4ce <strncmp+0x8e>
 800e4b0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e4b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e4b8:	3a01      	subs	r2, #1
 800e4ba:	42a3      	cmp	r3, r4
 800e4bc:	d0f6      	beq.n	800e4ac <strncmp+0x6c>
 800e4be:	1b18      	subs	r0, r3, r4
 800e4c0:	bcf0      	pop	{r4, r5, r6, r7}
 800e4c2:	4770      	bx	lr
 800e4c4:	4610      	mov	r0, r2
 800e4c6:	4770      	bx	lr
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	bcf0      	pop	{r4, r5, r6, r7}
 800e4cc:	4770      	bx	lr
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	e7f6      	b.n	800e4c0 <strncmp+0x80>
 800e4d2:	bf00      	nop

0800e4d4 <strncpy>:
 800e4d4:	ea40 0301 	orr.w	r3, r0, r1
 800e4d8:	079b      	lsls	r3, r3, #30
 800e4da:	b470      	push	{r4, r5, r6}
 800e4dc:	d12a      	bne.n	800e534 <strncpy+0x60>
 800e4de:	2a03      	cmp	r2, #3
 800e4e0:	d928      	bls.n	800e534 <strncpy+0x60>
 800e4e2:	460c      	mov	r4, r1
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	4621      	mov	r1, r4
 800e4e8:	f854 6b04 	ldr.w	r6, [r4], #4
 800e4ec:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 800e4f0:	ea25 0506 	bic.w	r5, r5, r6
 800e4f4:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 800e4f8:	d106      	bne.n	800e508 <strncpy+0x34>
 800e4fa:	3a04      	subs	r2, #4
 800e4fc:	2a03      	cmp	r2, #3
 800e4fe:	f843 6b04 	str.w	r6, [r3], #4
 800e502:	4621      	mov	r1, r4
 800e504:	d8ef      	bhi.n	800e4e6 <strncpy+0x12>
 800e506:	b19a      	cbz	r2, 800e530 <strncpy+0x5c>
 800e508:	780c      	ldrb	r4, [r1, #0]
 800e50a:	3a01      	subs	r2, #1
 800e50c:	701c      	strb	r4, [r3, #0]
 800e50e:	3301      	adds	r3, #1
 800e510:	b13c      	cbz	r4, 800e522 <strncpy+0x4e>
 800e512:	b16a      	cbz	r2, 800e530 <strncpy+0x5c>
 800e514:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e518:	3a01      	subs	r2, #1
 800e51a:	f803 4b01 	strb.w	r4, [r3], #1
 800e51e:	2c00      	cmp	r4, #0
 800e520:	d1f7      	bne.n	800e512 <strncpy+0x3e>
 800e522:	b12a      	cbz	r2, 800e530 <strncpy+0x5c>
 800e524:	2100      	movs	r1, #0
 800e526:	441a      	add	r2, r3
 800e528:	f803 1b01 	strb.w	r1, [r3], #1
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d1fb      	bne.n	800e528 <strncpy+0x54>
 800e530:	bc70      	pop	{r4, r5, r6}
 800e532:	4770      	bx	lr
 800e534:	4603      	mov	r3, r0
 800e536:	e7e6      	b.n	800e506 <strncpy+0x32>

0800e538 <strpbrk>:
 800e538:	b430      	push	{r4, r5}
 800e53a:	7804      	ldrb	r4, [r0, #0]
 800e53c:	b1dc      	cbz	r4, 800e576 <strpbrk+0x3e>
 800e53e:	780d      	ldrb	r5, [r1, #0]
 800e540:	b19d      	cbz	r5, 800e56a <strpbrk+0x32>
 800e542:	42ac      	cmp	r4, r5
 800e544:	d00f      	beq.n	800e566 <strpbrk+0x2e>
 800e546:	460a      	mov	r2, r1
 800e548:	e001      	b.n	800e54e <strpbrk+0x16>
 800e54a:	429c      	cmp	r4, r3
 800e54c:	d00b      	beq.n	800e566 <strpbrk+0x2e>
 800e54e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800e552:	2b00      	cmp	r3, #0
 800e554:	d1f9      	bne.n	800e54a <strpbrk+0x12>
 800e556:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800e55a:	2c00      	cmp	r4, #0
 800e55c:	d1f0      	bne.n	800e540 <strpbrk+0x8>
 800e55e:	7813      	ldrb	r3, [r2, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	bf08      	it	eq
 800e564:	2000      	moveq	r0, #0
 800e566:	bc30      	pop	{r4, r5}
 800e568:	4770      	bx	lr
 800e56a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800e56e:	460a      	mov	r2, r1
 800e570:	2c00      	cmp	r4, #0
 800e572:	d1e5      	bne.n	800e540 <strpbrk+0x8>
 800e574:	e7f3      	b.n	800e55e <strpbrk+0x26>
 800e576:	4620      	mov	r0, r4
 800e578:	e7f5      	b.n	800e566 <strpbrk+0x2e>
 800e57a:	bf00      	nop

0800e57c <strspn>:
 800e57c:	b470      	push	{r4, r5, r6}
 800e57e:	7804      	ldrb	r4, [r0, #0]
 800e580:	b1a4      	cbz	r4, 800e5ac <strspn+0x30>
 800e582:	4606      	mov	r6, r0
 800e584:	780d      	ldrb	r5, [r1, #0]
 800e586:	b14d      	cbz	r5, 800e59c <strspn+0x20>
 800e588:	42a5      	cmp	r5, r4
 800e58a:	d00a      	beq.n	800e5a2 <strspn+0x26>
 800e58c:	460a      	mov	r2, r1
 800e58e:	e001      	b.n	800e594 <strspn+0x18>
 800e590:	42a3      	cmp	r3, r4
 800e592:	d006      	beq.n	800e5a2 <strspn+0x26>
 800e594:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d1f9      	bne.n	800e590 <strspn+0x14>
 800e59c:	1b80      	subs	r0, r0, r6
 800e59e:	bc70      	pop	{r4, r5, r6}
 800e5a0:	4770      	bx	lr
 800e5a2:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800e5a6:	2c00      	cmp	r4, #0
 800e5a8:	d1ed      	bne.n	800e586 <strspn+0xa>
 800e5aa:	e7f7      	b.n	800e59c <strspn+0x20>
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	e7f6      	b.n	800e59e <strspn+0x22>
