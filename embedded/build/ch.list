
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000239 	.word	0x08000239
 8000008:	0800023b 	.word	0x0800023b
 800000c:	0800023a 	.word	0x0800023a
 8000010:	0800023a 	.word	0x0800023a
 8000014:	0800023a 	.word	0x0800023a
 8000018:	0800023a 	.word	0x0800023a
 800001c:	0800023a 	.word	0x0800023a
 8000020:	0800023a 	.word	0x0800023a
 8000024:	0800023a 	.word	0x0800023a
 8000028:	0800023a 	.word	0x0800023a
 800002c:	08005401 	.word	0x08005401
 8000030:	0800023a 	.word	0x0800023a
 8000034:	0800023a 	.word	0x0800023a
 8000038:	0800023a 	.word	0x0800023a
 800003c:	0800023a 	.word	0x0800023a
 8000040:	0800023a 	.word	0x0800023a
 8000044:	0800023a 	.word	0x0800023a
 8000048:	0800023a 	.word	0x0800023a
 800004c:	0800023a 	.word	0x0800023a
 8000050:	0800023a 	.word	0x0800023a
 8000054:	0800023a 	.word	0x0800023a
 8000058:	080053c1 	.word	0x080053c1
 800005c:	08005371 	.word	0x08005371
 8000060:	08005321 	.word	0x08005321
 8000064:	080052d1 	.word	0x080052d1
 8000068:	08005281 	.word	0x08005281
 800006c:	08005031 	.word	0x08005031
 8000070:	08004ff1 	.word	0x08004ff1
 8000074:	08004fb1 	.word	0x08004fb1
 8000078:	08004f71 	.word	0x08004f71
 800007c:	08004f31 	.word	0x08004f31
 8000080:	08004ef1 	.word	0x08004ef1
 8000084:	08004eb1 	.word	0x08004eb1
 8000088:	0800023a 	.word	0x0800023a
 800008c:	0800023a 	.word	0x0800023a
 8000090:	08004771 	.word	0x08004771
 8000094:	0800023a 	.word	0x0800023a
 8000098:	0800023a 	.word	0x0800023a
 800009c:	08005191 	.word	0x08005191
 80000a0:	0800023a 	.word	0x0800023a
 80000a4:	0800023a 	.word	0x0800023a
 80000a8:	0800023a 	.word	0x0800023a
 80000ac:	0800023a 	.word	0x0800023a
 80000b0:	08004c31 	.word	0x08004c31
 80000b4:	0800023a 	.word	0x0800023a
 80000b8:	0800023a 	.word	0x0800023a
 80000bc:	08004db1 	.word	0x08004db1
 80000c0:	08004cd1 	.word	0x08004cd1
 80000c4:	0800023a 	.word	0x0800023a
 80000c8:	0800023a 	.word	0x0800023a
 80000cc:	0800023a 	.word	0x0800023a
 80000d0:	0800023a 	.word	0x0800023a
 80000d4:	08004a91 	.word	0x08004a91
 80000d8:	0800023a 	.word	0x0800023a
 80000dc:	0800023a 	.word	0x0800023a
 80000e0:	08005071 	.word	0x08005071
 80000e4:	0800023a 	.word	0x0800023a
 80000e8:	0800023a 	.word	0x0800023a
 80000ec:	0800023a 	.word	0x0800023a
 80000f0:	0800023a 	.word	0x0800023a
 80000f4:	0800023a 	.word	0x0800023a
 80000f8:	0800023a 	.word	0x0800023a
 80000fc:	0800023a 	.word	0x0800023a
 8000100:	0800023a 	.word	0x0800023a
 8000104:	0800023a 	.word	0x0800023a
 8000108:	0800023a 	.word	0x0800023a
 800010c:	0800023a 	.word	0x0800023a
 8000110:	0800023a 	.word	0x0800023a
 8000114:	0800023a 	.word	0x0800023a
 8000118:	0800023a 	.word	0x0800023a
 800011c:	0800023a 	.word	0x0800023a
 8000120:	0800023a 	.word	0x0800023a
 8000124:	0800023a 	.word	0x0800023a
 8000128:	0800023a 	.word	0x0800023a
 800012c:	0800023a 	.word	0x0800023a
 8000130:	0800023a 	.word	0x0800023a
 8000134:	0800023a 	.word	0x0800023a
 8000138:	0800023a 	.word	0x0800023a
 800013c:	0800023a 	.word	0x0800023a
 8000140:	0800023a 	.word	0x0800023a
 8000144:	0800023a 	.word	0x0800023a
 8000148:	0800023a 	.word	0x0800023a
 800014c:	0800023a 	.word	0x0800023a
 8000150:	0800023a 	.word	0x0800023a
 8000154:	0800023a 	.word	0x0800023a
 8000158:	0800023a 	.word	0x0800023a
 800015c:	0800023a 	.word	0x0800023a

Disassembly of section .text:

08000160 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000160:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000162:	4827      	ldr	r0, [pc, #156]	; (8000200 <endfiniloop+0x4>)
                msr     MSP, r0
 8000164:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000168:	4826      	ldr	r0, [pc, #152]	; (8000204 <endfiniloop+0x8>)
                msr     PSP, r0
 800016a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800016e:	4826      	ldr	r0, [pc, #152]	; (8000208 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000170:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000174:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000178:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800017a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800017c:	f380 8814 	msr	CONTROL, r0
                isb
 8000180:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000184:	f009 fd4c 	bl	8009c20 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000188:	f004 fab2 	bl	80046f0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800018c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000190:	491e      	ldr	r1, [pc, #120]	; (800020c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000192:	4a1b      	ldr	r2, [pc, #108]	; (8000200 <endfiniloop+0x4>)

08000194 <msloop>:
msloop:
                cmp     r1, r2
 8000194:	4291      	cmp	r1, r2
                itt     lo
 8000196:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000198:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800019c:	e7fa      	bcc.n	8000194 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800019e:	491c      	ldr	r1, [pc, #112]	; (8000210 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001a0:	4a18      	ldr	r2, [pc, #96]	; (8000204 <endfiniloop+0x8>)

080001a2 <psloop>:
psloop:
                cmp     r1, r2
 80001a2:	4291      	cmp	r1, r2
                itt     lo
 80001a4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001aa:	e7fa      	bcc.n	80001a2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 80001ac:	4919      	ldr	r1, [pc, #100]	; (8000214 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 80001ae:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 80001b0:	4b1a      	ldr	r3, [pc, #104]	; (800021c <endfiniloop+0x20>)

080001b2 <dloop>:
dloop:
                cmp     r2, r3
 80001b2:	429a      	cmp	r2, r3
                ittt    lo
 80001b4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001b6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001ba:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001be:	e7f8      	bcc.n	80001b2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 80001c0:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 80001c2:	4917      	ldr	r1, [pc, #92]	; (8000220 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <endfiniloop+0x28>)

080001c6 <bloop>:
bloop:
                cmp     r1, r2
 80001c6:	4291      	cmp	r1, r2
                itt     lo
 80001c8:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001ca:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001ce:	e7fa      	bcc.n	80001c6 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001d0:	f009 fcde 	bl	8009b90 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001d4:	f009 fd1c 	bl	8009c10 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 80001d8:	4c13      	ldr	r4, [pc, #76]	; (8000228 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 80001da:	4d14      	ldr	r5, [pc, #80]	; (800022c <endfiniloop+0x30>)

080001dc <initloop>:
initloop:
                cmp     r4, r5
 80001dc:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001de:	da03      	bge.n	80001e8 <endinitloop>
                ldr     r1, [r4], #4
 80001e0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001e4:	4788      	blx	r1
                b       initloop
 80001e6:	e7f9      	b.n	80001dc <initloop>

080001e8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001e8:	f007 fbda 	bl	80079a0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 80001ec:	4c10      	ldr	r4, [pc, #64]	; (8000230 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 80001ee:	4d11      	ldr	r5, [pc, #68]	; (8000234 <endfiniloop+0x38>)

080001f0 <finiloop>:
finiloop:
                cmp     r4, r5
 80001f0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80001f2:	da03      	bge.n	80001fc <endfiniloop>
                ldr     r1, [r4], #4
 80001f4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f8:	4788      	blx	r1
                b       finiloop
 80001fa:	e7f9      	b.n	80001f0 <finiloop>

080001fc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80001fc:	f009 bd00 	b.w	8009c00 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000200:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000204:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000208:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800020c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000210:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 8000214:	0800c700 	.word	0x0800c700
                ldr     r2, =_data_start
 8000218:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 800021c:	200008a0 	.word	0x200008a0
                ldr     r1, =_bss_start
 8000220:	200008a0 	.word	0x200008a0
                ldr     r2, =_bss_end
 8000224:	20001ad4 	.word	0x20001ad4
                ldr     r4, =__init_array_start
 8000228:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end
 800022c:	08000160 	.word	0x08000160
                ldr     r4, =__fini_array_start
 8000230:	08000160 	.word	0x08000160
                ldr     r5, =__fini_array_end
 8000234:	08000160 	.word	0x08000160

08000238 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000238:	e792      	b.n	8000160 <_crt0_entry>

0800023a <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
         b          _unhandled_exception
 800023a:	e7ff      	b.n	800023c <_unhandled_exception>

0800023c <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800023c:	e7fe      	b.n	800023c <_unhandled_exception>
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000244:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000248:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800024a:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000250 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000250:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000252:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000256:	4628      	mov	r0, r5
                blx     r4
 8000258:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 800025a:	2000      	movs	r0, #0
                bl      chThdExit
 800025c:	f005 f8e0 	bl	8005420 <chThdExit>

08000260 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000260:	f005 f8ee 	bl	8005440 <chSchDoReschedule>

08000264 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000264:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000266:	e7fe      	b.n	8000266 <_port_exit_from_isr+0x2>

08000268 <memcpy>:
 8000268:	4684      	mov	ip, r0
 800026a:	ea41 0300 	orr.w	r3, r1, r0
 800026e:	f013 0303 	ands.w	r3, r3, #3
 8000272:	d149      	bne.n	8000308 <memcpy+0xa0>
 8000274:	3a40      	subs	r2, #64	; 0x40
 8000276:	d323      	bcc.n	80002c0 <memcpy+0x58>
 8000278:	680b      	ldr	r3, [r1, #0]
 800027a:	6003      	str	r3, [r0, #0]
 800027c:	684b      	ldr	r3, [r1, #4]
 800027e:	6043      	str	r3, [r0, #4]
 8000280:	688b      	ldr	r3, [r1, #8]
 8000282:	6083      	str	r3, [r0, #8]
 8000284:	68cb      	ldr	r3, [r1, #12]
 8000286:	60c3      	str	r3, [r0, #12]
 8000288:	690b      	ldr	r3, [r1, #16]
 800028a:	6103      	str	r3, [r0, #16]
 800028c:	694b      	ldr	r3, [r1, #20]
 800028e:	6143      	str	r3, [r0, #20]
 8000290:	698b      	ldr	r3, [r1, #24]
 8000292:	6183      	str	r3, [r0, #24]
 8000294:	69cb      	ldr	r3, [r1, #28]
 8000296:	61c3      	str	r3, [r0, #28]
 8000298:	6a0b      	ldr	r3, [r1, #32]
 800029a:	6203      	str	r3, [r0, #32]
 800029c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800029e:	6243      	str	r3, [r0, #36]	; 0x24
 80002a0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80002a2:	6283      	str	r3, [r0, #40]	; 0x28
 80002a4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80002a6:	62c3      	str	r3, [r0, #44]	; 0x2c
 80002a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80002aa:	6303      	str	r3, [r0, #48]	; 0x30
 80002ac:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80002ae:	6343      	str	r3, [r0, #52]	; 0x34
 80002b0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80002b2:	6383      	str	r3, [r0, #56]	; 0x38
 80002b4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80002b6:	63c3      	str	r3, [r0, #60]	; 0x3c
 80002b8:	3040      	adds	r0, #64	; 0x40
 80002ba:	3140      	adds	r1, #64	; 0x40
 80002bc:	3a40      	subs	r2, #64	; 0x40
 80002be:	d2db      	bcs.n	8000278 <memcpy+0x10>
 80002c0:	3230      	adds	r2, #48	; 0x30
 80002c2:	d30b      	bcc.n	80002dc <memcpy+0x74>
 80002c4:	680b      	ldr	r3, [r1, #0]
 80002c6:	6003      	str	r3, [r0, #0]
 80002c8:	684b      	ldr	r3, [r1, #4]
 80002ca:	6043      	str	r3, [r0, #4]
 80002cc:	688b      	ldr	r3, [r1, #8]
 80002ce:	6083      	str	r3, [r0, #8]
 80002d0:	68cb      	ldr	r3, [r1, #12]
 80002d2:	60c3      	str	r3, [r0, #12]
 80002d4:	3010      	adds	r0, #16
 80002d6:	3110      	adds	r1, #16
 80002d8:	3a10      	subs	r2, #16
 80002da:	d2f3      	bcs.n	80002c4 <memcpy+0x5c>
 80002dc:	320c      	adds	r2, #12
 80002de:	d305      	bcc.n	80002ec <memcpy+0x84>
 80002e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e4:	f840 3b04 	str.w	r3, [r0], #4
 80002e8:	3a04      	subs	r2, #4
 80002ea:	d2f9      	bcs.n	80002e0 <memcpy+0x78>
 80002ec:	3204      	adds	r2, #4
 80002ee:	d008      	beq.n	8000302 <memcpy+0x9a>
 80002f0:	07d2      	lsls	r2, r2, #31
 80002f2:	bf1c      	itt	ne
 80002f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002f8:	f800 3b01 	strbne.w	r3, [r0], #1
 80002fc:	d301      	bcc.n	8000302 <memcpy+0x9a>
 80002fe:	880b      	ldrh	r3, [r1, #0]
 8000300:	8003      	strh	r3, [r0, #0]
 8000302:	4660      	mov	r0, ip
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	2a08      	cmp	r2, #8
 800030a:	d313      	bcc.n	8000334 <memcpy+0xcc>
 800030c:	078b      	lsls	r3, r1, #30
 800030e:	d0b1      	beq.n	8000274 <memcpy+0xc>
 8000310:	f010 0303 	ands.w	r3, r0, #3
 8000314:	d0ae      	beq.n	8000274 <memcpy+0xc>
 8000316:	f1c3 0304 	rsb	r3, r3, #4
 800031a:	1ad2      	subs	r2, r2, r3
 800031c:	07db      	lsls	r3, r3, #31
 800031e:	bf1c      	itt	ne
 8000320:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000324:	f800 3b01 	strbne.w	r3, [r0], #1
 8000328:	d3a4      	bcc.n	8000274 <memcpy+0xc>
 800032a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800032e:	f820 3b02 	strh.w	r3, [r0], #2
 8000332:	e79f      	b.n	8000274 <memcpy+0xc>
 8000334:	3a04      	subs	r2, #4
 8000336:	d3d9      	bcc.n	80002ec <memcpy+0x84>
 8000338:	3a01      	subs	r2, #1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
 8000342:	d2f9      	bcs.n	8000338 <memcpy+0xd0>
 8000344:	780b      	ldrb	r3, [r1, #0]
 8000346:	7003      	strb	r3, [r0, #0]
 8000348:	784b      	ldrb	r3, [r1, #1]
 800034a:	7043      	strb	r3, [r0, #1]
 800034c:	788b      	ldrb	r3, [r1, #2]
 800034e:	7083      	strb	r3, [r0, #2]
 8000350:	4660      	mov	r0, ip
 8000352:	4770      	bx	lr

08000354 <strcmp>:
 8000354:	ea80 0c01 	eor.w	ip, r0, r1
 8000358:	f01c 0f03 	tst.w	ip, #3
 800035c:	d137      	bne.n	80003ce <strcmp+0x7a>
 800035e:	f010 0c03 	ands.w	ip, r0, #3
 8000362:	f020 0003 	bic.w	r0, r0, #3
 8000366:	f021 0103 	bic.w	r1, r1, #3
 800036a:	f850 2b04 	ldr.w	r2, [r0], #4
 800036e:	bf08      	it	eq
 8000370:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000374:	d00e      	beq.n	8000394 <strcmp+0x40>
 8000376:	f08c 0c03 	eor.w	ip, ip, #3
 800037a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800037e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000382:	fa23 fc0c 	lsr.w	ip, r3, ip
 8000386:	f851 3b04 	ldr.w	r3, [r1], #4
 800038a:	ea42 020c 	orr.w	r2, r2, ip
 800038e:	ea43 030c 	orr.w	r3, r3, ip
 8000392:	bf00      	nop
 8000394:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8000398:	429a      	cmp	r2, r3
 800039a:	bf01      	itttt	eq
 800039c:	ea2c 0c02 	biceq.w	ip, ip, r2
 80003a0:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
 80003a4:	f850 2b04 	ldreq.w	r2, [r0], #4
 80003a8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80003ac:	d0f2      	beq.n	8000394 <strcmp+0x40>
 80003ae:	ea4f 6002 	mov.w	r0, r2, lsl #24
 80003b2:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80003b6:	2801      	cmp	r0, #1
 80003b8:	bf28      	it	cs
 80003ba:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 80003be:	bf08      	it	eq
 80003c0:	0a1b      	lsreq	r3, r3, #8
 80003c2:	d0f4      	beq.n	80003ae <strcmp+0x5a>
 80003c4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80003c8:	0e00      	lsrs	r0, r0, #24
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4770      	bx	lr
 80003ce:	f010 0f03 	tst.w	r0, #3
 80003d2:	d00a      	beq.n	80003ea <strcmp+0x96>
 80003d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80003d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003dc:	2a01      	cmp	r2, #1
 80003de:	bf28      	it	cs
 80003e0:	429a      	cmpcs	r2, r3
 80003e2:	d0f4      	beq.n	80003ce <strcmp+0x7a>
 80003e4:	eba2 0003 	sub.w	r0, r2, r3
 80003e8:	4770      	bx	lr
 80003ea:	f84d 5d04 	str.w	r5, [sp, #-4]!
 80003ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80003f2:	f001 0503 	and.w	r5, r1, #3
 80003f6:	f021 0103 	bic.w	r1, r1, #3
 80003fa:	f851 3b04 	ldr.w	r3, [r1], #4
 80003fe:	2d02      	cmp	r5, #2
 8000400:	d026      	beq.n	8000450 <strcmp+0xfc>
 8000402:	d84d      	bhi.n	80004a0 <strcmp+0x14c>
 8000404:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
 8000408:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
 800040c:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8000410:	ea2c 0c02 	bic.w	ip, ip, r2
 8000414:	d10d      	bne.n	8000432 <strcmp+0xde>
 8000416:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 800041a:	bf08      	it	eq
 800041c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000420:	d10a      	bne.n	8000438 <strcmp+0xe4>
 8000422:	ea85 0502 	eor.w	r5, r5, r2
 8000426:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
 800042a:	d10c      	bne.n	8000446 <strcmp+0xf2>
 800042c:	f850 2b04 	ldr.w	r2, [r0], #4
 8000430:	e7e8      	b.n	8000404 <strcmp+0xb0>
 8000432:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000436:	e05b      	b.n	80004f0 <strcmp+0x19c>
 8000438:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
 800043c:	d154      	bne.n	80004e8 <strcmp+0x194>
 800043e:	780b      	ldrb	r3, [r1, #0]
 8000440:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8000444:	e054      	b.n	80004f0 <strcmp+0x19c>
 8000446:	ea4f 6512 	mov.w	r5, r2, lsr #24
 800044a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800044e:	e04f      	b.n	80004f0 <strcmp+0x19c>
 8000450:	ea4f 4502 	mov.w	r5, r2, lsl #16
 8000454:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8000458:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800045c:	ea2c 0c02 	bic.w	ip, ip, r2
 8000460:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
 8000464:	d118      	bne.n	8000498 <strcmp+0x144>
 8000466:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 800046a:	bf08      	it	eq
 800046c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000470:	d107      	bne.n	8000482 <strcmp+0x12e>
 8000472:	ea85 0502 	eor.w	r5, r5, r2
 8000476:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
 800047a:	d109      	bne.n	8000490 <strcmp+0x13c>
 800047c:	f850 2b04 	ldr.w	r2, [r0], #4
 8000480:	e7e6      	b.n	8000450 <strcmp+0xfc>
 8000482:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 8000486:	d12f      	bne.n	80004e8 <strcmp+0x194>
 8000488:	880b      	ldrh	r3, [r1, #0]
 800048a:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800048e:	e02f      	b.n	80004f0 <strcmp+0x19c>
 8000490:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8000494:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000498:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800049c:	e028      	b.n	80004f0 <strcmp+0x19c>
 800049e:	bf00      	nop
 80004a0:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 80004a4:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
 80004a8:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 80004ac:	ea2c 0c02 	bic.w	ip, ip, r2
 80004b0:	d10d      	bne.n	80004ce <strcmp+0x17a>
 80004b2:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 80004b6:	bf08      	it	eq
 80004b8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80004bc:	d10a      	bne.n	80004d4 <strcmp+0x180>
 80004be:	ea85 0502 	eor.w	r5, r5, r2
 80004c2:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
 80004c6:	d10a      	bne.n	80004de <strcmp+0x18a>
 80004c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80004cc:	e7e8      	b.n	80004a0 <strcmp+0x14c>
 80004ce:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80004d2:	e00d      	b.n	80004f0 <strcmp+0x19c>
 80004d4:	f012 0fff 	tst.w	r2, #255	; 0xff
 80004d8:	d006      	beq.n	80004e8 <strcmp+0x194>
 80004da:	f851 3b04 	ldr.w	r3, [r1], #4
 80004de:	ea4f 2512 	mov.w	r5, r2, lsr #8
 80004e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80004e6:	e003      	b.n	80004f0 <strcmp+0x19c>
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bc20      	pop	{r5}
 80004ee:	4770      	bx	lr
 80004f0:	f005 02ff 	and.w	r2, r5, #255	; 0xff
 80004f4:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80004f8:	2801      	cmp	r0, #1
 80004fa:	bf28      	it	cs
 80004fc:	4290      	cmpcs	r0, r2
 80004fe:	bf04      	itt	eq
 8000500:	0a2d      	lsreq	r5, r5, #8
 8000502:	0a1b      	lsreq	r3, r3, #8
 8000504:	d0f4      	beq.n	80004f0 <strcmp+0x19c>
 8000506:	eba2 0000 	sub.w	r0, r2, r0
 800050a:	bc20      	pop	{r5}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <chMtxTryLock.constprop.95>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000510:	2320      	movs	r3, #32
 8000512:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <chMtxTryLock.constprop.95+0x2c>)
 8000518:	689a      	ldr	r2, [r3, #8]
 800051a:	b122      	cbz	r2, 8000526 <chMtxTryLock.constprop.95+0x16>
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 800051c:	2000      	movs	r0, #0
 800051e:	2300      	movs	r3, #0
 8000520:	f383 8811 	msr	BASEPRI, r3
}
 8000524:	4770      	bx	lr

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 8000526:	4a06      	ldr	r2, [pc, #24]	; (8000540 <chMtxTryLock.constprop.95+0x30>)
  mp->next = currp->mtxlist;
  currp->mtxlist = mp;
 8000528:	2001      	movs	r0, #1
  mp->owner = currp;
 800052a:	6992      	ldr	r2, [r2, #24]
  mp->next = currp->mtxlist;
 800052c:	6b91      	ldr	r1, [r2, #56]	; 0x38
  currp->mtxlist = mp;
 800052e:	6393      	str	r3, [r2, #56]	; 0x38
  mp->next = currp->mtxlist;
 8000530:	e9c3 2102 	strd	r2, r1, [r3, #8]
 8000534:	2300      	movs	r3, #0
 8000536:	f383 8811 	msr	BASEPRI, r3
}
 800053a:	4770      	bx	lr
 800053c:	20000840 	.word	0x20000840
 8000540:	200010f0 	.word	0x200010f0
	...

08000550 <chEvtGetAndClearEvents.constprop.85>:
 8000550:	2320      	movs	r3, #32
 8000552:	f383 8811 	msr	BASEPRI, r3
 */
eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
  eventmask_t m;

  m = currp->epending & events;
  currp->epending &= ~events;
 8000556:	2300      	movs	r3, #0
  m = currp->epending & events;
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <chEvtGetAndClearEvents.constprop.85+0x18>)
 800055a:	6992      	ldr	r2, [r2, #24]
 800055c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->epending &= ~events;
 800055e:	6353      	str	r3, [r2, #52]	; 0x34
 8000560:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  m = chEvtGetAndClearEventsI(events);
  chSysUnlock();

  return m;
}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	200010f0 	.word	0x200010f0
 800056c:	00000000 	.word	0x00000000

08000570 <_test_assert_time_window.constprop.3>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((time - start) < (end - start));
 8000576:	1a09      	subs	r1, r1, r0
 8000578:	b29b      	uxth	r3, r3
 800057a:	1a18      	subs	r0, r3, r0
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
 800057c:	4288      	cmp	r0, r1
 800057e:	db0a      	blt.n	8000596 <_test_assert_time_window.constprop.3+0x26>
  test_local_fail      = true;
 8000580:	2001      	movs	r0, #1
  clear_tokens();

  return false;
}

bool _test_assert_time_window(systime_t start,
 8000582:	b410      	push	{r4}
  test_global_fail     = true;
 8000584:	4905      	ldr	r1, [pc, #20]	; (800059c <_test_assert_time_window.constprop.3+0x2c>)
  test_local_fail      = true;
 8000586:	4c06      	ldr	r4, [pc, #24]	; (80005a0 <_test_assert_time_window.constprop.3+0x30>)
  test_failure_message = msg;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <_test_assert_time_window.constprop.3+0x34>)
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <_test_assert_time_window.constprop.3+0x38>)
  test_local_fail      = true;
 800058c:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 800058e:	7008      	strb	r0, [r1, #0]
  test_failure_message = msg;
 8000590:	601a      	str	r2, [r3, #0]
                              systime_t end,
                              const char *msg) {

  return _test_assert(osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end),
                      msg);
}
 8000592:	bc10      	pop	{r4}
 8000594:	4770      	bx	lr
  return false;
 8000596:	2000      	movs	r0, #0
}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	200019d8 	.word	0x200019d8
 80005a0:	20001a78 	.word	0x20001a78
 80005a4:	200019d4 	.word	0x200019d4
 80005a8:	08009fcc 	.word	0x08009fcc
 80005ac:	00000000 	.word	0x00000000

080005b0 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 80005b0:	b470      	push	{r4, r5, r6}
 80005b2:	2320      	movs	r3, #32
 80005b4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80005b8:	4c0d      	ldr	r4, [pc, #52]	; (80005f0 <chCoreAllocAlignedWithOffset+0x40>)
 80005ba:	1e4d      	subs	r5, r1, #1
 80005bc:	6826      	ldr	r6, [r4, #0]
  size = MEM_ALIGN_NEXT(size, align);
 80005be:	1943      	adds	r3, r0, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80005c0:	18b0      	adds	r0, r6, r2
  size = MEM_ALIGN_NEXT(size, align);
 80005c2:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80005c4:	4428      	add	r0, r5
  size = MEM_ALIGN_NEXT(size, align);
 80005c6:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80005c8:	4008      	ands	r0, r1
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80005ca:	6862      	ldr	r2, [r4, #4]
  next = p + size;
 80005cc:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d807      	bhi.n	80005e2 <chCoreAllocAlignedWithOffset+0x32>
 80005d2:	429e      	cmp	r6, r3
 80005d4:	d805      	bhi.n	80005e2 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
 80005d6:	6023      	str	r3, [r4, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 80005de:	bc70      	pop	{r4, r5, r6}
 80005e0:	4770      	bx	lr
    return NULL;
 80005e2:	2000      	movs	r0, #0
 80005e4:	2300      	movs	r3, #0
 80005e6:	f383 8811 	msr	BASEPRI, r3
}
 80005ea:	bc70      	pop	{r4, r5, r6}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20001280 	.word	0x20001280
	...

08000600 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8000600:	4a02      	ldr	r2, [pc, #8]	; (800060c <notify1+0xc>)
 8000602:	68d3      	ldr	r3, [r2, #12]
 8000604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000608:	60d3      	str	r3, [r2, #12]
}
 800060a:	4770      	bx	lr
 800060c:	40013800 	.word	0x40013800

08000610 <get_descriptor>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8000610:	2902      	cmp	r1, #2
 8000612:	d006      	beq.n	8000622 <get_descriptor+0x12>
 8000614:	2903      	cmp	r1, #3
 8000616:	d006      	beq.n	8000626 <get_descriptor+0x16>
 8000618:	2901      	cmp	r1, #1
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 800061a:	4806      	ldr	r0, [pc, #24]	; (8000634 <get_descriptor+0x24>)
 800061c:	bf18      	it	ne
 800061e:	2000      	movne	r0, #0
 8000620:	4770      	bx	lr
    return &vcom_configuration_descriptor;
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <get_descriptor+0x28>)
 8000624:	4770      	bx	lr
    if (dindex < 4)
 8000626:	2a03      	cmp	r2, #3
      return &vcom_strings[dindex];
 8000628:	bf9a      	itte	ls
 800062a:	4804      	ldrls	r0, [pc, #16]	; (800063c <get_descriptor+0x2c>)
 800062c:	eb00 00c2 	addls.w	r0, r0, r2, lsl #3
  return NULL;
 8000630:	2000      	movhi	r0, #0
}
 8000632:	4770      	bx	lr
 8000634:	0800c5f0 	.word	0x0800c5f0
 8000638:	0800c5a4 	.word	0x0800c5a4
 800063c:	0800c678 	.word	0x0800c678

08000640 <oslib_test_003_001_setup>:
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 8000640:	2000      	movs	r0, #0
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <oslib_test_003_001_setup+0x30>)
  heapp->provider = NULL;
 8000644:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <oslib_test_003_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000646:	1dd9      	adds	r1, r3, #7
 8000648:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 800064c:	1acb      	subs	r3, r1, r3
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800064e:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 * - [3.1.10] Testing final conditions. The heap geometry must be the
 *   same than the one registered at beginning.
 * .
 */

static void oslib_test_003_001_setup(void) {
 8000652:	b410      	push	{r4}
 8000654:	08db      	lsrs	r3, r3, #3
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000656:	f102 040c 	add.w	r4, r2, #12
 800065a:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 800065c:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 800065e:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8000660:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 8000664:	6010      	str	r0, [r2, #0]
  H_PAGES(&heapp->header) = 0;
 8000666:	6090      	str	r0, [r2, #8]
  mp->owner = NULL;
 8000668:	6150      	str	r0, [r2, #20]
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 800066a:	bc10      	pop	{r4}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200019f8 	.word	0x200019f8
 8000674:	200019dc 	.word	0x200019dc
	...

08000680 <oslib_test_002_003_setup>:
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8000680:	2200      	movs	r2, #0
  mp->object_size = size;
 8000682:	2104      	movs	r1, #4
  mp->next = NULL;
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <oslib_test_002_003_setup+0x18>)
 8000686:	60da      	str	r2, [r3, #12]
  mp->align = align;
  mp->provider = provider;
 8000688:	619a      	str	r2, [r3, #24]
 800068a:	e9c3 3300 	strd	r3, r3, [r3]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 800068e:	609a      	str	r2, [r3, #8]
  mp->align = align;
 8000690:	e9c3 1104 	strd	r1, r1, [r3, #16]
 * .
 */

static void oslib_test_002_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	2000081c 	.word	0x2000081c
 800069c:	00000000 	.word	0x00000000

080006a0 <oslib_test_002_002_setup>:
 80006a0:	f7ff bfee 	b.w	8000680 <oslib_test_002_003_setup>
	...

080006b0 <null_provider>:
}
 80006b0:	2000      	movs	r0, #0
 80006b2:	4770      	bx	lr
	...

080006c0 <oslib_test_002_001_setup>:
  mp->next = NULL;
 80006c0:	2100      	movs	r1, #0
  mp->object_size = size;
 80006c2:	2204      	movs	r2, #4
  mp->next = NULL;
 80006c4:	4b02      	ldr	r3, [pc, #8]	; (80006d0 <oslib_test_002_001_setup+0x10>)
 80006c6:	6019      	str	r1, [r3, #0]
  mp->provider = provider;
 80006c8:	60d9      	str	r1, [r3, #12]
  mp->align = align;
 80006ca:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
 80006ce:	4770      	bx	lr
 80006d0:	20000888 	.word	0x20000888
	...

080006e0 <oslib_test_001_003_setup>:

  mbp->buffer = buf;
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
  mbp->cnt    = (size_t)0;
 80006e0:	2100      	movs	r1, #0
 *   active state.
 * - [1.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_001_003_setup(void) {
 80006e2:	b430      	push	{r4, r5}
  mbp->buffer = buf;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <oslib_test_001_003_setup+0x2c>)
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <oslib_test_001_003_setup+0x30>)
  tqp->next = (thread_t *)tqp;
 80006e8:	f103 0418 	add.w	r4, r3, #24
  mbp->top    = &buf[n];
 80006ec:	f102 0510 	add.w	r5, r2, #16
 80006f0:	f103 0020 	add.w	r0, r3, #32
 80006f4:	605d      	str	r5, [r3, #4]
  tqp->prev = (thread_t *)tqp;
 80006f6:	e9c3 4406 	strd	r4, r4, [r3, #24]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 80006fa:	bc30      	pop	{r4, r5}
  mbp->buffer = buf;
 80006fc:	601a      	str	r2, [r3, #0]
  mbp->wrptr  = buf;
 80006fe:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8000702:	e9c3 0008 	strd	r0, r0, [r3, #32]
  mbp->cnt    = (size_t)0;
 8000706:	6119      	str	r1, [r3, #16]
  mbp->reset  = false;
 8000708:	7519      	strb	r1, [r3, #20]
 800070a:	4770      	bx	lr
 800070c:	20000860 	.word	0x20000860
 8000710:	20001308 	.word	0x20001308
	...

08000720 <oslib_test_001_002_setup>:
 8000720:	f7ff bfde 	b.w	80006e0 <oslib_test_001_003_setup>
	...

08000730 <oslib_test_001_001_setup>:
 8000730:	f7ff bfd6 	b.w	80006e0 <oslib_test_001_003_setup>
	...

08000740 <rt_test_010_011_setup>:
 8000740:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
 8000742:	4b02      	ldr	r3, [pc, #8]	; (800074c <rt_test_010_011_setup+0xc>)
 8000744:	609a      	str	r2, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 8000746:	e9c3 3300 	strd	r3, r3, [r3]
 * .
 */

static void rt_test_010_011_setup(void) {
  chMtxObjectInit(&mtx1);
}
 800074a:	4770      	bx	lr
 800074c:	20001328 	.word	0x20001328

08000750 <rt_test_010_010_setup>:
 8000750:	2201      	movs	r2, #1
  tqp->next = (thread_t *)tqp;
 8000752:	4b02      	ldr	r3, [pc, #8]	; (800075c <rt_test_010_010_setup+0xc>)
 8000754:	609a      	str	r2, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 8000756:	e9c3 3300 	strd	r3, r3, [r3]
}
 800075a:	4770      	bx	lr
 800075c:	20001354 	.word	0x20001354

08000760 <tmo>:
static void tmo(void *param) {(void)param;}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
	...

08000770 <rt_test_010_007_setup>:
 8000770:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
 8000772:	4b02      	ldr	r3, [pc, #8]	; (800077c <rt_test_010_007_setup+0xc>)
 8000774:	609a      	str	r2, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 8000776:	e9c3 3300 	strd	r3, r3, [r3]
}
 800077a:	4770      	bx	lr
 800077c:	20001354 	.word	0x20001354

08000780 <rt_test_009_002_setup>:
  mp->next = NULL;
 8000780:	2200      	movs	r2, #0
  mp->object_size = size;
 8000782:	f44f 70a4 	mov.w	r0, #328	; 0x148
  mp->align = align;
 8000786:	2104      	movs	r1, #4
  mp->next = NULL;
 8000788:	4b02      	ldr	r3, [pc, #8]	; (8000794 <rt_test_009_002_setup+0x14>)
 800078a:	601a      	str	r2, [r3, #0]
  mp->provider = provider;
 800078c:	60da      	str	r2, [r3, #12]
  mp->align = align;
 800078e:	e9c3 0101 	strd	r0, r1, [r3, #4]
 * .
 */

static void rt_test_009_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 8000792:	4770      	bx	lr
 8000794:	20001318 	.word	0x20001318
	...

080007a0 <rt_test_009_001_setup>:
  heapp->provider = NULL;
 80007a0:	2000      	movs	r0, #0
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <rt_test_009_001_setup+0x30>)
  heapp->provider = NULL;
 80007a4:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <rt_test_009_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80007a6:	1dd9      	adds	r1, r3, #7
 80007a8:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 80007ac:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80007ae:	f5c3 63cc 	rsb	r3, r3, #1632	; 0x660
static void rt_test_009_001_setup(void) {
 80007b2:	b410      	push	{r4}
 80007b4:	08db      	lsrs	r3, r3, #3
  tqp->next = (thread_t *)tqp;
 80007b6:	f102 040c 	add.w	r4, r2, #12
 80007ba:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 80007bc:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 80007be:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 80007c0:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 80007c4:	6010      	str	r0, [r2, #0]
  H_PAGES(&heapp->header) = 0;
 80007c6:	6090      	str	r0, [r2, #8]
 80007c8:	6150      	str	r0, [r2, #20]
}
 80007ca:	bc10      	pop	{r4}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	20001368 	.word	0x20001368
 80007d4:	200012ec 	.word	0x200012ec
	...

080007e0 <rt_test_008_007_setup>:
 *   has been emptied.
 * - [8.7.4] Unregistering from the Event Sources.
 * .
 */

static void rt_test_008_007_setup(void) {
 80007e0:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 80007e2:	f7ff feb5 	bl	8000550 <chEvtGetAndClearEvents.constprop.85>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 80007e6:	4a02      	ldr	r2, [pc, #8]	; (80007f0 <rt_test_008_007_setup+0x10>)
 80007e8:	4b02      	ldr	r3, [pc, #8]	; (80007f4 <rt_test_008_007_setup+0x14>)
 80007ea:	6012      	str	r2, [r2, #0]
 80007ec:	601b      	str	r3, [r3, #0]
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 80007ee:	bd08      	pop	{r3, pc}
 80007f0:	20000814 	.word	0x20000814
 80007f4:	20000818 	.word	0x20000818
	...

08000800 <rt_test_008_006_setup>:
  chEvtGetAndClearEvents(ALL_EVENTS);
 8000800:	f7ff bea6 	b.w	8000550 <chEvtGetAndClearEvents.constprop.85>
	...

08000810 <rt_test_008_005_setup>:
 8000810:	f7ff bff6 	b.w	8000800 <rt_test_008_006_setup>
	...

08000820 <rt_test_008_004_setup>:
 8000820:	f7ff bfee 	b.w	8000800 <rt_test_008_006_setup>
	...

08000830 <rt_test_008_003_setup>:
 8000830:	f7ff bfe6 	b.w	8000800 <rt_test_008_006_setup>
	...

08000840 <rt_test_008_002_setup>:
 8000840:	f7ff bfde 	b.w	8000800 <rt_test_008_006_setup>
	...

08000850 <rt_test_006_009_setup>:
 8000850:	2000      	movs	r0, #0
  tqp->next = (thread_t *)tqp;
 8000852:	4a06      	ldr	r2, [pc, #24]	; (800086c <rt_test_006_009_setup+0x1c>)
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <rt_test_006_009_setup+0x20>)
 8000856:	4907      	ldr	r1, [pc, #28]	; (8000874 <rt_test_006_009_setup+0x24>)
 8000858:	6090      	str	r0, [r2, #8]
  tqp->prev = (thread_t *)tqp;
 800085a:	e9c2 2200 	strd	r2, r2, [r2]
 800085e:	6098      	str	r0, [r3, #8]
 8000860:	e9c3 3300 	strd	r3, r3, [r3]
 8000864:	e9c1 1100 	strd	r1, r1, [r1]

static void rt_test_006_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000840 	.word	0x20000840
 8000870:	20000850 	.word	0x20000850
 8000874:	2000080c 	.word	0x2000080c
	...

08000880 <rt_test_006_008_setup>:
 8000880:	2100      	movs	r1, #0
  tqp->next = (thread_t *)tqp;
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <rt_test_006_008_setup+0x14>)
 8000884:	4a04      	ldr	r2, [pc, #16]	; (8000898 <rt_test_006_008_setup+0x18>)
 8000886:	6099      	str	r1, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 8000888:	e9c3 3300 	strd	r3, r3, [r3]
 800088c:	e9c2 2200 	strd	r2, r2, [r2]
}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	20000840 	.word	0x20000840
 8000898:	2000080c 	.word	0x2000080c
 800089c:	00000000 	.word	0x00000000

080008a0 <rt_test_006_007_setup>:
 80008a0:	f7ff bfee 	b.w	8000880 <rt_test_006_008_setup>
	...

080008b0 <rt_test_006_005_setup>:
 80008b0:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
 80008b2:	4b02      	ldr	r3, [pc, #8]	; (80008bc <rt_test_006_005_setup+0xc>)
 80008b4:	609a      	str	r2, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 80008b6:	e9c3 3300 	strd	r3, r3, [r3]
}
 80008ba:	4770      	bx	lr
 80008bc:	20000840 	.word	0x20000840

080008c0 <rt_test_006_004_setup>:
 80008c0:	2100      	movs	r1, #0
  tqp->next = (thread_t *)tqp;
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <rt_test_006_004_setup+0x14>)
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <rt_test_006_004_setup+0x18>)
 80008c6:	6091      	str	r1, [r2, #8]
  tqp->prev = (thread_t *)tqp;
 80008c8:	e9c2 2200 	strd	r2, r2, [r2]
 80008cc:	6099      	str	r1, [r3, #8]
 80008ce:	e9c3 3300 	strd	r3, r3, [r3]
}
 80008d2:	4770      	bx	lr
 80008d4:	20000840 	.word	0x20000840
 80008d8:	20000850 	.word	0x20000850
 80008dc:	00000000 	.word	0x00000000

080008e0 <rt_test_006_001_setup>:
 80008e0:	f7ff bfe6 	b.w	80008b0 <rt_test_006_005_setup>
	...

080008f0 <rt_test_005_005_setup>:
 80008f0:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
 80008f2:	4b02      	ldr	r3, [pc, #8]	; (80008fc <rt_test_005_005_setup+0xc>)
 80008f4:	609a      	str	r2, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 80008f6:	e9c3 3300 	strd	r3, r3, [r3]
 * .
 */

static void rt_test_005_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 80008fa:	4770      	bx	lr
 80008fc:	20001348 	.word	0x20001348

08000900 <rt_test_005_004_setup>:
 8000900:	f7ff bff6 	b.w	80008f0 <rt_test_005_005_setup>
	...

08000910 <rt_test_005_003_setup>:
 8000910:	f7ff bfee 	b.w	80008f0 <rt_test_005_005_setup>
	...

08000920 <rt_test_005_002_setup>:
 8000920:	f7ff bfe6 	b.w	80008f0 <rt_test_005_005_setup>
	...

08000930 <rt_test_005_001_setup>:
 8000930:	2201      	movs	r2, #1
  tqp->next = (thread_t *)tqp;
 8000932:	4b02      	ldr	r3, [pc, #8]	; (800093c <rt_test_005_001_setup+0xc>)
 8000934:	609a      	str	r2, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 8000936:	e9c3 3300 	strd	r3, r3, [r3]
}
 800093a:	4770      	bx	lr
 800093c:	20001348 	.word	0x20001348

08000940 <rt_test_004_001_setup>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_004_001_setup(void) {
  tr1 = NULL;
 8000940:	2200      	movs	r2, #0
 8000942:	4b01      	ldr	r3, [pc, #4]	; (8000948 <rt_test_004_001_setup+0x8>)
 8000944:	601a      	str	r2, [r3, #0]
}
 8000946:	4770      	bx	lr
 8000948:	20001aa8 	.word	0x20001aa8
 800094c:	00000000 	.word	0x00000000

08000950 <_test_assert>:
  if (!condition)
 8000950:	b948      	cbnz	r0, 8000966 <_test_assert+0x16>
  test_local_fail      = true;
 8000952:	2001      	movs	r0, #1
bool _test_assert(bool condition, const char *msg) {
 8000954:	b410      	push	{r4}
  test_global_fail     = true;
 8000956:	4a05      	ldr	r2, [pc, #20]	; (800096c <_test_assert+0x1c>)
  test_local_fail      = true;
 8000958:	4c05      	ldr	r4, [pc, #20]	; (8000970 <_test_assert+0x20>)
  test_failure_message = msg;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <_test_assert+0x24>)
  test_local_fail      = true;
 800095c:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 800095e:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8000960:	6019      	str	r1, [r3, #0]
}
 8000962:	bc10      	pop	{r4}
 8000964:	4770      	bx	lr
  return false;
 8000966:	2000      	movs	r0, #0
}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	200019d8 	.word	0x200019d8
 8000970:	20001a78 	.word	0x20001a78
 8000974:	200019d4 	.word	0x200019d4
	...

08000980 <rt_test_002_004_execute>:
 8000980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

static void rt_test_002_004_execute(void) {

  /* [2.4.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 8000984:	2001      	movs	r0, #1
 8000986:	4619      	mov	r1, r3
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <rt_test_002_004_execute+0x1c>)
 800098a:	6010      	str	r0, [r2, #0]
 800098c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800098e:	b292      	uxth	r2, r2
 8000990:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
 8000992:	b29b      	uxth	r3, r3
 8000994:	429a      	cmp	r2, r3
 8000996:	d0fb      	beq.n	8000990 <rt_test_002_004_execute+0x10>
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    }
  }
}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20001a7c 	.word	0x20001a7c

080009a0 <rt_test_002_003_execute>:
  test_set_step(1);
 80009a0:	2101      	movs	r1, #1
 80009a2:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <rt_test_002_003_execute+0x20>)
 80009a4:	2320      	movs	r3, #32
 80009a6:	6011      	str	r1, [r2, #0]
 80009a8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80009ac:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 80009ae:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80009b0:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80009b4:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80009b6:	2300      	movs	r3, #0
 80009b8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80009bc:	b662      	cpsie	i
}
 80009be:	4770      	bx	lr
 80009c0:	20001a7c 	.word	0x20001a7c
	...

080009d0 <test_terminate_threads>:
                         test_buffer + (WA_SIZE * 4)};

/*
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 80009d0:	b430      	push	{r4, r5}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80009d2:	2520      	movs	r5, #32
 80009d4:	2400      	movs	r4, #0
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <test_terminate_threads+0x30>)
 80009d8:	f103 0014 	add.w	r0, r3, #20
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 80009dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80009e0:	b14a      	cbz	r2, 80009f6 <test_terminate_threads+0x26>
 80009e2:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->flags |= CH_FLAG_TERMINATE;
 80009e6:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 80009ea:	f041 0104 	orr.w	r1, r1, #4
 80009ee:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 80009f2:	f384 8811 	msr	BASEPRI, r4
  for (i = 0; i < MAX_THREADS; i++)
 80009f6:	4283      	cmp	r3, r0
 80009f8:	d1f0      	bne.n	80009dc <test_terminate_threads+0xc>
      chThdTerminate(threads[i]);
}
 80009fa:	bc30      	pop	{r4, r5}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20001a94 	.word	0x20001a94
	...

08000a10 <test_printn.part.0>:

  if (!n)
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
 8000a10:	b320      	cbz	r0, 8000a5c <test_printn.part.0+0x4c>
void test_printn(uint32_t n) {
 8000a12:	b570      	push	{r4, r5, r6, lr}
 8000a14:	b084      	sub	sp, #16
    p = buf;
 8000a16:	466d      	mov	r5, sp
      *p++ = (n % 10) + '0', n /= 10;
 8000a18:	4e11      	ldr	r6, [pc, #68]	; (8000a60 <test_printn.part.0+0x50>)
    p = buf;
 8000a1a:	462c      	mov	r4, r5
 8000a1c:	e000      	b.n	8000a20 <test_printn.part.0+0x10>
    while (n)
 8000a1e:	4614      	mov	r4, r2
      *p++ = (n % 10) + '0', n /= 10;
 8000a20:	4622      	mov	r2, r4
 8000a22:	fba6 1300 	umull	r1, r3, r6, r0
 8000a26:	08db      	lsrs	r3, r3, #3
 8000a28:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000a2c:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8000a30:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8000a34:	b2c9      	uxtb	r1, r1
 8000a36:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1ee      	bne.n	8000a1e <test_printn.part.0+0xe>
    while (p > buf)
 8000a40:	42aa      	cmp	r2, r5
 8000a42:	d909      	bls.n	8000a58 <test_printn.part.0+0x48>
 8000a44:	4e07      	ldr	r6, [pc, #28]	; (8000a64 <test_printn.part.0+0x54>)
 8000a46:	e001      	b.n	8000a4c <test_printn.part.0+0x3c>
 8000a48:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      streamPut(test_chp, *--p);
 8000a4c:	6830      	ldr	r0, [r6, #0]
 8000a4e:	6803      	ldr	r3, [r0, #0]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	4798      	blx	r3
    while (p > buf)
 8000a54:	42a5      	cmp	r5, r4
 8000a56:	d1f7      	bne.n	8000a48 <test_printn.part.0+0x38>
  }
}
 8000a58:	b004      	add	sp, #16
 8000a5a:	bd70      	pop	{r4, r5, r6, pc}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	cccccccd 	.word	0xcccccccd
 8000a64:	200019d0 	.word	0x200019d0
	...

08000a70 <test_printn>:
  if (!n)
 8000a70:	b928      	cbnz	r0, 8000a7e <test_printn+0xe>
    streamPut(test_chp, '0');
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <test_printn+0x14>)
 8000a74:	2130      	movs	r1, #48	; 0x30
 8000a76:	6818      	ldr	r0, [r3, #0]
 8000a78:	6803      	ldr	r3, [r0, #0]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	4718      	bx	r3
 8000a7e:	f7ff bfc7 	b.w	8000a10 <test_printn.part.0>
 8000a82:	bf00      	nop
 8000a84:	200019d0 	.word	0x200019d0
	...

08000a90 <test_emit_token>:
 8000a90:	2320      	movs	r3, #32
 8000a92:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void test_emit_token(char token) {

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 8000a96:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <test_emit_token+0x20>)
 8000a98:	4906      	ldr	r1, [pc, #24]	; (8000ab4 <test_emit_token+0x24>)
 8000a9a:	6813      	ldr	r3, [r2, #0]
 8000a9c:	428b      	cmp	r3, r1
 8000a9e:	d202      	bcs.n	8000aa6 <test_emit_token+0x16>
    *test_tokp++ = token;
 8000aa0:	1c59      	adds	r1, r3, #1
 8000aa2:	7018      	strb	r0, [r3, #0]
 8000aa4:	6011      	str	r1, [r2, #0]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20001a90 	.word	0x20001a90
 8000ab4:	20001a90 	.word	0x20001a90
	...

08000ac0 <h3>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8000ac0:	2043      	movs	r0, #67	; 0x43
 8000ac2:	f7ff bfe5 	b.w	8000a90 <test_emit_token>
 8000ac6:	bf00      	nop
	...

08000ad0 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8000ad0:	2042      	movs	r0, #66	; 0x42
 8000ad2:	f7ff bfdd 	b.w	8000a90 <test_emit_token>
 8000ad6:	bf00      	nop
	...

08000ae0 <h1>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8000ae0:	2041      	movs	r0, #65	; 0x41
 8000ae2:	f7ff bfd5 	b.w	8000a90 <test_emit_token>
 8000ae6:	bf00      	nop
	...

08000af0 <thread>:
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8000af0:	7800      	ldrb	r0, [r0, #0]
 8000af2:	f7ff bfcd 	b.w	8000a90 <test_emit_token>
 8000af6:	bf00      	nop
	...

08000b00 <dyn_thread1>:
 8000b00:	f7ff bff6 	b.w	8000af0 <thread>
	...

08000b10 <test_println>:
void test_println(const char *msgp) {
 8000b10:	b570      	push	{r4, r5, r6, lr}
  while (*msgp)
 8000b12:	7801      	ldrb	r1, [r0, #0]
 8000b14:	b189      	cbz	r1, 8000b3a <test_println+0x2a>
 8000b16:	4604      	mov	r4, r0
 8000b18:	4d09      	ldr	r5, [pc, #36]	; (8000b40 <test_println+0x30>)
    streamPut(test_chp, *msgp++);
 8000b1a:	6828      	ldr	r0, [r5, #0]
 8000b1c:	6803      	ldr	r3, [r0, #0]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	4798      	blx	r3
  while (*msgp)
 8000b22:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000b26:	2900      	cmp	r1, #0
 8000b28:	d1f7      	bne.n	8000b1a <test_println+0xa>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000b2a:	6828      	ldr	r0, [r5, #0]
 8000b2c:	2202      	movs	r2, #2
}
 8000b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000b32:	6803      	ldr	r3, [r0, #0]
 8000b34:	4903      	ldr	r1, [pc, #12]	; (8000b44 <test_println+0x34>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4718      	bx	r3
 8000b3a:	4d01      	ldr	r5, [pc, #4]	; (8000b40 <test_println+0x30>)
 8000b3c:	e7f5      	b.n	8000b2a <test_println+0x1a>
 8000b3e:	bf00      	nop
 8000b40:	200019d0 	.word	0x200019d0
 8000b44:	0800ba70 	.word	0x0800ba70
	...

08000b50 <test_print>:
  while (*msgp)
 8000b50:	7801      	ldrb	r1, [r0, #0]
 8000b52:	b159      	cbz	r1, 8000b6c <test_print+0x1c>
void test_print(const char *msgp) {
 8000b54:	b538      	push	{r3, r4, r5, lr}
 8000b56:	4604      	mov	r4, r0
 8000b58:	4d05      	ldr	r5, [pc, #20]	; (8000b70 <test_print+0x20>)
    streamPut(test_chp, *msgp++);
 8000b5a:	6828      	ldr	r0, [r5, #0]
 8000b5c:	6803      	ldr	r3, [r0, #0]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	4798      	blx	r3
  while (*msgp)
 8000b62:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d1f7      	bne.n	8000b5a <test_print+0xa>
}
 8000b6a:	bd38      	pop	{r3, r4, r5, pc}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	200019d0 	.word	0x200019d0
	...

08000b80 <_test_assert_sequence>:
bool _test_assert_sequence(char *expected, const char *msg) {
 8000b80:	b4f0      	push	{r4, r5, r6, r7}
  while (cp < test_tokp) {
 8000b82:	4e0d      	ldr	r6, [pc, #52]	; (8000bb8 <_test_assert_sequence+0x38>)
  char *cp = test_tokens_buffer;
 8000b84:	4f0d      	ldr	r7, [pc, #52]	; (8000bbc <_test_assert_sequence+0x3c>)
 8000b86:	1e42      	subs	r2, r0, #1
  while (cp < test_tokp) {
 8000b88:	6835      	ldr	r5, [r6, #0]
  char *cp = test_tokens_buffer;
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	e003      	b.n	8000b96 <_test_assert_sequence+0x16>
    if (*cp++ != *expected++)
 8000b8e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8000b92:	4284      	cmp	r4, r0
 8000b94:	d107      	bne.n	8000ba6 <_test_assert_sequence+0x26>
  while (cp < test_tokp) {
 8000b96:	429d      	cmp	r5, r3
 8000b98:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8000b9c:	d8f7      	bhi.n	8000b8e <_test_assert_sequence+0xe>
  if (*expected)
 8000b9e:	b910      	cbnz	r0, 8000ba6 <_test_assert_sequence+0x26>
  test_tokp = test_tokens_buffer;
 8000ba0:	6037      	str	r7, [r6, #0]
}
 8000ba2:	bcf0      	pop	{r4, r5, r6, r7}
 8000ba4:	4770      	bx	lr
  test_local_fail      = true;
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	4c05      	ldr	r4, [pc, #20]	; (8000bc0 <_test_assert_sequence+0x40>)
  test_global_fail     = true;
 8000baa:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <_test_assert_sequence+0x44>)
  test_failure_message = msg;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <_test_assert_sequence+0x48>)
  test_local_fail      = true;
 8000bae:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8000bb0:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8000bb2:	6019      	str	r1, [r3, #0]
}
 8000bb4:	bcf0      	pop	{r4, r5, r6, r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	20001a90 	.word	0x20001a90
 8000bbc:	20001a80 	.word	0x20001a80
 8000bc0:	20001a78 	.word	0x20001a78
 8000bc4:	200019d8 	.word	0x200019d8
 8000bc8:	200019d4 	.word	0x200019d4
 8000bcc:	00000000 	.word	0x00000000

08000bd0 <rt_test_008_002_execute>:
static void rt_test_008_002_execute(void) {
 8000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	2507      	movs	r5, #7

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8000bd6:	461e      	mov	r6, r3
  eid = (eventid_t)0;
 8000bd8:	2400      	movs	r4, #0
 8000bda:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <rt_test_008_002_execute+0x40>)
 8000bdc:	4f0d      	ldr	r7, [pc, #52]	; (8000c14 <rt_test_008_002_execute+0x44>)
 8000bde:	6013      	str	r3, [r2, #0]
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8000be0:	fa25 f304 	lsr.w	r3, r5, r4
 8000be4:	07db      	lsls	r3, r3, #31
      events &= ~EVENT_MASK(eid);
 8000be6:	fa06 f204 	lsl.w	r2, r6, r4
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8000bea:	d50e      	bpl.n	8000c0a <rt_test_008_002_execute+0x3a>
      handlers[eid](eid);
 8000bec:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8000bf0:	4620      	mov	r0, r4
      events &= ~EVENT_MASK(eid);
 8000bf2:	ea25 0502 	bic.w	r5, r5, r2
    }
    eid++;
 8000bf6:	3401      	adds	r4, #1
      handlers[eid](eid);
 8000bf8:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d1f0      	bne.n	8000be0 <rt_test_008_002_execute+0x10>
}
 8000bfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8000c02:	4905      	ldr	r1, [pc, #20]	; (8000c18 <rt_test_008_002_execute+0x48>)
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <rt_test_008_002_execute+0x4c>)
 8000c06:	f7ff bfbb 	b.w	8000b80 <_test_assert_sequence>
    eid++;
 8000c0a:	3401      	adds	r4, #1
 8000c0c:	e7e8      	b.n	8000be0 <rt_test_008_002_execute+0x10>
 8000c0e:	bf00      	nop
 8000c10:	20001a7c 	.word	0x20001a7c
 8000c14:	0800a360 	.word	0x0800a360
 8000c18:	0800b54c 	.word	0x0800b54c
 8000c1c:	0800b560 	.word	0x0800b560

08000c20 <print_line>:
static void print_line(void) {
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	244c      	movs	r4, #76	; 0x4c
 8000c24:	4d07      	ldr	r5, [pc, #28]	; (8000c44 <print_line+0x24>)
    streamPut(test_chp, '-');
 8000c26:	6828      	ldr	r0, [r5, #0]
 8000c28:	212d      	movs	r1, #45	; 0x2d
 8000c2a:	6803      	ldr	r3, [r0, #0]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8000c30:	3c01      	subs	r4, #1
 8000c32:	d1f8      	bne.n	8000c26 <print_line+0x6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000c34:	6828      	ldr	r0, [r5, #0]
 8000c36:	2202      	movs	r2, #2
}
 8000c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000c3c:	6803      	ldr	r3, [r0, #0]
 8000c3e:	4902      	ldr	r1, [pc, #8]	; (8000c48 <print_line+0x28>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4718      	bx	r3
 8000c44:	200019d0 	.word	0x200019d0
 8000c48:	0800ba70 	.word	0x0800ba70
 8000c4c:	00000000 	.word	0x00000000

08000c50 <usb_lld_start_in>:
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000c50:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8000c54:	68c3      	ldr	r3, [r0, #12]
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8000c56:	b430      	push	{r4, r5}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000c58:	695a      	ldr	r2, [r3, #20]

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 8000c5a:	8a18      	ldrh	r0, [r3, #16]
  n = isp->txsize;
 8000c5c:	6813      	ldr	r3, [r2, #0]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8000c5e:	4c1a      	ldr	r4, [pc, #104]	; (8000cc8 <usb_lld_start_in+0x78>)
 8000c60:	4298      	cmp	r0, r3
 8000c62:	bf28      	it	cs
 8000c64:	4618      	movcs	r0, r3
    n = (size_t)usbp->epc[ep]->in_maxsize;

  isp->txlast = n;
 8000c66:	60d0      	str	r0, [r2, #12]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8000c68:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c6a:	010d      	lsls	r5, r1, #4
 8000c6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c70:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  usb_packet_write_from_buffer(ep, isp->txbuf, n);
 8000c74:	6894      	ldr	r4, [r2, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8000c76:	58ea      	ldr	r2, [r5, r3]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8000c78:	442b      	add	r3, r5
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8000c7a:	6058      	str	r0, [r3, #4]
  while (i > 0) {
 8000c7c:	b188      	cbz	r0, 8000ca2 <usb_lld_start_in+0x52>
 8000c7e:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8000c82:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8000c86:	0052      	lsls	r2, r2, #1
 8000c88:	3801      	subs	r0, #1
 8000c8a:	0840      	lsrs	r0, r0, #1
 8000c8c:	1d13      	adds	r3, r2, #4
 8000c8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000c92:	e000      	b.n	8000c96 <usb_lld_start_in+0x46>
 8000c94:	3304      	adds	r3, #4
    w |= *buf++ << 8;
 8000c96:	f834 5b02 	ldrh.w	r5, [r4], #2
  while (i > 0) {
 8000c9a:	4298      	cmp	r0, r3
    *pmap++ = (stm32_usb_pma_t)w;
 8000c9c:	6015      	str	r5, [r2, #0]
 8000c9e:	461a      	mov	r2, r3
  while (i > 0) {
 8000ca0:	d1f8      	bne.n	8000c94 <usb_lld_start_in+0x44>

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
}
 8000ca2:	bc30      	pop	{r4, r5}
 8000ca4:	0089      	lsls	r1, r1, #2
 8000ca6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000caa:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8000cae:	680b      	ldr	r3, [r1, #0]
 8000cb0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cb8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8000cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc4:	600b      	str	r3, [r1, #0]
}
 8000cc6:	4770      	bx	lr
 8000cc8:	40005c00 	.word	0x40005c00
 8000ccc:	00000000 	.word	0x00000000

08000cd0 <usb_lld_start_out>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000cd0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8000cd4:	68c0      	ldr	r0, [r0, #12]
 8000cd6:	6982      	ldr	r2, [r0, #24]
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8000cd8:	6813      	ldr	r3, [r2, #0]
 8000cda:	b1bb      	cbz	r3, 8000d0c <usb_lld_start_out+0x3c>
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8000cdc:	8a40      	ldrh	r0, [r0, #18]
 8000cde:	4403      	add	r3, r0
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ce6:	8193      	strh	r3, [r2, #12]
 8000ce8:	0089      	lsls	r1, r1, #2
 8000cea:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000cee:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8000cf2:	680b      	ldr	r3, [r1, #0]
 8000cf4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cfc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d08:	600b      	str	r3, [r1, #0]
}
 8000d0a:	4770      	bx	lr
    osp->rxpkts = 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	8193      	strh	r3, [r2, #12]
 8000d10:	e7ea      	b.n	8000ce8 <usb_lld_start_out+0x18>
 8000d12:	bf00      	nop
	...

08000d20 <usb_lld_init_endpoint>:
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8000d20:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8000d24:	b4f0      	push	{r4, r5, r6, r7}
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8000d26:	68de      	ldr	r6, [r3, #12]
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8000d28:	6833      	ldr	r3, [r6, #0]
 8000d2a:	f013 0303 	ands.w	r3, r3, #3
 8000d2e:	d053      	beq.n	8000dd8 <usb_lld_init_endpoint+0xb8>
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d95d      	bls.n	8000df0 <usb_lld_init_endpoint+0xd0>
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d14f      	bne.n	8000dd8 <usb_lld_init_endpoint+0xb8>
    epr = EPR_EP_TYPE_INTERRUPT;
 8000d38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  dp = USB_GET_DESCRIPTOR(ep);
 8000d3c:	4a2d      	ldr	r2, [pc, #180]	; (8000df4 <usb_lld_init_endpoint+0xd4>)
  if (epcp->in_state != NULL) {
 8000d3e:	6974      	ldr	r4, [r6, #20]
  dp = USB_GET_DESCRIPTOR(ep);
 8000d40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000d42:	010f      	lsls	r7, r1, #4
 8000d44:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000d48:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8000d4c:	18bd      	adds	r5, r7, r2
  if (epcp->in_state != NULL) {
 8000d4e:	b184      	cbz	r4, 8000d72 <usb_lld_init_endpoint+0x52>
    dp->TXCOUNT0 = 0;
 8000d50:	f04f 0c00 	mov.w	ip, #0
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8000d54:	8a34      	ldrh	r4, [r6, #16]
    dp->TXCOUNT0 = 0;
 8000d56:	f8c5 c004 	str.w	ip, [r5, #4]
  next = usbp->pmnext;
 8000d5a:	f8d0 c084 	ldr.w	ip, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 8000d5e:	3401      	adds	r4, #1
 8000d60:	f024 0401 	bic.w	r4, r4, #1
 8000d64:	4464      	add	r4, ip
 8000d66:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
    epr |= EPR_STAT_TX_NAK;
 8000d6a:	f043 0320 	orr.w	r3, r3, #32
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8000d6e:	f847 c002 	str.w	ip, [r7, r2]
  if (epcp->out_state != NULL) {
 8000d72:	69b2      	ldr	r2, [r6, #24]
 8000d74:	b1c2      	cbz	r2, 8000da8 <usb_lld_init_endpoint+0x88>
    if (epcp->out_maxsize > 62)
 8000d76:	8a74      	ldrh	r4, [r6, #18]
 8000d78:	2c3e      	cmp	r4, #62	; 0x3e
 8000d7a:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 8000d7e:	d92e      	bls.n	8000dde <usb_lld_init_endpoint+0xbe>
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8000d80:	f042 021f 	orr.w	r2, r2, #31
 8000d84:	3201      	adds	r2, #1
 8000d86:	4e1c      	ldr	r6, [pc, #112]	; (8000df8 <usb_lld_init_endpoint+0xd8>)
 8000d88:	1152      	asrs	r2, r2, #5
 8000d8a:	ea46 2282 	orr.w	r2, r6, r2, lsl #10
 8000d8e:	b292      	uxth	r2, r2
    dp->RXCOUNT0 = nblocks;
 8000d90:	60ea      	str	r2, [r5, #12]
  next = usbp->pmnext;
 8000d92:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 8000d96:	3401      	adds	r4, #1
 8000d98:	f024 0401 	bic.w	r4, r4, #1
 8000d9c:	4414      	add	r4, r2
 8000d9e:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
    epr |= EPR_STAT_RX_NAK;
 8000da2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8000da6:	60aa      	str	r2, [r5, #8]
  EPR_SET(ep, epr | ep);
 8000da8:	f248 0080 	movw	r0, #32896	; 0x8080
  EPR_TOGGLE(ep, epr);
 8000dac:	f647 0470 	movw	r4, #30832	; 0x7870
  EPR_SET(ep, epr | ep);
 8000db0:	ea43 0201 	orr.w	r2, r3, r1
 8000db4:	f422 4278 	bic.w	r2, r2, #63488	; 0xf800
 8000db8:	0089      	lsls	r1, r1, #2
 8000dba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000dbe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000dc2:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8000dc6:	4302      	orrs	r2, r0
 8000dc8:	600a      	str	r2, [r1, #0]
  EPR_TOGGLE(ep, epr);
 8000dca:	680a      	ldr	r2, [r1, #0]
 8000dcc:	4023      	ands	r3, r4
 8000dce:	4053      	eors	r3, r2
 8000dd0:	4303      	orrs	r3, r0
 8000dd2:	600b      	str	r3, [r1, #0]
}
 8000dd4:	bcf0      	pop	{r4, r5, r6, r7}
 8000dd6:	4770      	bx	lr
    epr = EPR_EP_TYPE_CONTROL;
 8000dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ddc:	e7ae      	b.n	8000d3c <usb_lld_init_endpoint+0x1c>
      nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 8000dde:	f042 0201 	orr.w	r2, r2, #1
 8000de2:	3201      	adds	r2, #1
 8000de4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8000de8:	0252      	lsls	r2, r2, #9
 8000dea:	f402 427c 	and.w	r2, r2, #64512	; 0xfc00
 8000dee:	e7cf      	b.n	8000d90 <usb_lld_init_endpoint+0x70>
    epr = EPR_EP_TYPE_BULK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	e7a3      	b.n	8000d3c <usb_lld_init_endpoint+0x1c>
 8000df4:	40005c00 	.word	0x40005c00
 8000df8:	ffff8000 	.word	0xffff8000
 8000dfc:	00000000 	.word	0x00000000

08000e00 <usb_lld_reset>:
  STM32_USB->BTABLE = BTABLE_ADDR;
 8000e00:	2100      	movs	r1, #0
  if (usbp->config->sof_cb != NULL)
 8000e02:	6843      	ldr	r3, [r0, #4]
void usb_lld_reset(USBDriver *usbp) {
 8000e04:	b4f0      	push	{r4, r5, r6, r7}
  if (usbp->config->sof_cb != NULL)
 8000e06:	68db      	ldr	r3, [r3, #12]
  STM32_USB->DADDR  = DADDR_EF;
 8000e08:	2780      	movs	r7, #128	; 0x80
  if (usbp->config->sof_cb != NULL)
 8000e0a:	428b      	cmp	r3, r1
    cntr |= CNTR_SOFM;
 8000e0c:	bf0c      	ite	eq
 8000e0e:	f44f 461c 	moveq.w	r6, #39936	; 0x9c00
 8000e12:	f44f 461e 	movne.w	r6, #40448	; 0x9e00
  usbp->pmnext = 64;
 8000e16:	2540      	movs	r5, #64	; 0x40
  STM32_USB->BTABLE = BTABLE_ADDR;
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <usb_lld_reset+0x30>)
  usbp->epc[0] = &ep0config;
 8000e1a:	4c06      	ldr	r4, [pc, #24]	; (8000e34 <usb_lld_reset+0x34>)
  STM32_USB->BTABLE = BTABLE_ADDR;
 8000e1c:	6519      	str	r1, [r3, #80]	; 0x50
  STM32_USB->ISTR   = 0;
 8000e1e:	6459      	str	r1, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8000e20:	64df      	str	r7, [r3, #76]	; 0x4c
  STM32_USB->CNTR = cntr;
 8000e22:	641e      	str	r6, [r3, #64]	; 0x40
  usbp->pmnext = 64;
 8000e24:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  usbp->epc[0] = &ep0config;
 8000e28:	60c4      	str	r4, [r0, #12]
}
 8000e2a:	bcf0      	pop	{r4, r5, r6, r7}
  usb_lld_init_endpoint(usbp, 0);
 8000e2c:	f7ff bf78 	b.w	8000d20 <usb_lld_init_endpoint>
 8000e30:	40005c00 	.word	0x40005c00
 8000e34:	0800a2f4 	.word	0x0800a2f4
	...

08000e40 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8000e40:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 8000e44:	2a15      	cmp	r2, #21
 8000e46:	d815      	bhi.n	8000e74 <_usb_ep0out+0x34>
 8000e48:	2301      	movs	r3, #1
 8000e4a:	f640 6141 	movw	r1, #3649	; 0xe41
 8000e4e:	4093      	lsls	r3, r2
 8000e50:	420b      	tst	r3, r1
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8000e52:	b570      	push	{r4, r5, r6, lr}
 8000e54:	4604      	mov	r4, r0
 8000e56:	d125      	bne.n	8000ea4 <_usb_ep0out+0x64>
 8000e58:	f413 1580 	ands.w	r5, r3, #1048576	; 0x100000
 8000e5c:	d00b      	beq.n	8000e76 <_usb_ep0out+0x36>
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8000e5e:	68c3      	ldr	r3, [r0, #12]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	b92b      	cbnz	r3, 8000e72 <_usb_ep0out+0x32>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 8000e66:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8000e68:	b103      	cbz	r3, 8000e6c <_usb_ep0out+0x2c>
      usbp->ep0endcb(usbp);
 8000e6a:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8000e72:	bd70      	pop	{r4, r5, r6, pc}
 8000e74:	4770      	bx	lr
 8000e76:	029b      	lsls	r3, r3, #10
 8000e78:	d5fb      	bpl.n	8000e72 <_usb_ep0out+0x32>
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8000e7a:	220b      	movs	r2, #11
 8000e7c:	2320      	movs	r3, #32
 8000e7e:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 8000e82:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8000e86:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000e88:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8000e8a:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000e8c:	f042 0201 	orr.w	r2, r2, #1
 8000e90:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8000e92:	4629      	mov	r1, r5
  isp->txbuf  = buf;
 8000e94:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8000e96:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8000e9a:	f7ff fed9 	bl	8000c50 <usb_lld_start_in>
 8000e9e:	f385 8811 	msr	BASEPRI, r5
}
 8000ea2:	bd70      	pop	{r4, r5, r6, pc}
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000ea4:	f248 0680 	movw	r6, #32896	; 0x8080
 8000ea8:	490d      	ldr	r1, [pc, #52]	; (8000ee0 <_usb_ep0out+0xa0>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8000eaa:	6843      	ldr	r3, [r0, #4]
 8000eac:	680a      	ldr	r2, [r1, #0]
 8000eae:	681d      	ldr	r5, [r3, #0]
 8000eb0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eb8:	f082 0210 	eor.w	r2, r2, #16
 8000ebc:	4332      	orrs	r2, r6
 8000ebe:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000ec0:	680b      	ldr	r3, [r1, #0]
 8000ec2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000eca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000ece:	4333      	orrs	r3, r6
 8000ed0:	600b      	str	r3, [r1, #0]
 8000ed2:	b10d      	cbz	r5, 8000ed8 <_usb_ep0out+0x98>
 8000ed4:	2106      	movs	r1, #6
 8000ed6:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8000ed8:	2306      	movs	r3, #6
 8000eda:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8000ede:	bd70      	pop	{r4, r5, r6, pc}
 8000ee0:	40005c00 	.word	0x40005c00
	...

08000ef0 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8000ef0:	b538      	push	{r3, r4, r5, lr}
  switch (usbp->ep0state) {
 8000ef2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8000ef6:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 8000ef8:	2b15      	cmp	r3, #21
 8000efa:	d82a      	bhi.n	8000f52 <_usb_ep0in+0x62>
 8000efc:	e8df f003 	tbb	[pc, r3]
 8000f00:	2929290b 	.word	0x2929290b
 8000f04:	290b2929 	.word	0x290b2929
 8000f08:	513a2a29 	.word	0x513a2a29
 8000f0c:	29292929 	.word	0x29292929
 8000f10:	29292929 	.word	0x29292929
 8000f14:	0b0b      	.short	0x0b0b
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000f16:	f248 0080 	movw	r0, #32896	; 0x8080
 8000f1a:	4930      	ldr	r1, [pc, #192]	; (8000fdc <_usb_ep0in+0xec>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8000f1c:	6863      	ldr	r3, [r4, #4]
 8000f1e:	680a      	ldr	r2, [r1, #0]
 8000f20:	681d      	ldr	r5, [r3, #0]
 8000f22:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f2a:	f082 0210 	eor.w	r2, r2, #16
 8000f2e:	4302      	orrs	r2, r0
 8000f30:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000f32:	680b      	ldr	r3, [r1, #0]
 8000f34:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000f40:	4303      	orrs	r3, r0
 8000f42:	600b      	str	r3, [r1, #0]
 8000f44:	b115      	cbz	r5, 8000f4c <_usb_ep0in+0x5c>
 8000f46:	2106      	movs	r1, #6
 8000f48:	4620      	mov	r0, r4
 8000f4a:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8000f52:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
 8000f54:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
 8000f58:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
    if ((usbp->ep0n < max) &&
 8000f5c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    max = (size_t)get_hword(&usbp->setup[6]);
 8000f5e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    if ((usbp->ep0n < max) &&
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d206      	bcs.n	8000f74 <_usb_ep0in+0x84>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8000f66:	68c3      	ldr	r3, [r0, #12]
 8000f68:	8a1b      	ldrh	r3, [r3, #16]
 8000f6a:	fbb2 f5f3 	udiv	r5, r2, r3
 8000f6e:	fb03 2515 	mls	r5, r3, r5, r2
    if ((usbp->ep0n < max) &&
 8000f72:	b1ed      	cbz	r5, 8000fb0 <_usb_ep0in+0xc0>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8000f74:	2214      	movs	r2, #20
 8000f76:	2320      	movs	r3, #32
 8000f78:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8000f7c:	f383 8811 	msr	BASEPRI, r3
  osp->rxbuf  = buf;
 8000f80:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
 8000f82:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000f84:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8000f86:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000f88:	f042 0201 	orr.w	r2, r2, #1
 8000f8c:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8000f8e:	4620      	mov	r0, r4
  osp->rxbuf  = buf;
 8000f90:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
 8000f92:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
 8000f96:	4629      	mov	r1, r5
 8000f98:	f7ff fe9a 	bl	8000cd0 <usb_lld_start_out>
 8000f9c:	f385 8811 	msr	BASEPRI, r5
}
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 8000fa2:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8000fa4:	b103      	cbz	r3, 8000fa8 <_usb_ep0in+0xb8>
      usbp->ep0endcb(usbp);
 8000fa6:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8000fae:	bd38      	pop	{r3, r4, r5, pc}
 8000fb0:	2320      	movs	r3, #32
 8000fb2:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8000fb6:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000fb8:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8000fba:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000fbc:	f042 0201 	orr.w	r2, r2, #1
 8000fc0:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8000fc2:	4629      	mov	r1, r5
  isp->txbuf  = buf;
 8000fc4:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8000fc6:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8000fca:	f7ff fe41 	bl	8000c50 <usb_lld_start_in>
 8000fce:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8000fd8:	bd38      	pop	{r3, r4, r5, pc}
 8000fda:	bf00      	nop
 8000fdc:	40005c00 	.word	0x40005c00

08000fe0 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8000fe0:	b570      	push	{r4, r5, r6, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8000fe2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8000fe6:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8000fe8:	b113      	cbz	r3, 8000ff0 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  udp = USB_GET_DESCRIPTOR(ep);
 8000ff0:	4bc3      	ldr	r3, [pc, #780]	; (8001300 <_usb_ep0setup+0x320>)
  usbReadSetup(usbp, ep, usbp->setup);
 8000ff2:	f104 0274 	add.w	r2, r4, #116	; 0x74
 8000ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ff8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ffc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001000:	eb03 1301 	add.w	r3, r3, r1, lsl #4
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800100a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	f103 0010 	add.w	r0, r3, #16
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8001014:	6819      	ldr	r1, [r3, #0]
 8001016:	3304      	adds	r3, #4
  for (n = 0; n < 4; n++) {
 8001018:	4283      	cmp	r3, r0
    *(uint16_t *)buf = (uint16_t)*pmap++;
 800101a:	f822 1b02 	strh.w	r1, [r2], #2
  for (n = 0; n < 4; n++) {
 800101e:	d1f9      	bne.n	8001014 <_usb_ep0setup+0x34>
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001020:	6863      	ldr	r3, [r4, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	b363      	cbz	r3, 8001080 <_usb_ep0setup+0xa0>
      !(usbp->config->requests_hook_cb(usbp))) {
 8001026:	4620      	mov	r0, r4
 8001028:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 800102a:	b348      	cbz	r0, 8001080 <_usb_ep0setup+0xa0>
 800102c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800102e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
  hw |= (uint16_t)*p << 8U;
 8001032:	f894 007b 	ldrb.w	r0, [r4, #123]	; 0x7b
 8001036:	f894 107a 	ldrb.w	r1, [r4, #122]	; 0x7a
  max = (size_t)get_hword(&usbp->setup[6]);
 800103a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  if (usbp->ep0n > max) {
 800103e:	4291      	cmp	r1, r2
 8001040:	bf2c      	ite	cs
 8001042:	4611      	movcs	r1, r2
    usbp->ep0n = max;
 8001044:	66e1      	strcc	r1, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001046:	061a      	lsls	r2, r3, #24
 8001048:	f100 80a3 	bmi.w	8001192 <_usb_ep0setup+0x1b2>
    if (usbp->ep0n != 0U) {
 800104c:	2900      	cmp	r1, #0
 800104e:	d073      	beq.n	8001138 <_usb_ep0setup+0x158>
      usbp->ep0state = USB_EP0_OUT_RX;
 8001050:	2215      	movs	r2, #21
 8001052:	2320      	movs	r3, #32
 8001054:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8001058:	f383 8811 	msr	BASEPRI, r3
  osp->rxcnt  = 0;
 800105c:	2500      	movs	r5, #0
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 800105e:	e9d4 611a 	ldrd	r6, r1, [r4, #104]	; 0x68
  osp = usbp->epc[ep]->out_state;
 8001062:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001064:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001066:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001068:	f042 0201 	orr.w	r2, r2, #1
 800106c:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800106e:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8001070:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_out(usbp, ep);
 8001074:	4629      	mov	r1, r5
 8001076:	f7ff fe2b 	bl	8000cd0 <usb_lld_start_out>
 800107a:	f385 8811 	msr	BASEPRI, r5
}
 800107e:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8001080:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8001084:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8001088:	4618      	mov	r0, r3
 800108a:	d01e      	beq.n	80010ca <_usb_ep0setup+0xea>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800108c:	f248 0080 	movw	r0, #32896	; 0x8080
 8001090:	499b      	ldr	r1, [pc, #620]	; (8001300 <_usb_ep0setup+0x320>)
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001092:	6863      	ldr	r3, [r4, #4]
 8001094:	680a      	ldr	r2, [r1, #0]
 8001096:	681d      	ldr	r5, [r3, #0]
 8001098:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800109c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010a0:	f082 0210 	eor.w	r2, r2, #16
 80010a4:	4302      	orrs	r2, r0
 80010a6:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80010a8:	680b      	ldr	r3, [r1, #0]
 80010aa:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80010ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80010b6:	4303      	orrs	r3, r0
 80010b8:	600b      	str	r3, [r1, #0]
 80010ba:	b115      	cbz	r5, 80010c2 <_usb_ep0setup+0xe2>
 80010bc:	2106      	movs	r1, #6
 80010be:	4620      	mov	r0, r4
 80010c0:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 80010c2:	2306      	movs	r3, #6
 80010c4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 80010c8:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80010ca:	f240 3102 	movw	r1, #770	; 0x302
           ((uint32_t)usbp->setup[1] << 8U))) {
 80010ce:	f894 6075 	ldrb.w	r6, [r4, #117]	; 0x75
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80010d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 80010d6:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80010da:	428a      	cmp	r2, r1
 80010dc:	f000 812e 	beq.w	800133c <_usb_ep0setup+0x35c>
 80010e0:	d841      	bhi.n	8001166 <_usb_ep0setup+0x186>
 80010e2:	2a02      	cmp	r2, #2
 80010e4:	f000 8112 	beq.w	800130c <_usb_ep0setup+0x32c>
 80010e8:	f240 80f7 	bls.w	80012da <_usb_ep0setup+0x2fa>
 80010ec:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80010f0:	f000 8144 	beq.w	800137c <_usb_ep0setup+0x39c>
 80010f4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80010f8:	f000 8096 	beq.w	8001228 <_usb_ep0setup+0x248>
 80010fc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001100:	d1c4      	bne.n	800108c <_usb_ep0setup+0xac>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8001102:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001106:	2b01      	cmp	r3, #1
 8001108:	d1c0      	bne.n	800108c <_usb_ep0setup+0xac>
      usbp->status &= ~2U;
 800110a:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800110e:	66a5      	str	r5, [r4, #104]	; 0x68
      usbp->status &= ~2U;
 8001110:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001114:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      usbp->status &= ~2U;
 8001118:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 800111c:	e00a      	b.n	8001134 <_usb_ep0setup+0x154>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800111e:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 8001122:	f080 8090 	bcs.w	8001246 <_usb_ep0setup+0x266>
 8001126:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800112a:	d1af      	bne.n	800108c <_usb_ep0setup+0xac>
    usbSetupTransfer(usbp, NULL, 0, set_address);
 800112c:	4b75      	ldr	r3, [pc, #468]	; (8001304 <_usb_ep0setup+0x324>)
 800112e:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8001132:	6723      	str	r3, [r4, #112]	; 0x70
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001134:	0603      	lsls	r3, r0, #24
 8001136:	d445      	bmi.n	80011c4 <_usb_ep0setup+0x1e4>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001138:	220b      	movs	r2, #11
 800113a:	2320      	movs	r3, #32
 800113c:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8001140:	f383 8811 	msr	BASEPRI, r3
  isp->txbuf  = buf;
 8001144:	2500      	movs	r5, #0
  isp = usbp->epc[ep]->in_state;
 8001146:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001148:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 800114a:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800114c:	f042 0201 	orr.w	r2, r2, #1
 8001150:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8001152:	4620      	mov	r0, r4
  isp->txbuf  = buf;
 8001154:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8001156:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 800115a:	4629      	mov	r1, r5
 800115c:	f7ff fd78 	bl	8000c50 <usb_lld_start_in>
 8001160:	f385 8811 	msr	BASEPRI, r5
}
 8001164:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001166:	f240 6101 	movw	r1, #1537	; 0x601
 800116a:	428a      	cmp	r2, r1
 800116c:	d9d7      	bls.n	800111e <_usb_ep0setup+0x13e>
 800116e:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 8001172:	d03e      	beq.n	80011f2 <_usb_ep0setup+0x212>
 8001174:	f640 4102 	movw	r1, #3074	; 0xc02
 8001178:	428a      	cmp	r2, r1
 800117a:	f000 80ba 	beq.w	80012f2 <_usb_ep0setup+0x312>
 800117e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001182:	d183      	bne.n	800108c <_usb_ep0setup+0xac>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8001184:	2201      	movs	r2, #1
 8001186:	f104 017f 	add.w	r1, r4, #127	; 0x7f
 800118a:	e9c4 251b 	strd	r2, r5, [r4, #108]	; 0x6c
 800118e:	66a1      	str	r1, [r4, #104]	; 0x68
 8001190:	e74f      	b.n	8001032 <_usb_ep0setup+0x52>
    if (usbp->ep0n != 0U) {
 8001192:	b1b9      	cbz	r1, 80011c4 <_usb_ep0setup+0x1e4>
      usbp->ep0state = USB_EP0_IN_TX;
 8001194:	2209      	movs	r2, #9
 8001196:	2320      	movs	r3, #32
 8001198:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800119c:	f383 8811 	msr	BASEPRI, r3
  isp->txcnt  = 0;
 80011a0:	2500      	movs	r5, #0
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 80011a2:	e9d4 611a 	ldrd	r6, r1, [r4, #104]	; 0x68
  isp = usbp->epc[ep]->in_state;
 80011a6:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80011a8:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 80011aa:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80011ac:	f042 0201 	orr.w	r2, r2, #1
 80011b0:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 80011b2:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 80011b4:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_in(usbp, ep);
 80011b8:	4629      	mov	r1, r5
 80011ba:	f7ff fd49 	bl	8000c50 <usb_lld_start_in>
 80011be:	f385 8811 	msr	BASEPRI, r5
}
 80011c2:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 80011c4:	2214      	movs	r2, #20
 80011c6:	2320      	movs	r3, #32
 80011c8:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 80011cc:	f383 8811 	msr	BASEPRI, r3
  osp->rxbuf  = buf;
 80011d0:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
 80011d2:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80011d4:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 80011d6:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80011d8:	f042 0201 	orr.w	r2, r2, #1
 80011dc:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 80011de:	4620      	mov	r0, r4
  osp->rxbuf  = buf;
 80011e0:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
 80011e2:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff fd72 	bl	8000cd0 <usb_lld_start_out>
 80011ec:	f385 8811 	msr	BASEPRI, r5
}
 80011f0:	bd70      	pop	{r4, r5, r6, pc}
    if (usbp->configuration != usbp->setup[2]) {
 80011f2:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80011f6:	f894 207f 	ldrb.w	r2, [r4, #127]	; 0x7f
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d00f      	beq.n	800121e <_usb_ep0setup+0x23e>
      if (usbp->state == USB_ACTIVE) {
 80011fe:	7822      	ldrb	r2, [r4, #0]
 8001200:	2a04      	cmp	r2, #4
 8001202:	d039      	beq.n	8001278 <_usb_ep0setup+0x298>
      if (usbp->setup[2] != 0U) {
 8001204:	b14b      	cbz	r3, 800121a <_usb_ep0setup+0x23a>
        usbp->state = USB_ACTIVE;
 8001206:	2104      	movs	r1, #4
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001208:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 800120a:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_ACTIVE;
 800120e:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001210:	6813      	ldr	r3, [r2, #0]
 8001212:	b113      	cbz	r3, 800121a <_usb_ep0setup+0x23a>
 8001214:	2102      	movs	r1, #2
 8001216:	4620      	mov	r0, r4
 8001218:	4798      	blx	r3
 800121a:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800121e:	2300      	movs	r3, #0
 8001220:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8001224:	6723      	str	r3, [r4, #112]	; 0x70
 8001226:	e785      	b.n	8001134 <_usb_ep0setup+0x154>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8001228:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 800122c:	2b01      	cmp	r3, #1
 800122e:	f47f af2d 	bne.w	800108c <_usb_ep0setup+0xac>
      usbp->status |= 2U;
 8001232:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001236:	66a5      	str	r5, [r4, #104]	; 0x68
      usbp->status |= 2U;
 8001238:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800123c:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      usbp->status |= 2U;
 8001240:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 8001244:	e776      	b.n	8001134 <_usb_ep0setup+0x154>
  hw |= (uint16_t)*p << 8U;
 8001246:	f894 1079 	ldrb.w	r1, [r4, #121]	; 0x79
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800124a:	6862      	ldr	r2, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 800124c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8001250:	6856      	ldr	r6, [r2, #4]
 8001252:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001256:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 800125a:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 800125e:	4620      	mov	r0, r4
 8001260:	47b0      	blx	r6
    if (dp == NULL) {
 8001262:	2800      	cmp	r0, #0
 8001264:	f43f af12 	beq.w	800108c <_usb_ep0setup+0xac>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8001268:	e9d0 2300 	ldrd	r2, r3, [r0]
 800126c:	6725      	str	r5, [r4, #112]	; 0x70
 800126e:	e9c4 321a 	strd	r3, r2, [r4, #104]	; 0x68
 8001272:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8001276:	e6dc      	b.n	8001032 <_usb_ep0setup+0x52>
 8001278:	2320      	movs	r3, #32
 800127a:	f383 8811 	msr	BASEPRI, r3
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 800127e:	2201      	movs	r2, #1
  usbp->pmnext = 64;
 8001280:	2640      	movs	r6, #64	; 0x40
    EPR_TOGGLE(i, 0);
 8001282:	f248 0080 	movw	r0, #32896	; 0x8080
  usbp->transmitting &= 1U;
 8001286:	8921      	ldrh	r1, [r4, #8]
  usbp->receiving    &= 1U;
 8001288:	8963      	ldrh	r3, [r4, #10]
    usbp->epc[i] = NULL;
 800128a:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800128e:	e9c4 5506 	strd	r5, r5, [r4, #24]
 8001292:	e9c4 5508 	strd	r5, r5, [r4, #32]
  usbp->transmitting &= 1U;
 8001296:	4011      	ands	r1, r2
  usbp->receiving    &= 1U;
 8001298:	4013      	ands	r3, r2
    usbp->epc[i] = NULL;
 800129a:	62a5      	str	r5, [r4, #40]	; 0x28
  usbp->transmitting &= 1U;
 800129c:	8121      	strh	r1, [r4, #8]
  usbp->receiving    &= 1U;
 800129e:	8163      	strh	r3, [r4, #10]
  usbp->pmnext = 64;
 80012a0:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
 80012a4:	0093      	lsls	r3, r2, #2
 80012a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012aa:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    EPR_TOGGLE(i, 0);
 80012ae:	6819      	ldr	r1, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80012b0:	3201      	adds	r2, #1
    EPR_TOGGLE(i, 0);
 80012b2:	4301      	orrs	r1, r0
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80012b4:	2a08      	cmp	r2, #8
    EPR_TOGGLE(i, 0);
 80012b6:	6019      	str	r1, [r3, #0]
    EPR_SET(i, 0);
 80012b8:	6018      	str	r0, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80012ba:	d1f3      	bne.n	80012a4 <_usb_ep0setup+0x2c4>
 80012bc:	2300      	movs	r3, #0
 80012be:	f383 8811 	msr	BASEPRI, r3
        usbp->state = USB_SELECTED;
 80012c2:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 80012c4:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = 0U;
 80012c6:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_SELECTED;
 80012ca:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 80012cc:	6813      	ldr	r3, [r2, #0]
 80012ce:	b10b      	cbz	r3, 80012d4 <_usb_ep0setup+0x2f4>
 80012d0:	4620      	mov	r0, r4
 80012d2:	4798      	blx	r3
 80012d4:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80012d8:	e794      	b.n	8001204 <_usb_ep0setup+0x224>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80012da:	b93a      	cbnz	r2, 80012ec <_usb_ep0setup+0x30c>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 80012dc:	2102      	movs	r1, #2
 80012de:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80012e2:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
 80012e6:	66a0      	str	r0, [r4, #104]	; 0x68
 80012e8:	460a      	mov	r2, r1
 80012ea:	e6a2      	b.n	8001032 <_usb_ep0setup+0x52>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80012ec:	2a01      	cmp	r2, #1
 80012ee:	f47f aecd 	bne.w	800108c <_usb_ep0setup+0xac>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 80012f2:	2202      	movs	r2, #2
 80012f4:	2000      	movs	r0, #0
 80012f6:	4904      	ldr	r1, [pc, #16]	; (8001308 <_usb_ep0setup+0x328>)
 80012f8:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
 80012fc:	66a1      	str	r1, [r4, #104]	; 0x68
 80012fe:	e698      	b.n	8001032 <_usb_ep0setup+0x52>
 8001300:	40005c00 	.word	0x40005c00
 8001304:	08001461 	.word	0x08001461
 8001308:	0800c6f4 	.word	0x0800c6f4
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800130c:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8001310:	f001 000f 	and.w	r0, r1, #15
 8001314:	f011 0f80 	tst.w	r1, #128	; 0x80
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8001318:	4940      	ldr	r1, [pc, #256]	; (800141c <_usb_ep0setup+0x43c>)
 800131a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800131e:	d152      	bne.n	80013c6 <_usb_ep0setup+0x3e6>
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8001320:	f411 5140 	ands.w	r1, r1, #12288	; 0x3000
 8001324:	f43f aeb2 	beq.w	800108c <_usb_ep0setup+0xac>
 8001328:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800132c:	d151      	bne.n	80013d2 <_usb_ep0setup+0x3f2>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800132e:	2502      	movs	r5, #2
 8001330:	2000      	movs	r0, #0
 8001332:	493b      	ldr	r1, [pc, #236]	; (8001420 <_usb_ep0setup+0x440>)
 8001334:	e9c4 501b 	strd	r5, r0, [r4, #108]	; 0x6c
 8001338:	66a1      	str	r1, [r4, #104]	; 0x68
 800133a:	e67a      	b.n	8001032 <_usb_ep0setup+0x52>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800133c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001340:	2b00      	cmp	r3, #0
 8001342:	f47f aea3 	bne.w	800108c <_usb_ep0setup+0xac>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001346:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 800134a:	f012 030f 	ands.w	r3, r2, #15
 800134e:	f43f af66 	beq.w	800121e <_usb_ep0setup+0x23e>
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001358:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800135c:	f012 0f80 	tst.w	r2, #128	; 0x80
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	d14f      	bne.n	8001404 <_usb_ep0setup+0x424>
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001368:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800136c:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8001370:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001374:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e750      	b.n	800121e <_usb_ep0setup+0x23e>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800137c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001380:	2b00      	cmp	r3, #0
 8001382:	f47f ae83 	bne.w	800108c <_usb_ep0setup+0xac>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001386:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 800138a:	f012 030f 	ands.w	r3, r2, #15
 800138e:	f43f af46 	beq.w	800121e <_usb_ep0setup+0x23e>
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001398:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800139c:	f012 0f80 	tst.w	r2, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	d11d      	bne.n	80013e0 <_usb_ep0setup+0x400>
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 80013a4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80013a8:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80013ac:	f43f af37 	beq.w	800121e <_usb_ep0setup+0x23e>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80013b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013ba:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 80013be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	e72b      	b.n	800121e <_usb_ep0setup+0x23e>
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 80013c6:	f011 0130 	ands.w	r1, r1, #48	; 0x30
 80013ca:	f43f ae5f 	beq.w	800108c <_usb_ep0setup+0xac>
 80013ce:	2910      	cmp	r1, #16
 80013d0:	d0ad      	beq.n	800132e <_usb_ep0setup+0x34e>
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 80013d2:	2502      	movs	r5, #2
 80013d4:	2000      	movs	r0, #0
 80013d6:	4913      	ldr	r1, [pc, #76]	; (8001424 <_usb_ep0setup+0x444>)
 80013d8:	e9c4 501b 	strd	r5, r0, [r4, #108]	; 0x6c
 80013dc:	66a1      	str	r1, [r4, #104]	; 0x68
 80013de:	e628      	b.n	8001032 <_usb_ep0setup+0x52>
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 80013e0:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80013e4:	2a30      	cmp	r2, #48	; 0x30
 80013e6:	f43f af1a 	beq.w	800121e <_usb_ep0setup+0x23e>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80013f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013f4:	f082 0220 	eor.w	r2, r2, #32
 80013f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e70c      	b.n	800121e <_usb_ep0setup+0x23e>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001404:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800140c:	f082 0210 	eor.w	r2, r2, #16
 8001410:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001414:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e700      	b.n	800121e <_usb_ep0setup+0x23e>
 800141c:	40005c00 	.word	0x40005c00
 8001420:	0800a36c 	.word	0x0800a36c
 8001424:	08009fe0 	.word	0x08009fe0
	...

08001430 <usbStartTransmitI>:
                       const uint8_t *buf, size_t n) {
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001432:	2401      	movs	r4, #1
  isp->txcnt  = 0;
 8001434:	2700      	movs	r7, #0
  isp = usbp->epc[ep]->in_state;
 8001436:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
 800143a:	f8dc e00c 	ldr.w	lr, [ip, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800143e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001442:	f8de 5014 	ldr.w	r5, [lr, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001446:	408c      	lsls	r4, r1
 8001448:	ea44 040c 	orr.w	r4, r4, ip
 800144c:	8104      	strh	r4, [r0, #8]
  isp->txbuf  = buf;
 800144e:	60aa      	str	r2, [r5, #8]
  isp->txcnt  = 0;
 8001450:	e9c5 3700 	strd	r3, r7, [r5]
}
 8001454:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  usb_lld_start_in(usbp, ep);
 8001458:	f7ff bbfa 	b.w	8000c50 <usb_lld_start_in>
 800145c:	0000      	movs	r0, r0
	...

08001460 <set_address>:
  usbp->address = usbp->setup[2];
 8001460:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001464:	6842      	ldr	r2, [r0, #4]
  usbp->address = usbp->setup[2];
 8001466:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 800146a:	4906      	ldr	r1, [pc, #24]	; (8001484 <set_address+0x24>)
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
static void set_address(USBDriver *usbp) {
 8001472:	b510      	push	{r4, lr}
 8001474:	4604      	mov	r4, r0
 8001476:	64cb      	str	r3, [r1, #76]	; 0x4c
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001478:	b10a      	cbz	r2, 800147e <set_address+0x1e>
 800147a:	2101      	movs	r1, #1
 800147c:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 800147e:	2303      	movs	r3, #3
 8001480:	7023      	strb	r3, [r4, #0]
}
 8001482:	bd10      	pop	{r4, pc}
 8001484:	40005c00 	.word	0x40005c00
	...

08001490 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
	...

080014a0 <sduRequestsHook>:
  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 80014a0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
bool sduRequestsHook(USBDriver *usbp) {
 80014a4:	4602      	mov	r2, r0
  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 80014a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80014aa:	2b20      	cmp	r3, #32
 80014ac:	d001      	beq.n	80014b2 <sduRequestsHook+0x12>
      return false;
 80014ae:	2000      	movs	r0, #0
}
 80014b0:	4770      	bx	lr
    switch (usbp->setup[1]) {
 80014b2:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 80014b6:	2b20      	cmp	r3, #32
 80014b8:	d3f9      	bcc.n	80014ae <sduRequestsHook+0xe>
 80014ba:	2b21      	cmp	r3, #33	; 0x21
 80014bc:	d807      	bhi.n	80014ce <sduRequestsHook+0x2e>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80014be:	2007      	movs	r0, #7
 80014c0:	2100      	movs	r1, #0
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <sduRequestsHook+0x40>)
 80014c4:	e9c2 011b 	strd	r0, r1, [r2, #108]	; 0x6c
 80014c8:	6693      	str	r3, [r2, #104]	; 0x68
      return true;
 80014ca:	2001      	movs	r0, #1
 80014cc:	4770      	bx	lr
    switch (usbp->setup[1]) {
 80014ce:	2b22      	cmp	r3, #34	; 0x22
 80014d0:	d1ed      	bne.n	80014ae <sduRequestsHook+0xe>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80014d2:	2300      	movs	r3, #0
      return true;
 80014d4:	2001      	movs	r0, #1
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80014d6:	e9c2 331a 	strd	r3, r3, [r2, #104]	; 0x68
 80014da:	6713      	str	r3, [r2, #112]	; 0x70
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000838 	.word	0x20000838
	...

080014f0 <_ctl.lto_priv.116>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 80014f0:	2000      	movs	r0, #0
 80014f2:	4770      	bx	lr
	...

08001500 <_ctl.lto_priv.117>:
 8001500:	2000      	movs	r0, #0
 8001502:	4770      	bx	lr
	...

08001510 <sdu_start_receive>:
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 8001510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001512:	f8d0 148c 	ldr.w	r1, [r0, #1164]	; 0x48c
 8001516:	680a      	ldr	r2, [r1, #0]
 8001518:	7813      	ldrb	r3, [r2, #0]
 800151a:	2b04      	cmp	r3, #4
 800151c:	d001      	beq.n	8001522 <sdu_start_receive+0x12>
    return true;
 800151e:	2001      	movs	r0, #1
}
 8001520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001522:	7a03      	ldrb	r3, [r0, #8]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d1fa      	bne.n	800151e <sdu_start_receive+0xe>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001528:	2301      	movs	r3, #1
 800152a:	790c      	ldrb	r4, [r1, #4]
 800152c:	8955      	ldrh	r5, [r2, #10]
 800152e:	fa03 f404 	lsl.w	r4, r3, r4
 8001532:	4225      	tst	r5, r4
 8001534:	d1f3      	bne.n	800151e <sdu_start_receive+0xe>
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8001536:	e9d0 4607 	ldrd	r4, r6, [r0, #28]
 800153a:	42b4      	cmp	r4, r6
 800153c:	d015      	beq.n	800156a <sdu_start_receive+0x5a>
  if (buf == NULL) {
 800153e:	1d23      	adds	r3, r4, #4
 8001540:	d0ed      	beq.n	800151e <sdu_start_receive+0xe>
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001542:	2001      	movs	r0, #1
  osp->rxcnt  = 0;
 8001544:	2400      	movs	r4, #0
  osp->rxsize = n;
 8001546:	f44f 7780 	mov.w	r7, #256	; 0x100
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800154a:	7949      	ldrb	r1, [r1, #5]
  osp = usbp->epc[ep]->out_state;
 800154c:	eb02 0681 	add.w	r6, r2, r1, lsl #2
 8001550:	68f6      	ldr	r6, [r6, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001552:	4088      	lsls	r0, r1
  osp = usbp->epc[ep]->out_state;
 8001554:	69b6      	ldr	r6, [r6, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001556:	4305      	orrs	r5, r0
 8001558:	8155      	strh	r5, [r2, #10]
  usb_lld_start_out(usbp, ep);
 800155a:	4610      	mov	r0, r2
  osp->rxbuf  = buf;
 800155c:	60b3      	str	r3, [r6, #8]
  osp->rxcnt  = 0;
 800155e:	e9c6 7400 	strd	r7, r4, [r6]
  usb_lld_start_out(usbp, ep);
 8001562:	f7ff fbb5 	bl	8000cd0 <usb_lld_start_out>
  return false;
 8001566:	4620      	mov	r0, r4
}
 8001568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800156a:	6980      	ldr	r0, [r0, #24]
 800156c:	2800      	cmp	r0, #0
 800156e:	d1d6      	bne.n	800151e <sdu_start_receive+0xe>
 8001570:	e7e5      	b.n	800153e <sdu_start_receive+0x2e>
 8001572:	bf00      	nop
	...

08001580 <ibnotify>:
  (void) sdu_start_receive(sdup);
 8001580:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001582:	f7ff bfc5 	b.w	8001510 <sdu_start_receive>
 8001586:	bf00      	nop
	...

08001590 <obqGetFullBufferI>:
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8001590:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d004      	beq.n	80015a2 <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 8001598:	4618      	mov	r0, r3
 800159a:	f850 3b04 	ldr.w	r3, [r0], #4
 800159e:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 80015a0:	4770      	bx	lr
  if (obqIsEmptyI(obqp)) {
 80015a2:	68c2      	ldr	r2, [r0, #12]
 80015a4:	2a00      	cmp	r2, #0
 80015a6:	d0f7      	beq.n	8001598 <obqGetFullBufferI+0x8>
    return NULL;
 80015a8:	2000      	movs	r0, #0
 80015aa:	4770      	bx	lr
 80015ac:	0000      	movs	r0, r0
	...

080015b0 <obnotify>:
static void obnotify(io_buffers_queue_t *bqp) {
 80015b0:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 80015b2:	6b44      	ldr	r4, [r0, #52]	; 0x34
static void obnotify(io_buffers_queue_t *bqp) {
 80015b4:	b082      	sub	sp, #8
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80015b6:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 80015ba:	6813      	ldr	r3, [r2, #0]
 80015bc:	7819      	ldrb	r1, [r3, #0]
 80015be:	2904      	cmp	r1, #4
 80015c0:	d001      	beq.n	80015c6 <obnotify+0x16>
}
 80015c2:	b002      	add	sp, #8
 80015c4:	bd10      	pop	{r4, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80015c6:	7a21      	ldrb	r1, [r4, #8]
 80015c8:	2902      	cmp	r1, #2
 80015ca:	d1fa      	bne.n	80015c2 <obnotify+0x12>
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80015cc:	2101      	movs	r1, #1
 80015ce:	7910      	ldrb	r0, [r2, #4]
 80015d0:	891a      	ldrh	r2, [r3, #8]
 80015d2:	fa01 f300 	lsl.w	r3, r1, r0
 80015d6:	4213      	tst	r3, r2
 80015d8:	d1f3      	bne.n	80015c2 <obnotify+0x12>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80015da:	a901      	add	r1, sp, #4
 80015dc:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80015e0:	f7ff ffd6 	bl	8001590 <obqGetFullBufferI>
    if (buf != NULL) {
 80015e4:	2800      	cmp	r0, #0
 80015e6:	d0ec      	beq.n	80015c2 <obnotify+0x12>
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 80015e8:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80015ec:	4602      	mov	r2, r0
 80015ee:	7919      	ldrb	r1, [r3, #4]
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	9b01      	ldr	r3, [sp, #4]
 80015f4:	f7ff ff1c 	bl	8001430 <usbStartTransmitI>
 80015f8:	e7e3      	b.n	80015c2 <obnotify+0x12>
 80015fa:	bf00      	nop
 80015fc:	0000      	movs	r0, r0
	...

08001600 <sof_handler>:
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8001600:	b510      	push	{r4, lr}
 8001602:	2320      	movs	r3, #32
 8001604:	b082      	sub	sp, #8
 8001606:	f383 8811 	msr	BASEPRI, r3
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800160a:	4c1f      	ldr	r4, [pc, #124]	; (8001688 <sof_handler+0x88>)
 800160c:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001610:	6813      	ldr	r3, [r2, #0]
 8001612:	7819      	ldrb	r1, [r3, #0]
 8001614:	2904      	cmp	r1, #4
 8001616:	d004      	beq.n	8001622 <sof_handler+0x22>
 8001618:	2300      	movs	r3, #0
 800161a:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&SDU1);
  osalSysUnlockFromISR();
}
 800161e:	b002      	add	sp, #8
 8001620:	bd10      	pop	{r4, pc}
 8001622:	7a21      	ldrb	r1, [r4, #8]
 8001624:	2902      	cmp	r1, #2
 8001626:	d1f7      	bne.n	8001618 <sof_handler+0x18>
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001628:	2101      	movs	r1, #1
 800162a:	7910      	ldrb	r0, [r2, #4]
 800162c:	891a      	ldrh	r2, [r3, #8]
 800162e:	fa01 f300 	lsl.w	r3, r1, r0
 8001632:	4213      	tst	r3, r2
 8001634:	d1f0      	bne.n	8001618 <sof_handler+0x18>

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8001636:	e9d4 3215 	ldrd	r3, r2, [r4, #84]	; 0x54
 800163a:	4293      	cmp	r3, r2
 800163c:	d1ec      	bne.n	8001618 <sof_handler+0x18>
 800163e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001640:	2a00      	cmp	r2, #0
 8001642:	d0e9      	beq.n	8001618 <sof_handler+0x18>
 8001644:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001646:	2a00      	cmp	r2, #0
 8001648:	d0e6      	beq.n	8001618 <sof_handler+0x18>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 800164a:	3a04      	subs	r2, #4

    if (size > 0U) {
 800164c:	1ad2      	subs	r2, r2, r3
 800164e:	d0e3      	beq.n	8001618 <sof_handler+0x18>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 8001650:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
 8001652:	e9d4 1017 	ldrd	r1, r0, [r4, #92]	; 0x5c
      obqp->bwrptr += obqp->bsize;
 8001656:	4403      	add	r3, r0
      if (obqp->bwrptr >= obqp->btop) {
 8001658:	428b      	cmp	r3, r1
      obqp->bwrptr += obqp->bsize;
 800165a:	6563      	str	r3, [r4, #84]	; 0x54
        obqp->bwrptr = obqp->buffers;
 800165c:	bf28      	it	cs
 800165e:	6ea3      	ldrcs	r3, [r4, #104]	; 0x68
      obqp->bcounter--;
 8001660:	6d22      	ldr	r2, [r4, #80]	; 0x50
        obqp->bwrptr = obqp->buffers;
 8001662:	bf28      	it	cs
 8001664:	6563      	strcs	r3, [r4, #84]	; 0x54
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8001666:	2300      	movs	r3, #0
      obqp->bcounter--;
 8001668:	3a01      	subs	r2, #1
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800166a:	a901      	add	r1, sp, #4
 800166c:	4807      	ldr	r0, [pc, #28]	; (800168c <sof_handler+0x8c>)
 800166e:	6522      	str	r2, [r4, #80]	; 0x50
      obqp->ptr = NULL;
 8001670:	66e3      	str	r3, [r4, #108]	; 0x6c
 8001672:	f7ff ff8d 	bl	8001590 <obqGetFullBufferI>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001676:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800167a:	4602      	mov	r2, r0
 800167c:	7919      	ldrb	r1, [r3, #4]
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	9b01      	ldr	r3, [sp, #4]
 8001682:	f7ff fed5 	bl	8001430 <usbStartTransmitI>
 8001686:	e7c7      	b.n	8001618 <sof_handler+0x18>
 8001688:	20000954 	.word	0x20000954
 800168c:	20000998 	.word	0x20000998

08001690 <_port_irq_epilogue>:
 8001690:	2320      	movs	r3, #32
 8001692:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <_port_irq_epilogue+0x44>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800169e:	d102      	bne.n	80016a6 <_port_irq_epilogue+0x16>
 80016a0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 80016a4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80016a6:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
 80016aa:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
 80016ae:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
 80016b2:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80016b6:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80016ba:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <_port_irq_epilogue+0x48>)
 80016bc:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 80016be:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 80016c0:	6889      	ldr	r1, [r1, #8]
 80016c2:	6892      	ldr	r2, [r2, #8]
 80016c4:	4291      	cmp	r1, r2
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80016c6:	bf8c      	ite	hi
 80016c8:	4a04      	ldrhi	r2, [pc, #16]	; (80016dc <_port_irq_epilogue+0x4c>)
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80016ca:	4a05      	ldrls	r2, [pc, #20]	; (80016e0 <_port_irq_epilogue+0x50>)
 80016cc:	f843 2c08 	str.w	r2, [r3, #-8]
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00
 80016d8:	200010f0 	.word	0x200010f0
 80016dc:	08000261 	.word	0x08000261
 80016e0:	08000264 	.word	0x08000264
	...

080016f0 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 80016f0:	b4f0      	push	{r4, r5, r6, r7}
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80016f2:	4d0b      	ldr	r5, [pc, #44]	; (8001720 <chCoreAllocAlignedI+0x30>)
  size = MEM_ALIGN_NEXT(size, align);
 80016f4:	1e4a      	subs	r2, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80016f6:	682f      	ldr	r7, [r5, #0]
  size = MEM_ALIGN_NEXT(size, align);
 80016f8:	424e      	negs	r6, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80016fa:	1e7c      	subs	r4, r7, #1
  size = MEM_ALIGN_NEXT(size, align);
 80016fc:	1813      	adds	r3, r2, r0
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80016fe:	4421      	add	r1, r4
 8001700:	ea01 0006 	and.w	r0, r1, r6
  size = MEM_ALIGN_NEXT(size, align);
 8001704:	4033      	ands	r3, r6
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8001706:	686a      	ldr	r2, [r5, #4]
  next = p + size;
 8001708:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800170a:	4293      	cmp	r3, r2
 800170c:	d804      	bhi.n	8001718 <chCoreAllocAlignedI+0x28>
 800170e:	429f      	cmp	r7, r3
 8001710:	d802      	bhi.n	8001718 <chCoreAllocAlignedI+0x28>
  ch_memcore.nextmem = next;
 8001712:	602b      	str	r3, [r5, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8001714:	bcf0      	pop	{r4, r5, r6, r7}
 8001716:	4770      	bx	lr
    return NULL;
 8001718:	2000      	movs	r0, #0
 800171a:	bcf0      	pop	{r4, r5, r6, r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20001280 	.word	0x20001280
	...

08001730 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8001730:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001732:	2220      	movs	r2, #32
 8001734:	4603      	mov	r3, r0
 8001736:	f382 8811 	msr	BASEPRI, r2
  objp = mp->next;
 800173a:	6800      	ldr	r0, [r0, #0]
  if (objp != NULL) {
 800173c:	b128      	cbz	r0, 800174a <chPoolAlloc+0x1a>
    mp->next = mp->next->next;
 800173e:	6802      	ldr	r2, [r0, #0]
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	2300      	movs	r3, #0
 8001744:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8001748:	bd08      	pop	{r3, pc}
  else if (mp->provider != NULL) {
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	2a00      	cmp	r2, #0
 800174e:	d0f8      	beq.n	8001742 <chPoolAlloc+0x12>
    objp = mp->provider(mp->object_size, mp->align);
 8001750:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 8001754:	4790      	blx	r2
 8001756:	2300      	movs	r3, #0
 8001758:	f383 8811 	msr	BASEPRI, r3
}
 800175c:	bd08      	pop	{r3, pc}
 800175e:	bf00      	nop

08001760 <oslib_test_002_001_execute>:
  test_set_step(1);
 8001760:	2101      	movs	r1, #1
static void oslib_test_002_001_execute(void) {
 8001762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8001766:	2204      	movs	r2, #4
 8001768:	2520      	movs	r5, #32
 800176a:	2000      	movs	r0, #0
 800176c:	4e38      	ldr	r6, [pc, #224]	; (8001850 <oslib_test_002_001_execute+0xf0>)
 800176e:	4b39      	ldr	r3, [pc, #228]	; (8001854 <oslib_test_002_001_execute+0xf4>)
 8001770:	4c39      	ldr	r4, [pc, #228]	; (8001858 <oslib_test_002_001_execute+0xf8>)
 8001772:	6031      	str	r1, [r6, #0]
 8001774:	f385 8811 	msr	BASEPRI, r5
  chDbgCheck((mp != NULL) && (objp != NULL));

  chDbgAssert(((size_t)objp & MEM_ALIGN_MASK(mp->align)) == 0U,
              "unaligned object");

  php->next = mp->next;
 8001778:	6821      	ldr	r1, [r4, #0]
  mp->next = php;
 800177a:	6023      	str	r3, [r4, #0]
  php->next = mp->next;
 800177c:	6019      	str	r1, [r3, #0]
 800177e:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8001782:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 8001784:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8001786:	440b      	add	r3, r1
  while (n != 0U) {
 8001788:	d1f4      	bne.n	8001774 <oslib_test_002_001_execute+0x14>
  test_set_step(2);
 800178a:	2302      	movs	r3, #2
 800178c:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 800178e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8001858 <oslib_test_002_001_execute+0xf8>
 8001792:	4f32      	ldr	r7, [pc, #200]	; (800185c <oslib_test_002_001_execute+0xfc>)
  test_set_step(2);
 8001794:	6033      	str	r3, [r6, #0]
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8001796:	4640      	mov	r0, r8
 8001798:	f7ff ffca 	bl	8001730 <chPoolAlloc>
 800179c:	3000      	adds	r0, #0
 800179e:	bf18      	it	ne
 80017a0:	2001      	movne	r0, #1
 80017a2:	4639      	mov	r1, r7
 80017a4:	f7ff f8d4 	bl	8000950 <_test_assert>
 80017a8:	2800      	cmp	r0, #0
 80017aa:	d13b      	bne.n	8001824 <oslib_test_002_001_execute+0xc4>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80017ac:	3d01      	subs	r5, #1
 80017ae:	d1f2      	bne.n	8001796 <oslib_test_002_001_execute+0x36>
  test_set_step(3);
 80017b0:	2303      	movs	r3, #3
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80017b2:	4829      	ldr	r0, [pc, #164]	; (8001858 <oslib_test_002_001_execute+0xf8>)
  test_set_step(3);
 80017b4:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80017b6:	f7ff ffbb 	bl	8001730 <chPoolAlloc>
 80017ba:	fab0 f080 	clz	r0, r0
 80017be:	4928      	ldr	r1, [pc, #160]	; (8001860 <oslib_test_002_001_execute+0x100>)
 80017c0:	0940      	lsrs	r0, r0, #5
 80017c2:	f7ff f8c5 	bl	8000950 <_test_assert>
 80017c6:	bb68      	cbnz	r0, 8001824 <oslib_test_002_001_execute+0xc4>
  test_set_step(4);
 80017c8:	2204      	movs	r2, #4
 80017ca:	2720      	movs	r7, #32
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <oslib_test_002_001_execute+0xf4>)
 80017ce:	6032      	str	r2, [r6, #0]
 80017d0:	f103 0010 	add.w	r0, r3, #16
 80017d4:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 80017d8:	6822      	ldr	r2, [r4, #0]
  mp->next = php;
 80017da:	6023      	str	r3, [r4, #0]
  php->next = mp->next;
 80017dc:	f843 2b04 	str.w	r2, [r3], #4
 80017e0:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80017e4:	4298      	cmp	r0, r3
 80017e6:	d1f5      	bne.n	80017d4 <oslib_test_002_001_execute+0x74>
  test_set_step(5);
 80017e8:	2305      	movs	r3, #5
 80017ea:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80017ec:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8001858 <oslib_test_002_001_execute+0xf8>
 80017f0:	4f1a      	ldr	r7, [pc, #104]	; (800185c <oslib_test_002_001_execute+0xfc>)
  test_set_step(5);
 80017f2:	6033      	str	r3, [r6, #0]
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80017f4:	4640      	mov	r0, r8
 80017f6:	f7ff ff9b 	bl	8001730 <chPoolAlloc>
 80017fa:	3000      	adds	r0, #0
 80017fc:	bf18      	it	ne
 80017fe:	2001      	movne	r0, #1
 8001800:	4639      	mov	r1, r7
 8001802:	f7ff f8a5 	bl	8000950 <_test_assert>
 8001806:	b968      	cbnz	r0, 8001824 <oslib_test_002_001_execute+0xc4>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8001808:	3d01      	subs	r5, #1
 800180a:	d1f3      	bne.n	80017f4 <oslib_test_002_001_execute+0x94>
  test_set_step(6);
 800180c:	2306      	movs	r3, #6
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 800180e:	4812      	ldr	r0, [pc, #72]	; (8001858 <oslib_test_002_001_execute+0xf8>)
  test_set_step(6);
 8001810:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8001812:	f7ff ff8d 	bl	8001730 <chPoolAlloc>
 8001816:	fab0 f080 	clz	r0, r0
 800181a:	4911      	ldr	r1, [pc, #68]	; (8001860 <oslib_test_002_001_execute+0x100>)
 800181c:	0940      	lsrs	r0, r0, #5
 800181e:	f7ff f897 	bl	8000950 <_test_assert>
 8001822:	b108      	cbz	r0, 8001828 <oslib_test_002_001_execute+0xc8>
}
 8001824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(7);
 8001828:	2107      	movs	r1, #7
  mp->object_size = size;
 800182a:	2304      	movs	r3, #4
  mp->provider = provider;
 800182c:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <oslib_test_002_001_execute+0x104>)
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800182e:	480a      	ldr	r0, [pc, #40]	; (8001858 <oslib_test_002_001_execute+0xf8>)
  test_set_step(7);
 8001830:	6031      	str	r1, [r6, #0]
  mp->next = NULL;
 8001832:	6025      	str	r5, [r4, #0]
  mp->align = align;
 8001834:	e9c4 3301 	strd	r3, r3, [r4, #4]
  mp->provider = provider;
 8001838:	60e2      	str	r2, [r4, #12]
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800183a:	f7ff ff79 	bl	8001730 <chPoolAlloc>
}
 800183e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8001842:	fab0 f080 	clz	r0, r0
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <oslib_test_002_001_execute+0x108>)
 8001848:	0940      	lsrs	r0, r0, #5
 800184a:	f7ff b881 	b.w	8000950 <_test_assert>
 800184e:	bf00      	nop
 8001850:	20001a7c 	.word	0x20001a7c
 8001854:	20001338 	.word	0x20001338
 8001858:	20000888 	.word	0x20000888
 800185c:	0800a4c8 	.word	0x0800a4c8
 8001860:	0800a4d4 	.word	0x0800a4d4
 8001864:	080006b1 	.word	0x080006b1
 8001868:	0800a4e4 	.word	0x0800a4e4
 800186c:	00000000 	.word	0x00000000

08001870 <chEvtAddEvents>:
 8001870:	2320      	movs	r3, #32
 8001872:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <chEvtAddEvents+0x18>)
 8001878:	2200      	movs	r2, #0
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800187e:	4308      	orrs	r0, r1
 8001880:	6358      	str	r0, [r3, #52]	; 0x34
 8001882:	f382 8811 	msr	BASEPRI, r2
}
 8001886:	4770      	bx	lr
 8001888:	200010f0 	.word	0x200010f0
 800188c:	00000000 	.word	0x00000000

08001890 <chEvtUnregister>:
 8001890:	2320      	movs	r3, #32
 8001892:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8001896:	4602      	mov	r2, r0
 8001898:	e002      	b.n	80018a0 <chEvtUnregister+0x10>
    if (p->next == elp) {
 800189a:	428b      	cmp	r3, r1
 800189c:	d007      	beq.n	80018ae <chEvtUnregister+0x1e>
 800189e:	461a      	mov	r2, r3
  while (p->next != (event_listener_t *)esp) {
 80018a0:	6813      	ldr	r3, [r2, #0]
 80018a2:	4283      	cmp	r3, r0
 80018a4:	d1f9      	bne.n	800189a <chEvtUnregister+0xa>
 80018a6:	2300      	movs	r3, #0
 80018a8:	f383 8811 	msr	BASEPRI, r3
}
 80018ac:	4770      	bx	lr
      p->next = elp->next;
 80018ae:	680b      	ldr	r3, [r1, #0]
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	2300      	movs	r3, #0
 80018b4:	f383 8811 	msr	BASEPRI, r3
}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	0000      	movs	r0, r0
	...

080018c0 <rt_test_008_001_execute>:
  test_set_step(2);
 80018c0:	2002      	movs	r0, #2
static void rt_test_008_001_execute(void) {
 80018c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(2);
 80018c6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80019b4 <rt_test_008_001_execute+0xf4>
  esp->next = (event_listener_t *)esp;
 80018ca:	4c36      	ldr	r4, [pc, #216]	; (80019a4 <rt_test_008_001_execute+0xe4>)
static void rt_test_008_001_execute(void) {
 80018cc:	b08c      	sub	sp, #48	; 0x30
  test_set_step(2);
 80018ce:	f8c9 0000 	str.w	r0, [r9]
 80018d2:	6024      	str	r4, [r4, #0]
 80018d4:	2620      	movs	r6, #32
 80018d6:	f386 8811 	msr	BASEPRI, r6
  elp->events   = events;
 80018da:	2301      	movs	r3, #1
  elp->flags    = (eventflags_t)0;
 80018dc:	2500      	movs	r5, #0
  elp->wflags   = wflags;
 80018de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  elp->listener = currp;
 80018e2:	4a31      	ldr	r2, [pc, #196]	; (80019a8 <rt_test_008_001_execute+0xe8>)
  elp->events   = events;
 80018e4:	9309      	str	r3, [sp, #36]	; 0x24
  elp->next     = esp->next;
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	af0c      	add	r7, sp, #48	; 0x30
 80018ea:	9301      	str	r3, [sp, #4]
  elp->listener = currp;
 80018ec:	6993      	ldr	r3, [r2, #24]
  elp->wflags   = wflags;
 80018ee:	e9cd 510a 	strd	r5, r1, [sp, #40]	; 0x28
  elp->listener = currp;
 80018f2:	9308      	str	r3, [sp, #32]
  elp->next     = esp->next;
 80018f4:	9b01      	ldr	r3, [sp, #4]
 80018f6:	f847 3d14 	str.w	r3, [r7, #-20]!
  esp->next     = elp;
 80018fa:	6027      	str	r7, [r4, #0]
 80018fc:	f385 8811 	msr	BASEPRI, r5
 8001900:	f386 8811 	msr	BASEPRI, r6
  elp->next     = esp->next;
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	f10d 0830 	add.w	r8, sp, #48	; 0x30
  elp->listener = currp;
 800190a:	6992      	ldr	r2, [r2, #24]
  elp->next     = esp->next;
 800190c:	f848 3d28 	str.w	r3, [r8, #-40]!
  elp->listener = currp;
 8001910:	9203      	str	r2, [sp, #12]
  elp->flags    = (eventflags_t)0;
 8001912:	e9cd 0504 	strd	r0, r5, [sp, #16]
  elp->wflags   = wflags;
 8001916:	9106      	str	r1, [sp, #24]
  esp->next     = elp;
 8001918:	f8c4 8000 	str.w	r8, [r4]
 800191c:	f385 8811 	msr	BASEPRI, r5
 8001920:	f386 8811 	msr	BASEPRI, r6
  return (bool)(esp != (event_source_t *)esp->next);
 8001924:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8001926:	4921      	ldr	r1, [pc, #132]	; (80019ac <rt_test_008_001_execute+0xec>)
 8001928:	1b00      	subs	r0, r0, r4
 800192a:	bf18      	it	ne
 800192c:	2001      	movne	r0, #1
 800192e:	f7ff f80f 	bl	8000950 <_test_assert>
 8001932:	b120      	cbz	r0, 800193e <rt_test_008_001_execute+0x7e>
 8001934:	f385 8811 	msr	BASEPRI, r5
}
 8001938:	b00c      	add	sp, #48	; 0x30
 800193a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800193e:	4682      	mov	sl, r0
 8001940:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8001944:	2303      	movs	r3, #3
    chEvtUnregister(&es1, &el1);
 8001946:	4639      	mov	r1, r7
 8001948:	4620      	mov	r0, r4
  test_set_step(3);
 800194a:	f8c9 3000 	str.w	r3, [r9]
    chEvtUnregister(&es1, &el1);
 800194e:	f7ff ff9f 	bl	8001890 <chEvtUnregister>
 8001952:	f386 8811 	msr	BASEPRI, r6
 8001956:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8001958:	4914      	ldr	r1, [pc, #80]	; (80019ac <rt_test_008_001_execute+0xec>)
 800195a:	1b00      	subs	r0, r0, r4
 800195c:	bf18      	it	ne
 800195e:	2001      	movne	r0, #1
 8001960:	f7fe fff6 	bl	8000950 <_test_assert>
 8001964:	4605      	mov	r5, r0
 8001966:	b120      	cbz	r0, 8001972 <rt_test_008_001_execute+0xb2>
 8001968:	f38a 8811 	msr	BASEPRI, sl
}
 800196c:	b00c      	add	sp, #48	; 0x30
 800196e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001972:	f380 8811 	msr	BASEPRI, r0
  test_set_step(4);
 8001976:	2304      	movs	r3, #4
    chEvtUnregister(&es1, &el2);
 8001978:	4641      	mov	r1, r8
 800197a:	4620      	mov	r0, r4
  test_set_step(4);
 800197c:	f8c9 3000 	str.w	r3, [r9]
    chEvtUnregister(&es1, &el2);
 8001980:	f7ff ff86 	bl	8001890 <chEvtUnregister>
 8001984:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 8001988:	6820      	ldr	r0, [r4, #0]
 800198a:	4909      	ldr	r1, [pc, #36]	; (80019b0 <rt_test_008_001_execute+0xf0>)
 800198c:	1b00      	subs	r0, r0, r4
 800198e:	fab0 f080 	clz	r0, r0
 8001992:	0940      	lsrs	r0, r0, #5
 8001994:	f7fe ffdc 	bl	8000950 <_test_assert>
 8001998:	2800      	cmp	r0, #0
 800199a:	d1cb      	bne.n	8001934 <rt_test_008_001_execute+0x74>
 800199c:	f380 8811 	msr	BASEPRI, r0
 80019a0:	e7ca      	b.n	8001938 <rt_test_008_001_execute+0x78>
 80019a2:	bf00      	nop
 80019a4:	20000814 	.word	0x20000814
 80019a8:	200010f0 	.word	0x200010f0
 80019ac:	0800b520 	.word	0x0800b520
 80019b0:	0800b52c 	.word	0x0800b52c
 80019b4:	20001a7c 	.word	0x20001a7c
	...

080019c0 <chThdCreateSuspendedI>:
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 80019c0:	b4f0      	push	{r4, r5, r6, r7}
  tp->flags     = CH_FLAG_MODE_STATIC;
 80019c2:	2100      	movs	r1, #0
  tp->state     = CH_STATE_WTSTART;
 80019c4:	2702      	movs	r7, #2
  tp->refs      = (trefs_t)1;
 80019c6:	2501      	movs	r5, #1
  tp = (thread_t *)((uint8_t *)tdp->wend -
 80019c8:	6883      	ldr	r3, [r0, #8]
  tp->wabase = tdp->wbase;
 80019ca:	6846      	ldr	r6, [r0, #4]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80019cc:	6904      	ldr	r4, [r0, #16]
  REG_INSERT(tp);
 80019ce:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <chThdCreateSuspendedI+0x74>)
  tp->wabase = tdp->wbase;
 80019d0:	f843 6c2c 	str.w	r6, [r3, #-44]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80019d4:	f843 4c6c 	str.w	r4, [r3, #-108]
  return _thread_init(tp, tdp->name, tdp->prio);
 80019d8:	6806      	ldr	r6, [r0, #0]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80019da:	6944      	ldr	r4, [r0, #20]
  return _thread_init(tp, tdp->name, tdp->prio);
 80019dc:	68c0      	ldr	r0, [r0, #12]
  tp->refs      = (trefs_t)1;
 80019de:	f803 5c26 	strb.w	r5, [r3, #-38]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80019e2:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 80019e6:	f803 7c28 	strb.w	r7, [r3, #-40]
  REG_INSERT(tp);
 80019ea:	f843 2c38 	str.w	r2, [r3, #-56]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80019ee:	4d12      	ldr	r5, [pc, #72]	; (8001a38 <chThdCreateSuspendedI+0x78>)
 80019f0:	f843 4c68 	str.w	r4, [r3, #-104]
  tp->prio      = prio;
 80019f4:	f843 0c40 	str.w	r0, [r3, #-64]
  REG_INSERT(tp);
 80019f8:	6954      	ldr	r4, [r2, #20]
  tp->realprio  = prio;
 80019fa:	f843 0c0c 	str.w	r0, [r3, #-12]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80019fe:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 8001a02:	f843 0c3c 	str.w	r0, [r3, #-60]
 8001a06:	f843 5c4c 	str.w	r5, [r3, #-76]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8001a0a:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  tp->epending  = (eventmask_t)0;
 8001a0e:	e943 1105 	strd	r1, r1, [r3, #-20]
  list_init(&tp->waiting);
 8001a12:	f1a3 0520 	sub.w	r5, r3, #32
  queue_init(&tp->msgqueue);
 8001a16:	f1a3 011c 	sub.w	r1, r3, #28
  tp->name      = name;
 8001a1a:	f843 6c30 	str.w	r6, [r3, #-48]
  REG_INSERT(tp);
 8001a1e:	f843 4c34 	str.w	r4, [r3, #-52]
 8001a22:	6120      	str	r0, [r4, #16]
 8001a24:	6150      	str	r0, [r2, #20]
  tqp->next = (thread_t *)tqp;
 8001a26:	e943 5108 	strd	r5, r1, [r3, #-32]
}
 8001a2a:	bcf0      	pop	{r4, r5, r6, r7}
  tqp->prev = (thread_t *)tqp;
 8001a2c:	f843 1c18 	str.w	r1, [r3, #-24]
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	200010f0 	.word	0x200010f0
 8001a38:	08000251 	.word	0x08000251
 8001a3c:	00000000 	.word	0x00000000

08001a40 <wakeup>:
 8001a40:	2320      	movs	r3, #32
 8001a42:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8001a46:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001a4a:	2b07      	cmp	r3, #7
 8001a4c:	d80e      	bhi.n	8001a6c <wakeup+0x2c>
 8001a4e:	e8df f003 	tbb	[pc, r3]
 8001a52:	0d28      	.short	0x0d28
 8001a54:	0408240d 	.word	0x0408240d
 8001a58:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
 8001a5a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8001a5c:	6893      	ldr	r3, [r2, #8]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8001a62:	e9d0 2300 	ldrd	r2, r3, [r0]
 8001a66:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001a68:	6802      	ldr	r2, [r0, #0]
 8001a6a:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 8001a6c:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 8001a6e:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8001a70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 8001a74:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8001a78:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8001a7a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8001a7e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	428a      	cmp	r2, r1
 8001a84:	d2fb      	bcs.n	8001a7e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	2100      	movs	r1, #0
 8001a8a:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001a8e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001a90:	6058      	str	r0, [r3, #4]
 8001a92:	f381 8811 	msr	BASEPRI, r1
}
 8001a96:	bc10      	pop	{r4}
 8001a98:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e7e4      	b.n	8001a6c <wakeup+0x2c>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f383 8811 	msr	BASEPRI, r3
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	200010f0 	.word	0x200010f0

08001ab0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8001ab0:	4601      	mov	r1, r0
  tp->state = CH_STATE_READY;
 8001ab2:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8001ab4:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <chSchReadyI+0x24>)
  } while (cp->prio >= tp->prio);
 8001ab6:	6880      	ldr	r0, [r0, #8]
  tp->state = CH_STATE_READY;
 8001ab8:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 8001abc:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4282      	cmp	r2, r0
 8001ac2:	d2fb      	bcs.n	8001abc <chSchReadyI+0xc>
  tp->queue.prev             = cp->queue.prev;
 8001ac4:	685a      	ldr	r2, [r3, #4]
}
 8001ac6:	4608      	mov	r0, r1
  tp->queue.prev             = cp->queue.prev;
 8001ac8:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8001acc:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8001ace:	6059      	str	r1, [r3, #4]
}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	200010f0 	.word	0x200010f0
	...

08001ae0 <chThdDequeueNextI.constprop.101>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001ae0:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8001ae2:	4290      	cmp	r0, r2
 8001ae4:	d00a      	beq.n	8001afc <chThdDequeueNextI.constprop.101+0x1c>
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001ae6:	b410      	push	{r4}
 8001ae8:	4603      	mov	r3, r0

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8001aea:	2400      	movs	r4, #0
  tqp->next             = tp->queue.next;
 8001aec:	6811      	ldr	r1, [r2, #0]
  (void) chSchReadyI(tp);
 8001aee:	4610      	mov	r0, r2
 8001af0:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001af2:	604b      	str	r3, [r1, #4]
  tp->u.rdymsg = msg;
 8001af4:	6254      	str	r4, [r2, #36]	; 0x24
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001af6:	bc10      	pop	{r4}
  (void) chSchReadyI(tp);
 8001af8:	f7ff bfda 	b.w	8001ab0 <chSchReadyI>
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop

08001b00 <chMBPostI.constprop.69>:

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <chMBPostI.constprop.69+0x40>)
 8001b02:	7d1a      	ldrb	r2, [r3, #20]
 8001b04:	b9aa      	cbnz	r2, 8001b32 <chMBPostI.constprop.69+0x32>
 8001b06:	691a      	ldr	r2, [r3, #16]
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8001b08:	b570      	push	{r4, r5, r6, lr}
 8001b0a:	e9d3 6100 	ldrd	r6, r1, [r3]
 */
static inline size_t chMBGetSizeI(const mailbox_t *mbp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(mbp->top - mbp->buffer);
 8001b0e:	1b8c      	subs	r4, r1, r6
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8001b10:	ebb2 0fa4 	cmp.w	r2, r4, asr #2
 8001b14:	d010      	beq.n	8001b38 <chMBPostI.constprop.69+0x38>
    *mbp->wrptr++ = msg;
 8001b16:	689d      	ldr	r5, [r3, #8]
    if (mbp->wrptr >= mbp->top) {
      mbp->wrptr = mbp->buffer;
    }
    mbp->cnt++;
 8001b18:	3201      	adds	r2, #1
    *mbp->wrptr++ = msg;
 8001b1a:	1d2c      	adds	r4, r5, #4
 8001b1c:	609c      	str	r4, [r3, #8]
    if (mbp->wrptr >= mbp->top) {
 8001b1e:	42a1      	cmp	r1, r4
    *mbp->wrptr++ = msg;
 8001b20:	6028      	str	r0, [r5, #0]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8001b22:	4808      	ldr	r0, [pc, #32]	; (8001b44 <chMBPostI.constprop.69+0x44>)
      mbp->wrptr = mbp->buffer;
 8001b24:	bf98      	it	ls
 8001b26:	609e      	strls	r6, [r3, #8]
    mbp->cnt++;
 8001b28:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8001b2a:	f7ff ffd9 	bl	8001ae0 <chThdDequeueNextI.constprop.101>

    return MSG_OK;
 8001b2e:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001b30:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_RESET;
 8001b32:	f06f 0001 	mvn.w	r0, #1
}
 8001b36:	4770      	bx	lr
  return MSG_TIMEOUT;
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001b3c:	bd70      	pop	{r4, r5, r6, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000860 	.word	0x20000860
 8001b44:	20000880 	.word	0x20000880
	...

08001b50 <chMBPostAheadI.constprop.66>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8001b50:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <chMBPostAheadI.constprop.66+0x40>)
 8001b54:	7d1a      	ldrb	r2, [r3, #20]
 8001b56:	b9a2      	cbnz	r2, 8001b82 <chMBPostAheadI.constprop.66+0x32>
 8001b58:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b5c:	6919      	ldr	r1, [r3, #16]
 8001b5e:	1b2a      	subs	r2, r5, r4
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8001b60:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 8001b64:	d010      	beq.n	8001b88 <chMBPostAheadI.constprop.66+0x38>
    if (--mbp->rdptr < mbp->buffer) {
 8001b66:	68da      	ldr	r2, [r3, #12]
      mbp->rdptr = mbp->top - 1;
    }
    *mbp->rdptr = msg;
    mbp->cnt++;
 8001b68:	3101      	adds	r1, #1
    if (--mbp->rdptr < mbp->buffer) {
 8001b6a:	3a04      	subs	r2, #4
 8001b6c:	4294      	cmp	r4, r2
      mbp->rdptr = mbp->top - 1;
 8001b6e:	bf88      	it	hi
 8001b70:	1f2a      	subhi	r2, r5, #4
 8001b72:	60da      	str	r2, [r3, #12]
    *mbp->rdptr = msg;
 8001b74:	6010      	str	r0, [r2, #0]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8001b76:	4807      	ldr	r0, [pc, #28]	; (8001b94 <chMBPostAheadI.constprop.66+0x44>)
    mbp->cnt++;
 8001b78:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8001b7a:	f7ff ffb1 	bl	8001ae0 <chThdDequeueNextI.constprop.101>

    return MSG_OK;
 8001b7e:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001b80:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8001b82:	f06f 0001 	mvn.w	r0, #1
}
 8001b86:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001b8c:	bd38      	pop	{r3, r4, r5, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000860 	.word	0x20000860
 8001b94:	20000880 	.word	0x20000880
	...

08001ba0 <chMBFetchI.constprop.63>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8001ba0:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <chMBFetchI.constprop.63+0x40>)
 8001ba4:	7d1a      	ldrb	r2, [r3, #20]
 8001ba6:	b9a2      	cbnz	r2, 8001bd2 <chMBFetchI.constprop.63+0x32>
 8001ba8:	691a      	ldr	r2, [r3, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8001baa:	b1aa      	cbz	r2, 8001bd8 <chMBFetchI.constprop.63+0x38>
    *msgp = *mbp->rdptr++;
 8001bac:	68dc      	ldr	r4, [r3, #12]
    if (mbp->rdptr >= mbp->top) {
 8001bae:	685d      	ldr	r5, [r3, #4]
    *msgp = *mbp->rdptr++;
 8001bb0:	1d21      	adds	r1, r4, #4
    if (mbp->rdptr >= mbp->top) {
 8001bb2:	42a9      	cmp	r1, r5
    *msgp = *mbp->rdptr++;
 8001bb4:	6824      	ldr	r4, [r4, #0]
 8001bb6:	60d9      	str	r1, [r3, #12]
      mbp->rdptr = mbp->buffer;
 8001bb8:	bf28      	it	cs
 8001bba:	6819      	ldrcs	r1, [r3, #0]
    *msgp = *mbp->rdptr++;
 8001bbc:	6004      	str	r4, [r0, #0]
    }
    mbp->cnt--;
 8001bbe:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8001bc2:	4808      	ldr	r0, [pc, #32]	; (8001be4 <chMBFetchI.constprop.63+0x44>)
      mbp->rdptr = mbp->buffer;
 8001bc4:	bf28      	it	cs
 8001bc6:	60d9      	strcs	r1, [r3, #12]
    mbp->cnt--;
 8001bc8:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8001bca:	f7ff ff89 	bl	8001ae0 <chThdDequeueNextI.constprop.101>

    return MSG_OK;
 8001bce:	2000      	movs	r0, #0
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001bd0:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8001bd2:	f06f 0001 	mvn.w	r0, #1
}
 8001bd6:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001bdc:	bd38      	pop	{r3, r4, r5, pc}
 8001bde:	bf00      	nop
 8001be0:	20000860 	.word	0x20000860
 8001be4:	20000878 	.word	0x20000878
	...

08001bf0 <chCondSignalI.constprop.92>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <chCondSignalI.constprop.92+0x20>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d009      	beq.n	8001c0c <chCondSignalI.constprop.92+0x1c>
void chCondSignalI(condition_variable_t *cp) {
 8001bf8:	b410      	push	{r4}
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
 8001bfa:	2400      	movs	r4, #0
  tqp->next             = tp->queue.next;
 8001bfc:	6811      	ldr	r1, [r2, #0]
    (void) chSchReadyI(tp);
 8001bfe:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
 8001c00:	604b      	str	r3, [r1, #4]
  tqp->next             = tp->queue.next;
 8001c02:	6019      	str	r1, [r3, #0]
    tp->u.rdymsg = MSG_OK;
 8001c04:	6254      	str	r4, [r2, #36]	; 0x24
  }
}
 8001c06:	bc10      	pop	{r4}
    (void) chSchReadyI(tp);
 8001c08:	f7ff bf52 	b.w	8001ab0 <chSchReadyI>
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	2000080c 	.word	0x2000080c
	...

08001c20 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8001c20:	4603      	mov	r3, r0
  tp->epending |= events;
 8001c22:	6b42      	ldr	r2, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001c24:	f890 0020 	ldrb.w	r0, [r0, #32]
  tp->epending |= events;
 8001c28:	4311      	orrs	r1, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001c2a:	280a      	cmp	r0, #10
  tp->epending |= events;
 8001c2c:	6359      	str	r1, [r3, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001c2e:	d00a      	beq.n	8001c46 <chEvtSignalI+0x26>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8001c30:	280b      	cmp	r0, #11
 8001c32:	d000      	beq.n	8001c36 <chEvtSignalI+0x16>
}
 8001c34:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8001c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8001c38:	438a      	bics	r2, r1
 8001c3a:	d1fb      	bne.n	8001c34 <chEvtSignalI+0x14>
    tp->u.rdymsg = MSG_OK;
 8001c3c:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
 8001c3e:	4618      	mov	r0, r3
    tp->u.rdymsg = MSG_OK;
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001c42:	f7ff bf35 	b.w	8001ab0 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8001c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001c48:	4211      	tst	r1, r2
 8001c4a:	d1f7      	bne.n	8001c3c <chEvtSignalI+0x1c>
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop

08001c50 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001c50:	b570      	push	{r4, r5, r6, lr}
  elp = esp->next;
 8001c52:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 8001c54:	42a0      	cmp	r0, r4
 8001c56:	d00f      	beq.n	8001c78 <chEvtBroadcastFlagsI+0x28>
 8001c58:	4606      	mov	r6, r0
 8001c5a:	460d      	mov	r5, r1
    elp->flags |= flags;
 8001c5c:	68e3      	ldr	r3, [r4, #12]
 8001c5e:	432b      	orrs	r3, r5
 8001c60:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8001c62:	b115      	cbz	r5, 8001c6a <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 8001c64:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8001c66:	4213      	tst	r3, r2
 8001c68:	d003      	beq.n	8001c72 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->listener, elp->events);
 8001c6a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8001c6e:	f7ff ffd7 	bl	8001c20 <chEvtSignalI>
    elp = elp->next;
 8001c72:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001c74:	42a6      	cmp	r6, r4
 8001c76:	d1f1      	bne.n	8001c5c <chEvtBroadcastFlagsI+0xc>
}
 8001c78:	bd70      	pop	{r4, r5, r6, pc}
 8001c7a:	bf00      	nop
 8001c7c:	0000      	movs	r0, r0
	...

08001c80 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001c80:	3111      	adds	r1, #17
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8001c82:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001c84:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 8001c88:	b344      	cbz	r4, 8001cdc <sduDataReceived+0x5c>
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001c90:	2104      	movs	r1, #4
 8001c92:	1860      	adds	r0, r4, r1
 8001c94:	f7ff ffdc 	bl	8001c50 <chEvtBroadcastFlagsI>
                     usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8001c98:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
  *((size_t *)ibqp->bwrptr) = size;
 8001c9c:	69e3      	ldr	r3, [r4, #28]
 8001c9e:	7948      	ldrb	r0, [r1, #5]
 8001ca0:	680a      	ldr	r2, [r1, #0]
  if (ibqp->bwrptr >= ibqp->btop) {
 8001ca2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ca4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8001ca8:	68d2      	ldr	r2, [r2, #12]
  ibqPostFullBufferI(&sdup->ibqueue,
 8001caa:	f104 000c 	add.w	r0, r4, #12
 8001cae:	6992      	ldr	r2, [r2, #24]
 8001cb0:	6852      	ldr	r2, [r2, #4]
  *((size_t *)ibqp->bwrptr) = size;
 8001cb2:	601a      	str	r2, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
 8001cb4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  ibqp->bcounter++;
 8001cb6:	69a2      	ldr	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 8001cb8:	442b      	add	r3, r5
  if (ibqp->bwrptr >= ibqp->btop) {
 8001cba:	428b      	cmp	r3, r1
  ibqp->bwrptr += ibqp->bsize;
 8001cbc:	61e3      	str	r3, [r4, #28]
    ibqp->bwrptr = ibqp->buffers;
 8001cbe:	bf28      	it	cs
 8001cc0:	6b23      	ldrcs	r3, [r4, #48]	; 0x30
  ibqp->bcounter++;
 8001cc2:	f102 0201 	add.w	r2, r2, #1
    ibqp->bwrptr = ibqp->buffers;
 8001cc6:	bf28      	it	cs
 8001cc8:	61e3      	strcs	r3, [r4, #28]
  ibqp->bcounter++;
 8001cca:	61a2      	str	r2, [r4, #24]
  chThdDequeueNextI(tqp, msg);
 8001ccc:	f7ff ff08 	bl	8001ae0 <chThdDequeueNextI.constprop.101>
  (void) sdu_start_receive(sdup);
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f7ff fc1d 	bl	8001510 <sdu_start_receive>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f383 8811 	msr	BASEPRI, r3
}
 8001cdc:	bd38      	pop	{r3, r4, r5, pc}
 8001cde:	bf00      	nop

08001ce0 <sduDataTransmitted>:
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001ce4:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001ce8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001cea:	b082      	sub	sp, #8
  if (sdup == NULL) {
 8001cec:	b1f4      	cbz	r4, 8001d2c <sduDataTransmitted+0x4c>
 8001cee:	460e      	mov	r6, r1
 8001cf0:	4605      	mov	r5, r0
 8001cf2:	2320      	movs	r3, #32
 8001cf4:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8001cf8:	2108      	movs	r1, #8
 8001cfa:	1d20      	adds	r0, r4, #4
 8001cfc:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8001d00:	f7ff ffa6 	bl	8001c50 <chEvtBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f104 0844 	add.w	r8, r4, #68	; 0x44
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	bb03      	cbnz	r3, 8001d52 <sduDataTransmitted+0x72>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001d10:	4640      	mov	r0, r8
 8001d12:	a901      	add	r1, sp, #4
 8001d14:	f7ff fc3c 	bl	8001590 <obqGetFullBufferI>
  if (buf != NULL) {
 8001d18:	b158      	cbz	r0, 8001d32 <sduDataTransmitted+0x52>
    usbStartTransmitI(usbp, ep, buf, n);
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	4631      	mov	r1, r6
 8001d1e:	4628      	mov	r0, r5
 8001d20:	9b01      	ldr	r3, [sp, #4]
 8001d22:	f7ff fb85 	bl	8001430 <usbStartTransmitI>
 8001d26:	2300      	movs	r3, #0
 8001d28:	f383 8811 	msr	BASEPRI, r3
}
 8001d2c:	b002      	add	sp, #8
 8001d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	2a00      	cmp	r2, #0
 8001d3a:	d0f4      	beq.n	8001d26 <sduDataTransmitted+0x46>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8001d3c:	8a1b      	ldrh	r3, [r3, #16]
 8001d3e:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001d40:	4013      	ands	r3, r2
 8001d42:	d1f0      	bne.n	8001d26 <sduDataTransmitted+0x46>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8001d44:	4631      	mov	r1, r6
 8001d46:	f105 0274 	add.w	r2, r5, #116	; 0x74
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	f7ff fb70 	bl	8001430 <usbStartTransmitI>
 8001d50:	e7e9      	b.n	8001d26 <sduDataTransmitted+0x46>
  obqp->brdptr += obqp->bsize;
 8001d52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d54:	6e21      	ldr	r1, [r4, #96]	; 0x60
  obqp->bcounter++;
 8001d56:	6d22      	ldr	r2, [r4, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 8001d58:	440b      	add	r3, r1
  if (obqp->brdptr >= obqp->btop) {
 8001d5a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  obqp->brdptr += obqp->bsize;
 8001d5c:	65a3      	str	r3, [r4, #88]	; 0x58
  if (obqp->brdptr >= obqp->btop) {
 8001d5e:	428b      	cmp	r3, r1
    obqp->brdptr = obqp->buffers;
 8001d60:	bf28      	it	cs
 8001d62:	6ea3      	ldrcs	r3, [r4, #104]	; 0x68
  obqp->bcounter++;
 8001d64:	f102 0201 	add.w	r2, r2, #1
    obqp->brdptr = obqp->buffers;
 8001d68:	bf28      	it	cs
 8001d6a:	65a3      	strcs	r3, [r4, #88]	; 0x58
  chThdDequeueNextI(tqp, msg);
 8001d6c:	4640      	mov	r0, r8
  obqp->bcounter++;
 8001d6e:	6522      	str	r2, [r4, #80]	; 0x50
 8001d70:	f7ff feb6 	bl	8001ae0 <chThdDequeueNextI.constprop.101>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001d74:	4640      	mov	r0, r8
 8001d76:	a901      	add	r1, sp, #4
 8001d78:	f7ff fc0a 	bl	8001590 <obqGetFullBufferI>
  if (buf != NULL) {
 8001d7c:	2800      	cmp	r0, #0
 8001d7e:	d1cc      	bne.n	8001d1a <sduDataTransmitted+0x3a>
 8001d80:	e7d7      	b.n	8001d32 <sduDataTransmitted+0x52>
 8001d82:	bf00      	nop
	...

08001d90 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001d90:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <chMtxUnlockS+0x4c>)
void chMtxUnlockS(mutex_t *mp) {
 8001d92:	b430      	push	{r4, r5}
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001d94:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8001d96:	68c3      	ldr	r3, [r0, #12]
  thread_t *ctp = currp;
 8001d98:	6995      	ldr	r5, [r2, #24]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001d9a:	4284      	cmp	r4, r0
    ctp->mtxlist = mp->next;
 8001d9c:	63ab      	str	r3, [r5, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 8001d9e:	d018      	beq.n	8001dd2 <chMtxUnlockS+0x42>
 8001da0:	4601      	mov	r1, r0
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8001da2:	6be8      	ldr	r0, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8001da4:	b14b      	cbz	r3, 8001dba <chMtxUnlockS+0x2a>
 8001da6:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d003      	beq.n	8001db4 <chMtxUnlockS+0x24>
 8001dac:	6892      	ldr	r2, [r2, #8]
 8001dae:	4290      	cmp	r0, r2
 8001db0:	bf38      	it	cc
 8001db2:	4610      	movcc	r0, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8001db4:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f5      	bne.n	8001da6 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8001dba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  tqp->next             = tp->queue.next;
 8001dbc:	6823      	ldr	r3, [r4, #0]
      ctp->prio = newprio;
 8001dbe:	60a8      	str	r0, [r5, #8]
 8001dc0:	600b      	str	r3, [r1, #0]
      tp->mtxlist = mp;
      (void) chSchReadyI(tp);
 8001dc2:	4620      	mov	r0, r4
  tqp->next->queue.prev = (thread_t *)tqp;
 8001dc4:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 8001dc6:	e9c1 4202 	strd	r4, r2, [r1, #8]
      tp->mtxlist = mp;
 8001dca:	63a1      	str	r1, [r4, #56]	; 0x38
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8001dcc:	bc30      	pop	{r4, r5}
      (void) chSchReadyI(tp);
 8001dce:	f7ff be6f 	b.w	8001ab0 <chSchReadyI>
      mp->owner = NULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60a3      	str	r3, [r4, #8]
}
 8001dd6:	bc30      	pop	{r4, r5}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	200010f0 	.word	0x200010f0

08001de0 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 8001de0:	6883      	ldr	r3, [r0, #8]
 8001de2:	3301      	adds	r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	6083      	str	r3, [r0, #8]
 8001de8:	dd00      	ble.n	8001dec <chSemSignalI+0xc>
 8001dea:	4770      	bx	lr
void chSemSignalI(semaphore_t *sp) {
 8001dec:	b410      	push	{r4}
 8001dee:	4602      	mov	r2, r0
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
 8001df0:	2400      	movs	r4, #0
  thread_t *tp = tqp->next;
 8001df2:	6803      	ldr	r3, [r0, #0]
  tqp->next             = tp->queue.next;
 8001df4:	6819      	ldr	r1, [r3, #0]
    (void) chSchReadyI(tp);
 8001df6:	4618      	mov	r0, r3
 8001df8:	6011      	str	r1, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001dfa:	604a      	str	r2, [r1, #4]
    tp->u.rdymsg = MSG_OK;
 8001dfc:	625c      	str	r4, [r3, #36]	; 0x24
  }
}
 8001dfe:	bc10      	pop	{r4}
    (void) chSchReadyI(tp);
 8001e00:	f7ff be56 	b.w	8001ab0 <chSchReadyI>
	...

08001e10 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001e10:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001e12:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 8001e14:	4298      	cmp	r0, r3
 8001e16:	d00b      	beq.n	8001e30 <chThdDequeueAllI+0x20>
 8001e18:	4604      	mov	r4, r0
 8001e1a:	460d      	mov	r5, r1
  tqp->next             = tp->queue.next;
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001e22:	6054      	str	r4, [r2, #4]
  tp->u.rdymsg = msg;
 8001e24:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001e26:	f7ff fe43 	bl	8001ab0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	429c      	cmp	r4, r3
 8001e2e:	d1f5      	bne.n	8001e1c <chThdDequeueAllI+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001e30:	bd38      	pop	{r3, r4, r5, pc}
 8001e32:	bf00      	nop
	...

08001e40 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8001e40:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <chVTDoResetI+0x80>)
void chVTDoResetI(virtual_timer_t *vtp) {
 8001e42:	b430      	push	{r4, r5}
  if (ch.vtlist.next != vtp) {
 8001e44:	69da      	ldr	r2, [r3, #28]
 8001e46:	4282      	cmp	r2, r0
 8001e48:	d00f      	beq.n	8001e6a <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8001e4a:	e9d0 2100 	ldrd	r2, r1, [r0]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;
 8001e4e:	2400      	movs	r4, #0
    vtp->prev->next = vtp->next;
 8001e50:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 8001e52:	6802      	ldr	r2, [r0, #0]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001e54:	331c      	adds	r3, #28
 8001e56:	429a      	cmp	r2, r3
    vtp->next->prev = vtp->prev;
 8001e58:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 8001e5a:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001e5c:	d003      	beq.n	8001e66 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
 8001e5e:	6881      	ldr	r1, [r0, #8]
 8001e60:	6893      	ldr	r3, [r2, #8]
 8001e62:	440b      	add	r3, r1
 8001e64:	6093      	str	r3, [r2, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001e66:	bc30      	pop	{r4, r5}
 8001e68:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 8001e6a:	4618      	mov	r0, r3
  vtp->func = NULL;
 8001e6c:	2400      	movs	r4, #0
  ch.vtlist.next = vtp->next;
 8001e6e:	6811      	ldr	r1, [r2, #0]
 8001e70:	f840 1f1c 	str.w	r1, [r0, #28]!
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001e74:	4281      	cmp	r1, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8001e76:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 8001e78:	60d4      	str	r4, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001e7a:	d01c      	beq.n	8001eb6 <chVTDoResetI+0x76>
 8001e7c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  ch.vtlist.next->delta += vtp->delta;
 8001e80:	6895      	ldr	r5, [r2, #8]
 8001e82:	688a      	ldr	r2, [r1, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8001e84:	8d18      	ldrh	r0, [r3, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8001e86:	1953      	adds	r3, r2, r5
 8001e88:	608b      	str	r3, [r1, #8]
 8001e8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001e8c:	1a12      	subs	r2, r2, r0
 8001e8e:	b292      	uxth	r2, r2
  if (nowdelta >= ch.vtlist.next->delta) {
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d9e8      	bls.n	8001e66 <chVTDoResetI+0x26>
  delta = ch.vtlist.next->delta - nowdelta;
 8001e94:	1a99      	subs	r1, r3, r2
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001e96:	2901      	cmp	r1, #1
 8001e98:	d90b      	bls.n	8001eb2 <chVTDoResetI+0x72>
 8001e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	bf28      	it	cs
 8001ea2:	4613      	movcs	r3, r2
}
 8001ea4:	bc30      	pop	{r4, r5}
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001ea6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8001eaa:	4403      	add	r3, r0
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	6353      	str	r3, [r2, #52]	; 0x34
 8001eb0:	4770      	bx	lr
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001eb2:	1c93      	adds	r3, r2, #2
 8001eb4:	e7f6      	b.n	8001ea4 <chVTDoResetI+0x64>
  STM32_ST_TIM->DIER = 0;
 8001eb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eba:	60dc      	str	r4, [r3, #12]
 8001ebc:	e7d3      	b.n	8001e66 <chVTDoResetI+0x26>
 8001ebe:	bf00      	nop
 8001ec0:	200010f0 	.word	0x200010f0
	...

08001ed0 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 8001ed0:	b470      	push	{r4, r5, r6}
  return (systime_t)STM32_ST_TIM->CNT;
 8001ed2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001ed6:	4d2e      	ldr	r5, [pc, #184]	; (8001f90 <chVTDoSetI+0xc0>)
 8001ed8:	6a64      	ldr	r4, [r4, #36]	; 0x24
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001eda:	2901      	cmp	r1, #1
  vtp->func = vtfunc;
 8001edc:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8001ee0:	b2a3      	uxth	r3, r4
 8001ee2:	69ea      	ldr	r2, [r5, #28]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001ee4:	d92e      	bls.n	8001f44 <chVTDoSetI+0x74>
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001ee6:	f105 041c 	add.w	r4, r5, #28
 8001eea:	42a2      	cmp	r2, r4
 8001eec:	d038      	beq.n	8001f60 <chVTDoSetI+0x90>
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8001eee:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 8001ef0:	6894      	ldr	r4, [r2, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8001ef2:	1b9b      	subs	r3, r3, r6
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	1859      	adds	r1, r3, r1
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001ef8:	d317      	bcc.n	8001f2a <chVTDoSetI+0x5a>
      p = p->next;
 8001efa:	6812      	ldr	r2, [r2, #0]
      delta -= p->delta;
 8001efc:	1b09      	subs	r1, r1, r4
 8001efe:	6894      	ldr	r4, [r2, #8]
  while (p->delta < delta) {
 8001f00:	42a1      	cmp	r1, r4
 8001f02:	d904      	bls.n	8001f0e <chVTDoSetI+0x3e>
    p = p->next;
 8001f04:	6812      	ldr	r2, [r2, #0]
    delta -= p->delta;
 8001f06:	1b09      	subs	r1, r1, r4
  while (p->delta < delta) {
 8001f08:	6894      	ldr	r4, [r2, #8]
 8001f0a:	428c      	cmp	r4, r1
 8001f0c:	d3fa      	bcc.n	8001f04 <chVTDoSetI+0x34>
  ch.vtlist.delta = (sysinterval_t)-1;
 8001f0e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  vtp->prev = vtp->next->prev;
 8001f12:	6853      	ldr	r3, [r2, #4]
 8001f14:	e9c0 2300 	strd	r2, r3, [r0]
  vtp->prev->next = vtp;
 8001f18:	6018      	str	r0, [r3, #0]
  p->prev = vtp;
 8001f1a:	6050      	str	r0, [r2, #4]
  vtp->delta = delta;
 8001f1c:	6081      	str	r1, [r0, #8]
  p->delta -= delta;
 8001f1e:	6893      	ldr	r3, [r2, #8]
 8001f20:	1a59      	subs	r1, r3, r1
 8001f22:	6091      	str	r1, [r2, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001f24:	626c      	str	r4, [r5, #36]	; 0x24
}
 8001f26:	bc70      	pop	{r4, r5, r6}
 8001f28:	4770      	bx	lr
    else if (delta < p->delta) {
 8001f2a:	42a1      	cmp	r1, r4
 8001f2c:	d2e8      	bcs.n	8001f00 <chVTDoSetI+0x30>
  return systime + (systime_t)interval;
 8001f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f32:	4299      	cmp	r1, r3
 8001f34:	bf94      	ite	ls
 8001f36:	1876      	addls	r6, r6, r1
 8001f38:	18f6      	addhi	r6, r6, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001f3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f3e:	b2b6      	uxth	r6, r6
 8001f40:	635e      	str	r6, [r3, #52]	; 0x34
 8001f42:	e7dd      	b.n	8001f00 <chVTDoSetI+0x30>
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001f44:	f105 011c 	add.w	r1, r5, #28
 8001f48:	428a      	cmp	r2, r1
      vtp->delta = delay;
 8001f4a:	f04f 0102 	mov.w	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001f4e:	d1ce      	bne.n	8001eee <chVTDoSetI+0x1e>
      ch.vtlist.lasttime = now;
 8001f50:	852b      	strh	r3, [r5, #40]	; 0x28
      ch.vtlist.prev = vtp;
 8001f52:	e9c5 0007 	strd	r0, r0, [r5, #28]
      vtp->delta = delay;
 8001f56:	460c      	mov	r4, r1
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8001f58:	e9c0 2200 	strd	r2, r2, [r0]
      vtp->delta = delay;
 8001f5c:	6081      	str	r1, [r0, #8]
 8001f5e:	e00b      	b.n	8001f78 <chVTDoSetI+0xa8>
 8001f60:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001f64:	428c      	cmp	r4, r1
 8001f66:	bf28      	it	cs
 8001f68:	460c      	movcs	r4, r1
      ch.vtlist.lasttime = now;
 8001f6a:	852b      	strh	r3, [r5, #40]	; 0x28
      ch.vtlist.prev = vtp;
 8001f6c:	e9c5 0007 	strd	r0, r0, [r5, #28]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8001f70:	e9c0 2200 	strd	r2, r2, [r0]
 8001f74:	b2a4      	uxth	r4, r4
      vtp->delta = delay;
 8001f76:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001f78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 8001f7c:	2000      	movs	r0, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001f7e:	2102      	movs	r1, #2
 8001f80:	4423      	add	r3, r4
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001f86:	bc70      	pop	{r4, r5, r6}
  STM32_ST_TIM->SR     = 0;
 8001f88:	6110      	str	r0, [r2, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001f8a:	60d1      	str	r1, [r2, #12]
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	200010f0 	.word	0x200010f0
	...

08001fa0 <chSysGetStatusAndLockX.part.1>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fa0:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001fa4:	2320      	movs	r3, #32
 8001fa6:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 8001faa:	4770      	bx	lr
 8001fac:	0000      	movs	r0, r0
	...

08001fb0 <chSysIntegrityCheckI>:
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001fb0:	07c2      	lsls	r2, r0, #31
bool chSysIntegrityCheckI(unsigned testmask) {
 8001fb2:	b410      	push	{r4}
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001fb4:	d510      	bpl.n	8001fd8 <chSysIntegrityCheckI+0x28>
    tp = ch.rlist.queue.next;
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <chSysIntegrityCheckI+0xa0>)
 8001fb8:	e9d3 1400 	ldrd	r1, r4, [r3]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001fbc:	4299      	cmp	r1, r3
 8001fbe:	d03b      	beq.n	8002038 <chSysIntegrityCheckI+0x88>
    n = (cnt_t)0;
 8001fc0:	2200      	movs	r2, #0
      tp = tp->queue.next;
 8001fc2:	6809      	ldr	r1, [r1, #0]
      n++;
 8001fc4:	3201      	adds	r2, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001fc6:	4299      	cmp	r1, r3
 8001fc8:	d1fb      	bne.n	8001fc2 <chSysIntegrityCheckI+0x12>
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001fca:	428c      	cmp	r4, r1
 8001fcc:	d031      	beq.n	8002032 <chSysIntegrityCheckI+0x82>
      tp = tp->queue.prev;
 8001fce:	6864      	ldr	r4, [r4, #4]
      n--;
 8001fd0:	3a01      	subs	r2, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001fd2:	429c      	cmp	r4, r3
 8001fd4:	d1fb      	bne.n	8001fce <chSysIntegrityCheckI+0x1e>
    if (n != (cnt_t)0) {
 8001fd6:	bb62      	cbnz	r2, 8002032 <chSysIntegrityCheckI+0x82>
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 8001fd8:	0783      	lsls	r3, r0, #30
 8001fda:	d512      	bpl.n	8002002 <chSysIntegrityCheckI+0x52>
    vtp = ch.vtlist.next;
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <chSysIntegrityCheckI+0xa0>)
 8001fde:	69da      	ldr	r2, [r3, #28]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001fe0:	f103 041c 	add.w	r4, r3, #28
 8001fe4:	42a2      	cmp	r2, r4
 8001fe6:	6a19      	ldr	r1, [r3, #32]
 8001fe8:	d02a      	beq.n	8002040 <chSysIntegrityCheckI+0x90>
    n = (cnt_t)0;
 8001fea:	2300      	movs	r3, #0
      vtp = vtp->next;
 8001fec:	6812      	ldr	r2, [r2, #0]
      n++;
 8001fee:	3301      	adds	r3, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001ff0:	42a2      	cmp	r2, r4
 8001ff2:	d1fb      	bne.n	8001fec <chSysIntegrityCheckI+0x3c>
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001ff4:	4291      	cmp	r1, r2
 8001ff6:	d01c      	beq.n	8002032 <chSysIntegrityCheckI+0x82>
      vtp = vtp->prev;
 8001ff8:	6849      	ldr	r1, [r1, #4]
      n--;
 8001ffa:	3b01      	subs	r3, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001ffc:	42a1      	cmp	r1, r4
 8001ffe:	d1fb      	bne.n	8001ff8 <chSysIntegrityCheckI+0x48>
    if (n != (cnt_t)0) {
 8002000:	b9bb      	cbnz	r3, 8002032 <chSysIntegrityCheckI+0x82>
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 8002002:	f010 0004 	ands.w	r0, r0, #4
 8002006:	d012      	beq.n	800202e <chSysIntegrityCheckI+0x7e>
    tp = ch.rlist.newer;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <chSysIntegrityCheckI+0xa0>)
    n = (cnt_t)0;
 800200a:	2000      	movs	r0, #0
 800200c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8002010:	429a      	cmp	r2, r3
 8002012:	d019      	beq.n	8002048 <chSysIntegrityCheckI+0x98>
      tp = tp->newer;
 8002014:	6912      	ldr	r2, [r2, #16]
      n++;
 8002016:	3001      	adds	r0, #1
    while (tp != (thread_t *)&ch.rlist) {
 8002018:	429a      	cmp	r2, r3
 800201a:	d1fb      	bne.n	8002014 <chSysIntegrityCheckI+0x64>
    while (tp != (thread_t *)&ch.rlist) {
 800201c:	4291      	cmp	r1, r2
 800201e:	d008      	beq.n	8002032 <chSysIntegrityCheckI+0x82>
      tp = tp->older;
 8002020:	6949      	ldr	r1, [r1, #20]
      n--;
 8002022:	3801      	subs	r0, #1
    while (tp != (thread_t *)&ch.rlist) {
 8002024:	4299      	cmp	r1, r3
 8002026:	d1fb      	bne.n	8002020 <chSysIntegrityCheckI+0x70>
    if (n != (cnt_t)0) {
 8002028:	3000      	adds	r0, #0
 800202a:	bf18      	it	ne
 800202c:	2001      	movne	r0, #1
}
 800202e:	bc10      	pop	{r4}
 8002030:	4770      	bx	lr
      return true;
 8002032:	2001      	movs	r0, #1
}
 8002034:	bc10      	pop	{r4}
 8002036:	4770      	bx	lr
    while (tp != (thread_t *)&ch.rlist.queue) {
 8002038:	429c      	cmp	r4, r3
 800203a:	d0cd      	beq.n	8001fd8 <chSysIntegrityCheckI+0x28>
    n = (cnt_t)0;
 800203c:	2200      	movs	r2, #0
 800203e:	e7c6      	b.n	8001fce <chSysIntegrityCheckI+0x1e>
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8002040:	42a1      	cmp	r1, r4
 8002042:	d0de      	beq.n	8002002 <chSysIntegrityCheckI+0x52>
    n = (cnt_t)0;
 8002044:	2300      	movs	r3, #0
 8002046:	e7d7      	b.n	8001ff8 <chSysIntegrityCheckI+0x48>
    while (tp != (thread_t *)&ch.rlist) {
 8002048:	4291      	cmp	r1, r2
 800204a:	d1e9      	bne.n	8002020 <chSysIntegrityCheckI+0x70>
 800204c:	e7ef      	b.n	800202e <chSysIntegrityCheckI+0x7e>
 800204e:	bf00      	nop
 8002050:	200010f0 	.word	0x200010f0
	...

08002060 <rt_test_002_001_execute>:
  test_set_step(1);
 8002060:	2001      	movs	r0, #1
static void rt_test_002_001_execute(void) {
 8002062:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8002064:	4d23      	ldr	r5, [pc, #140]	; (80020f4 <rt_test_002_001_execute+0x94>)
 8002066:	2420      	movs	r4, #32
 8002068:	6028      	str	r0, [r5, #0]
 800206a:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 800206e:	f7ff ff9f 	bl	8001fb0 <chSysIntegrityCheckI>
 8002072:	2300      	movs	r3, #0
 8002074:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
 8002078:	f080 0001 	eor.w	r0, r0, #1
 800207c:	b2c0      	uxtb	r0, r0
 800207e:	491e      	ldr	r1, [pc, #120]	; (80020f8 <rt_test_002_001_execute+0x98>)
 8002080:	f7fe fc66 	bl	8000950 <_test_assert>
 8002084:	b100      	cbz	r0, 8002088 <rt_test_002_001_execute+0x28>
}
 8002086:	bd70      	pop	{r4, r5, r6, pc}
 8002088:	4606      	mov	r6, r0
  test_set_step(2);
 800208a:	2002      	movs	r0, #2
 800208c:	6028      	str	r0, [r5, #0]
 800208e:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 8002092:	f7ff ff8d 	bl	8001fb0 <chSysIntegrityCheckI>
 8002096:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "virtual timers list check failed");
 800209a:	f080 0001 	eor.w	r0, r0, #1
 800209e:	b2c0      	uxtb	r0, r0
 80020a0:	4916      	ldr	r1, [pc, #88]	; (80020fc <rt_test_002_001_execute+0x9c>)
 80020a2:	f7fe fc55 	bl	8000950 <_test_assert>
 80020a6:	4606      	mov	r6, r0
 80020a8:	2800      	cmp	r0, #0
 80020aa:	d1ec      	bne.n	8002086 <rt_test_002_001_execute+0x26>
  test_set_step(3);
 80020ac:	2303      	movs	r3, #3
 80020ae:	602b      	str	r3, [r5, #0]
 80020b0:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 80020b4:	2004      	movs	r0, #4
 80020b6:	f7ff ff7b 	bl	8001fb0 <chSysIntegrityCheckI>
 80020ba:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "registry list check failed");
 80020be:	f080 0001 	eor.w	r0, r0, #1
 80020c2:	b2c0      	uxtb	r0, r0
 80020c4:	490e      	ldr	r1, [pc, #56]	; (8002100 <rt_test_002_001_execute+0xa0>)
 80020c6:	f7fe fc43 	bl	8000950 <_test_assert>
 80020ca:	4606      	mov	r6, r0
 80020cc:	2800      	cmp	r0, #0
 80020ce:	d1da      	bne.n	8002086 <rt_test_002_001_execute+0x26>
  test_set_step(4);
 80020d0:	2304      	movs	r3, #4
 80020d2:	602b      	str	r3, [r5, #0]
 80020d4:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 80020d8:	2008      	movs	r0, #8
 80020da:	f7ff ff69 	bl	8001fb0 <chSysIntegrityCheckI>
 80020de:	f386 8811 	msr	BASEPRI, r6
}
 80020e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(result == false, "port layer check failed");
 80020e6:	f080 0001 	eor.w	r0, r0, #1
 80020ea:	b2c0      	uxtb	r0, r0
 80020ec:	4905      	ldr	r1, [pc, #20]	; (8002104 <rt_test_002_001_execute+0xa4>)
 80020ee:	f7fe bc2f 	b.w	8000950 <_test_assert>
 80020f2:	bf00      	nop
 80020f4:	20001a7c 	.word	0x20001a7c
 80020f8:	0800b1b8 	.word	0x0800b1b8
 80020fc:	0800b1d0 	.word	0x0800b1d0
 8002100:	0800b1f4 	.word	0x0800b1f4
 8002104:	0800b210 	.word	0x0800b210
	...

08002110 <_idle_thread>:
static void _idle_thread(void *p) {
 8002110:	e7fe      	b.n	8002110 <_idle_thread>
 8002112:	bf00      	nop
	...

08002120 <usbInitEndpointI>:
  if (epcp->in_state != NULL) {
 8002120:	6953      	ldr	r3, [r2, #20]
                      const USBEndpointConfig *epcp) {
 8002122:	b410      	push	{r4}
  usbp->epc[ep] = epcp;
 8002124:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8002128:	60e2      	str	r2, [r4, #12]
  if (epcp->in_state != NULL) {
 800212a:	b123      	cbz	r3, 8002136 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 800212c:	2400      	movs	r4, #0
 800212e:	601c      	str	r4, [r3, #0]
 8002130:	605c      	str	r4, [r3, #4]
 8002132:	609c      	str	r4, [r3, #8]
 8002134:	60dc      	str	r4, [r3, #12]
  if (epcp->out_state != NULL) {
 8002136:	6993      	ldr	r3, [r2, #24]
 8002138:	b123      	cbz	r3, 8002144 <usbInitEndpointI+0x24>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
}
 8002144:	bc10      	pop	{r4}
  usb_lld_init_endpoint(usbp, ep);
 8002146:	f7fe bdeb 	b.w	8000d20 <usb_lld_init_endpoint>
 800214a:	bf00      	nop
 800214c:	0000      	movs	r0, r0
	...

08002150 <usb_event>:
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8002150:	b570      	push	{r4, r5, r6, lr}
  switch (event) {
 8002152:	2905      	cmp	r1, #5
 8002154:	d812      	bhi.n	800217c <usb_event+0x2c>
 8002156:	e8df f001 	tbb	[pc, r1]
 800215a:	1147      	.short	0x1147
 800215c:	03474712 	.word	0x03474712
 8002160:	2320      	movs	r3, #32
 8002162:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8002166:	4c2e      	ldr	r4, [pc, #184]	; (8002220 <usb_event+0xd0>)
 8002168:	2101      	movs	r1, #1
 800216a:	1d20      	adds	r0, r4, #4
 800216c:	f7ff fd70 	bl	8001c50 <chEvtBroadcastFlagsI>
  bqResumeX(&sdup->ibqueue);
 8002170:	2300      	movs	r3, #0
 8002172:	7523      	strb	r3, [r4, #20]
  bqResumeX(&sdup->obqueue);
 8002174:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8002178:	f383 8811 	msr	BASEPRI, r3
}
 800217c:	bd70      	pop	{r4, r5, r6, pc}
 800217e:	4606      	mov	r6, r0
 8002180:	2320      	movs	r3, #32
 8002182:	f383 8811 	msr	BASEPRI, r3
  ibqp->bcounter  = 0;
 8002186:	2500      	movs	r5, #0
 8002188:	4c25      	ldr	r4, [pc, #148]	; (8002220 <usb_event+0xd0>)
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 800218a:	4a26      	ldr	r2, [pc, #152]	; (8002224 <usb_event+0xd4>)
 800218c:	2101      	movs	r1, #1
 800218e:	f7ff ffc7 	bl	8002120 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 8002192:	4630      	mov	r0, r6
 8002194:	4a24      	ldr	r2, [pc, #144]	; (8002228 <usb_event+0xd8>)
 8002196:	2102      	movs	r1, #2
 8002198:	f7ff ffc2 	bl	8002120 <usbInitEndpointI>
  ibqp->brdptr    = ibqp->buffers;
 800219c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  chThdDequeueAllI(tqp, msg);
 800219e:	f104 000c 	add.w	r0, r4, #12
 80021a2:	f06f 0101 	mvn.w	r1, #1
  ibqp->bwrptr    = ibqp->buffers;
 80021a6:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ibqp->bcounter  = 0;
 80021aa:	61a5      	str	r5, [r4, #24]
  ibqp->top       = NULL;
 80021ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80021b0:	f7ff fe2e 	bl	8001e10 <chThdDequeueAllI>
  obqp->brdptr    = obqp->buffers;
 80021b4:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 80021b8:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80021bc:	f06f 0101 	mvn.w	r1, #1
  obqp->bcounter  = bqSizeX(obqp);
 80021c0:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->bwrptr    = obqp->buffers;
 80021c2:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  bqResumeX(&sdup->ibqueue);
 80021c6:	7525      	strb	r5, [r4, #20]
  obqp->top       = NULL;
 80021c8:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
 80021cc:	f7ff fe20 	bl	8001e10 <chThdDequeueAllI>
  chEvtBroadcastFlagsI(esp, flags);
 80021d0:	1d20      	adds	r0, r4, #4
 80021d2:	2101      	movs	r1, #1
  bqResumeX(&sdup->obqueue);
 80021d4:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 80021d8:	f7ff fd3a 	bl	8001c50 <chEvtBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 80021dc:	4620      	mov	r0, r4
 80021de:	f7ff f997 	bl	8001510 <sdu_start_receive>
 80021e2:	f385 8811 	msr	BASEPRI, r5
}
 80021e6:	bd70      	pop	{r4, r5, r6, pc}
 80021e8:	2320      	movs	r3, #32
 80021ea:	f383 8811 	msr	BASEPRI, r3
  bqSuspendI(&sdup->ibqueue);
 80021ee:	2501      	movs	r5, #1
 80021f0:	4c0b      	ldr	r4, [pc, #44]	; (8002220 <usb_event+0xd0>)
 80021f2:	2102      	movs	r1, #2
 80021f4:	1d20      	adds	r0, r4, #4
 80021f6:	f7ff fd2b 	bl	8001c50 <chEvtBroadcastFlagsI>
  chThdDequeueAllI(tqp, msg);
 80021fa:	f104 000c 	add.w	r0, r4, #12
 80021fe:	f06f 0101 	mvn.w	r1, #1
 8002202:	7525      	strb	r5, [r4, #20]
 8002204:	f7ff fe04 	bl	8001e10 <chThdDequeueAllI>
 8002208:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800220c:	f06f 0101 	mvn.w	r1, #1
  bqSuspendI(&sdup->obqueue);
 8002210:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8002214:	f7ff fdfc 	bl	8001e10 <chThdDequeueAllI>
 8002218:	2300      	movs	r3, #0
 800221a:	f383 8811 	msr	BASEPRI, r3
 800221e:	bd70      	pop	{r4, r5, r6, pc}
 8002220:	20000954 	.word	0x20000954
 8002224:	0800a318 	.word	0x0800a318
 8002228:	0800a33c 	.word	0x0800a33c
 800222c:	00000000 	.word	0x00000000

08002230 <parse_arguments>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static char *parse_arguments(char *str, char **saveptr) {
 8002230:	b538      	push	{r3, r4, r5, lr}
 8002232:	460d      	mov	r5, r1
  char *p;

  if (str != NULL)
 8002234:	b1e8      	cbz	r0, 8002272 <parse_arguments+0x42>
 8002236:	4604      	mov	r4, r0
    *saveptr = str;
 8002238:	6028      	str	r0, [r5, #0]
  if (!p) {
    return NULL;
  }

  /* Skipping white space.*/
  p += strspn(p, " \t");
 800223a:	4911      	ldr	r1, [pc, #68]	; (8002280 <parse_arguments+0x50>)
 800223c:	4620      	mov	r0, r4
 800223e:	f007 fe4d 	bl	8009edc <strspn>

  if (*p == '"') {
 8002242:	5c21      	ldrb	r1, [r4, r0]
  p += strspn(p, " \t");
 8002244:	4404      	add	r4, r0
  if (*p == '"') {
 8002246:	2922      	cmp	r1, #34	; 0x22
 8002248:	d00d      	beq.n	8002266 <parse_arguments+0x36>
    p++;
    *saveptr = strpbrk(p, "\"");
  }
  else {
    /* The delimiter is white space.*/
    *saveptr = strpbrk(p, " \t");
 800224a:	490d      	ldr	r1, [pc, #52]	; (8002280 <parse_arguments+0x50>)
 800224c:	4620      	mov	r0, r4
 800224e:	f007 fe23 	bl	8009e98 <strpbrk>
 8002252:	6028      	str	r0, [r5, #0]
  }

  /* Replacing the delimiter with a zero.*/
  if (*saveptr != NULL) {
 8002254:	b118      	cbz	r0, 800225e <parse_arguments+0x2e>
    *(*saveptr)++ = '\0';
 8002256:	2300      	movs	r3, #0
 8002258:	1c42      	adds	r2, r0, #1
 800225a:	602a      	str	r2, [r5, #0]
 800225c:	7003      	strb	r3, [r0, #0]
  }

  return *p != '\0' ? p : NULL;
 800225e:	7823      	ldrb	r3, [r4, #0]
 8002260:	b153      	cbz	r3, 8002278 <parse_arguments+0x48>
}
 8002262:	4620      	mov	r0, r4
 8002264:	bd38      	pop	{r3, r4, r5, pc}
    p++;
 8002266:	3401      	adds	r4, #1
    *saveptr = strpbrk(p, "\"");
 8002268:	4620      	mov	r0, r4
 800226a:	f007 fd25 	bl	8009cb8 <strchr>
 800226e:	6028      	str	r0, [r5, #0]
 8002270:	e7f0      	b.n	8002254 <parse_arguments+0x24>
  p = *saveptr;
 8002272:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 8002274:	2c00      	cmp	r4, #0
 8002276:	d1e0      	bne.n	800223a <parse_arguments+0xa>
  return *p != '\0' ? p : NULL;
 8002278:	2400      	movs	r4, #0
}
 800227a:	4620      	mov	r0, r4
 800227c:	bd38      	pop	{r3, r4, r5, pc}
 800227e:	bf00      	nop
 8002280:	0800a720 	.word	0x0800a720
	...

08002290 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002290:	b40e      	push	{r1, r2, r3}
 8002292:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002296:	4604      	mov	r4, r0
  int n = 0;
 8002298:	f04f 0800 	mov.w	r8, #0
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 800229c:	b086      	sub	sp, #24
 800229e:	af0f      	add	r7, sp, #60	; 0x3c
 80022a0:	f857 6b04 	ldr.w	r6, [r7], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80022a4:	9702      	str	r7, [sp, #8]
    c = *fmt++;
 80022a6:	7831      	ldrb	r1, [r6, #0]
 80022a8:	1c72      	adds	r2, r6, #1
    if (c == 0)
 80022aa:	b161      	cbz	r1, 80022c6 <chprintf+0x36>
    if (c != '%') {
 80022ac:	2925      	cmp	r1, #37	; 0x25
 80022ae:	d010      	beq.n	80022d2 <chprintf+0x42>
    c = *fmt++;
 80022b0:	4616      	mov	r6, r2
      streamPut(chp, (uint8_t)c);
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	4620      	mov	r0, r4
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4798      	blx	r3
    c = *fmt++;
 80022ba:	7831      	ldrb	r1, [r6, #0]
      n++;
 80022bc:	f108 0801 	add.w	r8, r8, #1
    c = *fmt++;
 80022c0:	1c72      	adds	r2, r6, #1
    if (c == 0)
 80022c2:	2900      	cmp	r1, #0
 80022c4:	d1f2      	bne.n	80022ac <chprintf+0x1c>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 80022c6:	4640      	mov	r0, r8
 80022c8:	b006      	add	sp, #24
 80022ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022ce:	b003      	add	sp, #12
 80022d0:	4770      	bx	lr
    if (*fmt == '-') {
 80022d2:	7871      	ldrb	r1, [r6, #1]
    width = 0;
 80022d4:	f04f 0900 	mov.w	r9, #0
    if (*fmt == '-') {
 80022d8:	292d      	cmp	r1, #45	; 0x2d
 80022da:	bf03      	ittte	eq
 80022dc:	78b1      	ldrbeq	r1, [r6, #2]
      fmt++;
 80022de:	1cb2      	addeq	r2, r6, #2
      left_align = TRUE;
 80022e0:	2001      	moveq	r0, #1
    left_align = FALSE;
 80022e2:	2000      	movne	r0, #0
    if (*fmt == '0') {
 80022e4:	2930      	cmp	r1, #48	; 0x30
 80022e6:	bf03      	ittte	eq
 80022e8:	7851      	ldrbeq	r1, [r2, #1]
      fmt++;
 80022ea:	3201      	addeq	r2, #1
      filler = '0';
 80022ec:	2530      	moveq	r5, #48	; 0x30
    filler = ' ';
 80022ee:	2520      	movne	r5, #32
 80022f0:	3201      	adds	r2, #1
 80022f2:	e005      	b.n	8002300 <chprintf+0x70>
        c = va_arg(ap, int);
 80022f4:	783b      	ldrb	r3, [r7, #0]
 80022f6:	3704      	adds	r7, #4
 80022f8:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
 80022fc:	eb03 0946 	add.w	r9, r3, r6, lsl #1
      if (c >= '0' && c <= '9')
 8002300:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b09      	cmp	r3, #9
      c = *fmt++;
 8002308:	4694      	mov	ip, r2
      width = width * 10 + c;
 800230a:	eb09 0689 	add.w	r6, r9, r9, lsl #2
      if (c >= '0' && c <= '9')
 800230e:	d9f3      	bls.n	80022f8 <chprintf+0x68>
      else if (c == '*')
 8002310:	292a      	cmp	r1, #42	; 0x2a
 8002312:	d0ef      	beq.n	80022f4 <chprintf+0x64>
    if (c == '.') {
 8002314:	292e      	cmp	r1, #46	; 0x2e
    precision = 0;
 8002316:	f04f 0200 	mov.w	r2, #0
    if (c == '.') {
 800231a:	d048      	beq.n	80023ae <chprintf+0x11e>
    if (c == 'l' || c == 'L') {
 800231c:	f001 03df 	and.w	r3, r1, #223	; 0xdf
 8002320:	2b4c      	cmp	r3, #76	; 0x4c
 8002322:	f10c 0601 	add.w	r6, ip, #1
 8002326:	d04e      	beq.n	80023c6 <chprintf+0x136>
      is_long = (c >= 'A') && (c <= 'Z');
 8002328:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    switch (c) {
 800232c:	f1a1 0644 	sub.w	r6, r1, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
 8002330:	b2db      	uxtb	r3, r3
    switch (c) {
 8002332:	2e34      	cmp	r6, #52	; 0x34
 8002334:	f200 811f 	bhi.w	8002576 <chprintf+0x2e6>
 8002338:	e8df f016 	tbh	[pc, r6, lsl #1]
 800233c:	011d016f 	.word	0x011d016f
 8002340:	011d011d 	.word	0x011d011d
 8002344:	016f011d 	.word	0x016f011d
 8002348:	011d011d 	.word	0x011d011d
 800234c:	011d011d 	.word	0x011d011d
 8002350:	0119011d 	.word	0x0119011d
 8002354:	011d011d 	.word	0x011d011d
 8002358:	011d011d 	.word	0x011d011d
 800235c:	00e7011d 	.word	0x00e7011d
 8002360:	011d011d 	.word	0x011d011d
 8002364:	011d0178 	.word	0x011d0178
 8002368:	011d011d 	.word	0x011d011d
 800236c:	011d011d 	.word	0x011d011d
 8002370:	011d011d 	.word	0x011d011d
 8002374:	011d011d 	.word	0x011d011d
 8002378:	008f011d 	.word	0x008f011d
 800237c:	011d016f 	.word	0x011d016f
 8002380:	011d011d 	.word	0x011d011d
 8002384:	016f011d 	.word	0x016f011d
 8002388:	011d011d 	.word	0x011d011d
 800238c:	011d011d 	.word	0x011d011d
 8002390:	0119011d 	.word	0x0119011d
 8002394:	011d011d 	.word	0x011d011d
 8002398:	006d011d 	.word	0x006d011d
 800239c:	00e7011d 	.word	0x00e7011d
 80023a0:	011d011d 	.word	0x011d011d
 80023a4:	0178      	.short	0x0178
          c = va_arg(ap, int);
 80023a6:	783b      	ldrb	r3, [r7, #0]
 80023a8:	3704      	adds	r7, #4
        precision += c;
 80023aa:	eb03 0246 	add.w	r2, r3, r6, lsl #1
        c = *fmt++;
 80023ae:	f81c 1b01 	ldrb.w	r1, [ip], #1
        precision *= 10;
 80023b2:	eb02 0682 	add.w	r6, r2, r2, lsl #2
        if (c >= '0' && c <= '9')
 80023b6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b09      	cmp	r3, #9
 80023be:	d9f4      	bls.n	80023aa <chprintf+0x11a>
        else if (c == '*')
 80023c0:	292a      	cmp	r1, #42	; 0x2a
 80023c2:	d0f0      	beq.n	80023a6 <chprintf+0x116>
 80023c4:	e7aa      	b.n	800231c <chprintf+0x8c>
      if (*fmt)
 80023c6:	f89c 3000 	ldrb.w	r3, [ip]
 80023ca:	b30b      	cbz	r3, 8002410 <chprintf+0x180>
    switch (c) {
 80023cc:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 80023d0:	2934      	cmp	r1, #52	; 0x34
 80023d2:	f200 80d2 	bhi.w	800257a <chprintf+0x2ea>
 80023d6:	e8df f001 	tbb	[pc, r1]
 80023da:	d0e1      	.short	0xd0e1
 80023dc:	e1d0d0d0 	.word	0xe1d0d0d0
 80023e0:	d0d0d0d0 	.word	0xd0d0d0d0
 80023e4:	d0d0cbd0 	.word	0xd0d0cbd0
 80023e8:	99d0d0d0 	.word	0x99d0d0d0
 80023ec:	d0ded0d0 	.word	0xd0ded0d0
 80023f0:	d0d0d0d0 	.word	0xd0d0d0d0
 80023f4:	d0d0d0d0 	.word	0xd0d0d0d0
 80023f8:	d0e141d0 	.word	0xd0e141d0
 80023fc:	e1d0d0d0 	.word	0xe1d0d0d0
 8002400:	d0d0d0d0 	.word	0xd0d0d0d0
 8002404:	d0d0cbd0 	.word	0xd0d0cbd0
 8002408:	99d01fd0 	.word	0x99d01fd0
 800240c:	d0d0      	.short	0xd0d0
 800240e:	de          	.byte	0xde
 800240f:	00          	.byte	0x00
      if (*fmt)
 8002410:	460b      	mov	r3, r1
 8002412:	4666      	mov	r6, ip
 8002414:	e7da      	b.n	80023cc <chprintf+0x13c>
    switch (c) {
 8002416:	4666      	mov	r6, ip
      if ((s = va_arg(ap, char *)) == 0)
 8002418:	f8d7 a000 	ldr.w	sl, [r7]
 800241c:	3704      	adds	r7, #4
 800241e:	f1ba 0f00 	cmp.w	sl, #0
 8002422:	f000 8107 	beq.w	8002634 <chprintf+0x3a4>
 8002426:	f89a 3000 	ldrb.w	r3, [sl]
 800242a:	4655      	mov	r5, sl
      if (precision == 0)
 800242c:	2a00      	cmp	r2, #0
 800242e:	f040 8108 	bne.w	8002642 <chprintf+0x3b2>
      for (p = s; *p && (--precision >= 0); p++)
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8115 	beq.w	8002662 <chprintf+0x3d2>
 8002438:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800243c:	4653      	mov	r3, sl
 800243e:	e001      	b.n	8002444 <chprintf+0x1b4>
 8002440:	3a01      	subs	r2, #1
 8002442:	d403      	bmi.n	800244c <chprintf+0x1bc>
 8002444:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002448:	2900      	cmp	r1, #0
 800244a:	d1f9      	bne.n	8002440 <chprintf+0x1b0>
 800244c:	1b5b      	subs	r3, r3, r5
 800244e:	eba9 0903 	sub.w	r9, r9, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	9300      	str	r3, [sp, #0]
      filler = ' ';
 8002456:	2520      	movs	r5, #32
 8002458:	e00b      	b.n	8002472 <chprintf+0x1e2>
    switch (c) {
 800245a:	4666      	mov	r6, ip
      *p++ = va_arg(ap, int);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	f10d 0a18 	add.w	sl, sp, #24
 8002462:	f80a 3d0c 	strb.w	r3, [sl, #-12]!
 8002466:	2300      	movs	r3, #0
      filler = ' ';
 8002468:	2520      	movs	r5, #32
 800246a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
      *p++ = va_arg(ap, int);
 800246e:	3704      	adds	r7, #4
 8002470:	9300      	str	r3, [sp, #0]
    if ((width -= i) < 0)
 8002472:	f1b9 0f00 	cmp.w	r9, #0
 8002476:	db21      	blt.n	80024bc <chprintf+0x22c>
    if (left_align == FALSE)
 8002478:	2800      	cmp	r0, #0
 800247a:	f040 8088 	bne.w	800258e <chprintf+0x2fe>
      width = -width;
 800247e:	f1c9 0300 	rsb	r3, r9, #0
    if (width < 0) {
 8002482:	f1b9 0f00 	cmp.w	r9, #0
 8002486:	f000 8081 	beq.w	800258c <chprintf+0x2fc>
      if (*s == '-' && filler == '0') {
 800248a:	f89a 1000 	ldrb.w	r1, [sl]
 800248e:	6822      	ldr	r2, [r4, #0]
 8002490:	292d      	cmp	r1, #45	; 0x2d
 8002492:	6892      	ldr	r2, [r2, #8]
 8002494:	f000 80af 	beq.w	80025f6 <chprintf+0x366>
 8002498:	469b      	mov	fp, r3
 800249a:	e001      	b.n	80024a0 <chprintf+0x210>
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
        streamPut(chp, (uint8_t)filler);
 80024a0:	4629      	mov	r1, r5
 80024a2:	4620      	mov	r0, r4
 80024a4:	4790      	blx	r2
      } while (++width != 0);
 80024a6:	f11b 0b01 	adds.w	fp, fp, #1
 80024aa:	d1f7      	bne.n	800249c <chprintf+0x20c>
    while (--i >= 0) {
 80024ac:	9a00      	ldr	r2, [sp, #0]
 80024ae:	465b      	mov	r3, fp
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	44c8      	add	r8, r9
 80024b4:	f6ff aef7 	blt.w	80022a6 <chprintf+0x16>
 80024b8:	4699      	mov	r9, r3
 80024ba:	e005      	b.n	80024c8 <chprintf+0x238>
 80024bc:	9b00      	ldr	r3, [sp, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f6ff aef1 	blt.w	80022a6 <chprintf+0x16>
      width = 0;
 80024c4:	f04f 0900 	mov.w	r9, #0
      width = -width;
 80024c8:	f8dd b000 	ldr.w	fp, [sp]
      streamPut(chp, (uint8_t)*s++);
 80024cc:	6823      	ldr	r3, [r4, #0]
    while (--i >= 0) {
 80024ce:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)*s++);
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80024d8:	4620      	mov	r0, r4
 80024da:	4798      	blx	r3
    while (--i >= 0) {
 80024dc:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 80024e0:	d1f4      	bne.n	80024cc <chprintf+0x23c>
 80024e2:	9b00      	ldr	r3, [sp, #0]
 80024e4:	f108 0801 	add.w	r8, r8, #1
 80024e8:	4443      	add	r3, r8
 80024ea:	4698      	mov	r8, r3
    while (width) {
 80024ec:	f1b9 0f00 	cmp.w	r9, #0
 80024f0:	f43f aed9 	beq.w	80022a6 <chprintf+0x16>
 80024f4:	46ca      	mov	sl, r9
      streamPut(chp, (uint8_t)filler);
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	4629      	mov	r1, r5
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4620      	mov	r0, r4
 80024fe:	4798      	blx	r3
    while (width) {
 8002500:	f1ba 0a01 	subs.w	sl, sl, #1
 8002504:	d1f7      	bne.n	80024f6 <chprintf+0x266>
 8002506:	44c8      	add	r8, r9
 8002508:	e6cd      	b.n	80022a6 <chprintf+0x16>
    switch (c) {
 800250a:	4666      	mov	r6, ip
    case 'U':
 800250c:	f04f 0e0a 	mov.w	lr, #10
 8002510:	f857 2b04 	ldr.w	r2, [r7], #4
  q = p + MAX_FILLER;
 8002514:	f10d 0117 	add.w	r1, sp, #23
 8002518:	e000      	b.n	800251c <chprintf+0x28c>
  } while ((ll /= radix) != 0);
 800251a:	4659      	mov	r1, fp
    i = (int)(l % radix);
 800251c:	fbb2 fcfe 	udiv	ip, r2, lr
 8002520:	fb0e 221c 	mls	r2, lr, ip, r2
    i += '0';
 8002524:	f102 0330 	add.w	r3, r2, #48	; 0x30
    if (i > '9')
 8002528:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 800252a:	bfc8      	it	gt
 800252c:	f102 0337 	addgt.w	r3, r2, #55	; 0x37
    l /= radix;
 8002530:	4662      	mov	r2, ip
    *--q = i;
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002538:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
  } while ((ll /= radix) != 0);
 800253c:	2a00      	cmp	r2, #0
 800253e:	d1ec      	bne.n	800251a <chprintf+0x28a>
 8002540:	460a      	mov	r2, r1
  i = (int)(p + MAX_FILLER - q);
 8002542:	f10d 0117 	add.w	r1, sp, #23
 8002546:	f10d 0a0c 	add.w	sl, sp, #12
 800254a:	eba1 0e0b 	sub.w	lr, r1, fp
 800254e:	46d4      	mov	ip, sl
 8002550:	eb0b 010e 	add.w	r1, fp, lr
 8002554:	e001      	b.n	800255a <chprintf+0x2ca>
 8002556:	f812 3b01 	ldrb.w	r3, [r2], #1
  while (--i);
 800255a:	428a      	cmp	r2, r1
    *p++ = *q++;
 800255c:	f80c 3b01 	strb.w	r3, [ip], #1
  while (--i);
 8002560:	d1f9      	bne.n	8002556 <chprintf+0x2c6>
 8002562:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8002566:	eba9 090e 	sub.w	r9, r9, lr
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	e781      	b.n	8002472 <chprintf+0x1e2>
    switch (c) {
 800256e:	4666      	mov	r6, ip
    case 'O':
 8002570:	f04f 0e08 	mov.w	lr, #8
 8002574:	e7cc      	b.n	8002510 <chprintf+0x280>
    switch (c) {
 8002576:	4666      	mov	r6, ip
 8002578:	460b      	mov	r3, r1
      *p++ = c;
 800257a:	2200      	movs	r2, #0
 800257c:	f10d 0a18 	add.w	sl, sp, #24
 8002580:	9200      	str	r2, [sp, #0]
 8002582:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002586:	f80a 3d0c 	strb.w	r3, [sl, #-12]!
 800258a:	e772      	b.n	8002472 <chprintf+0x1e2>
      width = -width;
 800258c:	4699      	mov	r9, r3
    while (--i >= 0) {
 800258e:	9b00      	ldr	r3, [sp, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	da99      	bge.n	80024c8 <chprintf+0x238>
 8002594:	e7aa      	b.n	80024ec <chprintf+0x25c>
    switch (c) {
 8002596:	f04f 0e10 	mov.w	lr, #16
 800259a:	e7b9      	b.n	8002510 <chprintf+0x280>
 800259c:	1d39      	adds	r1, r7, #4
        l = va_arg(ap, long);
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	460f      	mov	r7, r1
      if (l < 0) {
 80025a2:	2a00      	cmp	r2, #0
 80025a4:	db54      	blt.n	8002650 <chprintf+0x3c0>
    p = tmpbuf;
 80025a6:	f10d 0a0c 	add.w	sl, sp, #12
 80025aa:	46d6      	mov	lr, sl
  q = p + MAX_FILLER;
 80025ac:	f10e 0b0b 	add.w	fp, lr, #11
 80025b0:	4659      	mov	r1, fp
    i = (int)(l % radix);
 80025b2:	4b2e      	ldr	r3, [pc, #184]	; (800266c <chprintf+0x3dc>)
 80025b4:	fba3 c302 	umull	ip, r3, r3, r2
 80025b8:	08db      	lsrs	r3, r3, #3
 80025ba:	469c      	mov	ip, r3
 80025bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025c0:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
  } while ((ll /= radix) != 0);
 80025c4:	4662      	mov	r2, ip
    i += '0';
 80025c6:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while ((ll /= radix) != 0);
 80025ce:	2a00      	cmp	r2, #0
 80025d0:	d1ef      	bne.n	80025b2 <chprintf+0x322>
  i = (int)(p + MAX_FILLER - q);
 80025d2:	ebab 0201 	sub.w	r2, fp, r1
 80025d6:	4472      	add	r2, lr
 80025d8:	e001      	b.n	80025de <chprintf+0x34e>
 80025da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    *p++ = *q++;
 80025de:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
 80025e2:	4596      	cmp	lr, r2
 80025e4:	d1f9      	bne.n	80025da <chprintf+0x34a>
 80025e6:	ebae 0e0a 	sub.w	lr, lr, sl
 80025ea:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 80025ee:	eba9 090e 	sub.w	r9, r9, lr
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	e73d      	b.n	8002472 <chprintf+0x1e2>
      if (*s == '-' && filler == '0') {
 80025f6:	2d30      	cmp	r5, #48	; 0x30
 80025f8:	f47f af4e 	bne.w	8002498 <chprintf+0x208>
        streamPut(chp, (uint8_t)*s++);
 80025fc:	4620      	mov	r0, r4
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	4790      	blx	r2
 8002602:	9b00      	ldr	r3, [sp, #0]
 8002604:	6822      	ldr	r2, [r4, #0]
 8002606:	3b01      	subs	r3, #1
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	9b01      	ldr	r3, [sp, #4]
 800260c:	f108 0801 	add.w	r8, r8, #1
 8002610:	6892      	ldr	r2, [r2, #8]
 8002612:	f10a 0a01 	add.w	sl, sl, #1
 8002616:	469b      	mov	fp, r3
 8002618:	e742      	b.n	80024a0 <chprintf+0x210>
 800261a:	4639      	mov	r1, r7
 800261c:	f851 2b04 	ldr.w	r2, [r1], #4
      if (is_long)
 8002620:	2b19      	cmp	r3, #25
 8002622:	4666      	mov	r6, ip
        l = va_arg(ap, int);
 8002624:	bf88      	it	hi
 8002626:	460f      	movhi	r7, r1
      if (is_long)
 8002628:	d8bb      	bhi.n	80025a2 <chprintf+0x312>
 800262a:	e7b8      	b.n	800259e <chprintf+0x30e>
    switch (c) {
 800262c:	4666      	mov	r6, ip
 800262e:	f04f 0e10 	mov.w	lr, #16
 8002632:	e76d      	b.n	8002510 <chprintf+0x280>
 8002634:	4d0e      	ldr	r5, [pc, #56]	; (8002670 <chprintf+0x3e0>)
      if (precision == 0)
 8002636:	46aa      	mov	sl, r5
 8002638:	2a00      	cmp	r2, #0
 800263a:	f43f aefd 	beq.w	8002438 <chprintf+0x1a8>
      for (p = s; *p && (--precision >= 0); p++)
 800263e:	3a01      	subs	r2, #1
 8002640:	e6fc      	b.n	800243c <chprintf+0x1ac>
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1fb      	bne.n	800263e <chprintf+0x3ae>
 8002646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      filler = ' ';
 800264a:	2520      	movs	r5, #32
      for (p = s; *p && (--precision >= 0); p++)
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	e710      	b.n	8002472 <chprintf+0x1e2>
        *p++ = '-';
 8002650:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002652:	4252      	negs	r2, r2
        *p++ = '-';
 8002654:	f88d 300c 	strb.w	r3, [sp, #12]
 8002658:	f10d 0e0d 	add.w	lr, sp, #13
 800265c:	f10d 0a0c 	add.w	sl, sp, #12
 8002660:	e7a4      	b.n	80025ac <chprintf+0x31c>
      for (p = s; *p && (--precision >= 0); p++)
 8002662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      filler = ' ';
 8002666:	2520      	movs	r5, #32
      for (p = s; *p && (--precision >= 0); p++)
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	e705      	b.n	8002478 <chprintf+0x1e8>
 800266c:	cccccccd 	.word	0xcccccccd
 8002670:	0800a02c 	.word	0x0800a02c
	...

08002680 <_ZL9send2UARTP20BaseSequentialStreamiPPc>:

static void send2UART(BaseSequentialStream *chp, int argc, char *argv[])
{
	(void)argv;
	(void)argc;
	chprintf(chp, "\r\n\nreceived\r\n");
 8002680:	4901      	ldr	r1, [pc, #4]	; (8002688 <_ZL9send2UARTP20BaseSequentialStreamiPPc+0x8>)
 8002682:	f7ff be05 	b.w	8002290 <chprintf>
 8002686:	bf00      	nop
 8002688:	08009f30 	.word	0x08009f30
 800268c:	00000000 	.word	0x00000000

08002690 <cmd_systime>:

#if (SHELL_CMD_SYSTIME_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8002690:	2900      	cmp	r1, #0
 8002692:	dd03      	ble.n	800269c <cmd_systime+0xc>
    shellUsage(chp, "systime");
 8002694:	4a08      	ldr	r2, [pc, #32]	; (80026b8 <cmd_systime+0x28>)
 8002696:	4909      	ldr	r1, [pc, #36]	; (80026bc <cmd_systime+0x2c>)
 8002698:	f7ff bdfa 	b.w	8002290 <chprintf>
 800269c:	2320      	movs	r3, #32
 800269e:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 80026a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026a6:	2300      	movs	r3, #0
 80026a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026aa:	f383 8811 	msr	BASEPRI, r3
    return;
  }
  chprintf(chp, "%lu"SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 80026ae:	4904      	ldr	r1, [pc, #16]	; (80026c0 <cmd_systime+0x30>)
 80026b0:	b292      	uxth	r2, r2
 80026b2:	f7ff bded 	b.w	8002290 <chprintf>
 80026b6:	bf00      	nop
 80026b8:	0800a24c 	.word	0x0800a24c
 80026bc:	0800a254 	.word	0x0800a254
 80026c0:	0800a260 	.word	0x0800a260
	...

080026d0 <cmd_echo>:
  if (argc != 1) {
 80026d0:	2901      	cmp	r1, #1
 80026d2:	d003      	beq.n	80026dc <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 80026d4:	4a03      	ldr	r2, [pc, #12]	; (80026e4 <cmd_echo+0x14>)
 80026d6:	4904      	ldr	r1, [pc, #16]	; (80026e8 <cmd_echo+0x18>)
 80026d8:	f7ff bdda 	b.w	8002290 <chprintf>
  chprintf(chp, "%s"SHELL_NEWLINE_STR, argv[0]);
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	4903      	ldr	r1, [pc, #12]	; (80026ec <cmd_echo+0x1c>)
 80026e0:	f7ff bdd6 	b.w	8002290 <chprintf>
 80026e4:	0800a034 	.word	0x0800a034
 80026e8:	0800a254 	.word	0x0800a254
 80026ec:	0800a044 	.word	0x0800a044

080026f0 <cmd_info>:
  if (argc > 0) {
 80026f0:	2900      	cmp	r1, #0
 80026f2:	dd03      	ble.n	80026fc <cmd_info+0xc>
    shellUsage(chp, "info");
 80026f4:	4a19      	ldr	r2, [pc, #100]	; (800275c <cmd_info+0x6c>)
 80026f6:	491a      	ldr	r1, [pc, #104]	; (8002760 <cmd_info+0x70>)
 80026f8:	f7ff bdca 	b.w	8002290 <chprintf>
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 80026fc:	b510      	push	{r4, lr}
 80026fe:	4604      	mov	r4, r0
 8002700:	b082      	sub	sp, #8
  chprintf(chp, "Kernel:       %s"SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 8002702:	4a18      	ldr	r2, [pc, #96]	; (8002764 <cmd_info+0x74>)
 8002704:	4918      	ldr	r1, [pc, #96]	; (8002768 <cmd_info+0x78>)
 8002706:	f7ff fdc3 	bl	8002290 <chprintf>
  chprintf(chp, "Compiler:     %s"SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 800270a:	4a18      	ldr	r2, [pc, #96]	; (800276c <cmd_info+0x7c>)
 800270c:	4918      	ldr	r1, [pc, #96]	; (8002770 <cmd_info+0x80>)
 800270e:	4620      	mov	r0, r4
 8002710:	f7ff fdbe 	bl	8002290 <chprintf>
  chprintf(chp, "Architecture: %s"SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 8002714:	4a17      	ldr	r2, [pc, #92]	; (8002774 <cmd_info+0x84>)
 8002716:	4918      	ldr	r1, [pc, #96]	; (8002778 <cmd_info+0x88>)
 8002718:	4620      	mov	r0, r4
 800271a:	f7ff fdb9 	bl	8002290 <chprintf>
  chprintf(chp, "Core Variant: %s"SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 800271e:	4a17      	ldr	r2, [pc, #92]	; (800277c <cmd_info+0x8c>)
 8002720:	4917      	ldr	r1, [pc, #92]	; (8002780 <cmd_info+0x90>)
 8002722:	4620      	mov	r0, r4
 8002724:	f7ff fdb4 	bl	8002290 <chprintf>
  chprintf(chp, "Port Info:    %s"SHELL_NEWLINE_STR, PORT_INFO);
 8002728:	4a16      	ldr	r2, [pc, #88]	; (8002784 <cmd_info+0x94>)
 800272a:	4917      	ldr	r1, [pc, #92]	; (8002788 <cmd_info+0x98>)
 800272c:	4620      	mov	r0, r4
 800272e:	f7ff fdaf 	bl	8002290 <chprintf>
  chprintf(chp, "Platform:     %s"SHELL_NEWLINE_STR, PLATFORM_NAME);
 8002732:	4a16      	ldr	r2, [pc, #88]	; (800278c <cmd_info+0x9c>)
 8002734:	4916      	ldr	r1, [pc, #88]	; (8002790 <cmd_info+0xa0>)
 8002736:	4620      	mov	r0, r4
 8002738:	f7ff fdaa 	bl	8002290 <chprintf>
  chprintf(chp, "Board:        %s"SHELL_NEWLINE_STR, BOARD_NAME);
 800273c:	4a15      	ldr	r2, [pc, #84]	; (8002794 <cmd_info+0xa4>)
 800273e:	4916      	ldr	r1, [pc, #88]	; (8002798 <cmd_info+0xa8>)
 8002740:	4620      	mov	r0, r4
 8002742:	f7ff fda5 	bl	8002290 <chprintf>
  chprintf(chp, "Build time:   %s%s%s"SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <cmd_info+0xac>)
 8002748:	4620      	mov	r0, r4
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <cmd_info+0xb0>)
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <cmd_info+0xb4>)
 8002750:	4915      	ldr	r1, [pc, #84]	; (80027a8 <cmd_info+0xb8>)
 8002752:	f7ff fd9d 	bl	8002290 <chprintf>
}
 8002756:	b002      	add	sp, #8
 8002758:	bd10      	pop	{r4, pc}
 800275a:	bf00      	nop
 800275c:	0800a04c 	.word	0x0800a04c
 8002760:	0800a254 	.word	0x0800a254
 8002764:	0800a054 	.word	0x0800a054
 8002768:	0800a05c 	.word	0x0800a05c
 800276c:	0800a070 	.word	0x0800a070
 8002770:	0800a0b8 	.word	0x0800a0b8
 8002774:	0800a0cc 	.word	0x0800a0cc
 8002778:	0800a0d4 	.word	0x0800a0d4
 800277c:	0800a0e8 	.word	0x0800a0e8
 8002780:	0800a0f4 	.word	0x0800a0f4
 8002784:	0800a108 	.word	0x0800a108
 8002788:	0800a120 	.word	0x0800a120
 800278c:	0800a134 	.word	0x0800a134
 8002790:	0800a160 	.word	0x0800a160
 8002794:	0800a174 	.word	0x0800a174
 8002798:	0800a188 	.word	0x0800a188
 800279c:	0800a1c4 	.word	0x0800a1c4
 80027a0:	0800a1a0 	.word	0x0800a1a0
 80027a4:	0800a19c 	.word	0x0800a19c
 80027a8:	0800a1ac 	.word	0x0800a1ac
 80027ac:	00000000 	.word	0x00000000

080027b0 <rt_test_010_012_execute>:
 */

static void rt_test_010_012_execute(void) {

  /* [10.12.1] The size of the system area is printed.*/
  test_set_step(1);
 80027b0:	2301      	movs	r3, #1
static void rt_test_010_012_execute(void) {
 80027b2:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 80027b4:	4d32      	ldr	r5, [pc, #200]	; (8002880 <rt_test_010_012_execute+0xd0>)
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
 80027b6:	4c33      	ldr	r4, [pc, #204]	; (8002884 <rt_test_010_012_execute+0xd4>)
    test_print("--- System: ");
 80027b8:	4833      	ldr	r0, [pc, #204]	; (8002888 <rt_test_010_012_execute+0xd8>)
  test_set_step(1);
 80027ba:	602b      	str	r3, [r5, #0]
    test_print("--- System: ");
 80027bc:	f7fe f9c8 	bl	8000b50 <test_print>
 80027c0:	2074      	movs	r0, #116	; 0x74
 80027c2:	f7fe f925 	bl	8000a10 <test_printn.part.0>
    test_println(" bytes");
 80027c6:	4620      	mov	r0, r4
 80027c8:	f7fe f9a2 	bl	8000b10 <test_println>
  }

  /* [10.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 80027cc:	2302      	movs	r3, #2
  {
    test_print("--- Thread: ");
 80027ce:	482f      	ldr	r0, [pc, #188]	; (800288c <rt_test_010_012_execute+0xdc>)
  test_set_step(2);
 80027d0:	602b      	str	r3, [r5, #0]
    test_print("--- Thread: ");
 80027d2:	f7fe f9bd 	bl	8000b50 <test_print>
 80027d6:	2044      	movs	r0, #68	; 0x44
 80027d8:	f7fe f91a 	bl	8000a10 <test_printn.part.0>
    test_printn(sizeof(thread_t));
    test_println(" bytes");
 80027dc:	4620      	mov	r0, r4
 80027de:	f7fe f997 	bl	8000b10 <test_println>
  }

  /* [10.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 80027e2:	2303      	movs	r3, #3
    test_printn(sizeof(virtual_timer_t));
    test_println(" bytes");
  }

  /* [10.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 80027e4:	2604      	movs	r6, #4
    test_print("--- Timer : ");
 80027e6:	482a      	ldr	r0, [pc, #168]	; (8002890 <rt_test_010_012_execute+0xe0>)
  test_set_step(3);
 80027e8:	602b      	str	r3, [r5, #0]
    test_print("--- Timer : ");
 80027ea:	f7fe f9b1 	bl	8000b50 <test_print>
 80027ee:	2014      	movs	r0, #20
 80027f0:	f7fe f90e 	bl	8000a10 <test_printn.part.0>
    test_println(" bytes");
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7fe f98b 	bl	8000b10 <test_println>
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 80027fa:	4826      	ldr	r0, [pc, #152]	; (8002894 <rt_test_010_012_execute+0xe4>)
  test_set_step(4);
 80027fc:	602e      	str	r6, [r5, #0]
    test_print("--- Semaph: ");
 80027fe:	f7fe f9a7 	bl	8000b50 <test_print>
 8002802:	200c      	movs	r0, #12
 8002804:	f7fe f904 	bl	8000a10 <test_printn.part.0>
    test_printn(sizeof(semaphore_t));
    test_println(" bytes");
 8002808:	4620      	mov	r0, r4
 800280a:	f7fe f981 	bl	8000b10 <test_println>
#endif
  }

  /* [10.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 800280e:	2305      	movs	r3, #5
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 8002810:	4821      	ldr	r0, [pc, #132]	; (8002898 <rt_test_010_012_execute+0xe8>)
  test_set_step(5);
 8002812:	602b      	str	r3, [r5, #0]
    test_print("--- Mutex : ");
 8002814:	f7fe f99c 	bl	8000b50 <test_print>
 8002818:	2010      	movs	r0, #16
 800281a:	f7fe f8f9 	bl	8000a10 <test_printn.part.0>
    test_printn(sizeof(mutex_t));
    test_println(" bytes");
 800281e:	4620      	mov	r0, r4
 8002820:	f7fe f976 	bl	8000b10 <test_println>
#endif
  }

  /* [10.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8002824:	2306      	movs	r3, #6
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 8002826:	481d      	ldr	r0, [pc, #116]	; (800289c <rt_test_010_012_execute+0xec>)
  test_set_step(6);
 8002828:	602b      	str	r3, [r5, #0]
    test_print("--- CondV.: ");
 800282a:	f7fe f991 	bl	8000b50 <test_print>
 800282e:	2008      	movs	r0, #8
 8002830:	f7fe f8ee 	bl	8000a10 <test_printn.part.0>
    test_printn(sizeof(condition_variable_t));
    test_println(" bytes");
 8002834:	4620      	mov	r0, r4
 8002836:	f7fe f96b 	bl	8000b10 <test_println>
#endif
  }

  /* [10.12.7] The size of an event source is printed.*/
  test_set_step(7);
 800283a:	2307      	movs	r3, #7
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 800283c:	4818      	ldr	r0, [pc, #96]	; (80028a0 <rt_test_010_012_execute+0xf0>)
  test_set_step(7);
 800283e:	602b      	str	r3, [r5, #0]
    test_print("--- EventS: ");
 8002840:	f7fe f986 	bl	8000b50 <test_print>
 8002844:	4630      	mov	r0, r6
 8002846:	f7fe f8e3 	bl	8000a10 <test_printn.part.0>
    test_printn(sizeof(event_source_t));
    test_println(" bytes");
 800284a:	4620      	mov	r0, r4
 800284c:	f7fe f960 	bl	8000b10 <test_println>
#endif
  }

  /* [10.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8002850:	2308      	movs	r3, #8
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 8002852:	4814      	ldr	r0, [pc, #80]	; (80028a4 <rt_test_010_012_execute+0xf4>)
  test_set_step(8);
 8002854:	602b      	str	r3, [r5, #0]
    test_print("--- EventL: ");
 8002856:	f7fe f97b 	bl	8000b50 <test_print>
 800285a:	2014      	movs	r0, #20
 800285c:	f7fe f8d8 	bl	8000a10 <test_printn.part.0>
    test_printn(sizeof(event_listener_t));
    test_println(" bytes");
 8002860:	4620      	mov	r0, r4
 8002862:	f7fe f955 	bl	8000b10 <test_println>
#endif
  }

  /* [10.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8002866:	2309      	movs	r3, #9
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 8002868:	480f      	ldr	r0, [pc, #60]	; (80028a8 <rt_test_010_012_execute+0xf8>)
  test_set_step(9);
 800286a:	602b      	str	r3, [r5, #0]
    test_print("--- MailB.: ");
 800286c:	f7fe f970 	bl	8000b50 <test_print>
 8002870:	2028      	movs	r0, #40	; 0x28
 8002872:	f7fe f8cd 	bl	8000a10 <test_printn.part.0>
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
 8002876:	4620      	mov	r0, r4
#endif
  }
}
 8002878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_println(" bytes");
 800287c:	f7fe b948 	b.w	8000b10 <test_println>
 8002880:	20001a7c 	.word	0x20001a7c
 8002884:	0800b864 	.word	0x0800b864
 8002888:	0800b854 	.word	0x0800b854
 800288c:	0800b86c 	.word	0x0800b86c
 8002890:	0800b87c 	.word	0x0800b87c
 8002894:	0800b88c 	.word	0x0800b88c
 8002898:	0800b89c 	.word	0x0800b89c
 800289c:	0800b8ac 	.word	0x0800b8ac
 80028a0:	0800b8bc 	.word	0x0800b8bc
 80028a4:	0800b8cc 	.word	0x0800b8cc
 80028a8:	0800b8dc 	.word	0x0800b8dc
 80028ac:	00000000 	.word	0x00000000

080028b0 <rt_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 80028b0:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 80028b2:	2501      	movs	r5, #1
 80028b4:	4bc8      	ldr	r3, [pc, #800]	; (8002bd8 <rt_test_001_003_execute+0x328>)
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
    test_printn(CH_CFG_ST_RESOLUTION);
    test_println("");
 80028b6:	4cc9      	ldr	r4, [pc, #804]	; (8002bdc <rt_test_001_003_execute+0x32c>)
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 80028b8:	48c9      	ldr	r0, [pc, #804]	; (8002be0 <rt_test_001_003_execute+0x330>)
  test_set_step(1);
 80028ba:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 80028bc:	f7fe f948 	bl	8000b50 <test_print>
 80028c0:	2010      	movs	r0, #16
 80028c2:	f7fe f8a5 	bl	8000a10 <test_printn.part.0>
    test_println("");
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7fe f922 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
 80028cc:	48c5      	ldr	r0, [pc, #788]	; (8002be4 <rt_test_001_003_execute+0x334>)
 80028ce:	f7fe f93f 	bl	8000b50 <test_print>
 80028d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028d6:	f7fe f89b 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_ST_FREQUENCY);
    test_println("");
 80028da:	4620      	mov	r0, r4
 80028dc:	f7fe f918 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
 80028e0:	48c1      	ldr	r0, [pc, #772]	; (8002be8 <rt_test_001_003_execute+0x338>)
 80028e2:	f7fe f935 	bl	8000b50 <test_print>
 80028e6:	2020      	movs	r0, #32
 80028e8:	f7fe f892 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_INTERVALS_SIZE);
    test_println("");
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7fe f90f 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
 80028f2:	48be      	ldr	r0, [pc, #760]	; (8002bec <rt_test_001_003_execute+0x33c>)
 80028f4:	f7fe f92c 	bl	8000b50 <test_print>
 80028f8:	2020      	movs	r0, #32
 80028fa:	f7fe f889 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_TIME_TYPES_SIZE);
    test_println("");
 80028fe:	4620      	mov	r0, r4
 8002900:	f7fe f906 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
 8002904:	48ba      	ldr	r0, [pc, #744]	; (8002bf0 <rt_test_001_003_execute+0x340>)
 8002906:	f7fe f923 	bl	8000b50 <test_print>
 800290a:	2002      	movs	r0, #2
 800290c:	f7fe f880 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_ST_TIMEDELTA);
    test_println("");
 8002910:	4620      	mov	r0, r4
 8002912:	f7fe f8fd 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
 8002916:	48b7      	ldr	r0, [pc, #732]	; (8002bf4 <rt_test_001_003_execute+0x344>)
 8002918:	f7fe f91a 	bl	8000b50 <test_print>
    test_printn(CH_CFG_TIME_QUANTUM);
 800291c:	2000      	movs	r0, #0
 800291e:	f7fe f8a7 	bl	8000a70 <test_printn>
    test_println("");
 8002922:	4620      	mov	r0, r4
 8002924:	f7fe f8f4 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
 8002928:	48b3      	ldr	r0, [pc, #716]	; (8002bf8 <rt_test_001_003_execute+0x348>)
 800292a:	f7fe f911 	bl	8000b50 <test_print>
    test_printn(CH_CFG_MEMCORE_SIZE);
 800292e:	2000      	movs	r0, #0
 8002930:	f7fe f89e 	bl	8000a70 <test_printn>
    test_println("");
 8002934:	4620      	mov	r0, r4
 8002936:	f7fe f8eb 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
 800293a:	48b0      	ldr	r0, [pc, #704]	; (8002bfc <rt_test_001_003_execute+0x34c>)
 800293c:	f7fe f908 	bl	8000b50 <test_print>
    test_printn(CH_CFG_NO_IDLE_THREAD);
 8002940:	2000      	movs	r0, #0
 8002942:	f7fe f895 	bl	8000a70 <test_printn>
    test_println("");
 8002946:	4620      	mov	r0, r4
 8002948:	f7fe f8e2 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
 800294c:	48ac      	ldr	r0, [pc, #688]	; (8002c00 <rt_test_001_003_execute+0x350>)
 800294e:	f7fe f8ff 	bl	8000b50 <test_print>
 8002952:	4628      	mov	r0, r5
 8002954:	f7fe f85c 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_OPTIMIZE_SPEED);
    test_println("");
 8002958:	4620      	mov	r0, r4
 800295a:	f7fe f8d9 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_TM:                      ");
 800295e:	48a9      	ldr	r0, [pc, #676]	; (8002c04 <rt_test_001_003_execute+0x354>)
 8002960:	f7fe f8f6 	bl	8000b50 <test_print>
    test_printn(CH_CFG_USE_TM);
 8002964:	2000      	movs	r0, #0
 8002966:	f7fe f883 	bl	8000a70 <test_printn>
    test_println("");
 800296a:	4620      	mov	r0, r4
 800296c:	f7fe f8d0 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
 8002970:	48a5      	ldr	r0, [pc, #660]	; (8002c08 <rt_test_001_003_execute+0x358>)
 8002972:	f7fe f8ed 	bl	8000b50 <test_print>
 8002976:	4628      	mov	r0, r5
 8002978:	f7fe f84a 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_USE_REGISTRY);
    test_println("");
 800297c:	4620      	mov	r0, r4
 800297e:	f7fe f8c7 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
 8002982:	48a2      	ldr	r0, [pc, #648]	; (8002c0c <rt_test_001_003_execute+0x35c>)
 8002984:	f7fe f8e4 	bl	8000b50 <test_print>
 8002988:	4628      	mov	r0, r5
 800298a:	f7fe f841 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_USE_WAITEXIT);
    test_println("");
 800298e:	4620      	mov	r0, r4
 8002990:	f7fe f8be 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
 8002994:	489e      	ldr	r0, [pc, #632]	; (8002c10 <rt_test_001_003_execute+0x360>)
 8002996:	f7fe f8db 	bl	8000b50 <test_print>
 800299a:	4628      	mov	r0, r5
 800299c:	f7fe f838 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_USE_SEMAPHORES);
    test_println("");
 80029a0:	4620      	mov	r0, r4
 80029a2:	f7fe f8b5 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES_PRI:          ");
 80029a6:	489b      	ldr	r0, [pc, #620]	; (8002c14 <rt_test_001_003_execute+0x364>)
 80029a8:	f7fe f8d2 	bl	8000b50 <test_print>
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7fe f85f 	bl	8000a70 <test_printn>
    test_println("");
 80029b2:	4620      	mov	r0, r4
 80029b4:	f7fe f8ac 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
 80029b8:	4897      	ldr	r0, [pc, #604]	; (8002c18 <rt_test_001_003_execute+0x368>)
 80029ba:	f7fe f8c9 	bl	8000b50 <test_print>
 80029be:	4628      	mov	r0, r5
 80029c0:	f7fe f826 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_USE_MUTEXES);
    test_println("");
 80029c4:	4620      	mov	r0, r4
 80029c6:	f7fe f8a3 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES_RECURS:          ");
 80029ca:	4894      	ldr	r0, [pc, #592]	; (8002c1c <rt_test_001_003_execute+0x36c>)
 80029cc:	f7fe f8c0 	bl	8000b50 <test_print>
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7fe f84d 	bl	8000a70 <test_printn>
    test_println("");   
 80029d6:	4620      	mov	r0, r4
 80029d8:	f7fe f89a 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
 80029dc:	4890      	ldr	r0, [pc, #576]	; (8002c20 <rt_test_001_003_execute+0x370>)
 80029de:	f7fe f8b7 	bl	8000b50 <test_print>
 80029e2:	4628      	mov	r0, r5
 80029e4:	f7fe f814 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS);
    test_println("");
 80029e8:	4620      	mov	r0, r4
 80029ea:	f7fe f891 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEO:          ");
 80029ee:	488d      	ldr	r0, [pc, #564]	; (8002c24 <rt_test_001_003_execute+0x374>)
 80029f0:	f7fe f8ae 	bl	8000b50 <test_print>
 80029f4:	4628      	mov	r0, r5
 80029f6:	f7fe f80b 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
    test_println("");
 80029fa:	4620      	mov	r0, r4
 80029fc:	f7fe f888 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
 8002a00:	4889      	ldr	r0, [pc, #548]	; (8002c28 <rt_test_001_003_execute+0x378>)
 8002a02:	f7fe f8a5 	bl	8000b50 <test_print>
 8002a06:	4628      	mov	r0, r5
 8002a08:	f7fe f802 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS);
    test_println("");
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f7fe f87f 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
 8002a12:	4886      	ldr	r0, [pc, #536]	; (8002c2c <rt_test_001_003_execute+0x37c>)
 8002a14:	f7fe f89c 	bl	8000b50 <test_print>
 8002a18:	4628      	mov	r0, r5
 8002a1a:	f7fd fff9 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
    test_println("");
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f7fe f876 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
 8002a24:	4882      	ldr	r0, [pc, #520]	; (8002c30 <rt_test_001_003_execute+0x380>)
 8002a26:	f7fe f893 	bl	8000b50 <test_print>
 8002a2a:	4628      	mov	r0, r5
 8002a2c:	f7fd fff0 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_USE_MESSAGES);
    test_println("");
 8002a30:	4620      	mov	r0, r4
 8002a32:	f7fe f86d 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES_PRI:            ");
 8002a36:	487f      	ldr	r0, [pc, #508]	; (8002c34 <rt_test_001_003_execute+0x384>)
 8002a38:	f7fe f88a 	bl	8000b50 <test_print>
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7fe f817 	bl	8000a70 <test_printn>
    test_println("");
 8002a42:	4620      	mov	r0, r4
 8002a44:	f7fe f864 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 8002a48:	487b      	ldr	r0, [pc, #492]	; (8002c38 <rt_test_001_003_execute+0x388>)
 8002a4a:	f7fe f881 	bl	8000b50 <test_print>
 8002a4e:	4628      	mov	r0, r5
 8002a50:	f7fd ffde 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_USE_MAILBOXES);
    test_println("");
 8002a54:	4620      	mov	r0, r4
 8002a56:	f7fe f85b 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
 8002a5a:	4878      	ldr	r0, [pc, #480]	; (8002c3c <rt_test_001_003_execute+0x38c>)
 8002a5c:	f7fe f878 	bl	8000b50 <test_print>
 8002a60:	4628      	mov	r0, r5
 8002a62:	f7fd ffd5 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMCORE);
    test_println("");
 8002a66:	4620      	mov	r0, r4
 8002a68:	f7fe f852 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_HEAP:                    ");
 8002a6c:	4874      	ldr	r0, [pc, #464]	; (8002c40 <rt_test_001_003_execute+0x390>)
 8002a6e:	f7fe f86f 	bl	8000b50 <test_print>
 8002a72:	4628      	mov	r0, r5
 8002a74:	f7fd ffcc 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_USE_HEAP);
    test_println("");
 8002a78:	4620      	mov	r0, r4
 8002a7a:	f7fe f849 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
 8002a7e:	4871      	ldr	r0, [pc, #452]	; (8002c44 <rt_test_001_003_execute+0x394>)
 8002a80:	f7fe f866 	bl	8000b50 <test_print>
 8002a84:	4628      	mov	r0, r5
 8002a86:	f7fd ffc3 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMPOOLS);
    test_println("");
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f7fe f840 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
 8002a90:	486d      	ldr	r0, [pc, #436]	; (8002c48 <rt_test_001_003_execute+0x398>)
 8002a92:	f7fe f85d 	bl	8000b50 <test_print>
 8002a96:	4628      	mov	r0, r5
 8002a98:	f7fd ffba 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_FIFOS);
    test_println("");
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f7fe f837 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
 8002aa2:	486a      	ldr	r0, [pc, #424]	; (8002c4c <rt_test_001_003_execute+0x39c>)
 8002aa4:	f7fe f854 	bl	8000b50 <test_print>
 8002aa8:	4628      	mov	r0, r5
 8002aaa:	f7fd ffb1 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_USE_DYNAMIC);
    test_println("");
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7fe f82e 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
 8002ab4:	4866      	ldr	r0, [pc, #408]	; (8002c50 <rt_test_001_003_execute+0x3a0>)
 8002ab6:	f7fe f84b 	bl	8000b50 <test_print>
 8002aba:	4628      	mov	r0, r5
 8002abc:	f7fd ffa8 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_USE_FACTORY);
    test_println("");
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f7fe f825 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
 8002ac6:	4863      	ldr	r0, [pc, #396]	; (8002c54 <rt_test_001_003_execute+0x3a4>)
 8002ac8:	f7fe f842 	bl	8000b50 <test_print>
 8002acc:	2008      	movs	r0, #8
 8002ace:	f7fd ff9f 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
    test_println("");
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	f7fe f81c 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
 8002ad8:	485f      	ldr	r0, [pc, #380]	; (8002c58 <rt_test_001_003_execute+0x3a8>)
 8002ada:	f7fe f839 	bl	8000b50 <test_print>
 8002ade:	4628      	mov	r0, r5
 8002ae0:	f7fd ff96 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
    test_println("");
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f7fe f813 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
 8002aea:	485c      	ldr	r0, [pc, #368]	; (8002c5c <rt_test_001_003_execute+0x3ac>)
 8002aec:	f7fe f830 	bl	8000b50 <test_print>
 8002af0:	4628      	mov	r0, r5
 8002af2:	f7fd ff8d 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
    test_println("");
 8002af6:	4620      	mov	r0, r4
 8002af8:	f7fe f80a 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
 8002afc:	4858      	ldr	r0, [pc, #352]	; (8002c60 <rt_test_001_003_execute+0x3b0>)
 8002afe:	f7fe f827 	bl	8000b50 <test_print>
 8002b02:	4628      	mov	r0, r5
 8002b04:	f7fd ff84 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
    test_println("");
 8002b08:	4620      	mov	r0, r4
 8002b0a:	f7fe f801 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
 8002b0e:	4855      	ldr	r0, [pc, #340]	; (8002c64 <rt_test_001_003_execute+0x3b4>)
 8002b10:	f7fe f81e 	bl	8000b50 <test_print>
 8002b14:	4628      	mov	r0, r5
 8002b16:	f7fd ff7b 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAILBOXES);
    test_println("");
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f7fd fff8 	bl	8000b10 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
 8002b20:	4851      	ldr	r0, [pc, #324]	; (8002c68 <rt_test_001_003_execute+0x3b8>)
 8002b22:	f7fe f815 	bl	8000b50 <test_print>
 8002b26:	4628      	mov	r0, r5
 8002b28:	f7fd ff72 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
    test_println("");
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7fd ffef 	bl	8000b10 <test_println>
    test_print("--- CH_DBG_STATISTICS:                  ");
 8002b32:	484e      	ldr	r0, [pc, #312]	; (8002c6c <rt_test_001_003_execute+0x3bc>)
 8002b34:	f7fe f80c 	bl	8000b50 <test_print>
    test_printn(CH_DBG_STATISTICS);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7fd ff99 	bl	8000a70 <test_printn>
    test_println("");
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7fd ffe6 	bl	8000b10 <test_println>
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
 8002b44:	484a      	ldr	r0, [pc, #296]	; (8002c70 <rt_test_001_003_execute+0x3c0>)
 8002b46:	f7fe f803 	bl	8000b50 <test_print>
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7fd ff90 	bl	8000a70 <test_printn>
    test_println("");
 8002b50:	4620      	mov	r0, r4
 8002b52:	f7fd ffdd 	bl	8000b10 <test_println>
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
 8002b56:	4847      	ldr	r0, [pc, #284]	; (8002c74 <rt_test_001_003_execute+0x3c4>)
 8002b58:	f7fd fffa 	bl	8000b50 <test_print>
    test_printn(CH_DBG_ENABLE_CHECKS);
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f7fd ff87 	bl	8000a70 <test_printn>
    test_println("");
 8002b62:	4620      	mov	r0, r4
 8002b64:	f7fd ffd4 	bl	8000b10 <test_println>
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
 8002b68:	4843      	ldr	r0, [pc, #268]	; (8002c78 <rt_test_001_003_execute+0x3c8>)
 8002b6a:	f7fd fff1 	bl	8000b50 <test_print>
    test_printn(CH_DBG_ENABLE_ASSERTS);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7fd ff7e 	bl	8000a70 <test_printn>
    test_println("");
 8002b74:	4620      	mov	r0, r4
 8002b76:	f7fd ffcb 	bl	8000b10 <test_println>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
 8002b7a:	4840      	ldr	r0, [pc, #256]	; (8002c7c <rt_test_001_003_execute+0x3cc>)
 8002b7c:	f7fd ffe8 	bl	8000b50 <test_print>
 8002b80:	20ff      	movs	r0, #255	; 0xff
 8002b82:	f7fd ff45 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_MASK);
    test_println("");
 8002b86:	4620      	mov	r0, r4
 8002b88:	f7fd ffc2 	bl	8000b10 <test_println>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
 8002b8c:	483c      	ldr	r0, [pc, #240]	; (8002c80 <rt_test_001_003_execute+0x3d0>)
 8002b8e:	f7fd ffdf 	bl	8000b50 <test_print>
 8002b92:	2080      	movs	r0, #128	; 0x80
 8002b94:	f7fd ff3c 	bl	8000a10 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
    test_println("");
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f7fd ffb9 	bl	8000b10 <test_println>
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
 8002b9e:	4839      	ldr	r0, [pc, #228]	; (8002c84 <rt_test_001_003_execute+0x3d4>)
 8002ba0:	f7fd ffd6 	bl	8000b50 <test_print>
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7fd ff63 	bl	8000a70 <test_printn>
    test_println("");
 8002baa:	4620      	mov	r0, r4
 8002bac:	f7fd ffb0 	bl	8000b10 <test_println>
    test_print("--- CH_DBG_FILL_THREADS:                ");
 8002bb0:	4835      	ldr	r0, [pc, #212]	; (8002c88 <rt_test_001_003_execute+0x3d8>)
 8002bb2:	f7fd ffcd 	bl	8000b50 <test_print>
    test_printn(CH_DBG_FILL_THREADS);
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7fd ff5a 	bl	8000a70 <test_printn>
    test_println("");
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f7fd ffa7 	bl	8000b10 <test_println>
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
 8002bc2:	4832      	ldr	r0, [pc, #200]	; (8002c8c <rt_test_001_003_execute+0x3dc>)
 8002bc4:	f7fd ffc4 	bl	8000b50 <test_print>
    test_printn(CH_DBG_THREADS_PROFILING);
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7fd ff51 	bl	8000a70 <test_printn>
    test_println("");
 8002bce:	4620      	mov	r0, r4
  }
}
 8002bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8002bd4:	f7fd bf9c 	b.w	8000b10 <test_println>
 8002bd8:	20001a7c 	.word	0x20001a7c
 8002bdc:	0800bac4 	.word	0x0800bac4
 8002be0:	0800aa18 	.word	0x0800aa18
 8002be4:	0800aa44 	.word	0x0800aa44
 8002be8:	0800aa70 	.word	0x0800aa70
 8002bec:	0800aa9c 	.word	0x0800aa9c
 8002bf0:	0800aac8 	.word	0x0800aac8
 8002bf4:	0800aaf4 	.word	0x0800aaf4
 8002bf8:	0800ab20 	.word	0x0800ab20
 8002bfc:	0800ab4c 	.word	0x0800ab4c
 8002c00:	0800ab78 	.word	0x0800ab78
 8002c04:	0800aba4 	.word	0x0800aba4
 8002c08:	0800abd0 	.word	0x0800abd0
 8002c0c:	0800abfc 	.word	0x0800abfc
 8002c10:	0800ac28 	.word	0x0800ac28
 8002c14:	0800ac54 	.word	0x0800ac54
 8002c18:	0800ac80 	.word	0x0800ac80
 8002c1c:	0800acac 	.word	0x0800acac
 8002c20:	0800acd8 	.word	0x0800acd8
 8002c24:	0800ad04 	.word	0x0800ad04
 8002c28:	0800ad30 	.word	0x0800ad30
 8002c2c:	0800ad5c 	.word	0x0800ad5c
 8002c30:	0800ad88 	.word	0x0800ad88
 8002c34:	0800adb4 	.word	0x0800adb4
 8002c38:	0800ade0 	.word	0x0800ade0
 8002c3c:	0800ae0c 	.word	0x0800ae0c
 8002c40:	0800ae38 	.word	0x0800ae38
 8002c44:	0800ae64 	.word	0x0800ae64
 8002c48:	0800ae90 	.word	0x0800ae90
 8002c4c:	0800aebc 	.word	0x0800aebc
 8002c50:	0800aee8 	.word	0x0800aee8
 8002c54:	0800af14 	.word	0x0800af14
 8002c58:	0800af40 	.word	0x0800af40
 8002c5c:	0800af6c 	.word	0x0800af6c
 8002c60:	0800af98 	.word	0x0800af98
 8002c64:	0800afc4 	.word	0x0800afc4
 8002c68:	0800aff0 	.word	0x0800aff0
 8002c6c:	0800b01c 	.word	0x0800b01c
 8002c70:	0800b048 	.word	0x0800b048
 8002c74:	0800b074 	.word	0x0800b074
 8002c78:	0800b0a0 	.word	0x0800b0a0
 8002c7c:	0800b0cc 	.word	0x0800b0cc
 8002c80:	0800b0f8 	.word	0x0800b0f8
 8002c84:	0800b124 	.word	0x0800b124
 8002c88:	0800b150 	.word	0x0800b150
 8002c8c:	0800b17c 	.word	0x0800b17c

08002c90 <rt_test_001_002_execute>:
static void rt_test_001_002_execute(void) {
 8002c90:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8002c92:	2501      	movs	r5, #1
 8002c94:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <rt_test_001_002_execute+0x68>)
    test_println("--- Product:                            ChibiOS/RT");
 8002c96:	4819      	ldr	r0, [pc, #100]	; (8002cfc <rt_test_001_002_execute+0x6c>)
  test_set_step(1);
 8002c98:	601d      	str	r5, [r3, #0]
    test_println("");
 8002c9a:	4c19      	ldr	r4, [pc, #100]	; (8002d00 <rt_test_001_002_execute+0x70>)
    test_println("--- Product:                            ChibiOS/RT");
 8002c9c:	f7fd ff38 	bl	8000b10 <test_println>
    test_print("--- Stable Flag:                        ");
 8002ca0:	4818      	ldr	r0, [pc, #96]	; (8002d04 <rt_test_001_002_execute+0x74>)
 8002ca2:	f7fd ff55 	bl	8000b50 <test_print>
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	f7fd feb2 	bl	8000a10 <test_printn.part.0>
    test_println("");
 8002cac:	4620      	mov	r0, r4
 8002cae:	f7fd ff2f 	bl	8000b10 <test_println>
    test_print("--- Version String:                     ");
 8002cb2:	4815      	ldr	r0, [pc, #84]	; (8002d08 <rt_test_001_002_execute+0x78>)
 8002cb4:	f7fd ff4c 	bl	8000b50 <test_print>
    test_println(CH_KERNEL_VERSION);
 8002cb8:	4814      	ldr	r0, [pc, #80]	; (8002d0c <rt_test_001_002_execute+0x7c>)
 8002cba:	f7fd ff29 	bl	8000b10 <test_println>
    test_print("--- Major Number:                       ");
 8002cbe:	4814      	ldr	r0, [pc, #80]	; (8002d10 <rt_test_001_002_execute+0x80>)
 8002cc0:	f7fd ff46 	bl	8000b50 <test_print>
 8002cc4:	2005      	movs	r0, #5
 8002cc6:	f7fd fea3 	bl	8000a10 <test_printn.part.0>
    test_println("");
 8002cca:	4620      	mov	r0, r4
 8002ccc:	f7fd ff20 	bl	8000b10 <test_println>
    test_print("--- Minor Number:                       ");
 8002cd0:	4810      	ldr	r0, [pc, #64]	; (8002d14 <rt_test_001_002_execute+0x84>)
 8002cd2:	f7fd ff3d 	bl	8000b50 <test_print>
    test_printn(CH_KERNEL_MINOR);
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7fd feca 	bl	8000a70 <test_printn>
    test_println("");
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f7fd ff17 	bl	8000b10 <test_println>
    test_print("--- Patch Number:                       ");
 8002ce2:	480d      	ldr	r0, [pc, #52]	; (8002d18 <rt_test_001_002_execute+0x88>)
 8002ce4:	f7fd ff34 	bl	8000b50 <test_print>
    test_printn(CH_KERNEL_PATCH);
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f7fd fec1 	bl	8000a70 <test_printn>
    test_println("");
 8002cee:	4620      	mov	r0, r4
}
 8002cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8002cf4:	f7fd bf0c 	b.w	8000b10 <test_println>
 8002cf8:	20001a7c 	.word	0x20001a7c
 8002cfc:	0800a8f8 	.word	0x0800a8f8
 8002d00:	0800bac4 	.word	0x0800bac4
 8002d04:	0800a92c 	.word	0x0800a92c
 8002d08:	0800a958 	.word	0x0800a958
 8002d0c:	0800a054 	.word	0x0800a054
 8002d10:	0800a984 	.word	0x0800a984
 8002d14:	0800a9b0 	.word	0x0800a9b0
 8002d18:	0800a9dc 	.word	0x0800a9dc
 8002d1c:	00000000 	.word	0x00000000

08002d20 <rt_test_001_001_execute>:
  test_set_step(1);
 8002d20:	2201      	movs	r2, #1
 8002d22:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <rt_test_001_001_execute+0x74>)
static void rt_test_001_001_execute(void) {
 8002d24:	b510      	push	{r4, lr}
    test_print("--- Architecture:                       ");
 8002d26:	481c      	ldr	r0, [pc, #112]	; (8002d98 <rt_test_001_001_execute+0x78>)
  test_set_step(1);
 8002d28:	601a      	str	r2, [r3, #0]
    test_print("--- Architecture:                       ");
 8002d2a:	f7fd ff11 	bl	8000b50 <test_print>
    test_println(PORT_ARCHITECTURE_NAME);
 8002d2e:	481b      	ldr	r0, [pc, #108]	; (8002d9c <rt_test_001_001_execute+0x7c>)
 8002d30:	f7fd feee 	bl	8000b10 <test_println>
    test_print("--- Core Variant:                       ");
 8002d34:	481a      	ldr	r0, [pc, #104]	; (8002da0 <rt_test_001_001_execute+0x80>)
 8002d36:	f7fd ff0b 	bl	8000b50 <test_print>
    test_println(PORT_CORE_VARIANT_NAME);
 8002d3a:	481a      	ldr	r0, [pc, #104]	; (8002da4 <rt_test_001_001_execute+0x84>)
 8002d3c:	f7fd fee8 	bl	8000b10 <test_println>
    test_print("--- Compiler:                           ");
 8002d40:	4819      	ldr	r0, [pc, #100]	; (8002da8 <rt_test_001_001_execute+0x88>)
 8002d42:	f7fd ff05 	bl	8000b50 <test_print>
    test_println(PORT_COMPILER_NAME);
 8002d46:	4819      	ldr	r0, [pc, #100]	; (8002dac <rt_test_001_001_execute+0x8c>)
 8002d48:	f7fd fee2 	bl	8000b10 <test_println>
    test_print("--- Port Info:                          ");
 8002d4c:	4818      	ldr	r0, [pc, #96]	; (8002db0 <rt_test_001_001_execute+0x90>)
 8002d4e:	f7fd feff 	bl	8000b50 <test_print>
    test_println(PORT_INFO);
 8002d52:	4818      	ldr	r0, [pc, #96]	; (8002db4 <rt_test_001_001_execute+0x94>)
    test_println("");
 8002d54:	4c18      	ldr	r4, [pc, #96]	; (8002db8 <rt_test_001_001_execute+0x98>)
    test_println(PORT_INFO);
 8002d56:	f7fd fedb 	bl	8000b10 <test_println>
    test_print("--- Natural alignment:                  ");
 8002d5a:	4818      	ldr	r0, [pc, #96]	; (8002dbc <rt_test_001_001_execute+0x9c>)
 8002d5c:	f7fd fef8 	bl	8000b50 <test_print>
 8002d60:	2004      	movs	r0, #4
 8002d62:	f7fd fe55 	bl	8000a10 <test_printn.part.0>
    test_println("");
 8002d66:	4620      	mov	r0, r4
 8002d68:	f7fd fed2 	bl	8000b10 <test_println>
    test_print("--- Stack alignment:                    ");
 8002d6c:	4814      	ldr	r0, [pc, #80]	; (8002dc0 <rt_test_001_001_execute+0xa0>)
 8002d6e:	f7fd feef 	bl	8000b50 <test_print>
 8002d72:	2008      	movs	r0, #8
 8002d74:	f7fd fe4c 	bl	8000a10 <test_printn.part.0>
    test_println("");
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f7fd fec9 	bl	8000b10 <test_println>
    test_print("--- Working area alignment:             ");
 8002d7e:	4811      	ldr	r0, [pc, #68]	; (8002dc4 <rt_test_001_001_execute+0xa4>)
 8002d80:	f7fd fee6 	bl	8000b50 <test_print>
 8002d84:	2008      	movs	r0, #8
 8002d86:	f7fd fe43 	bl	8000a10 <test_printn.part.0>
    test_println("");
 8002d8a:	4620      	mov	r0, r4
}
 8002d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    test_println("");
 8002d90:	f7fd bebe 	b.w	8000b10 <test_println>
 8002d94:	20001a7c 	.word	0x20001a7c
 8002d98:	0800a7b4 	.word	0x0800a7b4
 8002d9c:	0800a0cc 	.word	0x0800a0cc
 8002da0:	0800a7e0 	.word	0x0800a7e0
 8002da4:	0800a0e8 	.word	0x0800a0e8
 8002da8:	0800a80c 	.word	0x0800a80c
 8002dac:	0800a070 	.word	0x0800a070
 8002db0:	0800a838 	.word	0x0800a838
 8002db4:	0800a108 	.word	0x0800a108
 8002db8:	0800bac4 	.word	0x0800bac4
 8002dbc:	0800a864 	.word	0x0800a864
 8002dc0:	0800a890 	.word	0x0800a890
 8002dc4:	0800a8bc 	.word	0x0800a8bc
	...

08002dd0 <dyn_find_object>:
    chPoolFree(mp, (void *)dep);
  }
}
#endif /* CH_FACTORY_REQUIRES_POOLS */

static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
 8002dd0:	b570      	push	{r4, r5, r6, lr}
  dyn_element_t *p = dlp->next;
 8002dd2:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8002dd4:	42a1      	cmp	r1, r4
 8002dd6:	d012      	beq.n	8002dfe <dyn_find_object+0x2e>
 8002dd8:	460d      	mov	r5, r1
 8002dda:	4606      	mov	r6, r0
 8002ddc:	e002      	b.n	8002de4 <dyn_find_object+0x14>
    p = p->next;
 8002dde:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8002de0:	42a5      	cmp	r5, r4
 8002de2:	d00c      	beq.n	8002dfe <dyn_find_object+0x2e>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8002de4:	2208      	movs	r2, #8
 8002de6:	4631      	mov	r1, r6
 8002de8:	18a0      	adds	r0, r4, r2
 8002dea:	f006 ffd9 	bl	8009da0 <strncmp>
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d1f5      	bne.n	8002dde <dyn_find_object+0xe>

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
  if (dep != NULL) {
 8002df2:	b12c      	cbz	r4, 8002e00 <dyn_find_object+0x30>
    /* Increasing references counter.*/
    dep->refs++;
 8002df4:	6863      	ldr	r3, [r4, #4]
  }

  return dep;
}
 8002df6:	4620      	mov	r0, r4
    dep->refs++;
 8002df8:	3301      	adds	r3, #1
 8002dfa:	6063      	str	r3, [r4, #4]
}
 8002dfc:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8002dfe:	2400      	movs	r4, #0
}
 8002e00:	4620      	mov	r0, r4
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e10 <dyn_create_object_pool>:
                                             memory_pool_t *mp) {
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8002e12:	680c      	ldr	r4, [r1, #0]
                                             memory_pool_t *mp) {
 8002e14:	460d      	mov	r5, r1
  while (p != (dyn_element_t *)dlp) {
 8002e16:	42a1      	cmp	r1, r4
                                             memory_pool_t *mp) {
 8002e18:	4606      	mov	r6, r0
 8002e1a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 8002e1c:	d103      	bne.n	8002e26 <dyn_create_object_pool+0x16>
 8002e1e:	e00d      	b.n	8002e3c <dyn_create_object_pool+0x2c>
    p = p->next;
 8002e20:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8002e22:	42a5      	cmp	r5, r4
 8002e24:	d00a      	beq.n	8002e3c <dyn_create_object_pool+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8002e26:	2208      	movs	r2, #8
 8002e28:	4631      	mov	r1, r6
 8002e2a:	18a0      	adds	r0, r4, r2
 8002e2c:	f006 ffb8 	bl	8009da0 <strncmp>
 8002e30:	2800      	cmp	r0, #0
 8002e32:	d1f5      	bne.n	8002e20 <dyn_create_object_pool+0x10>
  if (dep != NULL) {
 8002e34:	b114      	cbz	r4, 8002e3c <dyn_create_object_pool+0x2c>
    return NULL;
 8002e36:	4604      	mov	r4, r0
}
 8002e38:	4620      	mov	r0, r4
 8002e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dep = (dyn_element_t *)chPoolAlloc(mp);
 8002e3c:	4638      	mov	r0, r7
 8002e3e:	f7fe fc77 	bl	8001730 <chPoolAlloc>
  if (dep == NULL) {
 8002e42:	4604      	mov	r4, r0
 8002e44:	b148      	cbz	r0, 8002e5a <dyn_create_object_pool+0x4a>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8002e46:	2208      	movs	r2, #8
 8002e48:	4631      	mov	r1, r6
 8002e4a:	4410      	add	r0, r2
 8002e4c:	f006 fff2 	bl	8009e34 <strncpy>
  dep->refs = (ucnt_t)1;
 8002e50:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8002e52:	682b      	ldr	r3, [r5, #0]
 8002e54:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->next = (dyn_element_t *)dep;
 8002e58:	602c      	str	r4, [r5, #0]
}
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e5e:	bf00      	nop

08002e60 <chThdYield>:
void chThdYield(void) {
 8002e60:	b570      	push	{r4, r5, r6, lr}
 8002e62:	2320      	movs	r3, #32
 8002e64:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 8002e68:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <chThdYield+0x54>)
 8002e6a:	6810      	ldr	r0, [r2, #0]
 8002e6c:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8002e6e:	6883      	ldr	r3, [r0, #8]
  return firstprio(&ch.rlist.queue) >= currp->prio;
 8002e70:	68a1      	ldr	r1, [r4, #8]
  if (chSchCanYieldS()) {
 8002e72:	428b      	cmp	r3, r1
 8002e74:	d203      	bcs.n	8002e7e <chThdYield+0x1e>
 8002e76:	2300      	movs	r3, #0
 8002e78:	f383 8811 	msr	BASEPRI, r3
}
 8002e7c:	bd70      	pop	{r4, r5, r6, pc}
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8002e7e:	2601      	movs	r6, #1
  tp->state = CH_STATE_READY;
 8002e80:	2500      	movs	r5, #0
  tqp->next             = tp->queue.next;
 8002e82:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002e84:	605a      	str	r2, [r3, #4]
  tqp->next             = tp->queue.next;
 8002e86:	6013      	str	r3, [r2, #0]
  currp->state = CH_STATE_CURRENT;
 8002e88:	f880 6020 	strb.w	r6, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002e8c:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 8002e8e:	f884 5020 	strb.w	r5, [r4, #32]
 8002e92:	e000      	b.n	8002e96 <chThdYield+0x36>
 8002e94:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	4291      	cmp	r1, r2
 8002e9a:	d9fb      	bls.n	8002e94 <chThdYield+0x34>
  tp->queue.prev             = cp->queue.prev;
 8002e9c:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8002e9e:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 8002ea0:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8002ea4:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8002ea6:	605c      	str	r4, [r3, #4]
  chSysSwitch(currp, otp);
 8002ea8:	f7fd f9ca 	bl	8000240 <_port_switch>
 8002eac:	2300      	movs	r3, #0
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	200010f0 	.word	0x200010f0
	...

08002ec0 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
 8002ec0:	b538      	push	{r3, r4, r5, lr}
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	4d08      	ldr	r5, [pc, #32]	; (8002ee8 <bmk_thread8+0x28>)
    chThdYield();
 8002ec6:	f7ff ffcb 	bl	8002e60 <chThdYield>
    chThdYield();
 8002eca:	f7ff ffc9 	bl	8002e60 <chThdYield>
    chThdYield();
 8002ece:	f7ff ffc7 	bl	8002e60 <chThdYield>
    chThdYield();
 8002ed2:	f7ff ffc5 	bl	8002e60 <chThdYield>
    (*(uint32_t *)p) += 4;
 8002ed6:	6823      	ldr	r3, [r4, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8002ed8:	69aa      	ldr	r2, [r5, #24]
 8002eda:	3304      	adds	r3, #4
 8002edc:	6023      	str	r3, [r4, #0]
  } while(!chThdShouldTerminateX());
 8002ede:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8002ee2:	075b      	lsls	r3, r3, #29
 8002ee4:	d5ef      	bpl.n	8002ec6 <bmk_thread8+0x6>
}
 8002ee6:	bd38      	pop	{r3, r4, r5, pc}
 8002ee8:	200010f0 	.word	0x200010f0
 8002eec:	00000000 	.word	0x00000000

08002ef0 <chSchWakeupS>:
  thread_t *otp = currp;
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <chSchWakeupS+0x5c>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002ef2:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 8002ef4:	699e      	ldr	r6, [r3, #24]
  if (ntp->prio <= otp->prio) {
 8002ef6:	6885      	ldr	r5, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002ef8:	4604      	mov	r4, r0
  ntp->u.rdymsg = msg;
 8002efa:	6241      	str	r1, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8002efc:	68b0      	ldr	r0, [r6, #8]
 8002efe:	4285      	cmp	r5, r0
 8002f00:	d80d      	bhi.n	8002f1e <chSchWakeupS+0x2e>
  tp->state = CH_STATE_READY;
 8002f02:	2200      	movs	r2, #0
 8002f04:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 8002f08:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	4295      	cmp	r5, r2
 8002f0e:	d9fb      	bls.n	8002f08 <chSchWakeupS+0x18>
  tp->queue.prev             = cp->queue.prev;
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8002f16:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8002f18:	605c      	str	r4, [r3, #4]
}
 8002f1a:	bc70      	pop	{r4, r5, r6}
 8002f1c:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 8002f1e:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.queue;
 8002f20:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
 8002f22:	f886 1020 	strb.w	r1, [r6, #32]
    cp = cp->queue.next;
 8002f26:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8002f28:	6891      	ldr	r1, [r2, #8]
 8002f2a:	4288      	cmp	r0, r1
 8002f2c:	d9fb      	bls.n	8002f26 <chSchWakeupS+0x36>
    ntp->state = CH_STATE_CURRENT;
 8002f2e:	2001      	movs	r0, #1
  tp->queue.prev             = cp->queue.prev;
 8002f30:	6851      	ldr	r1, [r2, #4]
 8002f32:	e9c6 2100 	strd	r2, r1, [r6]
  tp->queue.prev->queue.next = tp;
 8002f36:	600e      	str	r6, [r1, #0]
  cp->queue.prev             = tp;
 8002f38:	6056      	str	r6, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8002f3a:	f884 0020 	strb.w	r0, [r4, #32]
    chSysSwitch(ntp, otp);
 8002f3e:	4631      	mov	r1, r6
 8002f40:	4620      	mov	r0, r4
    currp = ntp;
 8002f42:	619c      	str	r4, [r3, #24]
}
 8002f44:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 8002f46:	f7fd b97b 	b.w	8000240 <_port_switch>
 8002f4a:	bf00      	nop
 8002f4c:	200010f0 	.word	0x200010f0

08002f50 <chThdCreateStatic.constprop.103>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	2420      	movs	r4, #32
 8002f54:	f384 8811 	msr	BASEPRI, r4
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002f58:	2401      	movs	r4, #1
  tp->mtxlist   = NULL;
 8002f5a:	2500      	movs	r5, #0
  tp->state     = CH_STATE_WTSTART;
 8002f5c:	2702      	movs	r7, #2
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002f5e:	e9c0 2337 	strd	r2, r3, [r0, #220]	; 0xdc
 8002f62:	f100 03dc 	add.w	r3, r0, #220	; 0xdc
  REG_INSERT(tp);
 8002f66:	4e19      	ldr	r6, [pc, #100]	; (8002fcc <chThdCreateStatic.constprop.103+0x7c>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002f68:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8002f6c:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <chThdCreateStatic.constprop.103+0x80>)
  tp->name      = name;
 8002f6e:	4a19      	ldr	r2, [pc, #100]	; (8002fd4 <chThdCreateStatic.constprop.103+0x84>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002f70:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
  REG_INSERT(tp);
 8002f74:	6973      	ldr	r3, [r6, #20]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002f76:	f880 4122 	strb.w	r4, [r0, #290]	; 0x122
  tp = (thread_t *)((uint8_t *)wsp + size -
 8002f7a:	f500 7480 	add.w	r4, r0, #256	; 0x100
  tp->prio      = prio;
 8002f7e:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
  tp->realprio  = prio;
 8002f82:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
  tp->state     = CH_STATE_WTSTART;
 8002f86:	f8a0 7120 	strh.w	r7, [r0, #288]	; 0x120
  tp->name      = name;
 8002f8a:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
  tp->mtxlist   = NULL;
 8002f8e:	f8c0 5138 	str.w	r5, [r0, #312]	; 0x138
  list_init(&tp->waiting);
 8002f92:	f500 7294 	add.w	r2, r0, #296	; 0x128
  tp->epending  = (eventmask_t)0;
 8002f96:	f8c0 5134 	str.w	r5, [r0, #308]	; 0x134
  REG_INSERT(tp);
 8002f9a:	f8c0 6110 	str.w	r6, [r0, #272]	; 0x110
 8002f9e:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
  tp->wabase = (stkalign_t *)wsp;
 8002fa2:	f8c0 011c 	str.w	r0, [r0, #284]	; 0x11c
  REG_INSERT(tp);
 8002fa6:	611c      	str	r4, [r3, #16]
  queue_init(&tp->msgqueue);
 8002fa8:	f500 7396 	add.w	r3, r0, #300	; 0x12c
  tlp->next = (thread_t *)tlp;
 8002fac:	f8c0 2128 	str.w	r2, [r0, #296]	; 0x128
  tqp->next = (thread_t *)tqp;
 8002fb0:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
 8002fb4:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
  chSchWakeupS(tp, MSG_OK);
 8002fb8:	4629      	mov	r1, r5
 8002fba:	4620      	mov	r0, r4
  REG_INSERT(tp);
 8002fbc:	6174      	str	r4, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 8002fbe:	f7ff ff97 	bl	8002ef0 <chSchWakeupS>
 8002fc2:	f385 8811 	msr	BASEPRI, r5
}
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200010f0 	.word	0x200010f0
 8002fd0:	08000251 	.word	0x08000251
 8002fd4:	0800a00c 	.word	0x0800a00c
	...

08002fe0 <chCondSignal.constprop.93>:
void chCondSignal(condition_variable_t *cp) {
 8002fe0:	b508      	push	{r3, lr}
 8002fe2:	2320      	movs	r3, #32
 8002fe4:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <chCondSignal.constprop.93+0x24>)
 8002fea:	6818      	ldr	r0, [r3, #0]
  if (queue_notempty(&cp->queue)) {
 8002fec:	4298      	cmp	r0, r3
 8002fee:	d005      	beq.n	8002ffc <chCondSignal.constprop.93+0x1c>
  tqp->next             = tp->queue.next;
 8002ff0:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 8002ff2:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8002ff4:	6053      	str	r3, [r2, #4]
  tqp->next             = tp->queue.next;
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	f7ff ff7a 	bl	8002ef0 <chSchWakeupS>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f383 8811 	msr	BASEPRI, r3
}
 8003002:	bd08      	pop	{r3, pc}
 8003004:	2000080c 	.word	0x2000080c
	...

08003010 <chThdCreateFromMemoryPool.constprop.74>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8003010:	b5f0      	push	{r4, r5, r6, r7, lr}
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8003012:	4d14      	ldr	r5, [pc, #80]	; (8003064 <chThdCreateFromMemoryPool.constprop.74+0x54>)
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8003014:	b087      	sub	sp, #28
 8003016:	4607      	mov	r7, r0
  wsp = chPoolAlloc(mp);
 8003018:	4628      	mov	r0, r5
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 800301a:	460e      	mov	r6, r1
 800301c:	4614      	mov	r4, r2
  wsp = chPoolAlloc(mp);
 800301e:	f7fe fb87 	bl	8001730 <chPoolAlloc>
  if (wsp == NULL) {
 8003022:	b1e0      	cbz	r0, 800305e <chThdCreateFromMemoryPool.constprop.74+0x4e>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8003024:	686b      	ldr	r3, [r5, #4]
  thread_descriptor_t td = {
 8003026:	4a10      	ldr	r2, [pc, #64]	; (8003068 <chThdCreateFromMemoryPool.constprop.74+0x58>)
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8003028:	4403      	add	r3, r0
  thread_descriptor_t td = {
 800302a:	9302      	str	r3, [sp, #8]
 800302c:	9700      	str	r7, [sp, #0]
 800302e:	9001      	str	r0, [sp, #4]
 8003030:	9603      	str	r6, [sp, #12]
 8003032:	9405      	str	r4, [sp, #20]
 8003034:	9204      	str	r2, [sp, #16]
 8003036:	2320      	movs	r3, #32
 8003038:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800303c:	4668      	mov	r0, sp
 800303e:	f7fe fcbf 	bl	80019c0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 8003042:	2302      	movs	r3, #2
  tp->mpool = mp;
 8003044:	6405      	str	r5, [r0, #64]	; 0x40
  tp->flags = CH_FLAG_MODE_MPOOL;
 8003046:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
 800304a:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 800304c:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800304e:	f7ff ff4f 	bl	8002ef0 <chSchWakeupS>
 8003052:	2300      	movs	r3, #0
 8003054:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8003058:	4620      	mov	r0, r4
 800305a:	b007      	add	sp, #28
 800305c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 800305e:	4604      	mov	r4, r0
 8003060:	e7fa      	b.n	8003058 <chThdCreateFromMemoryPool.constprop.74+0x48>
 8003062:	bf00      	nop
 8003064:	20001318 	.word	0x20001318
 8003068:	08000b01 	.word	0x08000b01
 800306c:	00000000 	.word	0x00000000

08003070 <chSemSignal>:
void chSemSignal(semaphore_t *sp) {
 8003070:	b508      	push	{r3, lr}
 8003072:	2320      	movs	r3, #32
 8003074:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 8003078:	6883      	ldr	r3, [r0, #8]
 800307a:	3301      	adds	r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	6083      	str	r3, [r0, #8]
 8003080:	dd03      	ble.n	800308a <chSemSignal+0x1a>
 8003082:	2300      	movs	r3, #0
 8003084:	f383 8811 	msr	BASEPRI, r3
}
 8003088:	bd08      	pop	{r3, pc}
 800308a:	4603      	mov	r3, r0
  thread_t *tp = tqp->next;
 800308c:	6800      	ldr	r0, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 800308e:	2100      	movs	r1, #0
  tqp->next             = tp->queue.next;
 8003090:	6802      	ldr	r2, [r0, #0]
 8003092:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003094:	6053      	str	r3, [r2, #4]
 8003096:	f7ff ff2b 	bl	8002ef0 <chSchWakeupS>
 800309a:	2300      	movs	r3, #0
 800309c:	f383 8811 	msr	BASEPRI, r3
}
 80030a0:	bd08      	pop	{r3, pc}
 80030a2:	bf00      	nop
	...

080030b0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 80030b0:	b430      	push	{r4, r5}
  currp->state = CH_STATE_CURRENT;
 80030b2:	2501      	movs	r5, #1
  thread_t *otp = currp;
 80030b4:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <chSchGoSleepS+0x24>)
 80030b6:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 80030b8:	681a      	ldr	r2, [r3, #0]
  otp->state = newstate;
 80030ba:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 80030be:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
 80030c0:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
 80030c2:	6063      	str	r3, [r4, #4]
  currp->state = CH_STATE_CURRENT;
 80030c4:	f882 5020 	strb.w	r5, [r2, #32]
  tqp->next             = tp->queue.next;
 80030c8:	601c      	str	r4, [r3, #0]
}
 80030ca:	bc30      	pop	{r4, r5}
  currp = queue_fifo_remove(&ch.rlist.queue);
 80030cc:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 80030ce:	f7fd b8b7 	b.w	8000240 <_port_switch>
 80030d2:	bf00      	nop
 80030d4:	200010f0 	.word	0x200010f0
	...

080030e0 <chEvtWaitOne.constprop.81>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 80030e0:	4a0b      	ldr	r2, [pc, #44]	; (8003110 <chEvtWaitOne.constprop.81+0x30>)
eventmask_t chEvtWaitOne(eventmask_t events) {
 80030e2:	b510      	push	{r4, lr}
 80030e4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80030e6:	6994      	ldr	r4, [r2, #24]
 80030e8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 80030ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80030ee:	b933      	cbnz	r3, 80030fe <chEvtWaitOne.constprop.81+0x1e>
    ctp->u.ewmask = events;
 80030f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    chSchGoSleepS(CH_STATE_WTOREVT);
 80030f4:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 80030f6:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 80030f8:	f7ff ffda 	bl	80030b0 <chSchGoSleepS>
    m = ctp->epending & events;
 80030fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 80030fe:	4258      	negs	r0, r3
 8003100:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 8003102:	ea23 0300 	bic.w	r3, r3, r0
 8003106:	6363      	str	r3, [r4, #52]	; 0x34
 8003108:	2300      	movs	r3, #0
 800310a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800310e:	bd10      	pop	{r4, pc}
 8003110:	200010f0 	.word	0x200010f0
	...

08003120 <chEvtWaitAny.constprop.80>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8003120:	4a09      	ldr	r2, [pc, #36]	; (8003148 <chEvtWaitAny.constprop.80+0x28>)
eventmask_t chEvtWaitAny(eventmask_t events) {
 8003122:	b510      	push	{r4, lr}
 8003124:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8003126:	6994      	ldr	r4, [r2, #24]
 8003128:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800312c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800312e:	b930      	cbnz	r0, 800313e <chEvtWaitAny.constprop.80+0x1e>
    ctp->u.ewmask = events;
 8003130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    chSchGoSleepS(CH_STATE_WTOREVT);
 8003134:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 8003136:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8003138:	f7ff ffba 	bl	80030b0 <chSchGoSleepS>
    m = ctp->epending & events;
 800313c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->epending &= ~m;
 800313e:	2300      	movs	r3, #0
 8003140:	6363      	str	r3, [r4, #52]	; 0x34
 8003142:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8003146:	bd10      	pop	{r4, pc}
 8003148:	200010f0 	.word	0x200010f0
 800314c:	00000000 	.word	0x00000000

08003150 <chEvtWaitAll.constprop.79>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8003150:	4a0c      	ldr	r2, [pc, #48]	; (8003184 <chEvtWaitAll.constprop.79+0x34>)
eventmask_t chEvtWaitAll(eventmask_t events) {
 8003152:	b510      	push	{r4, lr}
 8003154:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8003156:	6994      	ldr	r4, [r2, #24]
 8003158:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->epending & events) != events) {
 800315c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800315e:	f003 0205 	and.w	r2, r3, #5
 8003162:	2a05      	cmp	r2, #5
 8003164:	d005      	beq.n	8003172 <chEvtWaitAll.constprop.79+0x22>
    ctp->u.ewmask = events;
 8003166:	2305      	movs	r3, #5
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8003168:	200b      	movs	r0, #11
    ctp->u.ewmask = events;
 800316a:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 800316c:	f7ff ffa0 	bl	80030b0 <chSchGoSleepS>
 8003170:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->epending &= ~events;
 8003172:	f023 0305 	bic.w	r3, r3, #5
 8003176:	6363      	str	r3, [r4, #52]	; 0x34
 8003178:	2300      	movs	r3, #0
 800317a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 800317e:	2005      	movs	r0, #5
 8003180:	bd10      	pop	{r4, pc}
 8003182:	bf00      	nop
 8003184:	200010f0 	.word	0x200010f0
	...

08003190 <bmk_thread4>:
  return ch.rlist.current;
 8003190:	4a07      	ldr	r2, [pc, #28]	; (80031b0 <bmk_thread4+0x20>)
static THD_FUNCTION(bmk_thread4, p) {
 8003192:	b510      	push	{r4, lr}
 8003194:	2320      	movs	r3, #32
 8003196:	6994      	ldr	r4, [r2, #24]
 8003198:	f383 8811 	msr	BASEPRI, r3
    chSchGoSleepS(CH_STATE_SUSPENDED);
 800319c:	2003      	movs	r0, #3
 800319e:	f7ff ff87 	bl	80030b0 <chSchGoSleepS>
  } while (msg == MSG_OK);
 80031a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f9      	beq.n	800319c <bmk_thread4+0xc>
 80031a8:	2300      	movs	r3, #0
 80031aa:	f383 8811 	msr	BASEPRI, r3
}
 80031ae:	bd10      	pop	{r4, pc}
 80031b0:	200010f0 	.word	0x200010f0
	...

080031c0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80031c0:	b530      	push	{r4, r5, lr}
  if (TIME_INFINITE != timeout) {
 80031c2:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80031c4:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 80031c6:	d012      	beq.n	80031ee <chSchGoSleepTimeoutS+0x2e>
 80031c8:	4605      	mov	r5, r0
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80031ca:	4c0c      	ldr	r4, [pc, #48]	; (80031fc <chSchGoSleepTimeoutS+0x3c>)
 80031cc:	a801      	add	r0, sp, #4
 80031ce:	69a3      	ldr	r3, [r4, #24]
 80031d0:	4a0b      	ldr	r2, [pc, #44]	; (8003200 <chSchGoSleepTimeoutS+0x40>)
 80031d2:	f7fe fe7d 	bl	8001ed0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 80031d6:	4628      	mov	r0, r5
 80031d8:	f7ff ff6a 	bl	80030b0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80031dc:	9b04      	ldr	r3, [sp, #16]
 80031de:	b113      	cbz	r3, 80031e6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 80031e0:	a801      	add	r0, sp, #4
 80031e2:	f7fe fe2d 	bl	8001e40 <chVTDoResetI>
  return currp->u.rdymsg;
 80031e6:	69a3      	ldr	r3, [r4, #24]
}
 80031e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80031ea:	b007      	add	sp, #28
 80031ec:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
 80031ee:	f7ff ff5f 	bl	80030b0 <chSchGoSleepS>
 80031f2:	4c02      	ldr	r4, [pc, #8]	; (80031fc <chSchGoSleepTimeoutS+0x3c>)
  return currp->u.rdymsg;
 80031f4:	69a3      	ldr	r3, [r4, #24]
}
 80031f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80031f8:	b007      	add	sp, #28
 80031fa:	bd30      	pop	{r4, r5, pc}
 80031fc:	200010f0 	.word	0x200010f0
 8003200:	08001a41 	.word	0x08001a41
	...

08003210 <chSemWaitTimeout.constprop.100>:
 8003210:	2320      	movs	r3, #32
 8003212:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <chSemWaitTimeout.constprop.100+0x48>)
 8003218:	6899      	ldr	r1, [r3, #8]
 800321a:	1e4a      	subs	r2, r1, #1
 800321c:	2a00      	cmp	r2, #0
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	db04      	blt.n	800322c <chSemWaitTimeout.constprop.100+0x1c>
  return MSG_OK;
 8003222:	2000      	movs	r0, #0
 8003224:	2300      	movs	r3, #0
 8003226:	f383 8811 	msr	BASEPRI, r3
}
 800322a:	4770      	bx	lr
    if (TIME_IMMEDIATE == timeout) {
 800322c:	b180      	cbz	r0, 8003250 <chSemWaitTimeout.constprop.100+0x40>
    currp->u.wtsemp = sp;
 800322e:	4a0b      	ldr	r2, [pc, #44]	; (800325c <chSemWaitTimeout.constprop.100+0x4c>)
msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 8003230:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 8003232:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8003234:	685c      	ldr	r4, [r3, #4]
 8003236:	6253      	str	r3, [r2, #36]	; 0x24
 8003238:	e9c2 3400 	strd	r3, r4, [r2]
 800323c:	4601      	mov	r1, r0
  tp->queue.prev->queue.next = tp;
 800323e:	6022      	str	r2, [r4, #0]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8003240:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8003242:	605a      	str	r2, [r3, #4]
 8003244:	f7ff ffbc 	bl	80031c0 <chSchGoSleepTimeoutS>
 8003248:	2300      	movs	r3, #0
 800324a:	f383 8811 	msr	BASEPRI, r3
}
 800324e:	bd10      	pop	{r4, pc}
      sp->cnt++;
 8003250:	6099      	str	r1, [r3, #8]
      return MSG_TIMEOUT;
 8003252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003256:	e7e5      	b.n	8003224 <chSemWaitTimeout.constprop.100+0x14>
 8003258:	20001348 	.word	0x20001348
 800325c:	200010f0 	.word	0x200010f0

08003260 <chGuardedPoolAllocTimeout.constprop.58>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 8003260:	b510      	push	{r4, lr}
 8003262:	2320      	movs	r3, #32
 8003264:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8003268:	4c15      	ldr	r4, [pc, #84]	; (80032c0 <chGuardedPoolAllocTimeout.constprop.58+0x60>)
 800326a:	68a2      	ldr	r2, [r4, #8]
 800326c:	1e53      	subs	r3, r2, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	60a3      	str	r3, [r4, #8]
 8003272:	db07      	blt.n	8003284 <chGuardedPoolAllocTimeout.constprop.58+0x24>
  objp = mp->next;
 8003274:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 8003276:	b1b0      	cbz	r0, 80032a6 <chGuardedPoolAllocTimeout.constprop.58+0x46>
    mp->next = mp->next->next;
 8003278:	6803      	ldr	r3, [r0, #0]
 800327a:	60e3      	str	r3, [r4, #12]
 800327c:	2300      	movs	r3, #0
 800327e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 8003282:	bd10      	pop	{r4, pc}
    if (TIME_IMMEDIATE == timeout) {
 8003284:	b1c8      	cbz	r0, 80032ba <chGuardedPoolAllocTimeout.constprop.58+0x5a>
    currp->u.wtsemp = sp;
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <chGuardedPoolAllocTimeout.constprop.58+0x64>)
  tp->queue.prev             = tqp->prev;
 8003288:	6862      	ldr	r2, [r4, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 800328c:	4601      	mov	r1, r0
 800328e:	e9c3 4200 	strd	r4, r2, [r3]
    currp->u.wtsemp = sp;
 8003292:	625c      	str	r4, [r3, #36]	; 0x24
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8003294:	2005      	movs	r0, #5
  tp->queue.prev->queue.next = tp;
 8003296:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8003298:	6063      	str	r3, [r4, #4]
 800329a:	f7ff ff91 	bl	80031c0 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 800329e:	2800      	cmp	r0, #0
 80032a0:	d0e8      	beq.n	8003274 <chGuardedPoolAllocTimeout.constprop.58+0x14>
    return NULL;
 80032a2:	2000      	movs	r0, #0
 80032a4:	e7ea      	b.n	800327c <chGuardedPoolAllocTimeout.constprop.58+0x1c>
  else if (mp->provider != NULL) {
 80032a6:	69a3      	ldr	r3, [r4, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0fa      	beq.n	80032a2 <chGuardedPoolAllocTimeout.constprop.58+0x42>
    objp = mp->provider(mp->object_size, mp->align);
 80032ac:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80032b0:	4798      	blx	r3
 80032b2:	2300      	movs	r3, #0
 80032b4:	f383 8811 	msr	BASEPRI, r3
}
 80032b8:	bd10      	pop	{r4, pc}
      sp->cnt++;
 80032ba:	60a2      	str	r2, [r4, #8]
 80032bc:	e7de      	b.n	800327c <chGuardedPoolAllocTimeout.constprop.58+0x1c>
 80032be:	bf00      	nop
 80032c0:	2000081c 	.word	0x2000081c
 80032c4:	200010f0 	.word	0x200010f0
	...

080032d0 <oslib_test_002_003_execute>:

static void oslib_test_002_003_execute(void) {

  /* [2.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 80032d0:	2201      	movs	r2, #1
static void oslib_test_002_003_execute(void) {
 80032d2:	b508      	push	{r3, lr}
  test_set_step(1);
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <oslib_test_002_003_execute+0x20>)
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80032d6:	20c8      	movs	r0, #200	; 0xc8
  test_set_step(1);
 80032d8:	601a      	str	r2, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80032da:	f7ff ffc1 	bl	8003260 <chGuardedPoolAllocTimeout.constprop.58>
  }
}
 80032de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80032e2:	fab0 f080 	clz	r0, r0
 80032e6:	4903      	ldr	r1, [pc, #12]	; (80032f4 <oslib_test_002_003_execute+0x24>)
 80032e8:	0940      	lsrs	r0, r0, #5
 80032ea:	f7fd bb31 	b.w	8000950 <_test_assert>
 80032ee:	bf00      	nop
 80032f0:	20001a7c 	.word	0x20001a7c
 80032f4:	0800a4d4 	.word	0x0800a4d4
	...

08003300 <rt_test_008_006_execute>:
  test_set_step(1);
 8003300:	2001      	movs	r0, #1
static void rt_test_008_006_execute(void) {
 8003302:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8003304:	4d55      	ldr	r5, [pc, #340]	; (800345c <rt_test_008_006_execute+0x15c>)
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8003306:	4c56      	ldr	r4, [pc, #344]	; (8003460 <rt_test_008_006_execute+0x160>)
 8003308:	6028      	str	r0, [r5, #0]
 800330a:	69a2      	ldr	r2, [r4, #24]
 800330c:	2320      	movs	r3, #32
 800330e:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8003312:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8003314:	b933      	cbnz	r3, 8003324 <rt_test_008_006_execute+0x24>
 8003316:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 800331a:	4952      	ldr	r1, [pc, #328]	; (8003464 <rt_test_008_006_execute+0x164>)
 800331c:	f7fd fb18 	bl	8000950 <_test_assert>
 8003320:	b180      	cbz	r0, 8003344 <rt_test_008_006_execute+0x44>
}
 8003322:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8003324:	4258      	negs	r0, r3
 8003326:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 8003328:	ea23 0300 	bic.w	r3, r3, r0
 800332c:	6353      	str	r3, [r2, #52]	; 0x34
 800332e:	2300      	movs	r3, #0
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	fab0 f080 	clz	r0, r0
    test_assert(m == 0, "spurious event");
 8003338:	494a      	ldr	r1, [pc, #296]	; (8003464 <rt_test_008_006_execute+0x164>)
 800333a:	0940      	lsrs	r0, r0, #5
 800333c:	f7fd fb08 	bl	8000950 <_test_assert>
 8003340:	2800      	cmp	r0, #0
 8003342:	d1ee      	bne.n	8003322 <rt_test_008_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8003344:	69a3      	ldr	r3, [r4, #24]
 8003346:	2220      	movs	r2, #32
 8003348:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 800334c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800334e:	2a00      	cmp	r2, #0
 8003350:	d06f      	beq.n	8003432 <rt_test_008_006_execute+0x132>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 8003352:	6358      	str	r0, [r3, #52]	; 0x34
 8003354:	f380 8811 	msr	BASEPRI, r0
    test_assert(m == 0, "spurious event");
 8003358:	4942      	ldr	r1, [pc, #264]	; (8003464 <rt_test_008_006_execute+0x164>)
 800335a:	f7fd faf9 	bl	8000950 <_test_assert>
 800335e:	2800      	cmp	r0, #0
 8003360:	d1df      	bne.n	8003322 <rt_test_008_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8003362:	69a3      	ldr	r3, [r4, #24]
 8003364:	2220      	movs	r2, #32
 8003366:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->epending & events) != events) {
 800336a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336c:	3201      	adds	r2, #1
 800336e:	d064      	beq.n	800343a <rt_test_008_006_execute+0x13a>
 8003370:	f380 8811 	msr	BASEPRI, r0
 8003374:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 8003376:	493b      	ldr	r1, [pc, #236]	; (8003464 <rt_test_008_006_execute+0x164>)
 8003378:	f7fd faea 	bl	8000950 <_test_assert>
 800337c:	2800      	cmp	r0, #0
 800337e:	d1d0      	bne.n	8003322 <rt_test_008_006_execute+0x22>
  test_set_step(2);
 8003380:	2302      	movs	r3, #2
  thread_t *ctp = currp;
 8003382:	69a6      	ldr	r6, [r4, #24]
 8003384:	602b      	str	r3, [r5, #0]
 8003386:	2320      	movs	r3, #32
 8003388:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 800338c:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800338e:	b94d      	cbnz	r5, 80033a4 <rt_test_008_006_execute+0xa4>
    ctp->u.ewmask = events;
 8003390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8003394:	2164      	movs	r1, #100	; 0x64
    ctp->u.ewmask = events;
 8003396:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8003398:	200a      	movs	r0, #10
 800339a:	f7ff ff11 	bl	80031c0 <chSchGoSleepTimeoutS>
 800339e:	2800      	cmp	r0, #0
 80033a0:	db4f      	blt.n	8003442 <rt_test_008_006_execute+0x142>
    m = ctp->epending & events;
 80033a2:	6b75      	ldr	r5, [r6, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 80033a4:	4268      	negs	r0, r5
 80033a6:	4028      	ands	r0, r5
  ctp->epending &= ~m;
 80033a8:	ea25 0500 	bic.w	r5, r5, r0
 80033ac:	6375      	str	r5, [r6, #52]	; 0x34
 80033ae:	2300      	movs	r3, #0
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	fab0 f080 	clz	r0, r0
 80033b8:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 80033ba:	492a      	ldr	r1, [pc, #168]	; (8003464 <rt_test_008_006_execute+0x164>)
 80033bc:	f7fd fac8 	bl	8000950 <_test_assert>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d1ae      	bne.n	8003322 <rt_test_008_006_execute+0x22>
  thread_t *ctp = currp;
 80033c4:	69a6      	ldr	r6, [r4, #24]
 80033c6:	2320      	movs	r3, #32
 80033c8:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 80033cc:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80033ce:	b94d      	cbnz	r5, 80033e4 <rt_test_008_006_execute+0xe4>
    ctp->u.ewmask = events;
 80033d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 80033d4:	2164      	movs	r1, #100	; 0x64
    ctp->u.ewmask = events;
 80033d6:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 80033d8:	200a      	movs	r0, #10
 80033da:	f7ff fef1 	bl	80031c0 <chSchGoSleepTimeoutS>
 80033de:	2800      	cmp	r0, #0
 80033e0:	db33      	blt.n	800344a <rt_test_008_006_execute+0x14a>
    m = ctp->epending & events;
 80033e2:	6b75      	ldr	r5, [r6, #52]	; 0x34
  ctp->epending &= ~m;
 80033e4:	2300      	movs	r3, #0
 80033e6:	6373      	str	r3, [r6, #52]	; 0x34
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	fab5 f085 	clz	r0, r5
 80033f0:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 80033f2:	491c      	ldr	r1, [pc, #112]	; (8003464 <rt_test_008_006_execute+0x164>)
 80033f4:	f7fd faac 	bl	8000950 <_test_assert>
 80033f8:	4605      	mov	r5, r0
 80033fa:	2800      	cmp	r0, #0
 80033fc:	d191      	bne.n	8003322 <rt_test_008_006_execute+0x22>
  thread_t *ctp = currp;
 80033fe:	69a4      	ldr	r4, [r4, #24]
 8003400:	2320      	movs	r3, #32
 8003402:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
 8003406:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003408:	3301      	adds	r3, #1
 800340a:	d008      	beq.n	800341e <rt_test_008_006_execute+0x11e>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 800340c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8003410:	2164      	movs	r1, #100	; 0x64
    ctp->u.ewmask = events;
 8003412:	6263      	str	r3, [r4, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8003414:	200b      	movs	r0, #11
 8003416:	f7ff fed3 	bl	80031c0 <chSchGoSleepTimeoutS>
 800341a:	2800      	cmp	r0, #0
 800341c:	db19      	blt.n	8003452 <rt_test_008_006_execute+0x152>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 800341e:	2300      	movs	r3, #0
 8003420:	6363      	str	r3, [r4, #52]	; 0x34
 8003422:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 8003426:	4628      	mov	r0, r5
}
 8003428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(m == 0, "spurious event");
 800342c:	490d      	ldr	r1, [pc, #52]	; (8003464 <rt_test_008_006_execute+0x164>)
 800342e:	f7fd ba8f 	b.w	8000950 <_test_assert>
 8003432:	f382 8811 	msr	BASEPRI, r2
 8003436:	2001      	movs	r0, #1
 8003438:	e78e      	b.n	8003358 <rt_test_008_006_execute+0x58>
 800343a:	6358      	str	r0, [r3, #52]	; 0x34
 800343c:	f380 8811 	msr	BASEPRI, r0
 8003440:	e799      	b.n	8003376 <rt_test_008_006_execute+0x76>
 8003442:	f385 8811 	msr	BASEPRI, r5
 8003446:	2001      	movs	r0, #1
 8003448:	e7b7      	b.n	80033ba <rt_test_008_006_execute+0xba>
 800344a:	f385 8811 	msr	BASEPRI, r5
 800344e:	2001      	movs	r0, #1
 8003450:	e7cf      	b.n	80033f2 <rt_test_008_006_execute+0xf2>
 8003452:	f385 8811 	msr	BASEPRI, r5
 8003456:	2501      	movs	r5, #1
 8003458:	e7e5      	b.n	8003426 <rt_test_008_006_execute+0x126>
 800345a:	bf00      	nop
 800345c:	20001a7c 	.word	0x20001a7c
 8003460:	200010f0 	.word	0x200010f0
 8003464:	0800b5f8 	.word	0x0800b5f8
	...

08003470 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8003470:	b161      	cbz	r1, 800348c <chThdEnqueueTimeoutS+0x1c>
 8003472:	4602      	mov	r2, r0
  queue_insert(currp, tqp);
 8003474:	4b07      	ldr	r3, [pc, #28]	; (8003494 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8003476:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8003478:	699b      	ldr	r3, [r3, #24]
  tp->queue.prev             = tqp->prev;
 800347a:	6844      	ldr	r4, [r0, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800347c:	2004      	movs	r0, #4
 800347e:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
 8003482:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8003484:	6053      	str	r3, [r2, #4]
}
 8003486:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003488:	f7ff be9a 	b.w	80031c0 <chSchGoSleepTimeoutS>
}
 800348c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	200010f0 	.word	0x200010f0
	...

080034a0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 80034a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a4:	b083      	sub	sp, #12
 80034a6:	4617      	mov	r7, r2
 80034a8:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 80034aa:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 80034ae:	f04f 0b20 	mov.w	fp, #32
 80034b2:	f38b 8811 	msr	BASEPRI, fp

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
 80034b6:	2a00      	cmp	r2, #0
 80034b8:	d04f      	beq.n	800355a <oqWriteTimeout+0xba>
 80034ba:	4604      	mov	r4, r0
 80034bc:	460e      	mov	r6, r1
  size_t wr = 0;
 80034be:	f04f 0800 	mov.w	r8, #0
 80034c2:	e00d      	b.n	80034e0 <oqWriteTimeout+0x40>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80034c4:	f1ba 0f00 	cmp.w	sl, #0
 80034c8:	d001      	beq.n	80034ce <oqWriteTimeout+0x2e>
        nfy(oqp);
 80034ca:	4620      	mov	r0, r4
 80034cc:	47d0      	blx	sl
 80034ce:	2300      	movs	r3, #0
 80034d0:	f383 8811 	msr	BASEPRI, r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      wr += done;
 80034d4:	44a8      	add	r8, r5
      bp += done;
 80034d6:	442e      	add	r6, r5
 80034d8:	f38b 8811 	msr	BASEPRI, fp
  while (wr < n) {
 80034dc:	4547      	cmp	r7, r8
 80034de:	d91c      	bls.n	800351a <oqWriteTimeout+0x7a>
  if (n > oqGetEmptyI(oqp)) {
 80034e0:	68a3      	ldr	r3, [r4, #8]
 80034e2:	429f      	cmp	r7, r3
 80034e4:	bf98      	it	ls
 80034e6:	463d      	movls	r5, r7
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80034e8:	e9d4 3004 	ldrd	r3, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 80034ec:	bf88      	it	hi
 80034ee:	68a5      	ldrhi	r5, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80034f0:	1a1b      	subs	r3, r3, r0
  if (n < s1) {
 80034f2:	42ab      	cmp	r3, r5
 80034f4:	d829      	bhi.n	800354a <oqWriteTimeout+0xaa>
  else if (n > s1) {
 80034f6:	d317      	bcc.n	8003528 <oqWriteTimeout+0x88>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80034f8:	462a      	mov	r2, r5
 80034fa:	4631      	mov	r1, r6
 80034fc:	f7fc feb4 	bl	8000268 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8003500:	68e3      	ldr	r3, [r4, #12]
 8003502:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 8003504:	68a3      	ldr	r3, [r4, #8]
 8003506:	1b5b      	subs	r3, r3, r5
 8003508:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 800350a:	2d00      	cmp	r5, #0
 800350c:	d1da      	bne.n	80034c4 <oqWriteTimeout+0x24>
  return chThdEnqueueTimeoutS(tqp, timeout);
 800350e:	9901      	ldr	r1, [sp, #4]
 8003510:	4620      	mov	r0, r4
 8003512:	f7ff ffad 	bl	8003470 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8003516:	2800      	cmp	r0, #0
 8003518:	d0e0      	beq.n	80034dc <oqWriteTimeout+0x3c>
 800351a:	2300      	movs	r3, #0
 800351c:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return wr;
}
 8003520:	4640      	mov	r0, r8
 8003522:	b003      	add	sp, #12
 8003524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8003528:	461a      	mov	r2, r3
 800352a:	4631      	mov	r1, r6
    s2 = n - s1;
 800352c:	eba5 0903 	sub.w	r9, r5, r3
 8003530:	9300      	str	r3, [sp, #0]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8003532:	f7fc fe99 	bl	8000268 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8003536:	9b00      	ldr	r3, [sp, #0]
 8003538:	464a      	mov	r2, r9
 800353a:	18f1      	adds	r1, r6, r3
 800353c:	68e0      	ldr	r0, [r4, #12]
 800353e:	f7fc fe93 	bl	8000268 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8003542:	68e3      	ldr	r3, [r4, #12]
 8003544:	444b      	add	r3, r9
 8003546:	6163      	str	r3, [r4, #20]
 8003548:	e7dc      	b.n	8003504 <oqWriteTimeout+0x64>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800354a:	462a      	mov	r2, r5
 800354c:	4631      	mov	r1, r6
 800354e:	f7fc fe8b 	bl	8000268 <memcpy>
    oqp->q_wrptr += n;
 8003552:	6963      	ldr	r3, [r4, #20]
 8003554:	442b      	add	r3, r5
 8003556:	6163      	str	r3, [r4, #20]
 8003558:	e7d4      	b.n	8003504 <oqWriteTimeout+0x64>
  size_t wr = 0;
 800355a:	4690      	mov	r8, r2
 800355c:	e7dd      	b.n	800351a <oqWriteTimeout+0x7a>
 800355e:	bf00      	nop

08003560 <_writet.lto_priv.120>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8003560:	3030      	adds	r0, #48	; 0x30
 8003562:	f7ff bf9d 	b.w	80034a0 <oqWriteTimeout>
 8003566:	bf00      	nop
	...

08003570 <_write.lto_priv.132>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003570:	3030      	adds	r0, #48	; 0x30
 8003572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003576:	f7ff bf93 	b.w	80034a0 <oqWriteTimeout>
 800357a:	bf00      	nop
 800357c:	0000      	movs	r0, r0
	...

08003580 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	4604      	mov	r4, r0
 8003584:	460f      	mov	r7, r1
 8003586:	4616      	mov	r6, r2
 8003588:	2320      	movs	r3, #32
 800358a:	f383 8811 	msr	BASEPRI, r3
 800358e:	e005      	b.n	800359c <oqPutTimeout+0x1c>
 8003590:	4631      	mov	r1, r6
 8003592:	4620      	mov	r0, r4
 8003594:	f7ff ff6c 	bl	8003470 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8003598:	2800      	cmp	r0, #0
 800359a:	db17      	blt.n	80035cc <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
 800359c:	68a5      	ldr	r5, [r4, #8]
 800359e:	2d00      	cmp	r5, #0
 80035a0:	d0f6      	beq.n	8003590 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 80035a2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 80035a4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80035a6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 80035a8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80035aa:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 80035ac:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80035ae:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80035b0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80035b4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80035b6:	bf24      	itt	cs
 80035b8:	68e3      	ldrcs	r3, [r4, #12]
 80035ba:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 80035bc:	69e3      	ldr	r3, [r4, #28]
 80035be:	b10b      	cbz	r3, 80035c4 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
 80035c0:	4620      	mov	r0, r4
 80035c2:	4798      	blx	r3
 80035c4:	2000      	movs	r0, #0
 80035c6:	f380 8811 	msr	BASEPRI, r0
}
 80035ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035cc:	f385 8811 	msr	BASEPRI, r5
 80035d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d2:	bf00      	nop
	...

080035e0 <_putt.lto_priv.124>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80035e0:	3030      	adds	r0, #48	; 0x30
 80035e2:	f7ff bfcd 	b.w	8003580 <oqPutTimeout>
 80035e6:	bf00      	nop
	...

080035f0 <_put.lto_priv.128>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80035f0:	3030      	adds	r0, #48	; 0x30
 80035f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035f6:	f7ff bfc3 	b.w	8003580 <oqPutTimeout>
 80035fa:	bf00      	nop
 80035fc:	0000      	movs	r0, r0
	...

08003600 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8003600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003604:	b083      	sub	sp, #12
 8003606:	4617      	mov	r7, r2
 8003608:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = iqp->q_notify;
 800360a:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 800360e:	f04f 0b20 	mov.w	fp, #32
 8003612:	f38b 8811 	msr	BASEPRI, fp
  while (rd < n) {
 8003616:	2a00      	cmp	r2, #0
 8003618:	d04f      	beq.n	80036ba <iqReadTimeout+0xba>
 800361a:	4604      	mov	r4, r0
 800361c:	460e      	mov	r6, r1
  size_t rd = 0;
 800361e:	f04f 0800 	mov.w	r8, #0
 8003622:	e00d      	b.n	8003640 <iqReadTimeout+0x40>
      if (nfy != NULL) {
 8003624:	f1ba 0f00 	cmp.w	sl, #0
 8003628:	d001      	beq.n	800362e <iqReadTimeout+0x2e>
        nfy(iqp);
 800362a:	4620      	mov	r0, r4
 800362c:	47d0      	blx	sl
 800362e:	2300      	movs	r3, #0
 8003630:	f383 8811 	msr	BASEPRI, r3
      rd += done;
 8003634:	44a8      	add	r8, r5
      bp += done;
 8003636:	442e      	add	r6, r5
 8003638:	f38b 8811 	msr	BASEPRI, fp
  while (rd < n) {
 800363c:	4547      	cmp	r7, r8
 800363e:	d91c      	bls.n	800367a <iqReadTimeout+0x7a>
  if (n > iqGetFullI(iqp)) {
 8003640:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8003642:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8003644:	429f      	cmp	r7, r3
 8003646:	bf98      	it	ls
 8003648:	463d      	movls	r5, r7
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800364a:	6923      	ldr	r3, [r4, #16]
    n = iqGetFullI(iqp);
 800364c:	bf88      	it	hi
 800364e:	68a5      	ldrhi	r5, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8003650:	1a5b      	subs	r3, r3, r1
  if (n < s1) {
 8003652:	42ab      	cmp	r3, r5
 8003654:	d829      	bhi.n	80036aa <iqReadTimeout+0xaa>
  else if (n > s1) {
 8003656:	d317      	bcc.n	8003688 <iqReadTimeout+0x88>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8003658:	462a      	mov	r2, r5
 800365a:	4630      	mov	r0, r6
 800365c:	f7fc fe04 	bl	8000268 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8003660:	68e3      	ldr	r3, [r4, #12]
 8003662:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 8003664:	68a3      	ldr	r3, [r4, #8]
 8003666:	1b5b      	subs	r3, r3, r5
 8003668:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 800366a:	2d00      	cmp	r5, #0
 800366c:	d1da      	bne.n	8003624 <iqReadTimeout+0x24>
 800366e:	9901      	ldr	r1, [sp, #4]
 8003670:	4620      	mov	r0, r4
 8003672:	f7ff fefd 	bl	8003470 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8003676:	2800      	cmp	r0, #0
 8003678:	d0e0      	beq.n	800363c <iqReadTimeout+0x3c>
 800367a:	2300      	movs	r3, #0
 800367c:	f383 8811 	msr	BASEPRI, r3
}
 8003680:	4640      	mov	r0, r8
 8003682:	b003      	add	sp, #12
 8003684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8003688:	461a      	mov	r2, r3
 800368a:	4630      	mov	r0, r6
    s2 = n - s1;
 800368c:	eba5 0903 	sub.w	r9, r5, r3
 8003690:	9300      	str	r3, [sp, #0]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8003692:	f7fc fde9 	bl	8000268 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8003696:	9b00      	ldr	r3, [sp, #0]
 8003698:	464a      	mov	r2, r9
 800369a:	18f0      	adds	r0, r6, r3
 800369c:	68e1      	ldr	r1, [r4, #12]
 800369e:	f7fc fde3 	bl	8000268 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 80036a2:	68e3      	ldr	r3, [r4, #12]
 80036a4:	444b      	add	r3, r9
 80036a6:	61a3      	str	r3, [r4, #24]
 80036a8:	e7dc      	b.n	8003664 <iqReadTimeout+0x64>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80036aa:	462a      	mov	r2, r5
 80036ac:	4630      	mov	r0, r6
 80036ae:	f7fc fddb 	bl	8000268 <memcpy>
    iqp->q_rdptr += n;
 80036b2:	69a3      	ldr	r3, [r4, #24]
 80036b4:	442b      	add	r3, r5
 80036b6:	61a3      	str	r3, [r4, #24]
 80036b8:	e7d4      	b.n	8003664 <iqReadTimeout+0x64>
  size_t rd = 0;
 80036ba:	4690      	mov	r8, r2
 80036bc:	e7dd      	b.n	800367a <iqReadTimeout+0x7a>
 80036be:	bf00      	nop

080036c0 <_readt.lto_priv.118>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80036c0:	300c      	adds	r0, #12
 80036c2:	f7ff bf9d 	b.w	8003600 <iqReadTimeout>
 80036c6:	bf00      	nop
	...

080036d0 <_read.lto_priv.130>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80036d0:	300c      	adds	r0, #12
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036d6:	f7ff bf93 	b.w	8003600 <iqReadTimeout>
 80036da:	bf00      	nop
 80036dc:	0000      	movs	r0, r0
	...

080036e0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80036e0:	b570      	push	{r4, r5, r6, lr}
 80036e2:	2320      	movs	r3, #32
 80036e4:	4604      	mov	r4, r0
 80036e6:	460e      	mov	r6, r1
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	e005      	b.n	80036fa <iqGetTimeout+0x1a>
 80036ee:	4631      	mov	r1, r6
 80036f0:	4620      	mov	r0, r4
 80036f2:	f7ff febd 	bl	8003470 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80036f6:	2800      	cmp	r0, #0
 80036f8:	db18      	blt.n	800372c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 80036fa:	68a5      	ldr	r5, [r4, #8]
 80036fc:	2d00      	cmp	r5, #0
 80036fe:	d0f6      	beq.n	80036ee <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8003700:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8003702:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8003704:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 8003706:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8003708:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800370a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 800370c:	60a3      	str	r3, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer;
 800370e:	bf28      	it	cs
 8003710:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8003712:	61a2      	str	r2, [r4, #24]
 8003714:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8003716:	bf28      	it	cs
 8003718:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 800371a:	69e3      	ldr	r3, [r4, #28]
 800371c:	b10b      	cbz	r3, 8003722 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 800371e:	4620      	mov	r0, r4
 8003720:	4798      	blx	r3
 8003722:	2300      	movs	r3, #0
 8003724:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8003728:	4628      	mov	r0, r5
}
 800372a:	bd70      	pop	{r4, r5, r6, pc}
 800372c:	f385 8811 	msr	BASEPRI, r5
 8003730:	bd70      	pop	{r4, r5, r6, pc}
 8003732:	bf00      	nop
	...

08003740 <_gett.lto_priv.122>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8003740:	300c      	adds	r0, #12
 8003742:	f7ff bfcd 	b.w	80036e0 <iqGetTimeout>
 8003746:	bf00      	nop
	...

08003750 <_get.lto_priv.126>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8003750:	300c      	adds	r0, #12
 8003752:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003756:	f7ff bfc3 	b.w	80036e0 <iqGetTimeout>
 800375a:	bf00      	nop
 800375c:	0000      	movs	r0, r0
	...

08003760 <obqGetEmptyBufferTimeoutS>:
                                sysinterval_t timeout) {
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	4604      	mov	r4, r0
 8003764:	460d      	mov	r5, r1
 8003766:	e007      	b.n	8003778 <obqGetEmptyBufferTimeoutS+0x18>
    if (obqp->suspended) {
 8003768:	7a23      	ldrb	r3, [r4, #8]
 800376a:	b983      	cbnz	r3, 800378e <obqGetEmptyBufferTimeoutS+0x2e>
 800376c:	4629      	mov	r1, r5
 800376e:	4620      	mov	r0, r4
 8003770:	f7ff fe7e 	bl	8003470 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8003774:	2800      	cmp	r0, #0
 8003776:	db09      	blt.n	800378c <obqGetEmptyBufferTimeoutS+0x2c>
  while (obqIsFullI(obqp)) {
 8003778:	68e3      	ldr	r3, [r4, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f4      	beq.n	8003768 <obqGetEmptyBufferTimeoutS+0x8>
  obqp->top = obqp->bwrptr + obqp->bsize;
 800377e:	2000      	movs	r0, #0
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8003780:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8003782:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8003784:	1d1a      	adds	r2, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8003786:	440b      	add	r3, r1
 8003788:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
}
 800378c:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 800378e:	f06f 0001 	mvn.w	r0, #1
}
 8003792:	bd38      	pop	{r3, r4, r5, pc}
	...

080037a0 <obqWriteTimeout>:
                       size_t n, sysinterval_t timeout) {
 80037a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a4:	4699      	mov	r9, r3
 80037a6:	b083      	sub	sp, #12
 80037a8:	4605      	mov	r5, r0
 80037aa:	460e      	mov	r6, r1
 80037ac:	4617      	mov	r7, r2
 80037ae:	2320      	movs	r3, #32
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  size_t w = 0;
 80037b8:	f04f 0b00 	mov.w	fp, #0
 80037bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
    if (obqp->ptr == NULL) {
 80037be:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80037c0:	444a      	add	r2, r9
 80037c2:	b293      	uxth	r3, r2
  obqp->ptr = NULL;
 80037c4:	46d8      	mov	r8, fp
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80037c6:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
 80037ca:	9301      	str	r3, [sp, #4]
    if (obqp->ptr == NULL) {
 80037cc:	2800      	cmp	r0, #0
 80037ce:	d041      	beq.n	8003854 <obqWriteTimeout+0xb4>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 80037d0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    if (size > (n - w)) {
 80037d2:	eba7 040b 	sub.w	r4, r7, fp
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 80037d6:	1a12      	subs	r2, r2, r0
 80037d8:	4294      	cmp	r4, r2
 80037da:	bf28      	it	cs
 80037dc:	4614      	movcs	r4, r2
    if (size > 64U) {
 80037de:	2c40      	cmp	r4, #64	; 0x40
 80037e0:	d949      	bls.n	8003876 <obqWriteTimeout+0xd6>
      memcpy(obqp->ptr, bp, 64U);
 80037e2:	f106 0240 	add.w	r2, r6, #64	; 0x40
 80037e6:	f8d6 c000 	ldr.w	ip, [r6]
 80037ea:	6874      	ldr	r4, [r6, #4]
 80037ec:	68b1      	ldr	r1, [r6, #8]
 80037ee:	68f3      	ldr	r3, [r6, #12]
 80037f0:	3610      	adds	r6, #16
 80037f2:	4296      	cmp	r6, r2
 80037f4:	f8c0 c000 	str.w	ip, [r0]
 80037f8:	6044      	str	r4, [r0, #4]
 80037fa:	6081      	str	r1, [r0, #8]
 80037fc:	60c3      	str	r3, [r0, #12]
 80037fe:	f100 0010 	add.w	r0, r0, #16
 8003802:	d1f0      	bne.n	80037e6 <obqWriteTimeout+0x46>
      obqp->ptr += 64U;
 8003804:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      w         += 64U;
 8003806:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
      obqp->ptr += 64U;
 800380a:	3240      	adds	r2, #64	; 0x40
 800380c:	62aa      	str	r2, [r5, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 800380e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003810:	4291      	cmp	r1, r2
 8003812:	d815      	bhi.n	8003840 <obqWriteTimeout+0xa0>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8003814:	69e9      	ldr	r1, [r5, #28]
  *((size_t *)obqp->bwrptr) = size;
 8003816:	692a      	ldr	r2, [r5, #16]
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8003818:	3904      	subs	r1, #4
  *((size_t *)obqp->bwrptr) = size;
 800381a:	6011      	str	r1, [r2, #0]
  obqp->bwrptr += obqp->bsize;
 800381c:	69ec      	ldr	r4, [r5, #28]
  if (obqp->bwrptr >= obqp->btop) {
 800381e:	69a9      	ldr	r1, [r5, #24]
  obqp->bwrptr += obqp->bsize;
 8003820:	4422      	add	r2, r4
  if (obqp->bwrptr >= obqp->btop) {
 8003822:	428a      	cmp	r2, r1
  obqp->bwrptr += obqp->bsize;
 8003824:	612a      	str	r2, [r5, #16]
    obqp->bwrptr = obqp->buffers;
 8003826:	bf28      	it	cs
 8003828:	6a6a      	ldrcs	r2, [r5, #36]	; 0x24
  obqp->bcounter--;
 800382a:	68e8      	ldr	r0, [r5, #12]
    obqp->bwrptr = obqp->buffers;
 800382c:	bf28      	it	cs
 800382e:	612a      	strcs	r2, [r5, #16]
  if (obqp->notify != NULL) {
 8003830:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  obqp->bcounter--;
 8003832:	3801      	subs	r0, #1
 8003834:	60e8      	str	r0, [r5, #12]
  obqp->ptr = NULL;
 8003836:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  if (obqp->notify != NULL) {
 800383a:	b10a      	cbz	r2, 8003840 <obqWriteTimeout+0xa0>
    obqp->notify(obqp);
 800383c:	4628      	mov	r0, r5
 800383e:	4790      	blx	r2
 8003840:	f388 8811 	msr	BASEPRI, r8
    if (w >= n) {
 8003844:	45bb      	cmp	fp, r7
 8003846:	d229      	bcs.n	800389c <obqWriteTimeout+0xfc>
 8003848:	2220      	movs	r2, #32
 800384a:	f382 8811 	msr	BASEPRI, r2
    if (obqp->ptr == NULL) {
 800384e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003850:	2800      	cmp	r0, #0
 8003852:	d1bd      	bne.n	80037d0 <obqWriteTimeout+0x30>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8003854:	f11a 0f03 	cmn.w	sl, #3
 8003858:	d817      	bhi.n	800388a <obqWriteTimeout+0xea>
 800385a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800385e:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8003860:	9b01      	ldr	r3, [sp, #4]
 8003862:	1a59      	subs	r1, r3, r1
 8003864:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
 8003866:	4589      	cmp	r9, r1
 8003868:	d31c      	bcc.n	80038a4 <obqWriteTimeout+0x104>
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 800386a:	4628      	mov	r0, r5
 800386c:	f7ff ff78 	bl	8003760 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 8003870:	b988      	cbnz	r0, 8003896 <obqWriteTimeout+0xf6>
 8003872:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003874:	e7ac      	b.n	80037d0 <obqWriteTimeout+0x30>
      memcpy(obqp->ptr, bp, size);
 8003876:	4622      	mov	r2, r4
 8003878:	4631      	mov	r1, r6
 800387a:	f7fc fcf5 	bl	8000268 <memcpy>
      obqp->ptr += size;
 800387e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      w         += size;
 8003880:	44a3      	add	fp, r4
      obqp->ptr += size;
 8003882:	4422      	add	r2, r4
      bp        += size;
 8003884:	4426      	add	r6, r4
      obqp->ptr += size;
 8003886:	62aa      	str	r2, [r5, #40]	; 0x28
 8003888:	e7c1      	b.n	800380e <obqWriteTimeout+0x6e>
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 800388a:	4649      	mov	r1, r9
 800388c:	4628      	mov	r0, r5
 800388e:	f7ff ff67 	bl	8003760 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 8003892:	2800      	cmp	r0, #0
 8003894:	d0ed      	beq.n	8003872 <obqWriteTimeout+0xd2>
 8003896:	2200      	movs	r2, #0
 8003898:	f382 8811 	msr	BASEPRI, r2
}
 800389c:	4658      	mov	r0, fp
 800389e:	b003      	add	sp, #12
 80038a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038a4:	f380 8811 	msr	BASEPRI, r0
 80038a8:	4658      	mov	r0, fp
 80038aa:	b003      	add	sp, #12
 80038ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080038b0 <_writet.lto_priv.121>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 80038b0:	3044      	adds	r0, #68	; 0x44
 80038b2:	f7ff bf75 	b.w	80037a0 <obqWriteTimeout>
 80038b6:	bf00      	nop
	...

080038c0 <_write.lto_priv.133>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 80038c0:	3044      	adds	r0, #68	; 0x44
 80038c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038c6:	f7ff bf6b 	b.w	80037a0 <obqWriteTimeout>
 80038ca:	bf00      	nop
 80038cc:	0000      	movs	r0, r0
	...

080038d0 <obqPutTimeout>:
                    sysinterval_t timeout) {
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	2320      	movs	r3, #32
 80038d4:	460e      	mov	r6, r1
 80038d6:	4604      	mov	r4, r0
 80038d8:	f383 8811 	msr	BASEPRI, r3
  if (obqp->ptr == NULL) {
 80038dc:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80038de:	b305      	cbz	r5, 8003922 <obqPutTimeout+0x52>
  *obqp->ptr = b;
 80038e0:	702e      	strb	r6, [r5, #0]
  if (obqp->ptr >= obqp->top) {
 80038e2:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 80038e6:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 80038e8:	4293      	cmp	r3, r2
  obqp->ptr++;
 80038ea:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 80038ec:	d315      	bcc.n	800391a <obqPutTimeout+0x4a>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80038ee:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 80038f0:	6923      	ldr	r3, [r4, #16]
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80038f2:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 80038f4:	601a      	str	r2, [r3, #0]
  obqp->bcounter--;
 80038f6:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 80038f8:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 80038fa:	3a01      	subs	r2, #1
 80038fc:	60e2      	str	r2, [r4, #12]
  obqp->ptr = NULL;
 80038fe:	2200      	movs	r2, #0
  if (obqp->bwrptr >= obqp->btop) {
 8003900:	69a1      	ldr	r1, [r4, #24]
  obqp->bwrptr += obqp->bsize;
 8003902:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 8003904:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 8003906:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 8003908:	bf28      	it	cs
 800390a:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
  obqp->ptr = NULL;
 800390c:	62a2      	str	r2, [r4, #40]	; 0x28
    obqp->bwrptr = obqp->buffers;
 800390e:	bf28      	it	cs
 8003910:	6123      	strcs	r3, [r4, #16]
  if (obqp->notify != NULL) {
 8003912:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003914:	b10b      	cbz	r3, 800391a <obqPutTimeout+0x4a>
    obqp->notify(obqp);
 8003916:	4620      	mov	r0, r4
 8003918:	4798      	blx	r3
 800391a:	2000      	movs	r0, #0
 800391c:	f380 8811 	msr	BASEPRI, r0
}
 8003920:	bd70      	pop	{r4, r5, r6, pc}
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8003922:	4611      	mov	r1, r2
 8003924:	f7ff ff1c 	bl	8003760 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8003928:	b908      	cbnz	r0, 800392e <obqPutTimeout+0x5e>
 800392a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800392c:	e7d8      	b.n	80038e0 <obqPutTimeout+0x10>
 800392e:	f385 8811 	msr	BASEPRI, r5
}
 8003932:	bd70      	pop	{r4, r5, r6, pc}
	...

08003940 <_putt.lto_priv.125>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 8003940:	3044      	adds	r0, #68	; 0x44
 8003942:	f7ff bfc5 	b.w	80038d0 <obqPutTimeout>
 8003946:	bf00      	nop
	...

08003950 <_put.lto_priv.129>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8003950:	3044      	adds	r0, #68	; 0x44
 8003952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003956:	f7ff bfbb 	b.w	80038d0 <obqPutTimeout>
 800395a:	bf00      	nop
 800395c:	0000      	movs	r0, r0
	...

08003960 <ibqGetFullBufferTimeoutS>:
                                 sysinterval_t timeout) {
 8003960:	b538      	push	{r3, r4, r5, lr}
 8003962:	4604      	mov	r4, r0
 8003964:	460d      	mov	r5, r1
 8003966:	e007      	b.n	8003978 <ibqGetFullBufferTimeoutS+0x18>
    if (ibqp->suspended) {
 8003968:	7a23      	ldrb	r3, [r4, #8]
 800396a:	b983      	cbnz	r3, 800398e <ibqGetFullBufferTimeoutS+0x2e>
 800396c:	4629      	mov	r1, r5
 800396e:	4620      	mov	r0, r4
 8003970:	f7ff fd7e 	bl	8003470 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8003974:	2800      	cmp	r0, #0
 8003976:	db09      	blt.n	800398c <ibqGetFullBufferTimeoutS+0x2c>
  while (ibqIsEmptyI(ibqp)) {
 8003978:	68e3      	ldr	r3, [r4, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f4      	beq.n	8003968 <ibqGetFullBufferTimeoutS+0x8>
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 800397e:	2000      	movs	r0, #0
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8003980:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8003982:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8003984:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8003986:	441a      	add	r2, r3
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8003988:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
}
 800398c:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 800398e:	f06f 0001 	mvn.w	r0, #1
}
 8003992:	bd38      	pop	{r3, r4, r5, pc}
	...

080039a0 <ibqReadTimeout>:
                      size_t n, sysinterval_t timeout) {
 80039a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a4:	4699      	mov	r9, r3
 80039a6:	b083      	sub	sp, #12
 80039a8:	4604      	mov	r4, r0
 80039aa:	460e      	mov	r6, r1
 80039ac:	4617      	mov	r7, r2
 80039ae:	2320      	movs	r3, #32
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  size_t r = 0;
 80039b8:	2500      	movs	r5, #0
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (ibqp->ptr == NULL) {
 80039bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  return systime + (systime_t)interval;
 80039be:	444b      	add	r3, r9
 80039c0:	b29b      	uxth	r3, r3
  ibqp->ptr = NULL;
 80039c2:	46a8      	mov	r8, r5
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80039c4:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
 80039c8:	9301      	str	r3, [sp, #4]
    if (ibqp->ptr == NULL) {
 80039ca:	2900      	cmp	r1, #0
 80039cc:	d045      	beq.n	8003a5a <ibqReadTimeout+0xba>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 80039ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (size > (n - r)) {
 80039d0:	eba7 0b05 	sub.w	fp, r7, r5
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 80039d4:	1a5b      	subs	r3, r3, r1
 80039d6:	459b      	cmp	fp, r3
 80039d8:	bf28      	it	cs
 80039da:	469b      	movcs	fp, r3
    if (size > 64U) {
 80039dc:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 80039e0:	d94d      	bls.n	8003a7e <ibqReadTimeout+0xde>
      memcpy(bp, ibqp->ptr, 64U);
 80039e2:	4633      	mov	r3, r6
 80039e4:	f101 0240 	add.w	r2, r1, #64	; 0x40
 80039e8:	f8d1 b000 	ldr.w	fp, [r1]
 80039ec:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80039f0:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80039f4:	68c8      	ldr	r0, [r1, #12]
 80039f6:	3110      	adds	r1, #16
 80039f8:	4291      	cmp	r1, r2
 80039fa:	f8c3 b000 	str.w	fp, [r3]
 80039fe:	f8c3 e004 	str.w	lr, [r3, #4]
 8003a02:	f8c3 c008 	str.w	ip, [r3, #8]
 8003a06:	60d8      	str	r0, [r3, #12]
 8003a08:	f103 0310 	add.w	r3, r3, #16
 8003a0c:	d1ec      	bne.n	80039e8 <ibqReadTimeout+0x48>
      ibqp->ptr += 64U;
 8003a0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      bp        += 64U;
 8003a10:	3640      	adds	r6, #64	; 0x40
      ibqp->ptr += 64U;
 8003a12:	3340      	adds	r3, #64	; 0x40
      r         += 64U;
 8003a14:	3540      	adds	r5, #64	; 0x40
      ibqp->ptr += 64U;
 8003a16:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 8003a18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d813      	bhi.n	8003a46 <ibqReadTimeout+0xa6>
  if (ibqp->brdptr >= ibqp->btop) {
 8003a1e:	e9d4 2106 	ldrd	r2, r1, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 8003a22:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 8003a24:	68e0      	ldr	r0, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8003a26:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 8003a28:	4293      	cmp	r3, r2
  ibqp->brdptr += ibqp->bsize;
 8003a2a:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 8003a2c:	bf28      	it	cs
 8003a2e:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
  ibqp->bcounter--;
 8003a30:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    ibqp->brdptr = ibqp->buffers;
 8003a34:	bf28      	it	cs
 8003a36:	6163      	strcs	r3, [r4, #20]
  if (ibqp->notify != NULL) {
 8003a38:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->bcounter--;
 8003a3a:	60e0      	str	r0, [r4, #12]
  ibqp->ptr = NULL;
 8003a3c:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
  if (ibqp->notify != NULL) {
 8003a40:	b10b      	cbz	r3, 8003a46 <ibqReadTimeout+0xa6>
    ibqp->notify(ibqp);
 8003a42:	4620      	mov	r0, r4
 8003a44:	4798      	blx	r3
 8003a46:	f388 8811 	msr	BASEPRI, r8
    if (r >= n) {
 8003a4a:	42bd      	cmp	r5, r7
 8003a4c:	d22a      	bcs.n	8003aa4 <ibqReadTimeout+0x104>
 8003a4e:	2320      	movs	r3, #32
 8003a50:	f383 8811 	msr	BASEPRI, r3
    if (ibqp->ptr == NULL) {
 8003a54:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003a56:	2900      	cmp	r1, #0
 8003a58:	d1b9      	bne.n	80039ce <ibqReadTimeout+0x2e>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8003a5a:	f11a 0f03 	cmn.w	sl, #3
 8003a5e:	d818      	bhi.n	8003a92 <ibqReadTimeout+0xf2>
 8003a60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return (sysinterval_t)((systime_t)(end - start));
 8003a64:	9a01      	ldr	r2, [sp, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	b29b      	uxth	r3, r3
        if (next_timeout > timeout) {
 8003a6c:	4599      	cmp	r9, r3
 8003a6e:	d31d      	bcc.n	8003aac <ibqReadTimeout+0x10c>
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 8003a70:	4619      	mov	r1, r3
 8003a72:	4620      	mov	r0, r4
 8003a74:	f7ff ff74 	bl	8003960 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 8003a78:	b988      	cbnz	r0, 8003a9e <ibqReadTimeout+0xfe>
 8003a7a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003a7c:	e7a7      	b.n	80039ce <ibqReadTimeout+0x2e>
      memcpy(bp, ibqp->ptr, size);
 8003a7e:	4630      	mov	r0, r6
 8003a80:	465a      	mov	r2, fp
 8003a82:	f7fc fbf1 	bl	8000268 <memcpy>
      ibqp->ptr += size;
 8003a86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      r         += size;
 8003a88:	445d      	add	r5, fp
      ibqp->ptr += size;
 8003a8a:	445b      	add	r3, fp
      bp        += size;
 8003a8c:	445e      	add	r6, fp
      ibqp->ptr += size;
 8003a8e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a90:	e7c2      	b.n	8003a18 <ibqReadTimeout+0x78>
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8003a92:	4649      	mov	r1, r9
 8003a94:	4620      	mov	r0, r4
 8003a96:	f7ff ff63 	bl	8003960 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d0ed      	beq.n	8003a7a <ibqReadTimeout+0xda>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f383 8811 	msr	BASEPRI, r3
}
 8003aa4:	4628      	mov	r0, r5
 8003aa6:	b003      	add	sp, #12
 8003aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aac:	f381 8811 	msr	BASEPRI, r1
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	b003      	add	sp, #12
 8003ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003ac0 <_readt.lto_priv.119>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8003ac0:	300c      	adds	r0, #12
 8003ac2:	f7ff bf6d 	b.w	80039a0 <ibqReadTimeout>
 8003ac6:	bf00      	nop
	...

08003ad0 <_read.lto_priv.131>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 8003ad0:	300c      	adds	r0, #12
 8003ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ad6:	f7ff bf63 	b.w	80039a0 <ibqReadTimeout>
 8003ada:	bf00      	nop
 8003adc:	0000      	movs	r0, r0
	...

08003ae0 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	2320      	movs	r3, #32
 8003ae4:	4604      	mov	r4, r0
 8003ae6:	f383 8811 	msr	BASEPRI, r3
  if (ibqp->ptr == NULL) {
 8003aea:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8003aec:	b1ed      	cbz	r5, 8003b2a <ibqGetTimeout+0x4a>
  msg = (msg_t)*ibqp->ptr;
 8003aee:	f815 6b01 	ldrb.w	r6, [r5], #1
  if (ibqp->ptr >= ibqp->top) {
 8003af2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  ibqp->ptr++;
 8003af4:	62a5      	str	r5, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 8003af6:	4295      	cmp	r5, r2
 8003af8:	d312      	bcc.n	8003b20 <ibqGetTimeout+0x40>
  if (ibqp->brdptr >= ibqp->btop) {
 8003afa:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->bcounter--;
 8003afe:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8003b00:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 8003b02:	3a01      	subs	r2, #1
 8003b04:	60e2      	str	r2, [r4, #12]
  ibqp->ptr = NULL;
 8003b06:	2200      	movs	r2, #0
  ibqp->brdptr += ibqp->bsize;
 8003b08:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 8003b0a:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 8003b0c:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 8003b0e:	bf28      	it	cs
 8003b10:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
  ibqp->ptr = NULL;
 8003b12:	62a2      	str	r2, [r4, #40]	; 0x28
    ibqp->brdptr = ibqp->buffers;
 8003b14:	bf28      	it	cs
 8003b16:	6163      	strcs	r3, [r4, #20]
  if (ibqp->notify != NULL) {
 8003b18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b1a:	b10b      	cbz	r3, 8003b20 <ibqGetTimeout+0x40>
    ibqp->notify(ibqp);
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	4798      	blx	r3
 8003b20:	2300      	movs	r3, #0
 8003b22:	f383 8811 	msr	BASEPRI, r3
}
 8003b26:	4630      	mov	r0, r6
 8003b28:	bd70      	pop	{r4, r5, r6, pc}
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8003b2a:	f7ff ff19 	bl	8003960 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 8003b2e:	4606      	mov	r6, r0
 8003b30:	b908      	cbnz	r0, 8003b36 <ibqGetTimeout+0x56>
 8003b32:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003b34:	e7db      	b.n	8003aee <ibqGetTimeout+0xe>
 8003b36:	f385 8811 	msr	BASEPRI, r5
 8003b3a:	e7f4      	b.n	8003b26 <ibqGetTimeout+0x46>
 8003b3c:	0000      	movs	r0, r0
	...

08003b40 <_gett.lto_priv.123>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8003b40:	300c      	adds	r0, #12
 8003b42:	f7ff bfcd 	b.w	8003ae0 <ibqGetTimeout>
 8003b46:	bf00      	nop
	...

08003b50 <_get.lto_priv.127>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8003b50:	300c      	adds	r0, #12
 8003b52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b56:	f7ff bfc3 	b.w	8003ae0 <ibqGetTimeout>
 8003b5a:	bf00      	nop
 8003b5c:	0000      	movs	r0, r0
	...

08003b60 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8003b60:	b508      	push	{r3, lr}
 8003b62:	4601      	mov	r1, r0
 8003b64:	2320      	movs	r3, #32
 8003b66:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003b6a:	2008      	movs	r0, #8
 8003b6c:	f7ff fb28 	bl	80031c0 <chSchGoSleepTimeoutS>
 8003b70:	2300      	movs	r3, #0
 8003b72:	f383 8811 	msr	BASEPRI, r3
}
 8003b76:	bd08      	pop	{r3, pc}
	...

08003b80 <_ZL7Thread1Pv>:
	(void)arg;
	chRegSetThreadName("blinker");
	while (true)
	{
		systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 100 : 300;
		palClearPad(GPIOC, GPIOC_LED);
 8003b80:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8003b84:	46b0      	mov	r8, r6
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <_ZL7Thread1Pv+0x34>)
 8003b88:	4a0b      	ldr	r2, [pc, #44]	; (8003bb8 <_ZL7Thread1Pv+0x38>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
{
 8003b8c:	b580      	push	{r7, lr}
		palClearPad(GPIOC, GPIOC_LED);
 8003b8e:	4d0b      	ldr	r5, [pc, #44]	; (8003bbc <_ZL7Thread1Pv+0x3c>)
 8003b90:	4f0b      	ldr	r7, [pc, #44]	; (8003bc0 <_ZL7Thread1Pv+0x40>)
 8003b92:	619a      	str	r2, [r3, #24]
		systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 100 : 300;
 8003b94:	783b      	ldrb	r3, [r7, #0]
		palClearPad(GPIOC, GPIOC_LED);
 8003b96:	f8c5 8014 	str.w	r8, [r5, #20]
		systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 100 : 300;
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	bf14      	ite	ne
 8003b9e:	f44f 7416 	movne.w	r4, #600	; 0x258
 8003ba2:	24c8      	moveq	r4, #200	; 0xc8
		chThdSleepMilliseconds(time);
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f7ff ffdb 	bl	8003b60 <chThdSleep>
		palSetPad(GPIOC, GPIOC_LED);
		chThdSleepMilliseconds(time);
 8003baa:	4620      	mov	r0, r4
		palSetPad(GPIOC, GPIOC_LED);
 8003bac:	612e      	str	r6, [r5, #16]
		chThdSleepMilliseconds(time);
 8003bae:	f7ff ffd7 	bl	8003b60 <chThdSleep>
 8003bb2:	e7ef      	b.n	8003b94 <_ZL7Thread1Pv+0x14>
 8003bb4:	200010f0 	.word	0x200010f0
 8003bb8:	08009f18 	.word	0x08009f18
 8003bbc:	40011000 	.word	0x40011000
 8003bc0:	20000de4 	.word	0x20000de4
	...

08003bd0 <rt_test_003_001_execute>:
  systime_t time;

  /* [3.1.1] The current system time is read then a sleep is performed
     for 100 system ticks and on exit the system time is verified
     again.*/
  test_set_step(1);
 8003bd0:	2301      	movs	r3, #1
static void rt_test_003_001_execute(void) {
 8003bd2:	b570      	push	{r4, r5, r6, lr}
 8003bd4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  test_set_step(1);
 8003bd8:	4e30      	ldr	r6, [pc, #192]	; (8003c9c <rt_test_003_001_execute+0xcc>)
  {
    time = chVTGetSystemTimeX();
    chThdSleep(100);
 8003bda:	2064      	movs	r0, #100	; 0x64
  test_set_step(1);
 8003bdc:	6033      	str	r3, [r6, #0]
 8003bde:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleep(100);
 8003be0:	f7ff ffbe 	bl	8003b60 <chThdSleep>
 8003be4:	b2a4      	uxth	r4, r4
  return systime + (systime_t)interval;
 8003be6:	f104 0167 	add.w	r1, r4, #103	; 0x67
 8003bea:	f104 0064 	add.w	r0, r4, #100	; 0x64
    test_assert_time_window(chTimeAddX(time, 100),
 8003bee:	b289      	uxth	r1, r1
 8003bf0:	b280      	uxth	r0, r0
 8003bf2:	f7fc fcbd 	bl	8000570 <_test_assert_time_window.constprop.3>
 8003bf6:	b100      	cbz	r0, 8003bfa <rt_test_003_001_execute+0x2a>
    chThdSleepUntil(chTimeAddX(time, 100));
    test_assert_time_window(chTimeAddX(time, 100),
                            chTimeAddX(time, 100 + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
  }
}
 8003bf8:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	6033      	str	r3, [r6, #0]
 8003bfe:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMicroseconds(100000);
 8003c00:	20c8      	movs	r0, #200	; 0xc8
 8003c02:	b2a4      	uxth	r4, r4
 8003c04:	f7ff ffac 	bl	8003b60 <chThdSleep>
 8003c08:	f104 01cb 	add.w	r1, r4, #203	; 0xcb
 8003c0c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    test_assert_time_window(chTimeAddX(time, TIME_US2I(100000)),
 8003c10:	b289      	uxth	r1, r1
 8003c12:	b280      	uxth	r0, r0
 8003c14:	f7fc fcac 	bl	8000570 <_test_assert_time_window.constprop.3>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d1ed      	bne.n	8003bf8 <rt_test_003_001_execute+0x28>
  test_set_step(3);
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	6033      	str	r3, [r6, #0]
 8003c20:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMilliseconds(100);
 8003c22:	20c8      	movs	r0, #200	; 0xc8
 8003c24:	b2a4      	uxth	r4, r4
 8003c26:	f7ff ff9b 	bl	8003b60 <chThdSleep>
 8003c2a:	f104 01cb 	add.w	r1, r4, #203	; 0xcb
 8003c2e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(100)),
 8003c32:	b289      	uxth	r1, r1
 8003c34:	b280      	uxth	r0, r0
 8003c36:	f7fc fc9b 	bl	8000570 <_test_assert_time_window.constprop.3>
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	d1dc      	bne.n	8003bf8 <rt_test_003_001_execute+0x28>
  test_set_step(4);
 8003c3e:	2304      	movs	r3, #4
 8003c40:	6033      	str	r3, [r6, #0]
 8003c42:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepSeconds(1);
 8003c44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003c48:	b2a4      	uxth	r4, r4
 8003c4a:	f7ff ff89 	bl	8003b60 <chThdSleep>
 8003c4e:	f204 71d3 	addw	r1, r4, #2003	; 0x7d3
 8003c52:	f504 60fa 	add.w	r0, r4, #2000	; 0x7d0
    test_assert_time_window(chTimeAddX(time, TIME_S2I(1)),
 8003c56:	b289      	uxth	r1, r1
 8003c58:	b280      	uxth	r0, r0
 8003c5a:	f7fc fc89 	bl	8000570 <_test_assert_time_window.constprop.3>
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d1ca      	bne.n	8003bf8 <rt_test_003_001_execute+0x28>
  test_set_step(5);
 8003c62:	2305      	movs	r3, #5
 8003c64:	6033      	str	r3, [r6, #0]
 8003c66:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8003c68:	2320      	movs	r3, #32
 8003c6a:	b2a4      	uxth	r4, r4
 8003c6c:	f104 0664 	add.w	r6, r4, #100	; 0x64
 8003c70:	b2b6      	uxth	r6, r6
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	6a69      	ldr	r1, [r5, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8003c78:	1a71      	subs	r1, r6, r1
 8003c7a:	b289      	uxth	r1, r1
  if (interval > (sysinterval_t)0) {
 8003c7c:	b111      	cbz	r1, 8003c84 <rt_test_003_001_execute+0xb4>
 8003c7e:	2008      	movs	r0, #8
 8003c80:	f7ff fa9e 	bl	80031c0 <chSchGoSleepTimeoutS>
 8003c84:	2300      	movs	r3, #0
 8003c86:	f383 8811 	msr	BASEPRI, r3
  return systime + (systime_t)interval;
 8003c8a:	f104 0167 	add.w	r1, r4, #103	; 0x67
    test_assert_time_window(chTimeAddX(time, 100),
 8003c8e:	4630      	mov	r0, r6
}
 8003c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_time_window(chTimeAddX(time, 100),
 8003c94:	b289      	uxth	r1, r1
 8003c96:	f7fc bc6b 	b.w	8000570 <_test_assert_time_window.constprop.3>
 8003c9a:	bf00      	nop
 8003c9c:	20001a7c 	.word	0x20001a7c

08003ca0 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8003ca0:	b508      	push	{r3, lr}

  chThdSleep(1);
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	f7ff ff5c 	bl	8003b60 <chThdSleep>
 8003ca8:	2320      	movs	r3, #32
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8003cb6:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 8003cba:	b280      	uxth	r0, r0
 8003cbc:	bd08      	pop	{r3, pc}
 8003cbe:	bf00      	nop

08003cc0 <rt_test_010_009_execute>:
static void rt_test_010_009_execute(void) {
 8003cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	4a20      	ldr	r2, [pc, #128]	; (8003d48 <rt_test_010_009_execute+0x88>)
    n = 0;
 8003cc8:	2400      	movs	r4, #0
  test_set_step(1);
 8003cca:	6013      	str	r3, [r2, #0]
    start = test_wait_tick();
 8003ccc:	f7ff ffe8 	bl	8003ca0 <test_wait_tick>
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8003cd0:	46a3      	mov	fp, r4
    start = test_wait_tick();
 8003cd2:	4681      	mov	r9, r0
 8003cd4:	f04f 0a20 	mov.w	sl, #32
 8003cd8:	f500 68fa 	add.w	r8, r0, #2000	; 0x7d0
 8003cdc:	fa1f f888 	uxth.w	r8, r8
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8003ce0:	4f1a      	ldr	r7, [pc, #104]	; (8003d4c <rt_test_010_009_execute+0x8c>)
 8003ce2:	4e1b      	ldr	r6, [pc, #108]	; (8003d50 <rt_test_010_009_execute+0x90>)
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8003ce4:	4d1b      	ldr	r5, [pc, #108]	; (8003d54 <rt_test_010_009_execute+0x94>)
 8003ce6:	eba8 0800 	sub.w	r8, r8, r0
 8003cea:	f38a 8811 	msr	BASEPRI, sl
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	463a      	mov	r2, r7
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	f7fe f8eb 	bl	8001ed0 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8003cfa:	463a      	mov	r2, r7
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f242 7110 	movw	r1, #10000	; 0x2710
 8003d02:	4628      	mov	r0, r5
 8003d04:	f7fe f8e4 	bl	8001ed0 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8003d08:	4630      	mov	r0, r6
 8003d0a:	f7fe f899 	bl	8001e40 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8003d0e:	4628      	mov	r0, r5
 8003d10:	f7fe f896 	bl	8001e40 <chVTDoResetI>
 8003d14:	f38b 8811 	msr	BASEPRI, fp
 8003d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 8003d1e:	3401      	adds	r4, #1
  return (bool)((time - start) < (end - start));
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	eba3 0309 	sub.w	r3, r3, r9
    } while (chVTIsSystemTimeWithinX(start, end));
 8003d26:	4543      	cmp	r3, r8
 8003d28:	dbdf      	blt.n	8003cea <rt_test_010_009_execute+0x2a>
  test_set_step(2);
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	4a06      	ldr	r2, [pc, #24]	; (8003d48 <rt_test_010_009_execute+0x88>)
    test_print("--- Score : ");
 8003d2e:	480a      	ldr	r0, [pc, #40]	; (8003d58 <rt_test_010_009_execute+0x98>)
  test_set_step(2);
 8003d30:	6013      	str	r3, [r2, #0]
    test_print("--- Score : ");
 8003d32:	f7fc ff0d 	bl	8000b50 <test_print>
    test_printn(n * 2);
 8003d36:	0060      	lsls	r0, r4, #1
 8003d38:	f7fc fe9a 	bl	8000a70 <test_printn>
}
 8003d3c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" timers/S");
 8003d40:	4806      	ldr	r0, [pc, #24]	; (8003d5c <rt_test_010_009_execute+0x9c>)
 8003d42:	f7fc bee5 	b.w	8000b10 <test_println>
 8003d46:	bf00      	nop
 8003d48:	20001a7c 	.word	0x20001a7c
 8003d4c:	08000761 	.word	0x08000761
 8003d50:	20001aac 	.word	0x20001aac
 8003d54:	20001ac0 	.word	0x20001ac0
 8003d58:	0800b7e8 	.word	0x0800b7e8
 8003d5c:	0800b7f8 	.word	0x0800b7f8

08003d60 <test_execute>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8003d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d64:	4688      	mov	r8, r1
  int tseq, tcase;

  test_chp = stream;
 8003d66:	4c9d      	ldr	r4, [pc, #628]	; (8003fdc <test_execute+0x27c>)
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8003d68:	b083      	sub	sp, #12
  test_chp = stream;
 8003d6a:	6020      	str	r0, [r4, #0]
  test_println("");
 8003d6c:	489c      	ldr	r0, [pc, #624]	; (8003fe0 <test_execute+0x280>)
 8003d6e:	f7fc fecf 	bl	8000b10 <test_println>
  if (tsp->name != NULL) {
 8003d72:	f8d8 3000 	ldr.w	r3, [r8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 8186 	beq.w	8004088 <test_execute+0x328>
  while (*msgp)
 8003d7c:	212a      	movs	r1, #42	; 0x2a
  if (tsp->name != NULL) {
 8003d7e:	4d99      	ldr	r5, [pc, #612]	; (8003fe4 <test_execute+0x284>)
    streamPut(test_chp, *msgp++);
 8003d80:	6820      	ldr	r0, [r4, #0]
 8003d82:	6803      	ldr	r3, [r0, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	4798      	blx	r3
  while (*msgp)
 8003d88:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003d8c:	2900      	cmp	r1, #0
 8003d8e:	d1f7      	bne.n	8003d80 <test_execute+0x20>
    test_print("*** ");
    test_println(tsp->name);
 8003d90:	f8d8 0000 	ldr.w	r0, [r8]
 8003d94:	f7fc febc 	bl	8000b10 <test_println>
  }
  else {
    test_println("*** Test Suite");
  }
  test_println("***");
 8003d98:	4893      	ldr	r0, [pc, #588]	; (8003fe8 <test_execute+0x288>)
 8003d9a:	f7fc feb9 	bl	8000b10 <test_println>
  while (*msgp)
 8003d9e:	212a      	movs	r1, #42	; 0x2a
  test_println("***");
 8003da0:	4d92      	ldr	r5, [pc, #584]	; (8003fec <test_execute+0x28c>)
    streamPut(test_chp, *msgp++);
 8003da2:	6820      	ldr	r0, [r4, #0]
 8003da4:	6803      	ldr	r3, [r0, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4798      	blx	r3
  while (*msgp)
 8003daa:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003dae:	2900      	cmp	r1, #0
 8003db0:	d1f7      	bne.n	8003da2 <test_execute+0x42>
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8003db2:	488f      	ldr	r0, [pc, #572]	; (8003ff0 <test_execute+0x290>)
 8003db4:	f7fc feac 	bl	8000b10 <test_println>
  while (*msgp)
 8003db8:	212a      	movs	r1, #42	; 0x2a
  test_println(__DATE__ " - " __TIME__);
 8003dba:	4d8e      	ldr	r5, [pc, #568]	; (8003ff4 <test_execute+0x294>)
    streamPut(test_chp, *msgp++);
 8003dbc:	6820      	ldr	r0, [r4, #0]
 8003dbe:	6803      	ldr	r3, [r0, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	4798      	blx	r3
  while (*msgp)
 8003dc4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003dc8:	2900      	cmp	r1, #0
 8003dca:	d1f7      	bne.n	8003dbc <test_execute+0x5c>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8003dcc:	488a      	ldr	r0, [pc, #552]	; (8003ff8 <test_execute+0x298>)
 8003dce:	f7fc fe9f 	bl	8000b10 <test_println>
  while (*msgp)
 8003dd2:	212a      	movs	r1, #42	; 0x2a
  test_println(PLATFORM_NAME);
 8003dd4:	4d89      	ldr	r5, [pc, #548]	; (8003ffc <test_execute+0x29c>)
    streamPut(test_chp, *msgp++);
 8003dd6:	6820      	ldr	r0, [r4, #0]
 8003dd8:	6803      	ldr	r3, [r0, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	4798      	blx	r3
  while (*msgp)
 8003dde:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003de2:	2900      	cmp	r1, #0
 8003de4:	d1f7      	bne.n	8003dd6 <test_execute+0x76>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8003de6:	4886      	ldr	r0, [pc, #536]	; (8004000 <test_execute+0x2a0>)
 8003de8:	9101      	str	r1, [sp, #4]
 8003dea:	f7fc fe91 	bl	8000b10 <test_println>
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 8003dee:	487c      	ldr	r0, [pc, #496]	; (8003fe0 <test_execute+0x280>)
 8003df0:	f7fc fe8e 	bl	8000b10 <test_println>

  test_global_fail = false;
  tseq = 0;
 8003df4:	9901      	ldr	r1, [sp, #4]
  test_global_fail = false;
 8003df6:	4b83      	ldr	r3, [pc, #524]	; (8004004 <test_execute+0x2a4>)
  tseq = 0;
 8003df8:	468b      	mov	fp, r1
  test_global_fail = false;
 8003dfa:	7019      	strb	r1, [r3, #0]
  test_tokp = test_tokens_buffer;
 8003dfc:	4e82      	ldr	r6, [pc, #520]	; (8004008 <test_execute+0x2a8>)
 8003dfe:	f8d8 3004 	ldr.w	r3, [r8, #4]
  while (tsp->sequences[tseq] != NULL) {
 8003e02:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8003e06:	ea4f 078b 	mov.w	r7, fp, lsl #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 811a 	beq.w	8004044 <test_execute+0x2e4>
 8003e10:	254c      	movs	r5, #76	; 0x4c
    streamPut(test_chp, '=');
 8003e12:	6820      	ldr	r0, [r4, #0]
 8003e14:	213d      	movs	r1, #61	; 0x3d
 8003e16:	6803      	ldr	r3, [r0, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8003e1c:	3d01      	subs	r5, #1
 8003e1e:	d1f8      	bne.n	8003e12 <test_execute+0xb2>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8003e20:	6820      	ldr	r0, [r4, #0]
 8003e22:	497a      	ldr	r1, [pc, #488]	; (800400c <test_execute+0x2ac>)
 8003e24:	6803      	ldr	r3, [r0, #0]
 8003e26:	2202      	movs	r2, #2
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4798      	blx	r3
  while (*msgp)
 8003e2c:	213d      	movs	r1, #61	; 0x3d
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8003e2e:	4d78      	ldr	r5, [pc, #480]	; (8004010 <test_execute+0x2b0>)
    streamPut(test_chp, *msgp++);
 8003e30:	6820      	ldr	r0, [r4, #0]
 8003e32:	6803      	ldr	r3, [r0, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	4798      	blx	r3
  while (*msgp)
 8003e38:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003e3c:	2900      	cmp	r1, #0
 8003e3e:	d1f7      	bne.n	8003e30 <test_execute+0xd0>
#if TEST_SHOW_SEQUENCES == TRUE
    print_fat_line();
    test_print("=== Test Sequence ");
    test_printn(tseq + 1);
 8003e40:	f10b 0b01 	add.w	fp, fp, #1
 8003e44:	4658      	mov	r0, fp
 8003e46:	f7fc fe13 	bl	8000a70 <test_printn>
  while (*msgp)
 8003e4a:	2120      	movs	r1, #32
    test_printn(tseq + 1);
 8003e4c:	4d71      	ldr	r5, [pc, #452]	; (8004014 <test_execute+0x2b4>)
    streamPut(test_chp, *msgp++);
 8003e4e:	6820      	ldr	r0, [r4, #0]
 8003e50:	6803      	ldr	r3, [r0, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4798      	blx	r3
  while (*msgp)
 8003e56:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003e5a:	2900      	cmp	r1, #0
 8003e5c:	d1f7      	bne.n	8003e4e <test_execute+0xee>
    test_print(" (");
    test_print(tsp->sequences[tseq]->name);
 8003e5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003e62:	59db      	ldr	r3, [r3, r7]
 8003e64:	681d      	ldr	r5, [r3, #0]
  while (*msgp)
 8003e66:	7829      	ldrb	r1, [r5, #0]
 8003e68:	b139      	cbz	r1, 8003e7a <test_execute+0x11a>
    streamPut(test_chp, *msgp++);
 8003e6a:	6820      	ldr	r0, [r4, #0]
 8003e6c:	6803      	ldr	r3, [r0, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4798      	blx	r3
  while (*msgp)
 8003e72:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003e76:	2900      	cmp	r1, #0
 8003e78:	d1f7      	bne.n	8003e6a <test_execute+0x10a>
    test_println(")");
 8003e7a:	4867      	ldr	r0, [pc, #412]	; (8004018 <test_execute+0x2b8>)
 8003e7c:	f7fc fe48 	bl	8000b10 <test_println>
#endif
    tcase = 0;
 8003e80:	2500      	movs	r5, #0
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8003e82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003e86:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8003e8a:	59da      	ldr	r2, [r3, r7]
 8003e8c:	6852      	ldr	r2, [r2, #4]
 8003e8e:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8003e92:	2a00      	cmp	r2, #0
 8003e94:	d0b5      	beq.n	8003e02 <test_execute+0xa2>
      print_line();
 8003e96:	f7fc fec3 	bl	8000c20 <print_line>
  while (*msgp)
 8003e9a:	212d      	movs	r1, #45	; 0x2d
      print_line();
 8003e9c:	f8df a190 	ldr.w	sl, [pc, #400]	; 8004030 <test_execute+0x2d0>
    streamPut(test_chp, *msgp++);
 8003ea0:	6820      	ldr	r0, [r4, #0]
 8003ea2:	6803      	ldr	r3, [r0, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	4798      	blx	r3
  while (*msgp)
 8003ea8:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8003eac:	2900      	cmp	r1, #0
 8003eae:	d1f7      	bne.n	8003ea0 <test_execute+0x140>
      test_print("--- Test Case ");
      test_printn(tseq + 1);
 8003eb0:	4658      	mov	r0, fp
 8003eb2:	f7fc fddd 	bl	8000a70 <test_printn>
    streamPut(test_chp, *msgp++);
 8003eb6:	6820      	ldr	r0, [r4, #0]
 8003eb8:	212e      	movs	r1, #46	; 0x2e
 8003eba:	6803      	ldr	r3, [r0, #0]
      test_print(".");
      test_printn(tcase + 1);
 8003ebc:	3501      	adds	r5, #1
    streamPut(test_chp, *msgp++);
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4798      	blx	r3
      test_printn(tcase + 1);
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	f7fc fdd4 	bl	8000a70 <test_printn>
  while (*msgp)
 8003ec8:	2120      	movs	r1, #32
      test_printn(tcase + 1);
 8003eca:	f8df a148 	ldr.w	sl, [pc, #328]	; 8004014 <test_execute+0x2b4>
    streamPut(test_chp, *msgp++);
 8003ece:	6820      	ldr	r0, [r4, #0]
 8003ed0:	6803      	ldr	r3, [r0, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4798      	blx	r3
  while (*msgp)
 8003ed6:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8003eda:	2900      	cmp	r1, #0
 8003edc:	d1f7      	bne.n	8003ece <test_execute+0x16e>
      test_print(" (");
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
 8003ede:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003ee2:	59db      	ldr	r3, [r3, r7]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f853 3009 	ldr.w	r3, [r3, r9]
 8003eea:	f8d3 a000 	ldr.w	sl, [r3]
  while (*msgp)
 8003eee:	f89a 1000 	ldrb.w	r1, [sl]
 8003ef2:	b139      	cbz	r1, 8003f04 <test_execute+0x1a4>
    streamPut(test_chp, *msgp++);
 8003ef4:	6820      	ldr	r0, [r4, #0]
 8003ef6:	6803      	ldr	r3, [r0, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	4798      	blx	r3
  while (*msgp)
 8003efc:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8003f00:	2900      	cmp	r1, #0
 8003f02:	d1f7      	bne.n	8003ef4 <test_execute+0x194>
      test_println(")");
 8003f04:	4844      	ldr	r0, [pc, #272]	; (8004018 <test_execute+0x2b8>)
 8003f06:	f7fc fe03 	bl	8000b10 <test_println>
  chThdSleep(delay);
 8003f0a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003f0e:	f7ff fe27 	bl	8003b60 <chThdSleep>
  test_local_fail = false;
 8003f12:	2200      	movs	r2, #0
#if TEST_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8003f14:	f8d8 3004 	ldr.w	r3, [r8, #4]
  test_local_fail = false;
 8003f18:	f8df a118 	ldr.w	sl, [pc, #280]	; 8004034 <test_execute+0x2d4>
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8003f1c:	59db      	ldr	r3, [r3, r7]
  test_tokp = test_tokens_buffer;
 8003f1e:	493f      	ldr	r1, [pc, #252]	; (800401c <test_execute+0x2bc>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8003f20:	685b      	ldr	r3, [r3, #4]
  test_tokp = test_tokens_buffer;
 8003f22:	6031      	str	r1, [r6, #0]
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8003f24:	f853 9009 	ldr.w	r9, [r3, r9]
  test_local_fail = false;
 8003f28:	f88a 2000 	strb.w	r2, [sl]
  if (tcp->setup != NULL)
 8003f2c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003f30:	b103      	cbz	r3, 8003f34 <test_execute+0x1d4>
    tcp->setup();
 8003f32:	4798      	blx	r3
  tcp->execute();
 8003f34:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003f38:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8003f3a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003f3e:	b103      	cbz	r3, 8003f42 <test_execute+0x1e2>
    tcp->teardown();
 8003f40:	4798      	blx	r3
      if (test_local_fail) {
 8003f42:	f89a 3000 	ldrb.w	r3, [sl]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d044      	beq.n	8003fd4 <test_execute+0x274>
  while (*msgp)
 8003f4a:	212d      	movs	r1, #45	; 0x2d
      if (test_local_fail) {
 8003f4c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8004038 <test_execute+0x2d8>
    streamPut(test_chp, *msgp++);
 8003f50:	6820      	ldr	r0, [r4, #0]
 8003f52:	6803      	ldr	r3, [r0, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	4798      	blx	r3
  while (*msgp)
 8003f58:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8003f5c:	2900      	cmp	r1, #0
 8003f5e:	d1f7      	bne.n	8003f50 <test_execute+0x1f0>
        test_print("--- Result: FAILURE (#");
        test_printn(test_step);
 8003f60:	4b2f      	ldr	r3, [pc, #188]	; (8004020 <test_execute+0x2c0>)
 8003f62:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800403c <test_execute+0x2dc>
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	f7fc fd82 	bl	8000a70 <test_printn>
  while (*msgp)
 8003f6c:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8003f6e:	6820      	ldr	r0, [r4, #0]
 8003f70:	6803      	ldr	r3, [r0, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4798      	blx	r3
  while (*msgp)
 8003f76:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8003f7a:	2900      	cmp	r1, #0
 8003f7c:	d1f7      	bne.n	8003f6e <test_execute+0x20e>
  while (cp < test_tokp)
 8003f7e:	6833      	ldr	r3, [r6, #0]
 8003f80:	4a26      	ldr	r2, [pc, #152]	; (800401c <test_execute+0x2bc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d909      	bls.n	8003f9a <test_execute+0x23a>
  char *cp = test_tokens_buffer;
 8003f86:	4691      	mov	r9, r2
    streamPut(test_chp, *cp++);
 8003f88:	6820      	ldr	r0, [r4, #0]
 8003f8a:	f819 1b01 	ldrb.w	r1, [r9], #1
 8003f8e:	6803      	ldr	r3, [r0, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	4798      	blx	r3
  while (cp < test_tokp)
 8003f94:	6833      	ldr	r3, [r6, #0]
 8003f96:	4599      	cmp	r9, r3
 8003f98:	d3f6      	bcc.n	8003f88 <test_execute+0x228>
  while (*msgp)
 8003f9a:	215d      	movs	r1, #93	; 0x5d
 8003f9c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8004040 <test_execute+0x2e0>
    streamPut(test_chp, *msgp++);
 8003fa0:	6820      	ldr	r0, [r4, #0]
 8003fa2:	6803      	ldr	r3, [r0, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	4798      	blx	r3
  while (*msgp)
 8003fa8:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8003fac:	2900      	cmp	r1, #0
 8003fae:	d1f7      	bne.n	8003fa0 <test_execute+0x240>
        test_print(" [");
        print_tokens();
        test_print("] \"");
        test_print(test_failure_message);
 8003fb0:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <test_execute+0x2c4>)
 8003fb2:	f8d3 9000 	ldr.w	r9, [r3]
  while (*msgp)
 8003fb6:	f899 1000 	ldrb.w	r1, [r9]
 8003fba:	b139      	cbz	r1, 8003fcc <test_execute+0x26c>
    streamPut(test_chp, *msgp++);
 8003fbc:	6820      	ldr	r0, [r4, #0]
 8003fbe:	6803      	ldr	r3, [r0, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	4798      	blx	r3
  while (*msgp)
 8003fc4:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8003fc8:	2900      	cmp	r1, #0
 8003fca:	d1f7      	bne.n	8003fbc <test_execute+0x25c>
        test_println("\")");
 8003fcc:	4816      	ldr	r0, [pc, #88]	; (8004028 <test_execute+0x2c8>)
 8003fce:	f7fc fd9f 	bl	8000b10 <test_println>
 8003fd2:	e756      	b.n	8003e82 <test_execute+0x122>
      }
      else {
        test_println("--- Result: SUCCESS");
 8003fd4:	4815      	ldr	r0, [pc, #84]	; (800402c <test_execute+0x2cc>)
 8003fd6:	f7fc fd9b 	bl	8000b10 <test_println>
 8003fda:	e752      	b.n	8003e82 <test_execute+0x122>
 8003fdc:	200019d0 	.word	0x200019d0
 8003fe0:	0800bac4 	.word	0x0800bac4
 8003fe4:	0800c4a8 	.word	0x0800c4a8
 8003fe8:	0800c554 	.word	0x0800c554
 8003fec:	0800c4b0 	.word	0x0800c4b0
 8003ff0:	0800c558 	.word	0x0800c558
 8003ff4:	0800c4c4 	.word	0x0800c4c4
 8003ff8:	0800a134 	.word	0x0800a134
 8003ffc:	0800c4d8 	.word	0x0800c4d8
 8004000:	0800a174 	.word	0x0800a174
 8004004:	200019d8 	.word	0x200019d8
 8004008:	20001a90 	.word	0x20001a90
 800400c:	0800ba70 	.word	0x0800ba70
 8004010:	0800c4ec 	.word	0x0800c4ec
 8004014:	0800c500 	.word	0x0800c500
 8004018:	0800c570 	.word	0x0800c570
 800401c:	20001a80 	.word	0x20001a80
 8004020:	20001a7c 	.word	0x20001a7c
 8004024:	200019d4 	.word	0x200019d4
 8004028:	0800c574 	.word	0x0800c574
 800402c:	0800c578 	.word	0x0800c578
 8004030:	0800c504 	.word	0x0800c504
 8004034:	20001a78 	.word	0x20001a78
 8004038:	0800c514 	.word	0x0800c514
 800403c:	0800c52c 	.word	0x0800c52c
 8004040:	0800c530 	.word	0x0800c530
      }
      tcase++;
    }
    tseq++;
  }
  print_line();
 8004044:	f7fc fdec 	bl	8000c20 <print_line>
  test_println("");
 8004048:	4811      	ldr	r0, [pc, #68]	; (8004090 <test_execute+0x330>)
 800404a:	f7fc fd61 	bl	8000b10 <test_println>
  while (*msgp)
 800404e:	2146      	movs	r1, #70	; 0x46
  test_println("");
 8004050:	4d10      	ldr	r5, [pc, #64]	; (8004094 <test_execute+0x334>)
    streamPut(test_chp, *msgp++);
 8004052:	6820      	ldr	r0, [r4, #0]
 8004054:	6803      	ldr	r3, [r0, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4798      	blx	r3
  while (*msgp)
 800405a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800405e:	2900      	cmp	r1, #0
 8004060:	d1f7      	bne.n	8004052 <test_execute+0x2f2>
  test_print("Final result: ");
  if (test_global_fail)
 8004062:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <test_execute+0x338>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	b93b      	cbnz	r3, 8004078 <test_execute+0x318>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8004068:	480c      	ldr	r0, [pc, #48]	; (800409c <test_execute+0x33c>)
 800406a:	f7fc fd51 	bl	8000b10 <test_println>
#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
}
 800406e:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <test_execute+0x338>)
 8004070:	7818      	ldrb	r0, [r3, #0]
 8004072:	b003      	add	sp, #12
 8004074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("FAILURE");
 8004078:	4809      	ldr	r0, [pc, #36]	; (80040a0 <test_execute+0x340>)
 800407a:	f7fc fd49 	bl	8000b10 <test_println>
}
 800407e:	4b06      	ldr	r3, [pc, #24]	; (8004098 <test_execute+0x338>)
 8004080:	7818      	ldrb	r0, [r3, #0]
 8004082:	b003      	add	sp, #12
 8004084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("*** Test Suite");
 8004088:	4806      	ldr	r0, [pc, #24]	; (80040a4 <test_execute+0x344>)
 800408a:	f7fc fd41 	bl	8000b10 <test_println>
 800408e:	e683      	b.n	8003d98 <test_execute+0x38>
 8004090:	0800bac4 	.word	0x0800bac4
 8004094:	0800c534 	.word	0x0800c534
 8004098:	200019d8 	.word	0x200019d8
 800409c:	0800c584 	.word	0x0800c584
 80040a0:	0800c58c 	.word	0x0800c58c
 80040a4:	0800c544 	.word	0x0800c544
	...

080040b0 <test_rt>:
#endif

#if (SHELL_CMD_TEST_ENABLED == TRUE) || defined(__DOXYGEN__)
static THD_FUNCTION(test_rt, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &rt_test_suite);
 80040b0:	4901      	ldr	r1, [pc, #4]	; (80040b8 <test_rt+0x8>)
 80040b2:	f7ff be55 	b.w	8003d60 <test_execute>
 80040b6:	bf00      	nop
 80040b8:	0800ba1c 	.word	0x0800ba1c
 80040bc:	00000000 	.word	0x00000000

080040c0 <test_oslib>:
}

static THD_FUNCTION(test_oslib, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &oslib_test_suite);
 80040c0:	4901      	ldr	r1, [pc, #4]	; (80040c8 <test_oslib+0x8>)
 80040c2:	f7ff be4d 	b.w	8003d60 <test_execute>
 80040c6:	bf00      	nop
 80040c8:	0800a704 	.word	0x0800a704
 80040cc:	00000000 	.word	0x00000000

080040d0 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 80040d0:	b538      	push	{r3, r4, r5, lr}
 80040d2:	2320      	movs	r3, #32
 80040d4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 80040d8:	4c0c      	ldr	r4, [pc, #48]	; (800410c <chMsgWait+0x3c>)
 80040da:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 80040dc:	4613      	mov	r3, r2
 80040de:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 80040e2:	4298      	cmp	r0, r3
 80040e4:	d009      	beq.n	80040fa <chMsgWait+0x2a>
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
 80040e6:	250d      	movs	r5, #13
  tqp->next             = tp->queue.next;
 80040e8:	6801      	ldr	r1, [r0, #0]
 80040ea:	2400      	movs	r4, #0
 80040ec:	62d1      	str	r1, [r2, #44]	; 0x2c
  tqp->next->queue.prev = (thread_t *)tqp;
 80040ee:	604b      	str	r3, [r1, #4]
 80040f0:	f880 5020 	strb.w	r5, [r0, #32]
 80040f4:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();

  return tp;
}
 80040f8:	bd38      	pop	{r3, r4, r5, pc}
    chSchGoSleepS(CH_STATE_WTMSG);
 80040fa:	200e      	movs	r0, #14
 80040fc:	f7fe ffd8 	bl	80030b0 <chSchGoSleepS>
 8004100:	69a2      	ldr	r2, [r4, #24]
 8004102:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8004104:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 8004108:	e7ed      	b.n	80040e6 <chMsgWait+0x16>
 800410a:	bf00      	nop
 800410c:	200010f0 	.word	0x200010f0

08004110 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	2620      	movs	r6, #32
 8004114:	2500      	movs	r5, #0
    tp = chMsgWait();
 8004116:	f7ff ffdb 	bl	80040d0 <chMsgWait>
 800411a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800411c:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8004120:	4621      	mov	r1, r4
 8004122:	f7fe fee5 	bl	8002ef0 <chSchWakeupS>
 8004126:	f385 8811 	msr	BASEPRI, r5
  } while (msg);
 800412a:	2c00      	cmp	r4, #0
 800412c:	d1f3      	bne.n	8004116 <bmk_thread1+0x6>
}
 800412e:	bd70      	pop	{r4, r5, r6, pc}

08004130 <chMsgSend>:
  thread_t *ctp = currp;
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <chMsgSend+0x3c>)
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8004132:	b510      	push	{r4, lr}
 8004134:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8004136:	699c      	ldr	r4, [r3, #24]
 8004138:	f382 8811 	msr	BASEPRI, r2
  ctp->u.sentmsg = msg;
 800413c:	6261      	str	r1, [r4, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 800413e:	6b02      	ldr	r2, [r0, #48]	; 0x30
  msg_insert(ctp, &tp->msgqueue);
 8004140:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 8004144:	e9c4 1200 	strd	r1, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8004148:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 800414a:	f890 2020 	ldrb.w	r2, [r0, #32]
  tqp->prev                  = tp;
 800414e:	6304      	str	r4, [r0, #48]	; 0x30
 8004150:	2a0e      	cmp	r2, #14
 8004152:	d007      	beq.n	8004164 <chMsgSend+0x34>
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8004154:	200c      	movs	r0, #12
 8004156:	f7fe ffab 	bl	80030b0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 800415a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800415c:	2300      	movs	r3, #0
 800415e:	f383 8811 	msr	BASEPRI, r3
}
 8004162:	bd10      	pop	{r4, pc}
    (void) chSchReadyI(tp);
 8004164:	f7fd fca4 	bl	8001ab0 <chSchReadyI>
 8004168:	e7f4      	b.n	8004154 <chMsgSend+0x24>
 800416a:	bf00      	nop
 800416c:	200010f0 	.word	0x200010f0

08004170 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 8004170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004174:	4607      	mov	r7, r0
  start = test_wait_tick();
 8004176:	f7ff fd93 	bl	8003ca0 <test_wait_tick>
  uint32_t n = 0;
 800417a:	2400      	movs	r4, #0
  start = test_wait_tick();
 800417c:	4606      	mov	r6, r0
 800417e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8004182:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 8004186:	b2ad      	uxth	r5, r5
 8004188:	1a2d      	subs	r5, r5, r0
    (void)chMsgSend(tp, 1);
 800418a:	2101      	movs	r1, #1
 800418c:	4638      	mov	r0, r7
 800418e:	f7ff ffcf 	bl	8004130 <chMsgSend>
 8004192:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    n++;
 8004196:	3401      	adds	r4, #1
  return (bool)((time - start) < (end - start));
 8004198:	b29b      	uxth	r3, r3
 800419a:	1b9b      	subs	r3, r3, r6
  } while (chVTIsSystemTimeWithinX(start, end));
 800419c:	42ab      	cmp	r3, r5
 800419e:	dbf4      	blt.n	800418a <msg_loop_test+0x1a>
  (void)chMsgSend(tp, 0);
 80041a0:	4638      	mov	r0, r7
 80041a2:	2100      	movs	r1, #0
 80041a4:	f7ff ffc4 	bl	8004130 <chMsgSend>
}
 80041a8:	4620      	mov	r0, r4
 80041aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041ae:	bf00      	nop

080041b0 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 80041b0:	b510      	push	{r4, lr}
 80041b2:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 80041b4:	2141      	movs	r1, #65	; 0x41
 80041b6:	f7ff ffbb 	bl	8004130 <chMsgSend>
  chMsgSend(p, 'B');
 80041ba:	4620      	mov	r0, r4
 80041bc:	2142      	movs	r1, #66	; 0x42
 80041be:	f7ff ffb7 	bl	8004130 <chMsgSend>
  chMsgSend(p, 'C');
 80041c2:	4620      	mov	r0, r4
 80041c4:	2143      	movs	r1, #67	; 0x43
 80041c6:	f7ff ffb3 	bl	8004130 <chMsgSend>
  chMsgSend(p, 'D');
 80041ca:	4620      	mov	r0, r4
}
 80041cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 80041d0:	2144      	movs	r1, #68	; 0x44
 80041d2:	f7ff bfad 	b.w	8004130 <chMsgSend>
 80041d6:	bf00      	nop
	...

080041e0 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 80041e2:	4a38      	ldr	r2, [pc, #224]	; (80042c4 <chMtxLockS+0xe4>)
  if (mp->owner != NULL) {
 80041e4:	6883      	ldr	r3, [r0, #8]
  thread_t *ctp = currp;
 80041e6:	6995      	ldr	r5, [r2, #24]
  if (mp->owner != NULL) {
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d040      	beq.n	800426e <chMtxLockS+0x8e>
      while (tp->prio < ctp->prio) {
 80041ec:	68a9      	ldr	r1, [r5, #8]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	4604      	mov	r4, r0
 80041f2:	4291      	cmp	r1, r2
 80041f4:	d907      	bls.n	8004206 <chMtxLockS+0x26>
        switch (tp->state) {
 80041f6:	f893 2020 	ldrb.w	r2, [r3, #32]
        tp->prio = ctp->prio;
 80041fa:	6099      	str	r1, [r3, #8]
        switch (tp->state) {
 80041fc:	2a06      	cmp	r2, #6
 80041fe:	d03b      	beq.n	8004278 <chMtxLockS+0x98>
 8004200:	2a07      	cmp	r2, #7
 8004202:	d015      	beq.n	8004230 <chMtxLockS+0x50>
 8004204:	b342      	cbz	r2, 8004258 <chMtxLockS+0x78>
      queue_prio_insert(ctp, &mp->queue);
 8004206:	4626      	mov	r6, r4
 8004208:	4623      	mov	r3, r4
 800420a:	e003      	b.n	8004214 <chMtxLockS+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800420c:	6899      	ldr	r1, [r3, #8]
 800420e:	68aa      	ldr	r2, [r5, #8]
 8004210:	4291      	cmp	r1, r2
 8004212:	d32a      	bcc.n	800426a <chMtxLockS+0x8a>
    cp = cp->queue.next;
 8004214:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8004216:	429c      	cmp	r4, r3
 8004218:	d1f8      	bne.n	800420c <chMtxLockS+0x2c>
  tp->queue.prev             = cp->queue.prev;
 800421a:	6873      	ldr	r3, [r6, #4]
      chSchGoSleepS(CH_STATE_WTMTX);
 800421c:	2006      	movs	r0, #6
 800421e:	e9c5 6300 	strd	r6, r3, [r5]
  tp->queue.prev->queue.next = tp;
 8004222:	601d      	str	r5, [r3, #0]
  cp->queue.prev             = tp;
 8004224:	6075      	str	r5, [r6, #4]
      ctp->u.wtmtxp = mp;
 8004226:	626c      	str	r4, [r5, #36]	; 0x24
}
 8004228:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 800422c:	f7fe bf40 	b.w	80030b0 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 8004230:	681f      	ldr	r7, [r3, #0]
 8004232:	6858      	ldr	r0, [r3, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8004234:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8004236:	6007      	str	r7, [r0, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8004238:	681f      	ldr	r7, [r3, #0]
 800423a:	4632      	mov	r2, r6
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	e002      	b.n	8004246 <chMtxLockS+0x66>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8004240:	6890      	ldr	r0, [r2, #8]
 8004242:	4288      	cmp	r0, r1
 8004244:	d334      	bcc.n	80042b0 <chMtxLockS+0xd0>
    cp = cp->queue.next;
 8004246:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8004248:	4296      	cmp	r6, r2
 800424a:	d1f9      	bne.n	8004240 <chMtxLockS+0x60>
  tp->queue.prev             = cp->queue.prev;
 800424c:	6872      	ldr	r2, [r6, #4]
 800424e:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8004252:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8004254:	6073      	str	r3, [r6, #4]
 8004256:	e7d6      	b.n	8004206 <chMtxLockS+0x26>
  tp->queue.prev->queue.next = tp->queue.next;
 8004258:	e9d3 1200 	ldrd	r1, r2, [r3]
 800425c:	6011      	str	r1, [r2, #0]
          (void) chSchReadyI(queue_dequeue(tp));
 800425e:	4618      	mov	r0, r3
  tp->queue.next->queue.prev = tp->queue.prev;
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	605a      	str	r2, [r3, #4]
 8004264:	f7fd fc24 	bl	8001ab0 <chSchReadyI>
 8004268:	e7cd      	b.n	8004206 <chMtxLockS+0x26>
    cp = cp->queue.next;
 800426a:	461e      	mov	r6, r3
 800426c:	e7d5      	b.n	800421a <chMtxLockS+0x3a>
    mp->next = ctp->mtxlist;
 800426e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004270:	e9c0 5302 	strd	r5, r3, [r0, #8]
    ctp->mtxlist = mp;
 8004274:	63a8      	str	r0, [r5, #56]	; 0x38
}
 8004276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8004278:	681f      	ldr	r7, [r3, #0]
 800427a:	6858      	ldr	r0, [r3, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800427c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800427e:	6007      	str	r7, [r0, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8004280:	681f      	ldr	r7, [r3, #0]
 8004282:	46b4      	mov	ip, r6
 8004284:	4632      	mov	r2, r6
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	e002      	b.n	8004290 <chMtxLockS+0xb0>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800428a:	6890      	ldr	r0, [r2, #8]
 800428c:	4288      	cmp	r0, r1
 800428e:	d316      	bcc.n	80042be <chMtxLockS+0xde>
    cp = cp->queue.next;
 8004290:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8004292:	4296      	cmp	r6, r2
 8004294:	d1f9      	bne.n	800428a <chMtxLockS+0xaa>
  tp->queue.prev             = cp->queue.prev;
 8004296:	f8dc 2004 	ldr.w	r2, [ip, #4]
      while (tp->prio < ctp->prio) {
 800429a:	68a9      	ldr	r1, [r5, #8]
 800429c:	e9c3 c200 	strd	ip, r2, [r3]
  tp->queue.prev->queue.next = tp;
 80042a0:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 80042a2:	f8cc 3004 	str.w	r3, [ip, #4]
          tp = tp->u.wtmtxp->owner;
 80042a6:	68b3      	ldr	r3, [r6, #8]
      while (tp->prio < ctp->prio) {
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	428a      	cmp	r2, r1
 80042ac:	d3a3      	bcc.n	80041f6 <chMtxLockS+0x16>
 80042ae:	e7aa      	b.n	8004206 <chMtxLockS+0x26>
    cp = cp->queue.next;
 80042b0:	4616      	mov	r6, r2
  tp->queue.prev             = cp->queue.prev;
 80042b2:	6872      	ldr	r2, [r6, #4]
 80042b4:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 80042b8:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 80042ba:	6073      	str	r3, [r6, #4]
 80042bc:	e7a3      	b.n	8004206 <chMtxLockS+0x26>
    cp = cp->queue.next;
 80042be:	4694      	mov	ip, r2
 80042c0:	e7e9      	b.n	8004296 <chMtxLockS+0xb6>
 80042c2:	bf00      	nop
 80042c4:	200010f0 	.word	0x200010f0
	...

080042d0 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 80042d0:	b508      	push	{r3, lr}
 80042d2:	2320      	movs	r3, #32
 80042d4:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 80042d8:	f7ff ff82 	bl	80041e0 <chMtxLockS>
 80042dc:	2300      	movs	r3, #0
 80042de:	f383 8811 	msr	BASEPRI, r3
}
 80042e2:	bd08      	pop	{r3, pc}
	...

080042f0 <chSemWait>:
 80042f0:	2320      	movs	r3, #32
 80042f2:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80042f6:	6883      	ldr	r3, [r0, #8]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	6083      	str	r3, [r0, #8]
 80042fe:	db04      	blt.n	800430a <chSemWait+0x1a>
  return MSG_OK;
 8004300:	2000      	movs	r0, #0
 8004302:	2300      	movs	r3, #0
 8004304:	f383 8811 	msr	BASEPRI, r3
}
 8004308:	4770      	bx	lr
 800430a:	4603      	mov	r3, r0
msg_t chSemWait(semaphore_t *sp) {
 800430c:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 800430e:	4c08      	ldr	r4, [pc, #32]	; (8004330 <chSemWait+0x40>)
    chSchGoSleepS(CH_STATE_WTSEM);
 8004310:	2005      	movs	r0, #5
    currp->u.wtsemp = sp;
 8004312:	69a2      	ldr	r2, [r4, #24]
 8004314:	6253      	str	r3, [r2, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 8004316:	6859      	ldr	r1, [r3, #4]
 8004318:	e9c2 3100 	strd	r3, r1, [r2]
  tp->queue.prev->queue.next = tp;
 800431c:	600a      	str	r2, [r1, #0]
  tqp->prev                  = tp;
 800431e:	605a      	str	r2, [r3, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8004320:	f7fe fec6 	bl	80030b0 <chSchGoSleepS>
    return currp->u.rdymsg;
 8004324:	69a3      	ldr	r3, [r4, #24]
 8004326:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004328:	2300      	movs	r3, #0
 800432a:	f383 8811 	msr	BASEPRI, r3
}
 800432e:	bd10      	pop	{r4, pc}
 8004330:	200010f0 	.word	0x200010f0
	...

08004340 <rt_test_010_010_execute>:
static void rt_test_010_010_execute(void) {
 8004340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8004344:	2301      	movs	r3, #1
 8004346:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80043cc <rt_test_010_010_execute+0x8c>
    n = 0;
 800434a:	2500      	movs	r5, #0
  test_set_step(1);
 800434c:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 8004350:	f7ff fca6 	bl	8003ca0 <test_wait_tick>
 8004354:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8004358:	4607      	mov	r7, r0
  return systime + (systime_t)interval;
 800435a:	f500 66fa 	add.w	r6, r0, #2000	; 0x7d0
 800435e:	b2b6      	uxth	r6, r6
      chSemWait(&sem1);
 8004360:	4c17      	ldr	r4, [pc, #92]	; (80043c0 <rt_test_010_010_execute+0x80>)
 8004362:	1a36      	subs	r6, r6, r0
 8004364:	4620      	mov	r0, r4
 8004366:	f7ff ffc3 	bl	80042f0 <chSemWait>
      chSemSignal(&sem1);
 800436a:	4620      	mov	r0, r4
 800436c:	f7fe fe80 	bl	8003070 <chSemSignal>
      chSemWait(&sem1);
 8004370:	4620      	mov	r0, r4
 8004372:	f7ff ffbd 	bl	80042f0 <chSemWait>
      chSemSignal(&sem1);
 8004376:	4620      	mov	r0, r4
 8004378:	f7fe fe7a 	bl	8003070 <chSemSignal>
      chSemWait(&sem1);
 800437c:	4620      	mov	r0, r4
 800437e:	f7ff ffb7 	bl	80042f0 <chSemWait>
      chSemSignal(&sem1);
 8004382:	4620      	mov	r0, r4
 8004384:	f7fe fe74 	bl	8003070 <chSemSignal>
      chSemWait(&sem1);
 8004388:	4620      	mov	r0, r4
 800438a:	f7ff ffb1 	bl	80042f0 <chSemWait>
      chSemSignal(&sem1);
 800438e:	4620      	mov	r0, r4
 8004390:	f7fe fe6e 	bl	8003070 <chSemSignal>
 8004394:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
      n++;
 8004398:	3501      	adds	r5, #1
  return (bool)((time - start) < (end - start));
 800439a:	b29b      	uxth	r3, r3
 800439c:	1bdb      	subs	r3, r3, r7
    } while (chVTIsSystemTimeWithinX(start, end));
 800439e:	42b3      	cmp	r3, r6
 80043a0:	dbe0      	blt.n	8004364 <rt_test_010_010_execute+0x24>
  test_set_step(2);
 80043a2:	2302      	movs	r3, #2
    test_print("--- Score : ");
 80043a4:	4807      	ldr	r0, [pc, #28]	; (80043c4 <rt_test_010_010_execute+0x84>)
  test_set_step(2);
 80043a6:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 80043aa:	f7fc fbd1 	bl	8000b50 <test_print>
    test_printn(n * 4);
 80043ae:	00a8      	lsls	r0, r5, #2
 80043b0:	f7fc fb5e 	bl	8000a70 <test_printn>
}
 80043b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" wait+signal/S");
 80043b8:	4803      	ldr	r0, [pc, #12]	; (80043c8 <rt_test_010_010_execute+0x88>)
 80043ba:	f7fc bba9 	b.w	8000b10 <test_println>
 80043be:	bf00      	nop
 80043c0:	20001354 	.word	0x20001354
 80043c4:	0800b7e8 	.word	0x0800b7e8
 80043c8:	0800b814 	.word	0x0800b814
 80043cc:	20001a7c 	.word	0x20001a7c

080043d0 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
 80043d0:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 80043d2:	4c08      	ldr	r4, [pc, #32]	; (80043f4 <bmk_thread7+0x24>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80043d4:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 80043d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043da:	075a      	lsls	r2, r3, #29
 80043dc:	d408      	bmi.n	80043f0 <bmk_thread7+0x20>
    chSemWait(&sem1);
 80043de:	4d06      	ldr	r5, [pc, #24]	; (80043f8 <bmk_thread7+0x28>)
 80043e0:	4628      	mov	r0, r5
 80043e2:	f7ff ff85 	bl	80042f0 <chSemWait>
 80043e6:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 80043e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043ec:	075b      	lsls	r3, r3, #29
 80043ee:	d5f7      	bpl.n	80043e0 <bmk_thread7+0x10>
}
 80043f0:	bd38      	pop	{r3, r4, r5, pc}
 80043f2:	bf00      	nop
 80043f4:	200010f0 	.word	0x200010f0
 80043f8:	20001354 	.word	0x20001354
 80043fc:	00000000 	.word	0x00000000

08004400 <thread3>:
static THD_FUNCTION(thread3, p) {
 8004400:	b510      	push	{r4, lr}
  chSemWait(&sem1);
 8004402:	4c04      	ldr	r4, [pc, #16]	; (8004414 <thread3+0x14>)
 8004404:	4620      	mov	r0, r4
 8004406:	f7ff ff73 	bl	80042f0 <chSemWait>
  chSemSignal(&sem1);
 800440a:	4620      	mov	r0, r4
}
 800440c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSemSignal(&sem1);
 8004410:	f7fe be2e 	b.w	8003070 <chSemSignal>
 8004414:	20001348 	.word	0x20001348
	...

08004420 <thread1.lto_priv.114>:
static THD_FUNCTION(thread1, p) {
 8004420:	b510      	push	{r4, lr}
 8004422:	4604      	mov	r4, r0
  chSemWait(&sem1);
 8004424:	4803      	ldr	r0, [pc, #12]	; (8004434 <thread1.lto_priv.114+0x14>)
 8004426:	f7ff ff63 	bl	80042f0 <chSemWait>
  test_emit_token(*(char *)p);
 800442a:	7820      	ldrb	r0, [r4, #0]
}
 800442c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 8004430:	f7fc bb2e 	b.w	8000a90 <test_emit_token>
 8004434:	20001348 	.word	0x20001348
	...

08004440 <chThdExitS>:
void chThdExitS(msg_t msg) {
 8004440:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8004442:	4b10      	ldr	r3, [pc, #64]	; (8004484 <chThdExitS+0x44>)
 8004444:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8004446:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8004448:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800444c:	42ab      	cmp	r3, r5
  tp->u.exitcode = msg;
 800444e:	6260      	str	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8004450:	d007      	beq.n	8004462 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 8004452:	681a      	ldr	r2, [r3, #0]
    (void) chSchReadyI(list_remove(&tp->waiting));
 8004454:	4618      	mov	r0, r3
 8004456:	62a2      	str	r2, [r4, #40]	; 0x28
 8004458:	f7fd fb2a 	bl	8001ab0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 800445c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800445e:	42ab      	cmp	r3, r5
 8004460:	d1f7      	bne.n	8004452 <chThdExitS+0x12>
  if ((tp->refs == (trefs_t)0) &&
 8004462:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8004466:	b943      	cbnz	r3, 800447a <chThdExitS+0x3a>
 8004468:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800446c:	079b      	lsls	r3, r3, #30
 800446e:	d104      	bne.n	800447a <chThdExitS+0x3a>
    REG_REMOVE(tp);
 8004470:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8004474:	611a      	str	r2, [r3, #16]
 8004476:	6922      	ldr	r2, [r4, #16]
 8004478:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 800447a:	200f      	movs	r0, #15
}
 800447c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8004480:	f7fe be16 	b.w	80030b0 <chSchGoSleepS>
 8004484:	200010f0 	.word	0x200010f0
	...

08004490 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 8004490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004494:	4681      	mov	r9, r0
  int n;
  ShellConfig *scfg = p;
  BaseSequentialStream *chp = scfg->sc_channel;
 8004496:	6807      	ldr	r7, [r0, #0]
  const ShellCommand *scp = scfg->sc_commands;
 8004498:	f8d9 3004 	ldr.w	r3, [r9, #4]
THD_FUNCTION(shellThread, p) {
 800449c:	b09b      	sub	sp, #108	; 0x6c
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 800449e:	4975      	ldr	r1, [pc, #468]	; (8004674 <shellThread+0x1e4>)
 80044a0:	4638      	mov	r0, r7
  const ShellCommand *scp = scfg->sc_commands;
 80044a2:	9301      	str	r3, [sp, #4]
  chprintf(chp, SHELL_NEWLINE_STR);
 80044a4:	f7fd fef4 	bl	8002290 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell"SHELL_NEWLINE_STR);
 80044a8:	4638      	mov	r0, r7
 80044aa:	4973      	ldr	r1, [pc, #460]	; (8004678 <shellThread+0x1e8>)
 80044ac:	f7fd fef0 	bl	8002290 <chprintf>
  while (true) {
    chprintf(chp, SHELL_PROMPT_STR);
 80044b0:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 80046ac <shellThread+0x21c>
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, SHELL_NEWLINE_STR);
 80044b4:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8004674 <shellThread+0x1e4>
 80044b8:	ae0a      	add	r6, sp, #40	; 0x28
  char *p = line;
 80044ba:	4634      	mov	r4, r6
    chprintf(chp, SHELL_PROMPT_STR);
 80044bc:	4651      	mov	r1, sl
 80044be:	4638      	mov	r0, r7
 80044c0:	f7fd fee6 	bl	8002290 <chprintf>
  BaseSequentialStream *chp = scfg->sc_channel;
 80044c4:	f8d9 5000 	ldr.w	r5, [r9]
 80044c8:	682b      	ldr	r3, [r5, #0]
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f10d 010f 	add.w	r1, sp, #15
 80044d2:	4628      	mov	r0, r5
 80044d4:	4798      	blx	r3
 80044d6:	2800      	cmp	r0, #0
 80044d8:	d06d      	beq.n	80045b6 <shellThread+0x126>
    if (c == 4) {
 80044da:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80044de:	2904      	cmp	r1, #4
 80044e0:	d065      	beq.n	80045ae <shellThread+0x11e>
    if ((c == 8) || (c == 127)) {
 80044e2:	2908      	cmp	r1, #8
      continue;
    }
#endif
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 80044e4:	f10d 0267 	add.w	r2, sp, #103	; 0x67
    if ((c == 8) || (c == 127)) {
 80044e8:	d012      	beq.n	8004510 <shellThread+0x80>
 80044ea:	297f      	cmp	r1, #127	; 0x7f
 80044ec:	d010      	beq.n	8004510 <shellThread+0x80>
    if (c == '\r') {
 80044ee:	290d      	cmp	r1, #13
 80044f0:	d022      	beq.n	8004538 <shellThread+0xa8>
    if (c < 0x20)
 80044f2:	291f      	cmp	r1, #31
 80044f4:	682b      	ldr	r3, [r5, #0]
 80044f6:	d9e8      	bls.n	80044ca <shellThread+0x3a>
    if (p < line + size - 1) {
 80044f8:	4294      	cmp	r4, r2
 80044fa:	d2e6      	bcs.n	80044ca <shellThread+0x3a>
      streamPut(chp, c);
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	4628      	mov	r0, r5
 8004500:	4798      	blx	r3
      *p++ = (char)c;
 8004502:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004506:	3401      	adds	r4, #1
 8004508:	f804 3c01 	strb.w	r3, [r4, #-1]
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	e7dc      	b.n	80044ca <shellThread+0x3a>
      if (p != line) {
 8004510:	42b4      	cmp	r4, r6
 8004512:	682b      	ldr	r3, [r5, #0]
 8004514:	d0d9      	beq.n	80044ca <shellThread+0x3a>
        streamPut(chp, 0x08);
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	2108      	movs	r1, #8
 800451a:	4628      	mov	r0, r5
 800451c:	4798      	blx	r3
        streamPut(chp, 0x20);
 800451e:	682b      	ldr	r3, [r5, #0]
 8004520:	2120      	movs	r1, #32
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	4628      	mov	r0, r5
 8004526:	4798      	blx	r3
        streamPut(chp, 0x08);
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	2108      	movs	r1, #8
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	4628      	mov	r0, r5
 8004530:	4798      	blx	r3
        p--;
 8004532:	3c01      	subs	r4, #1
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	e7c8      	b.n	80044ca <shellThread+0x3a>
      *p = 0;
 8004538:	f04f 0800 	mov.w	r8, #0
      chprintf(chp, SHELL_NEWLINE_STR);
 800453c:	4628      	mov	r0, r5
 800453e:	4659      	mov	r1, fp
 8004540:	f7fd fea6 	bl	8002290 <chprintf>
      *p = 0;
 8004544:	f884 8000 	strb.w	r8, [r4]
    lp = parse_arguments(line, &tokp);
 8004548:	a904      	add	r1, sp, #16
 800454a:	4630      	mov	r0, r6
 800454c:	f7fd fe70 	bl	8002230 <parse_arguments>
    n = 0;
 8004550:	4644      	mov	r4, r8
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8004552:	a904      	add	r1, sp, #16
    lp = parse_arguments(line, &tokp);
 8004554:	4680      	mov	r8, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8004556:	2000      	movs	r0, #0
 8004558:	ad05      	add	r5, sp, #20
 800455a:	f7fd fe69 	bl	8002230 <parse_arguments>
 800455e:	b150      	cbz	r0, 8004576 <shellThread+0xe6>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8004560:	2c04      	cmp	r4, #4
 8004562:	d01d      	beq.n	80045a0 <shellThread+0x110>
      args[n++] = lp;
 8004564:	f845 0b04 	str.w	r0, [r5], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8004568:	a904      	add	r1, sp, #16
 800456a:	2000      	movs	r0, #0
      args[n++] = lp;
 800456c:	3401      	adds	r4, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800456e:	f7fd fe5f 	bl	8002230 <parse_arguments>
 8004572:	2800      	cmp	r0, #0
 8004574:	d1f4      	bne.n	8004560 <shellThread+0xd0>
    args[n] = NULL;
 8004576:	ab1a      	add	r3, sp, #104	; 0x68
 8004578:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800457c:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8004580:	f1b8 0f00 	cmp.w	r8, #0
 8004584:	d099      	beq.n	80044ba <shellThread+0x2a>
      if (strcmp(cmd, "help") == 0) {
 8004586:	493d      	ldr	r1, [pc, #244]	; (800467c <shellThread+0x1ec>)
 8004588:	4640      	mov	r0, r8
 800458a:	f7fb fee3 	bl	8000354 <strcmp>
 800458e:	2800      	cmp	r0, #0
 8004590:	d147      	bne.n	8004622 <shellThread+0x192>
        if (n > 0) {
 8004592:	b32c      	cbz	r4, 80045e0 <shellThread+0x150>
          shellUsage(chp, "help");
 8004594:	4a39      	ldr	r2, [pc, #228]	; (800467c <shellThread+0x1ec>)
 8004596:	493a      	ldr	r1, [pc, #232]	; (8004680 <shellThread+0x1f0>)
 8004598:	4638      	mov	r0, r7
 800459a:	f7fd fe79 	bl	8002290 <chprintf>
 800459e:	e78c      	b.n	80044ba <shellThread+0x2a>
        chprintf(chp, "too many arguments"SHELL_NEWLINE_STR);
 80045a0:	4938      	ldr	r1, [pc, #224]	; (8004684 <shellThread+0x1f4>)
 80045a2:	4638      	mov	r0, r7
 80045a4:	f7fd fe74 	bl	8002290 <chprintf>
    args[n] = NULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	9309      	str	r3, [sp, #36]	; 0x24
 80045ac:	e785      	b.n	80044ba <shellThread+0x2a>
      chprintf(chp, "^D");
 80045ae:	4628      	mov	r0, r5
 80045b0:	4935      	ldr	r1, [pc, #212]	; (8004688 <shellThread+0x1f8>)
 80045b2:	f7fd fe6d 	bl	8002290 <chprintf>
      chprintf(chp, SHELL_NEWLINE_STR);
 80045b6:	492f      	ldr	r1, [pc, #188]	; (8004674 <shellThread+0x1e4>)
 80045b8:	4638      	mov	r0, r7
 80045ba:	f7fd fe69 	bl	8002290 <chprintf>
      chprintf(chp, "logout");
 80045be:	4638      	mov	r0, r7
 80045c0:	4932      	ldr	r1, [pc, #200]	; (800468c <shellThread+0x1fc>)
 80045c2:	f7fd fe65 	bl	8002290 <chprintf>
 80045c6:	2320      	movs	r3, #32
 80045c8:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 80045cc:	2100      	movs	r1, #0
 80045ce:	4830      	ldr	r0, [pc, #192]	; (8004690 <shellThread+0x200>)
 80045d0:	f7fd fb3e 	bl	8001c50 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 80045d4:	2000      	movs	r0, #0
 80045d6:	f7ff ff33 	bl	8004440 <chThdExitS>
}
 80045da:	b01b      	add	sp, #108	; 0x6c
 80045dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chprintf(chp, "Commands: help ");
 80045e0:	492c      	ldr	r1, [pc, #176]	; (8004694 <shellThread+0x204>)
 80045e2:	4638      	mov	r0, r7
 80045e4:	f7fd fe54 	bl	8002290 <chprintf>
 80045e8:	4c2b      	ldr	r4, [pc, #172]	; (8004698 <shellThread+0x208>)
  while (scp->sc_name != NULL) {
 80045ea:	4a2c      	ldr	r2, [pc, #176]	; (800469c <shellThread+0x20c>)
    chprintf(chp, "%s ", scp->sc_name);
 80045ec:	4d2c      	ldr	r5, [pc, #176]	; (80046a0 <shellThread+0x210>)
 80045ee:	4629      	mov	r1, r5
 80045f0:	4638      	mov	r0, r7
 80045f2:	f7fd fe4d 	bl	8002290 <chprintf>
  while (scp->sc_name != NULL) {
 80045f6:	f854 2f08 	ldr.w	r2, [r4, #8]!
 80045fa:	2a00      	cmp	r2, #0
 80045fc:	d1f7      	bne.n	80045ee <shellThread+0x15e>
        if (scp != NULL)
 80045fe:	9c01      	ldr	r4, [sp, #4]
 8004600:	b154      	cbz	r4, 8004618 <shellThread+0x188>
  while (scp->sc_name != NULL) {
 8004602:	6822      	ldr	r2, [r4, #0]
 8004604:	b142      	cbz	r2, 8004618 <shellThread+0x188>
    chprintf(chp, "%s ", scp->sc_name);
 8004606:	4d26      	ldr	r5, [pc, #152]	; (80046a0 <shellThread+0x210>)
 8004608:	4629      	mov	r1, r5
 800460a:	4638      	mov	r0, r7
 800460c:	f7fd fe40 	bl	8002290 <chprintf>
  while (scp->sc_name != NULL) {
 8004610:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8004614:	2a00      	cmp	r2, #0
 8004616:	d1f7      	bne.n	8004608 <shellThread+0x178>
        chprintf(chp, SHELL_NEWLINE_STR);
 8004618:	4659      	mov	r1, fp
 800461a:	4638      	mov	r0, r7
 800461c:	f7fd fe38 	bl	8002290 <chprintf>
 8004620:	e74b      	b.n	80044ba <shellThread+0x2a>
 8004622:	4d1d      	ldr	r5, [pc, #116]	; (8004698 <shellThread+0x208>)
  while (scp->sc_name != NULL) {
 8004624:	481d      	ldr	r0, [pc, #116]	; (800469c <shellThread+0x20c>)
 8004626:	e002      	b.n	800462e <shellThread+0x19e>
 8004628:	f855 0f08 	ldr.w	r0, [r5, #8]!
 800462c:	b150      	cbz	r0, 8004644 <shellThread+0x1b4>
    if (strcmp(scp->sc_name, name) == 0) {
 800462e:	4641      	mov	r1, r8
 8004630:	f7fb fe90 	bl	8000354 <strcmp>
 8004634:	2800      	cmp	r0, #0
 8004636:	d1f7      	bne.n	8004628 <shellThread+0x198>
      scp->sc_function(chp, argc, argv);
 8004638:	686b      	ldr	r3, [r5, #4]
 800463a:	aa05      	add	r2, sp, #20
 800463c:	4621      	mov	r1, r4
 800463e:	4638      	mov	r0, r7
 8004640:	4798      	blx	r3
 8004642:	e73a      	b.n	80044ba <shellThread+0x2a>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 8004644:	9d01      	ldr	r5, [sp, #4]
 8004646:	b15d      	cbz	r5, 8004660 <shellThread+0x1d0>
  while (scp->sc_name != NULL) {
 8004648:	6828      	ldr	r0, [r5, #0]
 800464a:	b918      	cbnz	r0, 8004654 <shellThread+0x1c4>
 800464c:	e008      	b.n	8004660 <shellThread+0x1d0>
 800464e:	f855 0f08 	ldr.w	r0, [r5, #8]!
 8004652:	b128      	cbz	r0, 8004660 <shellThread+0x1d0>
    if (strcmp(scp->sc_name, name) == 0) {
 8004654:	4641      	mov	r1, r8
 8004656:	f7fb fe7d 	bl	8000354 <strcmp>
 800465a:	2800      	cmp	r0, #0
 800465c:	d1f7      	bne.n	800464e <shellThread+0x1be>
 800465e:	e7eb      	b.n	8004638 <shellThread+0x1a8>
        chprintf(chp, "%s", cmd);
 8004660:	4642      	mov	r2, r8
 8004662:	4910      	ldr	r1, [pc, #64]	; (80046a4 <shellThread+0x214>)
 8004664:	4638      	mov	r0, r7
 8004666:	f7fd fe13 	bl	8002290 <chprintf>
        chprintf(chp, " ?"SHELL_NEWLINE_STR);
 800466a:	490f      	ldr	r1, [pc, #60]	; (80046a8 <shellThread+0x218>)
 800466c:	4638      	mov	r0, r7
 800466e:	f7fd fe0f 	bl	8002290 <chprintf>
 8004672:	e722      	b.n	80044ba <shellThread+0x2a>
 8004674:	0800ba70 	.word	0x0800ba70
 8004678:	0800ba60 	.word	0x0800ba60
 800467c:	0800baa0 	.word	0x0800baa0
 8004680:	0800a254 	.word	0x0800a254
 8004684:	0800ba88 	.word	0x0800ba88
 8004688:	0800ba7c 	.word	0x0800ba7c
 800468c:	0800ba80 	.word	0x0800ba80
 8004690:	20001360 	.word	0x20001360
 8004694:	0800baa8 	.word	0x0800baa8
 8004698:	0800bac8 	.word	0x0800bac8
 800469c:	0800ba58 	.word	0x0800ba58
 80046a0:	0800bab8 	.word	0x0800bab8
 80046a4:	0800babc 	.word	0x0800babc
 80046a8:	0800bac0 	.word	0x0800bac0
 80046ac:	0800ba74 	.word	0x0800ba74

080046b0 <cmd_exit>:
  if (argc > 0) {
 80046b0:	2900      	cmp	r1, #0
 80046b2:	dd03      	ble.n	80046bc <cmd_exit+0xc>
    shellUsage(chp, "exit");
 80046b4:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <cmd_exit+0x28>)
 80046b6:	4909      	ldr	r1, [pc, #36]	; (80046dc <cmd_exit+0x2c>)
 80046b8:	f7fd bdea 	b.w	8002290 <chprintf>
static void cmd_exit(BaseSequentialStream *chp, int argc, char *argv[]) {
 80046bc:	b508      	push	{r3, lr}
 80046be:	2320      	movs	r3, #32
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	4806      	ldr	r0, [pc, #24]	; (80046e0 <cmd_exit+0x30>)
 80046c6:	2100      	movs	r1, #0
 80046c8:	f7fd fac2 	bl	8001c50 <chEvtBroadcastFlagsI>
}
 80046cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chThdExitS(msg);
 80046d0:	2000      	movs	r0, #0
 80046d2:	f7ff beb5 	b.w	8004440 <chThdExitS>
 80046d6:	bf00      	nop
 80046d8:	0800ba58 	.word	0x0800ba58
 80046dc:	0800a254 	.word	0x0800a254
 80046e0:	20001360 	.word	0x20001360
	...

080046f0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80046f0:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <__early_init+0x70>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80046f2:	461a      	mov	r2, r3
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80046f4:	6819      	ldr	r1, [r3, #0]
 80046f6:	f041 0101 	orr.w	r1, r1, #1
 80046fa:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80046fc:	6813      	ldr	r3, [r2, #0]
 80046fe:	0798      	lsls	r0, r3, #30
 8004700:	d5fc      	bpl.n	80046fc <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8004702:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004704:	6813      	ldr	r3, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004706:	4916      	ldr	r1, [pc, #88]	; (8004760 <__early_init+0x70>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004708:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 800470c:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800470e:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004710:	684b      	ldr	r3, [r1, #4]
 8004712:	f013 0f0c 	tst.w	r3, #12
 8004716:	d1fb      	bne.n	8004710 <__early_init+0x20>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8004718:	680b      	ldr	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 800471a:	4a11      	ldr	r2, [pc, #68]	; (8004760 <__early_init+0x70>)
  RCC->CR |= RCC_CR_HSEON;
 800471c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004720:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8004722:	6813      	ldr	r3, [r2, #0]
 8004724:	0399      	lsls	r1, r3, #14
 8004726:	d5fc      	bpl.n	8004722 <__early_init+0x32>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8004728:	6853      	ldr	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800472a:	490d      	ldr	r1, [pc, #52]	; (8004760 <__early_init+0x70>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800472c:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8004730:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8004732:	6813      	ldr	r3, [r2, #0]
 8004734:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004738:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800473a:	680b      	ldr	r3, [r1, #0]
 800473c:	019b      	lsls	r3, r3, #6
 800473e:	d5fc      	bpl.n	800473a <__early_init+0x4a>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8004740:	2212      	movs	r2, #18
 8004742:	4b08      	ldr	r3, [pc, #32]	; (8004764 <__early_init+0x74>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8004744:	4808      	ldr	r0, [pc, #32]	; (8004768 <__early_init+0x78>)
 8004746:	6048      	str	r0, [r1, #4]
  FLASH->ACR = STM32_FLASHBITS;
 8004748:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 800474a:	684b      	ldr	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800474c:	4a04      	ldr	r2, [pc, #16]	; (8004760 <__early_init+0x70>)
  RCC->CFGR |= STM32_SW;
 800474e:	f043 0302 	orr.w	r3, r3, #2
 8004752:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8004754:	6853      	ldr	r3, [r2, #4]
 8004756:	f003 030c 	and.w	r3, r3, #12
 800475a:	2b08      	cmp	r3, #8
 800475c:	d1fa      	bne.n	8004754 <__early_init+0x64>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 800475e:	4770      	bx	lr
 8004760:	40021000 	.word	0x40021000
 8004764:	40022000 	.word	0x40022000
 8004768:	001d6400 	.word	0x001d6400
 800476c:	00000000 	.word	0x00000000

08004770 <Vector90>:
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8004770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  istr = STM32_USB->ISTR;
 8004774:	4bc2      	ldr	r3, [pc, #776]	; (8004a80 <Vector90+0x310>)
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8004776:	b085      	sub	sp, #20
  istr = STM32_USB->ISTR;
 8004778:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (istr & ISTR_RESET) {
 800477a:	0567      	lsls	r7, r4, #21
 800477c:	f100 80ac 	bmi.w	80048d8 <Vector90+0x168>
  if (istr & ISTR_SUSP) {
 8004780:	0526      	lsls	r6, r4, #20
 8004782:	f100 80cf 	bmi.w	8004924 <Vector90+0x1b4>
  if (istr & ISTR_WKUP) {
 8004786:	04e5      	lsls	r5, r4, #19
 8004788:	d508      	bpl.n	800479c <Vector90+0x2c>
    uint32_t fnr = STM32_USB->FNR;
 800478a:	4bbd      	ldr	r3, [pc, #756]	; (8004a80 <Vector90+0x310>)
 800478c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 800478e:	0410      	lsls	r0, r2, #16
 8004790:	f140 814f 	bpl.w	8004a32 <Vector90+0x2c2>
    STM32_USB->ISTR = ~ISTR_WKUP;
 8004794:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 8004798:	4bb9      	ldr	r3, [pc, #740]	; (8004a80 <Vector90+0x310>)
 800479a:	645a      	str	r2, [r3, #68]	; 0x44
  if (istr & ISTR_SOF) {
 800479c:	05a1      	lsls	r1, r4, #22
 800479e:	d50b      	bpl.n	80047b8 <Vector90+0x48>
    _usb_isr_invoke_sof_cb(usbp);
 80047a0:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 8004a84 <Vector90+0x314>
 80047a4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	b10b      	cbz	r3, 80047b0 <Vector90+0x40>
 80047ac:	4650      	mov	r0, sl
 80047ae:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 80047b0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80047b4:	4bb2      	ldr	r3, [pc, #712]	; (8004a80 <Vector90+0x310>)
 80047b6:	645a      	str	r2, [r3, #68]	; 0x44
  while (istr & ISTR_CTR) {
 80047b8:	0423      	lsls	r3, r4, #16
 80047ba:	d579      	bpl.n	80048b0 <Vector90+0x140>
 80047bc:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8004a84 <Vector90+0x314>
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80047c0:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8004a80 <Vector90+0x310>
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
 80047c4:	f004 040f 	and.w	r4, r4, #15
 80047c8:	00a5      	lsls	r5, r4, #2
 80047ca:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80047ce:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
  uint32_t epr = STM32_USB->EPR[ep];
 80047d2:	f8d5 8000 	ldr.w	r8, [r5]
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80047d6:	1ca6      	adds	r6, r4, #2
 80047d8:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
  if (epr & EPR_CTR_TX) {
 80047dc:	f018 0f80 	tst.w	r8, #128	; 0x80
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80047e0:	685f      	ldr	r7, [r3, #4]
  if (epr & EPR_CTR_TX) {
 80047e2:	d04c      	beq.n	800487e <Vector90+0x10e>
    USBInEndpointState *isp = epcp->in_state;
 80047e4:	f8d7 c014 	ldr.w	ip, [r7, #20]
    EPR_CLEAR_CTR_TX(ep);
 80047e8:	682a      	ldr	r2, [r5, #0]
    isp->txcnt += isp->txlast;
 80047ea:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80047ee:	f8dc 100c 	ldr.w	r1, [ip, #12]
    n = isp->txsize - isp->txcnt;
 80047f2:	f8dc 0000 	ldr.w	r0, [ip]
    EPR_CLEAR_CTR_TX(ep);
 80047f6:	f422 4278 	bic.w	r2, r2, #63488	; 0xf800
    isp->txcnt += isp->txlast;
 80047fa:	440b      	add	r3, r1
    EPR_CLEAR_CTR_TX(ep);
 80047fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004800:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    if (n > 0) {
 8004804:	1ac0      	subs	r0, r0, r3
    EPR_CLEAR_CTR_TX(ep);
 8004806:	602a      	str	r2, [r5, #0]
    isp->txcnt += isp->txlast;
 8004808:	f8cc 3004 	str.w	r3, [ip, #4]
    if (n > 0) {
 800480c:	d055      	beq.n	80048ba <Vector90+0x14a>
      if (n > epcp->in_maxsize)
 800480e:	8a3b      	ldrh	r3, [r7, #16]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8004810:	ea4f 1e04 	mov.w	lr, r4, lsl #4
 8004814:	4298      	cmp	r0, r3
 8004816:	bf28      	it	cs
 8004818:	4618      	movcs	r0, r3
      isp->txlast = n;
 800481a:	f8cc 000c 	str.w	r0, [ip, #12]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800481e:	f8db 2050 	ldr.w	r2, [fp, #80]	; 0x50
      isp->txbuf += isp->txlast;
 8004822:	f8dc 3008 	ldr.w	r3, [ip, #8]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8004826:	f102 4980 	add.w	r9, r2, #1073741824	; 0x40000000
 800482a:	f509 49c0 	add.w	r9, r9, #24576	; 0x6000
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800482e:	f85e 2009 	ldr.w	r2, [lr, r9]
      isp->txbuf += isp->txlast;
 8004832:	4419      	add	r1, r3
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8004834:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8004838:	44ce      	add	lr, r9
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800483a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
      isp->txbuf += isp->txlast;
 800483e:	f8cc 1008 	str.w	r1, [ip, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8004842:	0052      	lsls	r2, r2, #1
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8004844:	f8ce 0004 	str.w	r0, [lr, #4]
  while (i > 0) {
 8004848:	b168      	cbz	r0, 8004866 <Vector90+0xf6>
 800484a:	3801      	subs	r0, #1
 800484c:	0840      	lsrs	r0, r0, #1
 800484e:	1d13      	adds	r3, r2, #4
 8004850:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004854:	4684      	mov	ip, r0
 8004856:	e000      	b.n	800485a <Vector90+0xea>
 8004858:	3304      	adds	r3, #4
    w |= *buf++ << 8;
 800485a:	f831 0b02 	ldrh.w	r0, [r1], #2
  while (i > 0) {
 800485e:	4563      	cmp	r3, ip
    *pmap++ = (stm32_usb_pma_t)w;
 8004860:	6010      	str	r0, [r2, #0]
 8004862:	461a      	mov	r2, r3
  while (i > 0) {
 8004864:	d1f8      	bne.n	8004858 <Vector90+0xe8>
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8004866:	682b      	ldr	r3, [r5, #0]
 8004868:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800486c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004870:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8004874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487c:	602b      	str	r3, [r5, #0]
  if (epr & EPR_CTR_RX) {
 800487e:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8004882:	d011      	beq.n	80048a8 <Vector90+0x138>
    EPR_CLEAR_CTR_RX(ep);
 8004884:	682b      	ldr	r3, [r5, #0]
    if (epr & EPR_SETUP) {
 8004886:	f418 6f00 	tst.w	r8, #2048	; 0x800
    EPR_CLEAR_CTR_RX(ep);
 800488a:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 800488e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004896:	b2e1      	uxtb	r1, r4
 8004898:	602b      	str	r3, [r5, #0]
    if (epr & EPR_SETUP) {
 800489a:	d05e      	beq.n	800495a <Vector90+0x1ea>
      _usb_isr_invoke_setup_cb(usbp, ep);
 800489c:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 80048a0:	6873      	ldr	r3, [r6, #4]
 80048a2:	4878      	ldr	r0, [pc, #480]	; (8004a84 <Vector90+0x314>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	4798      	blx	r3
    istr = STM32_USB->ISTR;
 80048a8:	f8db 4044 	ldr.w	r4, [fp, #68]	; 0x44
  while (istr & ISTR_CTR) {
 80048ac:	0422      	lsls	r2, r4, #16
 80048ae:	d489      	bmi.n	80047c4 <Vector90+0x54>
}
 80048b0:	b005      	add	sp, #20
 80048b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 80048b6:	f7fc beeb 	b.w	8001690 <_port_irq_epilogue>
      _usb_isr_invoke_in_cb(usbp, ep);
 80048ba:	2101      	movs	r1, #1
 80048bc:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 80048c0:	40a1      	lsls	r1, r4
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	ea23 0301 	bic.w	r3, r3, r1
 80048c8:	f8aa 3008 	strh.w	r3, [sl, #8]
 80048cc:	2a00      	cmp	r2, #0
 80048ce:	d0d6      	beq.n	800487e <Vector90+0x10e>
 80048d0:	4621      	mov	r1, r4
 80048d2:	486c      	ldr	r0, [pc, #432]	; (8004a84 <Vector90+0x314>)
 80048d4:	4790      	blx	r2
 80048d6:	e7d2      	b.n	800487e <Vector90+0x10e>
    STM32_USB->ISTR = ~ISTR_RESET;
 80048d8:	f46f 6180 	mvn.w	r1, #1024	; 0x400
  usbp->status        = 0;
 80048dc:	2500      	movs	r5, #0
  usbp->state         = USB_READY;
 80048de:	2202      	movs	r2, #2
 80048e0:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8004a84 <Vector90+0x314>
 80048e4:	6459      	str	r1, [r3, #68]	; 0x44
  usb_lld_reset(usbp);
 80048e6:	4650      	mov	r0, sl
  usbp->state         = USB_READY;
 80048e8:	f88a 2000 	strb.w	r2, [sl]
  usbp->status        = 0;
 80048ec:	f8ca 507c 	str.w	r5, [sl, #124]	; 0x7c
  usbp->receiving     = 0;
 80048f0:	e9ca 5502 	strd	r5, r5, [sl, #8]
    usbp->epc[i] = NULL;
 80048f4:	e9ca 5504 	strd	r5, r5, [sl, #16]
 80048f8:	e9ca 5506 	strd	r5, r5, [sl, #24]
 80048fc:	e9ca 5508 	strd	r5, r5, [sl, #32]
 8004900:	f8ca 5028 	str.w	r5, [sl, #40]	; 0x28
  usbp->ep0state = USB_EP0_STP_WAITING;
 8004904:	f88a 5064 	strb.w	r5, [sl, #100]	; 0x64
  usb_lld_reset(usbp);
 8004908:	f7fc fa7a 	bl	8000e00 <usb_lld_reset>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800490c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f43f af34 	beq.w	8004780 <Vector90+0x10>
 8004918:	4629      	mov	r1, r5
 800491a:	4650      	mov	r0, sl
 800491c:	4798      	blx	r3
  if (istr & ISTR_SUSP) {
 800491e:	0526      	lsls	r6, r4, #20
 8004920:	f57f af31 	bpl.w	8004786 <Vector90+0x16>
    STM32_USB->ISTR = ~ISTR_SUSP;
 8004924:	f46f 6000 	mvn.w	r0, #2048	; 0x800
  usbp->state       = USB_SUSPENDED;
 8004928:	2105      	movs	r1, #5
    STM32_USB->CNTR |= CNTR_FSUSP;
 800492a:	4b55      	ldr	r3, [pc, #340]	; (8004a80 <Vector90+0x310>)
  usbp->saved_state = usbp->state;
 800492c:	f8df a154 	ldr.w	sl, [pc, #340]	; 8004a84 <Vector90+0x314>
 8004930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004932:	f042 0208 	orr.w	r2, r2, #8
 8004936:	641a      	str	r2, [r3, #64]	; 0x40
    STM32_USB->ISTR = ~ISTR_SUSP;
 8004938:	6458      	str	r0, [r3, #68]	; 0x44
 800493a:	f89a 2000 	ldrb.w	r2, [sl]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800493e:	f8da 3004 	ldr.w	r3, [sl, #4]
  usbp->saved_state = usbp->state;
 8004942:	f88a 2080 	strb.w	r2, [sl, #128]	; 0x80
  usbp->state       = USB_SUSPENDED;
 8004946:	f88a 1000 	strb.w	r1, [sl]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f43f af1a 	beq.w	8004786 <Vector90+0x16>
 8004952:	4650      	mov	r0, sl
 8004954:	2104      	movs	r1, #4
 8004956:	4798      	blx	r3
 8004958:	e715      	b.n	8004786 <Vector90+0x16>
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800495a:	f8db 3050 	ldr.w	r3, [fp, #80]	; 0x50
      USBOutEndpointState *osp = epcp->out_state;
 800495e:	f8d7 e018 	ldr.w	lr, [r7, #24]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8004962:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004966:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800496a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 800496e:	689a      	ldr	r2, [r3, #8]
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8004970:	68d8      	ldr	r0, [r3, #12]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8004972:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8004976:	f3c0 0909 	ubfx	r9, r0, #0, #10
 800497a:	9002      	str	r0, [sp, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 800497c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 8004980:	f8de 0008 	ldr.w	r0, [lr, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8004984:	005b      	lsls	r3, r3, #1
  while (i >= 2) {
 8004986:	f1b9 0f01 	cmp.w	r9, #1
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 800498a:	461a      	mov	r2, r3
 800498c:	9300      	str	r3, [sp, #0]
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 800498e:	9001      	str	r0, [sp, #4]
  while (i >= 2) {
 8004990:	d972      	bls.n	8004a78 <Vector90+0x308>
 8004992:	f1a9 0302 	sub.w	r3, r9, #2
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	f102 0804 	add.w	r8, r2, #4
 800499c:	9303      	str	r3, [sp, #12]
 800499e:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 80049a2:	1c83      	adds	r3, r0, #2
    uint32_t w = *pmap++;
 80049a4:	6810      	ldr	r0, [r2, #0]
 80049a6:	3204      	adds	r2, #4
    *buf++ = (uint8_t)(w >> 8);
 80049a8:	ea4f 2c10 	mov.w	ip, r0, lsr #8
  while (i >= 2) {
 80049ac:	4590      	cmp	r8, r2
    *buf++ = (uint8_t)w;
 80049ae:	f803 0c02 	strb.w	r0, [r3, #-2]
    *buf++ = (uint8_t)(w >> 8);
 80049b2:	f803 cc01 	strb.w	ip, [r3, #-1]
 80049b6:	f103 0302 	add.w	r3, r3, #2
  while (i >= 2) {
 80049ba:	d1f3      	bne.n	80049a4 <Vector90+0x234>
 80049bc:	9b03      	ldr	r3, [sp, #12]
 80049be:	9a00      	ldr	r2, [sp, #0]
 80049c0:	3301      	adds	r3, #1
 80049c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80049c6:	9200      	str	r2, [sp, #0]
 80049c8:	9a01      	ldr	r2, [sp, #4]
 80049ca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80049ce:	9301      	str	r3, [sp, #4]
 80049d0:	9b02      	ldr	r3, [sp, #8]
 80049d2:	f003 0301 	and.w	r3, r3, #1
  if (i >= 1) {
 80049d6:	b11b      	cbz	r3, 80049e0 <Vector90+0x270>
    *buf = (uint8_t)*pmap;
 80049d8:	9b00      	ldr	r3, [sp, #0]
 80049da:	9a01      	ldr	r2, [sp, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	7013      	strb	r3, [r2, #0]
      osp->rxpkts -= 1;
 80049e0:	f8be 300c 	ldrh.w	r3, [lr, #12]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 80049e4:	f8b7 c012 	ldrh.w	ip, [r7, #18]
      osp->rxpkts -= 1;
 80049e8:	1e5f      	subs	r7, r3, #1
      osp->rxsize -= n;
 80049ea:	f8de 3000 	ldr.w	r3, [lr]
      osp->rxcnt  += n;
 80049ee:	e9de 0201 	ldrd	r0, r2, [lr, #4]
      osp->rxpkts -= 1;
 80049f2:	b2bf      	uxth	r7, r7
      osp->rxbuf += n;
 80049f4:	444a      	add	r2, r9
      osp->rxcnt  += n;
 80049f6:	4448      	add	r0, r9
      osp->rxsize -= n;
 80049f8:	eba3 0309 	sub.w	r3, r3, r9
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 80049fc:	45cc      	cmp	ip, r9
      osp->rxpkts -= 1;
 80049fe:	f8ae 700c 	strh.w	r7, [lr, #12]
      osp->rxcnt  += n;
 8004a02:	e9ce 0201 	strd	r0, r2, [lr, #4]
      osp->rxsize -= n;
 8004a06:	f8ce 3000 	str.w	r3, [lr]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8004a0a:	d926      	bls.n	8004a5a <Vector90+0x2ea>
        _usb_isr_invoke_out_cb(usbp, ep);
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8004a12:	6870      	ldr	r0, [r6, #4]
 8004a14:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8004a18:	fa02 f404 	lsl.w	r4, r2, r4
 8004a1c:	68c5      	ldr	r5, [r0, #12]
 8004a1e:	ea23 0404 	bic.w	r4, r3, r4
 8004a22:	f8aa 400a 	strh.w	r4, [sl, #10]
 8004a26:	2d00      	cmp	r5, #0
 8004a28:	f43f af3e 	beq.w	80048a8 <Vector90+0x138>
 8004a2c:	4815      	ldr	r0, [pc, #84]	; (8004a84 <Vector90+0x314>)
 8004a2e:	47a8      	blx	r5
 8004a30:	e73a      	b.n	80048a8 <Vector90+0x138>
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8004a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  usbp->state = usbp->saved_state;
 8004a34:	f8df a04c 	ldr.w	sl, [pc, #76]	; 8004a84 <Vector90+0x314>
 8004a38:	f022 0208 	bic.w	r2, r2, #8
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8004a3e:	f89a 2080 	ldrb.w	r2, [sl, #128]	; 0x80
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8004a42:	f8da 3004 	ldr.w	r3, [sl, #4]
  usbp->state = usbp->saved_state;
 8004a46:	f88a 2000 	strb.w	r2, [sl]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f43f aea1 	beq.w	8004794 <Vector90+0x24>
 8004a52:	4650      	mov	r0, sl
 8004a54:	2105      	movs	r1, #5
 8004a56:	4798      	blx	r3
 8004a58:	e69c      	b.n	8004794 <Vector90+0x24>
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8004a5a:	2f00      	cmp	r7, #0
 8004a5c:	d0d6      	beq.n	8004a0c <Vector90+0x29c>
        EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8004a5e:	682b      	ldr	r3, [r5, #0]
 8004a60:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a68:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a74:	602b      	str	r3, [r5, #0]
 8004a76:	e717      	b.n	80048a8 <Vector90+0x138>
  while (i >= 2) {
 8004a78:	464b      	mov	r3, r9
  if (i >= 1) {
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1ac      	bne.n	80049d8 <Vector90+0x268>
 8004a7e:	e7af      	b.n	80049e0 <Vector90+0x270>
 8004a80:	40005c00 	.word	0x40005c00
 8004a84:	20000de4 	.word	0x20000de4
	...

08004a90 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8004a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8004a94:	4d62      	ldr	r5, [pc, #392]	; (8004c20 <VectorD4+0x190>)
 8004a96:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8004a98:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 8004a9c:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8004a9e:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8004aa0:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8004aa2:	d477      	bmi.n	8004b94 <VectorD4+0x104>
 8004aa4:	2320      	movs	r3, #32
 8004aa6:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8004aaa:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8004aae:	d045      	beq.n	8004b3c <VectorD4+0xac>
  chEvtBroadcastFlagsI(esp, flags);
 8004ab0:	4f5c      	ldr	r7, [pc, #368]	; (8004c24 <VectorD4+0x194>)
  chThdDequeueNextI(tqp, msg);
 8004ab2:	f107 0908 	add.w	r9, r7, #8
 8004ab6:	e008      	b.n	8004aca <VectorD4+0x3a>
    if (sr & USART_SR_RXNE)
 8004ab8:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8004aba:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8004abe:	d41e      	bmi.n	8004afe <VectorD4+0x6e>
    sr = u->SR;
 8004ac0:	6834      	ldr	r4, [r6, #0]
 8004ac2:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8004ac4:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8004ac8:	d038      	beq.n	8004b3c <VectorD4+0xac>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8004aca:	0723      	lsls	r3, r4, #28
 8004acc:	d0f4      	beq.n	8004ab8 <VectorD4+0x28>
    sts |= SD_OVERRUN_ERROR;
 8004ace:	f014 0f08 	tst.w	r4, #8
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2100      	moveq	r1, #0
 8004ad6:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8004ad8:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 8004ada:	bf48      	it	mi
 8004adc:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8004ae0:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8004ae2:	bf48      	it	mi
 8004ae4:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8004ae8:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8004aea:	bf48      	it	mi
 8004aec:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  chEvtBroadcastFlagsI(esp, flags);
 8004af0:	4638      	mov	r0, r7
 8004af2:	f7fd f8ad 	bl	8001c50 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8004af6:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8004af8:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8004afc:	d5e0      	bpl.n	8004ac0 <VectorD4+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8004afe:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8004b00:	f895 4078 	ldrb.w	r4, [r5, #120]	; 0x78
 8004b04:	b3ab      	cbz	r3, 8004b72 <VectorD4+0xe2>
  if (!iqIsFullI(iqp)) {
 8004b06:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d039      	beq.n	8004b82 <VectorD4+0xf2>
    iqp->q_counter++;
 8004b0e:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8004b10:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8004b12:	3201      	adds	r2, #1
 8004b14:	ea04 0a0a 	and.w	sl, r4, sl
 8004b18:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8004b1a:	6229      	str	r1, [r5, #32]
 8004b1c:	f883 a000 	strb.w	sl, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 8004b20:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d301      	bcc.n	8004b2c <VectorD4+0x9c>
      iqp->q_wrptr = iqp->q_buffer;
 8004b28:	69ab      	ldr	r3, [r5, #24]
 8004b2a:	622b      	str	r3, [r5, #32]
  chThdDequeueNextI(tqp, msg);
 8004b2c:	4648      	mov	r0, r9
 8004b2e:	f7fc ffd7 	bl	8001ae0 <chThdDequeueNextI.constprop.101>
    sr = u->SR;
 8004b32:	6834      	ldr	r4, [r6, #0]
 8004b34:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8004b36:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8004b3a:	d1c6      	bne.n	8004aca <VectorD4+0x3a>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8004b42:	f018 0f80 	tst.w	r8, #128	; 0x80
 8004b46:	d001      	beq.n	8004b4c <VectorD4+0xbc>
 8004b48:	0622      	lsls	r2, r4, #24
 8004b4a:	d432      	bmi.n	8004bb2 <VectorD4+0x122>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8004b4c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8004b50:	d00b      	beq.n	8004b6a <VectorD4+0xda>
 8004b52:	0663      	lsls	r3, r4, #25
 8004b54:	d509      	bpl.n	8004b6a <VectorD4+0xda>
 8004b56:	2320      	movs	r3, #32
 8004b58:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 8004b5c:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d040      	beq.n	8004be6 <VectorD4+0x156>
 8004b64:	2300      	movs	r3, #0
 8004b66:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
}
 8004b6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8004b6e:	f7fc bd8f 	b.w	8001690 <_port_irq_epilogue>
  chEvtBroadcastFlagsI(esp, flags);
 8004b72:	2104      	movs	r1, #4
 8004b74:	4638      	mov	r0, r7
 8004b76:	f7fd f86b 	bl	8001c50 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 8004b7a:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d1c5      	bne.n	8004b0e <VectorD4+0x7e>
 8004b82:	696a      	ldr	r2, [r5, #20]
 8004b84:	2a00      	cmp	r2, #0
 8004b86:	d0c2      	beq.n	8004b0e <VectorD4+0x7e>
 8004b88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	f7fd f85f 	bl	8001c50 <chEvtBroadcastFlagsI>
 8004b92:	e795      	b.n	8004ac0 <VectorD4+0x30>
 8004b94:	2320      	movs	r3, #32
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b9e:	1d28      	adds	r0, r5, #4
 8004ba0:	f7fd f856 	bl	8001c50 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8004ba4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ba8:	2300      	movs	r3, #0
 8004baa:	6032      	str	r2, [r6, #0]
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	e778      	b.n	8004aa4 <VectorD4+0x14>
 8004bb2:	2320      	movs	r3, #32
 8004bb4:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 8004bb8:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d01f      	beq.n	8004c00 <VectorD4+0x170>
    oqp->q_counter++;
 8004bc0:	6baa      	ldr	r2, [r5, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 8004bc2:	6c28      	ldr	r0, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8004bc4:	1c59      	adds	r1, r3, #1
    oqp->q_counter++;
 8004bc6:	3201      	adds	r2, #1
 8004bc8:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8004bca:	64a9      	str	r1, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8004bcc:	4281      	cmp	r1, r0
    b = *oqp->q_rdptr++;
 8004bce:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8004bd0:	d301      	bcc.n	8004bd6 <VectorD4+0x146>
      oqp->q_rdptr = oqp->q_buffer;
 8004bd2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004bd4:	64ab      	str	r3, [r5, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 8004bd6:	4814      	ldr	r0, [pc, #80]	; (8004c28 <VectorD4+0x198>)
 8004bd8:	f7fc ff82 	bl	8001ae0 <chThdDequeueNextI.constprop.101>
      u->DR = b;
 8004bdc:	6077      	str	r7, [r6, #4]
 8004bde:	2300      	movs	r3, #0
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	e7b2      	b.n	8004b4c <VectorD4+0xbc>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8004be6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0bb      	beq.n	8004b64 <VectorD4+0xd4>
  chEvtBroadcastFlagsI(esp, flags);
 8004bec:	2110      	movs	r1, #16
 8004bee:	480d      	ldr	r0, [pc, #52]	; (8004c24 <VectorD4+0x194>)
 8004bf0:	f7fd f82e 	bl	8001c50 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004bf4:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8004bf8:	ea08 0303 	and.w	r3, r8, r3
 8004bfc:	60f3      	str	r3, [r6, #12]
 8004bfe:	e7b1      	b.n	8004b64 <VectorD4+0xd4>
  if (!oqIsEmptyI(oqp)) {
 8004c00:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004c02:	2a00      	cmp	r2, #0
 8004c04:	d0dc      	beq.n	8004bc0 <VectorD4+0x130>
 8004c06:	2108      	movs	r1, #8
 8004c08:	4806      	ldr	r0, [pc, #24]	; (8004c24 <VectorD4+0x194>)
 8004c0a:	f7fd f821 	bl	8001c50 <chEvtBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8004c0e:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8004c12:	ea08 0303 	and.w	r3, r8, r3
 8004c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c1a:	60f3      	str	r3, [r6, #12]
 8004c1c:	e7df      	b.n	8004bde <VectorD4+0x14e>
 8004c1e:	bf00      	nop
 8004c20:	200008d8 	.word	0x200008d8
 8004c24:	200008dc 	.word	0x200008dc
 8004c28:	20000908 	.word	0x20000908
 8004c2c:	00000000 	.word	0x00000000

08004c30 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8004c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8004c34:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8004c38:	6933      	ldr	r3, [r6, #16]
 8004c3a:	079b      	lsls	r3, r3, #30
 8004c3c:	d403      	bmi.n	8004c46 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8004c3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8004c42:	f7fc bd25 	b.w	8001690 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	2220      	movs	r2, #32
 8004c4a:	6133      	str	r3, [r6, #16]
 8004c4c:	f382 8811 	msr	BASEPRI, r2
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8004c50:	4c1e      	ldr	r4, [pc, #120]	; (8004ccc <VectorB0+0x9c>)
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8004c52:	4698      	mov	r8, r3
  vtp = ch.vtlist.next;
 8004c54:	46a1      	mov	r9, r4
 8004c56:	f859 3f1c 	ldr.w	r3, [r9, #28]!
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8004c5e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8004c60:	b280      	uxth	r0, r0
  return (sysinterval_t)((systime_t)(end - start));
 8004c62:	1a47      	subs	r7, r0, r1
 8004c64:	b2bf      	uxth	r7, r7
    if (nowdelta < vtp->delta) {
 8004c66:	4297      	cmp	r7, r2
 8004c68:	d31b      	bcc.n	8004ca2 <VectorB0+0x72>
 8004c6a:	2520      	movs	r5, #32
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8004c6c:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 8004c6e:	4411      	add	r1, r2

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8004c70:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8004c72:	8521      	strh	r1, [r4, #40]	; 0x28
      nowdelta -= vtp->delta;
 8004c74:	eba7 0702 	sub.w	r7, r7, r2
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8004c78:	f8c0 9004 	str.w	r9, [r0, #4]
      fn = vtp->func;
 8004c7c:	68da      	ldr	r2, [r3, #12]
      ch.vtlist.next = vtp->next;
 8004c7e:	61e0      	str	r0, [r4, #28]
      vtp->func = NULL;
 8004c80:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->DIER = 0;
 8004c84:	bf08      	it	eq
 8004c86:	f8c6 800c 	streq.w	r8, [r6, #12]
 8004c8a:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8004c8e:	6918      	ldr	r0, [r3, #16]
 8004c90:	4790      	blx	r2
 8004c92:	f385 8811 	msr	BASEPRI, r5
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8004c96:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	4297      	cmp	r7, r2
 8004c9c:	d3de      	bcc.n	8004c5c <VectorB0+0x2c>
 8004c9e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8004ca0:	e7e4      	b.n	8004c6c <VectorB0+0x3c>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8004ca2:	69e2      	ldr	r2, [r4, #28]
 8004ca4:	454a      	cmp	r2, r9
 8004ca6:	d00a      	beq.n	8004cbe <VectorB0+0x8e>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8004ca8:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
 8004caa:	8520      	strh	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8004cac:	1bcf      	subs	r7, r1, r7
 8004cae:	6097      	str	r7, [r2, #8]
  return systime + (systime_t)interval;
 8004cb0:	891b      	ldrh	r3, [r3, #8]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	bf2c      	ite	cs
 8004cb6:	18c0      	addcs	r0, r0, r3
 8004cb8:	3002      	addcc	r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8004cba:	b280      	uxth	r0, r0
 8004cbc:	6370      	str	r0, [r6, #52]	; 0x34
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f383 8811 	msr	BASEPRI, r3
}
 8004cc4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8004cc8:	f7fc bce2 	b.w	8001690 <_port_irq_epilogue>
 8004ccc:	200010f0 	.word	0x200010f0

08004cd0 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 8004cd0:	4a34      	ldr	r2, [pc, #208]	; (8004da4 <VectorC0+0xd4>)
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8004cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dmaStreamDisable(i2cp->dmatx);
 8004cd4:	e9d2 640c 	ldrd	r6, r4, [r2, #48]	; 0x30
  uint16_t sr = I2CD1.i2c->SR1;
 8004cd8:	6960      	ldr	r0, [r4, #20]
  dmaStreamDisable(i2cp->dmatx);
 8004cda:	230e      	movs	r3, #14

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8004cdc:	f400 415f 	and.w	r1, r0, #57088	; 0xdf00
 8004ce0:	43c9      	mvns	r1, r1
  dmaStreamDisable(i2cp->dmatx);
 8004ce2:	6877      	ldr	r7, [r6, #4]
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8004ce4:	6161      	str	r1, [r4, #20]
  dmaStreamDisable(i2cp->dmatx);
 8004ce6:	683d      	ldr	r5, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 8004ce8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8004cea:	f025 050f 	bic.w	r5, r5, #15
 8004cee:	603d      	str	r5, [r7, #0]
 8004cf0:	7c35      	ldrb	r5, [r6, #16]
 8004cf2:	6837      	ldr	r7, [r6, #0]
 8004cf4:	fa03 f505 	lsl.w	r5, r3, r5
  dmaStreamDisable(i2cp->dmarx);
 8004cf8:	684e      	ldr	r6, [r1, #4]
  dmaStreamDisable(i2cp->dmatx);
 8004cfa:	607d      	str	r5, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 8004cfc:	6835      	ldr	r5, [r6, #0]
 8004cfe:	680f      	ldr	r7, [r1, #0]
 8004d00:	f025 050f 	bic.w	r5, r5, #15
 8004d04:	6035      	str	r5, [r6, #0]
 8004d06:	7c0d      	ldrb	r5, [r1, #16]
  uint16_t sr = I2CD1.i2c->SR1;
 8004d08:	b281      	uxth	r1, r0
  dmaStreamDisable(i2cp->dmarx);
 8004d0a:	40ab      	lsls	r3, r5
 8004d0c:	607b      	str	r3, [r7, #4]
  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8004d0e:	f411 7380 	ands.w	r3, r1, #256	; 0x100
    i2cp->errors |= I2C_BUS_ERROR;
 8004d12:	bf1b      	ittet	ne
 8004d14:	2501      	movne	r5, #1
 8004d16:	462b      	movne	r3, r5
  i2cp->errors = I2C_NO_ERROR;
 8004d18:	6093      	streq	r3, [r2, #8]
    i2cp->errors |= I2C_BUS_ERROR;
 8004d1a:	6095      	strne	r5, [r2, #8]
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8004d1c:	058f      	lsls	r7, r1, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8004d1e:	bf44      	itt	mi
 8004d20:	f043 0302 	orrmi.w	r3, r3, #2
 8004d24:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8004d26:	054e      	lsls	r6, r1, #21
 8004d28:	d50a      	bpl.n	8004d40 <VectorC0+0x70>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8004d2a:	6865      	ldr	r5, [r4, #4]
    i2cp->errors |= I2C_ACK_FAILURE;
 8004d2c:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8004d30:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8004d34:	6065      	str	r5, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8004d36:	6825      	ldr	r5, [r4, #0]
 8004d38:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8004d3c:	6025      	str	r5, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8004d3e:	6093      	str	r3, [r2, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8004d40:	050d      	lsls	r5, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 8004d42:	bf44      	itt	mi
 8004d44:	f043 0308 	orrmi.w	r3, r3, #8
 8004d48:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8004d4a:	044c      	lsls	r4, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 8004d4c:	bf44      	itt	mi
 8004d4e:	f043 0320 	orrmi.w	r3, r3, #32
 8004d52:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8004d54:	04c9      	lsls	r1, r1, #19
 8004d56:	b200      	sxth	r0, r0
 8004d58:	d517      	bpl.n	8004d8a <VectorC0+0xba>
    i2cp->errors |= I2C_PEC_ERROR;
 8004d5a:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8004d5e:	2800      	cmp	r0, #0
    i2cp->errors |= I2C_PEC_ERROR;
 8004d60:	6093      	str	r3, [r2, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8004d62:	db1a      	blt.n	8004d9a <VectorC0+0xca>
 8004d64:	2320      	movs	r3, #32
 8004d66:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8004d6a:	69d0      	ldr	r0, [r2, #28]
 8004d6c:	b130      	cbz	r0, 8004d7c <VectorC0+0xac>
    tp->u.rdymsg = msg;
 8004d6e:	f06f 0101 	mvn.w	r1, #1
    *trp = NULL;
 8004d72:	2300      	movs	r3, #0
    tp->u.rdymsg = msg;
 8004d74:	6241      	str	r1, [r0, #36]	; 0x24
    *trp = NULL;
 8004d76:	61d3      	str	r3, [r2, #28]
    (void) chSchReadyI(tp);
 8004d78:	f7fc fe9a 	bl	8001ab0 <chSchReadyI>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f383 8811 	msr	BASEPRI, r3
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 8004d82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8004d86:	f7fc bc83 	b.w	8001690 <_port_irq_epilogue>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	db05      	blt.n	8004d9a <VectorC0+0xca>
  if (i2cp->errors != I2C_NO_ERROR)
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1e8      	bne.n	8004d64 <VectorC0+0x94>
}
 8004d92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8004d96:	f7fc bc7b 	b.w	8001690 <_port_irq_epilogue>
    i2cp->errors |= I2C_SMB_ALERT;
 8004d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d9e:	6093      	str	r3, [r2, #8]
 8004da0:	e7e0      	b.n	8004d64 <VectorC0+0x94>
 8004da2:	bf00      	nop
 8004da4:	200008a0 	.word	0x200008a0
	...

08004db0 <VectorBC>:
  I2C_TypeDef *dp = i2cp->i2c;
 8004db0:	4a3b      	ldr	r2, [pc, #236]	; (8004ea0 <VectorBC+0xf0>)
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8004db2:	b538      	push	{r3, r4, r5, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 8004db4:	6b54      	ldr	r4, [r2, #52]	; 0x34
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8004db6:	493b      	ldr	r1, [pc, #236]	; (8004ea4 <VectorBC+0xf4>)
  uint32_t regSR2 = dp->SR2;
 8004db8:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 8004dba:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8004dbc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8004dc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004dc4:	428b      	cmp	r3, r1
 8004dc6:	d050      	beq.n	8004e6a <VectorBC+0xba>
 8004dc8:	d822      	bhi.n	8004e10 <VectorBC+0x60>
 8004dca:	3907      	subs	r1, #7
 8004dcc:	428b      	cmp	r3, r1
 8004dce:	d040      	beq.n	8004e52 <VectorBC+0xa2>
 8004dd0:	3101      	adds	r1, #1
 8004dd2:	428b      	cmp	r3, r1
 8004dd4:	d114      	bne.n	8004e00 <VectorBC+0x50>
    dmaStreamEnable(i2cp->dmarx);
 8004dd6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8004dd8:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8004dda:	685b      	ldr	r3, [r3, #4]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8004ddc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004de0:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	f042 0201 	orr.w	r2, r2, #1
 8004de8:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8004dea:	6862      	ldr	r2, [r4, #4]
 8004dec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004df0:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d803      	bhi.n	8004e00 <VectorBC+0x50>
      dp->CR1 &= ~I2C_CR1_ACK;
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dfe:	6023      	str	r3, [r4, #0]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8004e00:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8004e04:	bf18      	it	ne
 8004e06:	69a3      	ldrne	r3, [r4, #24]
}
 8004e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8004e0c:	f7fc bc40 	b.w	8001690 <_port_irq_epilogue>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8004e10:	4925      	ldr	r1, [pc, #148]	; (8004ea8 <VectorBC+0xf8>)
 8004e12:	428b      	cmp	r3, r1
 8004e14:	d012      	beq.n	8004e3c <VectorBC+0x8c>
 8004e16:	3102      	adds	r1, #2
 8004e18:	428b      	cmp	r3, r1
 8004e1a:	d1f1      	bne.n	8004e00 <VectorBC+0x50>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8004e1c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	b33b      	cbz	r3, 8004e74 <VectorBC+0xc4>
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8004e24:	6823      	ldr	r3, [r4, #0]
      i2cp->addr |= 0x01;
 8004e26:	8c11      	ldrh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8004e28:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 8004e2c:	f041 0101 	orr.w	r1, r1, #1
 8004e30:	8411      	strh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8004e32:	6023      	str	r3, [r4, #0]
}
 8004e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8004e38:	f7fc bc2a 	b.w	8001690 <_port_irq_epilogue>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8004e3c:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8004e3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8004e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 8004e44:	6852      	ldr	r2, [r2, #4]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8004e46:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8004e48:	6813      	ldr	r3, [r2, #0]
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	e7d6      	b.n	8004e00 <VectorBC+0x50>
    if ((i2cp->addr >> 8) > 0) { 
 8004e52:	8c13      	ldrh	r3, [r2, #32]
 8004e54:	0a1a      	lsrs	r2, r3, #8
 8004e56:	d00b      	beq.n	8004e70 <VectorBC+0xc0>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8004e60:	f002 0206 	and.w	r2, r2, #6
 8004e64:	4313      	orrs	r3, r2
 8004e66:	6123      	str	r3, [r4, #16]
 8004e68:	e7ca      	b.n	8004e00 <VectorBC+0x50>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8004e6a:	8c13      	ldrh	r3, [r2, #32]
 8004e6c:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8004e70:	6123      	str	r3, [r4, #16]
 8004e72:	e7c5      	b.n	8004e00 <VectorBC+0x50>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8004e74:	6861      	ldr	r1, [r4, #4]
 8004e76:	2020      	movs	r0, #32
 8004e78:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8004e7c:	6061      	str	r1, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8004e7e:	6821      	ldr	r1, [r4, #0]
 8004e80:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004e84:	6021      	str	r1, [r4, #0]
 8004e86:	f380 8811 	msr	BASEPRI, r0
  if (*trp != NULL) {
 8004e8a:	69d0      	ldr	r0, [r2, #28]
 8004e8c:	b118      	cbz	r0, 8004e96 <VectorBC+0xe6>
    tp->u.rdymsg = msg;
 8004e8e:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 8004e90:	61d3      	str	r3, [r2, #28]
    (void) chSchReadyI(tp);
 8004e92:	f7fc fe0d 	bl	8001ab0 <chSchReadyI>
 8004e96:	2300      	movs	r3, #0
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	e7b0      	b.n	8004e00 <VectorBC+0x50>
 8004e9e:	bf00      	nop
 8004ea0:	200008a0 	.word	0x200008a0
 8004ea4:	00030008 	.word	0x00030008
 8004ea8:	00070082 	.word	0x00070082
 8004eac:	00000000 	.word	0x00000000

08004eb0 <Vector84>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <Vector84+0x30>)
 8004eb2:	4a0c      	ldr	r2, [pc, #48]	; (8004ee4 <Vector84+0x34>)
 8004eb4:	6819      	ldr	r1, [r3, #0]
 8004eb6:	6812      	ldr	r2, [r2, #0]
 8004eb8:	0e09      	lsrs	r1, r1, #24
 8004eba:	f001 010e 	and.w	r1, r1, #14
 8004ebe:	420a      	tst	r2, r1
 8004ec0:	d00b      	beq.n	8004eda <Vector84+0x2a>
 8004ec2:	4809      	ldr	r0, [pc, #36]	; (8004ee8 <Vector84+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8004ec4:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8004ec6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004ec8:	060a      	lsls	r2, r1, #24
 8004eca:	605a      	str	r2, [r3, #4]
 8004ecc:	b10c      	cbz	r4, 8004ed2 <Vector84+0x22>
 8004ece:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8004ed0:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8004ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8004ed6:	f7fc bbdb 	b.w	8001690 <_port_irq_epilogue>
 8004eda:	f7fc bbd9 	b.w	8001690 <_port_irq_epilogue>
 8004ede:	bf00      	nop
 8004ee0:	40020000 	.word	0x40020000
 8004ee4:	40020080 	.word	0x40020080
 8004ee8:	200010b8 	.word	0x200010b8
 8004eec:	00000000 	.word	0x00000000

08004ef0 <Vector80>:
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <Vector80+0x30>)
 8004ef2:	4a0c      	ldr	r2, [pc, #48]	; (8004f24 <Vector80+0x34>)
 8004ef4:	6819      	ldr	r1, [r3, #0]
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	0d09      	lsrs	r1, r1, #20
 8004efa:	f001 010e 	and.w	r1, r1, #14
 8004efe:	420a      	tst	r2, r1
 8004f00:	d00b      	beq.n	8004f1a <Vector80+0x2a>
 8004f02:	4809      	ldr	r0, [pc, #36]	; (8004f28 <Vector80+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8004f04:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8004f06:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004f08:	050a      	lsls	r2, r1, #20
 8004f0a:	605a      	str	r2, [r3, #4]
 8004f0c:	b10c      	cbz	r4, 8004f12 <Vector80+0x22>
 8004f0e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8004f10:	47a0      	blx	r4
}
 8004f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8004f16:	f7fc bbbb 	b.w	8001690 <_port_irq_epilogue>
 8004f1a:	f7fc bbb9 	b.w	8001690 <_port_irq_epilogue>
 8004f1e:	bf00      	nop
 8004f20:	40020000 	.word	0x40020000
 8004f24:	4002006c 	.word	0x4002006c
 8004f28:	200010b8 	.word	0x200010b8
 8004f2c:	00000000 	.word	0x00000000

08004f30 <Vector7C>:
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <Vector7C+0x30>)
 8004f32:	4a0c      	ldr	r2, [pc, #48]	; (8004f64 <Vector7C+0x34>)
 8004f34:	6819      	ldr	r1, [r3, #0]
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	0c09      	lsrs	r1, r1, #16
 8004f3a:	f001 010e 	and.w	r1, r1, #14
 8004f3e:	420a      	tst	r2, r1
 8004f40:	d00b      	beq.n	8004f5a <Vector7C+0x2a>
 8004f42:	4809      	ldr	r0, [pc, #36]	; (8004f68 <Vector7C+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8004f44:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8004f46:	6a04      	ldr	r4, [r0, #32]
 8004f48:	040a      	lsls	r2, r1, #16
 8004f4a:	605a      	str	r2, [r3, #4]
 8004f4c:	b10c      	cbz	r4, 8004f52 <Vector7C+0x22>
 8004f4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004f50:	47a0      	blx	r4
}
 8004f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8004f56:	f7fc bb9b 	b.w	8001690 <_port_irq_epilogue>
 8004f5a:	f7fc bb99 	b.w	8001690 <_port_irq_epilogue>
 8004f5e:	bf00      	nop
 8004f60:	40020000 	.word	0x40020000
 8004f64:	40020058 	.word	0x40020058
 8004f68:	200010b8 	.word	0x200010b8
 8004f6c:	00000000 	.word	0x00000000

08004f70 <Vector78>:
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <Vector78+0x30>)
 8004f72:	4a0c      	ldr	r2, [pc, #48]	; (8004fa4 <Vector78+0x34>)
 8004f74:	6819      	ldr	r1, [r3, #0]
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	0b09      	lsrs	r1, r1, #12
 8004f7a:	f001 010e 	and.w	r1, r1, #14
 8004f7e:	420a      	tst	r2, r1
 8004f80:	d00b      	beq.n	8004f9a <Vector78+0x2a>
 8004f82:	4809      	ldr	r0, [pc, #36]	; (8004fa8 <Vector78+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8004f84:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8004f86:	6984      	ldr	r4, [r0, #24]
 8004f88:	030a      	lsls	r2, r1, #12
 8004f8a:	605a      	str	r2, [r3, #4]
 8004f8c:	b10c      	cbz	r4, 8004f92 <Vector78+0x22>
 8004f8e:	69c0      	ldr	r0, [r0, #28]
 8004f90:	47a0      	blx	r4
}
 8004f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8004f96:	f7fc bb7b 	b.w	8001690 <_port_irq_epilogue>
 8004f9a:	f7fc bb79 	b.w	8001690 <_port_irq_epilogue>
 8004f9e:	bf00      	nop
 8004fa0:	40020000 	.word	0x40020000
 8004fa4:	40020044 	.word	0x40020044
 8004fa8:	200010b8 	.word	0x200010b8
 8004fac:	00000000 	.word	0x00000000

08004fb0 <Vector74>:
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <Vector74+0x30>)
 8004fb2:	4a0c      	ldr	r2, [pc, #48]	; (8004fe4 <Vector74+0x34>)
 8004fb4:	6819      	ldr	r1, [r3, #0]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	0a09      	lsrs	r1, r1, #8
 8004fba:	f001 010e 	and.w	r1, r1, #14
 8004fbe:	420a      	tst	r2, r1
 8004fc0:	d00b      	beq.n	8004fda <Vector74+0x2a>
 8004fc2:	4809      	ldr	r0, [pc, #36]	; (8004fe8 <Vector74+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8004fc4:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8004fc6:	6904      	ldr	r4, [r0, #16]
 8004fc8:	020a      	lsls	r2, r1, #8
 8004fca:	605a      	str	r2, [r3, #4]
 8004fcc:	b10c      	cbz	r4, 8004fd2 <Vector74+0x22>
 8004fce:	6940      	ldr	r0, [r0, #20]
 8004fd0:	47a0      	blx	r4
}
 8004fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8004fd6:	f7fc bb5b 	b.w	8001690 <_port_irq_epilogue>
 8004fda:	f7fc bb59 	b.w	8001690 <_port_irq_epilogue>
 8004fde:	bf00      	nop
 8004fe0:	40020000 	.word	0x40020000
 8004fe4:	40020030 	.word	0x40020030
 8004fe8:	200010b8 	.word	0x200010b8
 8004fec:	00000000 	.word	0x00000000

08004ff0 <Vector70>:
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <Vector70+0x30>)
 8004ff2:	4a0c      	ldr	r2, [pc, #48]	; (8005024 <Vector70+0x34>)
 8004ff4:	6819      	ldr	r1, [r3, #0]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	0909      	lsrs	r1, r1, #4
 8004ffa:	f001 010e 	and.w	r1, r1, #14
 8004ffe:	420a      	tst	r2, r1
 8005000:	d00b      	beq.n	800501a <Vector70+0x2a>
 8005002:	4809      	ldr	r0, [pc, #36]	; (8005028 <Vector70+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8005004:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8005006:	6884      	ldr	r4, [r0, #8]
 8005008:	010a      	lsls	r2, r1, #4
 800500a:	605a      	str	r2, [r3, #4]
 800500c:	b10c      	cbz	r4, 8005012 <Vector70+0x22>
 800500e:	68c0      	ldr	r0, [r0, #12]
 8005010:	47a0      	blx	r4
}
 8005012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8005016:	f7fc bb3b 	b.w	8001690 <_port_irq_epilogue>
 800501a:	f7fc bb39 	b.w	8001690 <_port_irq_epilogue>
 800501e:	bf00      	nop
 8005020:	40020000 	.word	0x40020000
 8005024:	4002001c 	.word	0x4002001c
 8005028:	200010b8 	.word	0x200010b8
 800502c:	00000000 	.word	0x00000000

08005030 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8005030:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8005032:	4b09      	ldr	r3, [pc, #36]	; (8005058 <Vector6C+0x28>)
 8005034:	4a09      	ldr	r2, [pc, #36]	; (800505c <Vector6C+0x2c>)
 8005036:	6819      	ldr	r1, [r3, #0]
 8005038:	6812      	ldr	r2, [r2, #0]
 800503a:	f001 010e 	and.w	r1, r1, #14
 800503e:	420a      	tst	r2, r1
 8005040:	d005      	beq.n	800504e <Vector6C+0x1e>
 8005042:	4a07      	ldr	r2, [pc, #28]	; (8005060 <Vector6C+0x30>)
 8005044:	6059      	str	r1, [r3, #4]
 8005046:	6813      	ldr	r3, [r2, #0]
 8005048:	b10b      	cbz	r3, 800504e <Vector6C+0x1e>
 800504a:	6850      	ldr	r0, [r2, #4]
 800504c:	4798      	blx	r3
}
 800504e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005052:	f7fc bb1d 	b.w	8001690 <_port_irq_epilogue>
 8005056:	bf00      	nop
 8005058:	40020000 	.word	0x40020000
 800505c:	40020008 	.word	0x40020008
 8005060:	200010b8 	.word	0x200010b8
	...

08005070 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8005070:	4b3e      	ldr	r3, [pc, #248]	; (800516c <VectorE0+0xfc>)
OSAL_IRQ_HANDLER(VectorE0) {
 8005072:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 8005074:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8005076:	681c      	ldr	r4, [r3, #0]
 8005078:	4014      	ands	r4, r2
 800507a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 800507e:	615a      	str	r2, [r3, #20]

  exti_serve_irq(pr, 10);
 8005080:	0562      	lsls	r2, r4, #21
 8005082:	d510      	bpl.n	80050a6 <VectorE0+0x36>
 8005084:	4a3a      	ldr	r2, [pc, #232]	; (8005170 <VectorE0+0x100>)
 8005086:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 800508a:	b113      	cbz	r3, 8005092 <VectorE0+0x22>
 800508c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
 8005090:	4798      	blx	r3
 8005092:	2320      	movs	r3, #32
 8005094:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 8005098:	2100      	movs	r1, #0
 800509a:	4836      	ldr	r0, [pc, #216]	; (8005174 <VectorE0+0x104>)
 800509c:	f7fc feb8 	bl	8001e10 <chThdDequeueAllI>
 80050a0:	2300      	movs	r3, #0
 80050a2:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 11);
 80050a6:	0523      	lsls	r3, r4, #20
 80050a8:	d510      	bpl.n	80050cc <VectorE0+0x5c>
 80050aa:	4a31      	ldr	r2, [pc, #196]	; (8005170 <VectorE0+0x100>)
 80050ac:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
 80050b0:	b113      	cbz	r3, 80050b8 <VectorE0+0x48>
 80050b2:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 80050b6:	4798      	blx	r3
 80050b8:	2320      	movs	r3, #32
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	2100      	movs	r1, #0
 80050c0:	482d      	ldr	r0, [pc, #180]	; (8005178 <VectorE0+0x108>)
 80050c2:	f7fc fea5 	bl	8001e10 <chThdDequeueAllI>
 80050c6:	2300      	movs	r3, #0
 80050c8:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 12);
 80050cc:	04e0      	lsls	r0, r4, #19
 80050ce:	d510      	bpl.n	80050f2 <VectorE0+0x82>
 80050d0:	4a27      	ldr	r2, [pc, #156]	; (8005170 <VectorE0+0x100>)
 80050d2:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 80050d6:	b113      	cbz	r3, 80050de <VectorE0+0x6e>
 80050d8:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
 80050dc:	4798      	blx	r3
 80050de:	2320      	movs	r3, #32
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	2100      	movs	r1, #0
 80050e6:	4825      	ldr	r0, [pc, #148]	; (800517c <VectorE0+0x10c>)
 80050e8:	f7fc fe92 	bl	8001e10 <chThdDequeueAllI>
 80050ec:	2300      	movs	r3, #0
 80050ee:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 13);
 80050f2:	04a1      	lsls	r1, r4, #18
 80050f4:	d510      	bpl.n	8005118 <VectorE0+0xa8>
 80050f6:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <VectorE0+0x100>)
 80050f8:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
 80050fc:	b113      	cbz	r3, 8005104 <VectorE0+0x94>
 80050fe:	f8d2 00dc 	ldr.w	r0, [r2, #220]	; 0xdc
 8005102:	4798      	blx	r3
 8005104:	2320      	movs	r3, #32
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	2100      	movs	r1, #0
 800510c:	481c      	ldr	r0, [pc, #112]	; (8005180 <VectorE0+0x110>)
 800510e:	f7fc fe7f 	bl	8001e10 <chThdDequeueAllI>
 8005112:	2300      	movs	r3, #0
 8005114:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 14);
 8005118:	0462      	lsls	r2, r4, #17
 800511a:	d510      	bpl.n	800513e <VectorE0+0xce>
 800511c:	4a14      	ldr	r2, [pc, #80]	; (8005170 <VectorE0+0x100>)
 800511e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8005122:	b113      	cbz	r3, 800512a <VectorE0+0xba>
 8005124:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
 8005128:	4798      	blx	r3
 800512a:	2320      	movs	r3, #32
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	2100      	movs	r1, #0
 8005132:	4814      	ldr	r0, [pc, #80]	; (8005184 <VectorE0+0x114>)
 8005134:	f7fc fe6c 	bl	8001e10 <chThdDequeueAllI>
 8005138:	2300      	movs	r3, #0
 800513a:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 15);
 800513e:	0423      	lsls	r3, r4, #16
 8005140:	d510      	bpl.n	8005164 <VectorE0+0xf4>
 8005142:	4a0b      	ldr	r2, [pc, #44]	; (8005170 <VectorE0+0x100>)
 8005144:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 8005148:	b113      	cbz	r3, 8005150 <VectorE0+0xe0>
 800514a:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
 800514e:	4798      	blx	r3
 8005150:	2320      	movs	r3, #32
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	2100      	movs	r1, #0
 8005158:	480b      	ldr	r0, [pc, #44]	; (8005188 <VectorE0+0x118>)
 800515a:	f7fc fe59 	bl	8001e10 <chThdDequeueAllI>
 800515e:	2300      	movs	r3, #0
 8005160:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8005164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8005168:	f7fc ba92 	b.w	8001690 <_port_irq_epilogue>
 800516c:	40010400 	.word	0x40010400
 8005170:	20000fb8 	.word	0x20000fb8
 8005174:	20001058 	.word	0x20001058
 8005178:	20001068 	.word	0x20001068
 800517c:	20001078 	.word	0x20001078
 8005180:	20001088 	.word	0x20001088
 8005184:	20001098 	.word	0x20001098
 8005188:	200010a8 	.word	0x200010a8
 800518c:	00000000 	.word	0x00000000

08005190 <Vector9C>:
  pr = EXTI->PR;
 8005190:	4b32      	ldr	r3, [pc, #200]	; (800525c <Vector9C+0xcc>)
OSAL_IRQ_HANDLER(Vector9C) {
 8005192:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 8005194:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 8005196:	681c      	ldr	r4, [r3, #0]
 8005198:	4014      	ands	r4, r2
 800519a:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
  EXTI->PR = pr;
 800519e:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 5);
 80051a0:	06a3      	lsls	r3, r4, #26
 80051a2:	d50e      	bpl.n	80051c2 <Vector9C+0x32>
 80051a4:	4a2e      	ldr	r2, [pc, #184]	; (8005260 <Vector9C+0xd0>)
 80051a6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80051a8:	b10b      	cbz	r3, 80051ae <Vector9C+0x1e>
 80051aa:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 80051ac:	4798      	blx	r3
 80051ae:	2320      	movs	r3, #32
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	2100      	movs	r1, #0
 80051b6:	482b      	ldr	r0, [pc, #172]	; (8005264 <Vector9C+0xd4>)
 80051b8:	f7fc fe2a 	bl	8001e10 <chThdDequeueAllI>
 80051bc:	2300      	movs	r3, #0
 80051be:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 6);
 80051c2:	0660      	lsls	r0, r4, #25
 80051c4:	d50e      	bpl.n	80051e4 <Vector9C+0x54>
 80051c6:	4a26      	ldr	r2, [pc, #152]	; (8005260 <Vector9C+0xd0>)
 80051c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80051ca:	b10b      	cbz	r3, 80051d0 <Vector9C+0x40>
 80051cc:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80051ce:	4798      	blx	r3
 80051d0:	2320      	movs	r3, #32
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	2100      	movs	r1, #0
 80051d8:	4823      	ldr	r0, [pc, #140]	; (8005268 <Vector9C+0xd8>)
 80051da:	f7fc fe19 	bl	8001e10 <chThdDequeueAllI>
 80051de:	2300      	movs	r3, #0
 80051e0:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 7);
 80051e4:	0621      	lsls	r1, r4, #24
 80051e6:	d50e      	bpl.n	8005206 <Vector9C+0x76>
 80051e8:	4a1d      	ldr	r2, [pc, #116]	; (8005260 <Vector9C+0xd0>)
 80051ea:	6f93      	ldr	r3, [r2, #120]	; 0x78
 80051ec:	b10b      	cbz	r3, 80051f2 <Vector9C+0x62>
 80051ee:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 80051f0:	4798      	blx	r3
 80051f2:	2320      	movs	r3, #32
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	2100      	movs	r1, #0
 80051fa:	481c      	ldr	r0, [pc, #112]	; (800526c <Vector9C+0xdc>)
 80051fc:	f7fc fe08 	bl	8001e10 <chThdDequeueAllI>
 8005200:	2300      	movs	r3, #0
 8005202:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 8);
 8005206:	05e2      	lsls	r2, r4, #23
 8005208:	d510      	bpl.n	800522c <Vector9C+0x9c>
 800520a:	4a15      	ldr	r2, [pc, #84]	; (8005260 <Vector9C+0xd0>)
 800520c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005210:	b113      	cbz	r3, 8005218 <Vector9C+0x88>
 8005212:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8005216:	4798      	blx	r3
 8005218:	2320      	movs	r3, #32
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	2100      	movs	r1, #0
 8005220:	4813      	ldr	r0, [pc, #76]	; (8005270 <Vector9C+0xe0>)
 8005222:	f7fc fdf5 	bl	8001e10 <chThdDequeueAllI>
 8005226:	2300      	movs	r3, #0
 8005228:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 9);
 800522c:	05a3      	lsls	r3, r4, #22
 800522e:	d510      	bpl.n	8005252 <Vector9C+0xc2>
 8005230:	4a0b      	ldr	r2, [pc, #44]	; (8005260 <Vector9C+0xd0>)
 8005232:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8005236:	b113      	cbz	r3, 800523e <Vector9C+0xae>
 8005238:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
 800523c:	4798      	blx	r3
 800523e:	2320      	movs	r3, #32
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	2100      	movs	r1, #0
 8005246:	480b      	ldr	r0, [pc, #44]	; (8005274 <Vector9C+0xe4>)
 8005248:	f7fc fde2 	bl	8001e10 <chThdDequeueAllI>
 800524c:	2300      	movs	r3, #0
 800524e:	f383 8811 	msr	BASEPRI, r3
}
 8005252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8005256:	f7fc ba1b 	b.w	8001690 <_port_irq_epilogue>
 800525a:	bf00      	nop
 800525c:	40010400 	.word	0x40010400
 8005260:	20000fb8 	.word	0x20000fb8
 8005264:	20001008 	.word	0x20001008
 8005268:	20001018 	.word	0x20001018
 800526c:	20001028 	.word	0x20001028
 8005270:	20001038 	.word	0x20001038
 8005274:	20001048 	.word	0x20001048
	...

08005280 <Vector68>:
  pr = EXTI->PR;
 8005280:	4a0d      	ldr	r2, [pc, #52]	; (80052b8 <Vector68+0x38>)
OSAL_IRQ_HANDLER(Vector68) {
 8005282:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8005284:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8005286:	6813      	ldr	r3, [r2, #0]
 8005288:	400b      	ands	r3, r1
 800528a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 800528e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 4);
 8005290:	b173      	cbz	r3, 80052b0 <Vector68+0x30>
 8005292:	4a0a      	ldr	r2, [pc, #40]	; (80052bc <Vector68+0x3c>)
 8005294:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8005296:	b10b      	cbz	r3, 800529c <Vector68+0x1c>
 8005298:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800529a:	4798      	blx	r3
 800529c:	2320      	movs	r3, #32
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	2100      	movs	r1, #0
 80052a4:	4806      	ldr	r0, [pc, #24]	; (80052c0 <Vector68+0x40>)
 80052a6:	f7fc fdb3 	bl	8001e10 <chThdDequeueAllI>
 80052aa:	2300      	movs	r3, #0
 80052ac:	f383 8811 	msr	BASEPRI, r3
}
 80052b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80052b4:	f7fc b9ec 	b.w	8001690 <_port_irq_epilogue>
 80052b8:	40010400 	.word	0x40010400
 80052bc:	20000fb8 	.word	0x20000fb8
 80052c0:	20000ff8 	.word	0x20000ff8
	...

080052d0 <Vector64>:
  pr = EXTI->PR;
 80052d0:	4a0d      	ldr	r2, [pc, #52]	; (8005308 <Vector64+0x38>)
OSAL_IRQ_HANDLER(Vector64) {
 80052d2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 80052d4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 80052d6:	6813      	ldr	r3, [r2, #0]
 80052d8:	400b      	ands	r3, r1
 80052da:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 80052de:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 3);
 80052e0:	b173      	cbz	r3, 8005300 <Vector64+0x30>
 80052e2:	4a0a      	ldr	r2, [pc, #40]	; (800530c <Vector64+0x3c>)
 80052e4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80052e6:	b10b      	cbz	r3, 80052ec <Vector64+0x1c>
 80052e8:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 80052ea:	4798      	blx	r3
 80052ec:	2320      	movs	r3, #32
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	2100      	movs	r1, #0
 80052f4:	4806      	ldr	r0, [pc, #24]	; (8005310 <Vector64+0x40>)
 80052f6:	f7fc fd8b 	bl	8001e10 <chThdDequeueAllI>
 80052fa:	2300      	movs	r3, #0
 80052fc:	f383 8811 	msr	BASEPRI, r3
}
 8005300:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005304:	f7fc b9c4 	b.w	8001690 <_port_irq_epilogue>
 8005308:	40010400 	.word	0x40010400
 800530c:	20000fb8 	.word	0x20000fb8
 8005310:	20000fe8 	.word	0x20000fe8
	...

08005320 <Vector60>:
  pr = EXTI->PR;
 8005320:	4a0d      	ldr	r2, [pc, #52]	; (8005358 <Vector60+0x38>)
OSAL_IRQ_HANDLER(Vector60) {
 8005322:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8005324:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 8005326:	6813      	ldr	r3, [r2, #0]
 8005328:	400b      	ands	r3, r1
 800532a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 800532e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 2);
 8005330:	b173      	cbz	r3, 8005350 <Vector60+0x30>
 8005332:	4a0a      	ldr	r2, [pc, #40]	; (800535c <Vector60+0x3c>)
 8005334:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005336:	b10b      	cbz	r3, 800533c <Vector60+0x1c>
 8005338:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800533a:	4798      	blx	r3
 800533c:	2320      	movs	r3, #32
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	2100      	movs	r1, #0
 8005344:	4806      	ldr	r0, [pc, #24]	; (8005360 <Vector60+0x40>)
 8005346:	f7fc fd63 	bl	8001e10 <chThdDequeueAllI>
 800534a:	2300      	movs	r3, #0
 800534c:	f383 8811 	msr	BASEPRI, r3
}
 8005350:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005354:	f7fc b99c 	b.w	8001690 <_port_irq_epilogue>
 8005358:	40010400 	.word	0x40010400
 800535c:	20000fb8 	.word	0x20000fb8
 8005360:	20000fd8 	.word	0x20000fd8
	...

08005370 <Vector5C>:
  pr = EXTI->PR;
 8005370:	4a0d      	ldr	r2, [pc, #52]	; (80053a8 <Vector5C+0x38>)
OSAL_IRQ_HANDLER(Vector5C) {
 8005372:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8005374:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8005376:	6813      	ldr	r3, [r2, #0]
 8005378:	400b      	ands	r3, r1
 800537a:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 800537e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 1);
 8005380:	b173      	cbz	r3, 80053a0 <Vector5C+0x30>
 8005382:	4a0a      	ldr	r2, [pc, #40]	; (80053ac <Vector5C+0x3c>)
 8005384:	6993      	ldr	r3, [r2, #24]
 8005386:	b10b      	cbz	r3, 800538c <Vector5C+0x1c>
 8005388:	69d0      	ldr	r0, [r2, #28]
 800538a:	4798      	blx	r3
 800538c:	2320      	movs	r3, #32
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	2100      	movs	r1, #0
 8005394:	4806      	ldr	r0, [pc, #24]	; (80053b0 <Vector5C+0x40>)
 8005396:	f7fc fd3b 	bl	8001e10 <chThdDequeueAllI>
 800539a:	2300      	movs	r3, #0
 800539c:	f383 8811 	msr	BASEPRI, r3
}
 80053a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80053a4:	f7fc b974 	b.w	8001690 <_port_irq_epilogue>
 80053a8:	40010400 	.word	0x40010400
 80053ac:	20000fb8 	.word	0x20000fb8
 80053b0:	20000fc8 	.word	0x20000fc8
	...

080053c0 <Vector58>:
  pr = EXTI->PR;
 80053c0:	4a0d      	ldr	r2, [pc, #52]	; (80053f8 <Vector58+0x38>)
OSAL_IRQ_HANDLER(Vector58) {
 80053c2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 80053c4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 80053c6:	6813      	ldr	r3, [r2, #0]
 80053c8:	400b      	ands	r3, r1
 80053ca:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 80053ce:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 0);
 80053d0:	b173      	cbz	r3, 80053f0 <Vector58+0x30>
 80053d2:	4a0a      	ldr	r2, [pc, #40]	; (80053fc <Vector58+0x3c>)
 80053d4:	6893      	ldr	r3, [r2, #8]
 80053d6:	b10b      	cbz	r3, 80053dc <Vector58+0x1c>
 80053d8:	68d0      	ldr	r0, [r2, #12]
 80053da:	4798      	blx	r3
 80053dc:	2320      	movs	r3, #32
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	2100      	movs	r1, #0
 80053e4:	4805      	ldr	r0, [pc, #20]	; (80053fc <Vector58+0x3c>)
 80053e6:	f7fc fd13 	bl	8001e10 <chThdDequeueAllI>
 80053ea:	2300      	movs	r3, #0
 80053ec:	f383 8811 	msr	BASEPRI, r3
}
 80053f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80053f4:	f7fc b94c 	b.w	8001690 <_port_irq_epilogue>
 80053f8:	40010400 	.word	0x40010400
 80053fc:	20000fb8 	.word	0x20000fb8

08005400 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8005400:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8005404:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8005406:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800540a:	2300      	movs	r3, #0
 800540c:	f383 8811 	msr	BASEPRI, r3
}
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
	...

08005420 <chThdExit>:
 8005420:	2320      	movs	r3, #32
 8005422:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 8005426:	f7ff b80b 	b.w	8004440 <chThdExitS>
 800542a:	bf00      	nop
 800542c:	0000      	movs	r0, r0
	...

08005430 <bmk_thread3>:
  chThdExit((msg_t)p);
 8005430:	f7ff bff6 	b.w	8005420 <chThdExit>
	...

08005440 <chSchDoReschedule>:
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8005440:	2101      	movs	r1, #1
void chSchDoRescheduleAhead(void) {
 8005442:	b430      	push	{r4, r5}
  tp->state = CH_STATE_READY;
 8005444:	2500      	movs	r5, #0
  thread_t *otp = currp;
 8005446:	4a0d      	ldr	r2, [pc, #52]	; (800547c <chSchDoReschedule+0x3c>)
  thread_t *tp = tqp->next;
 8005448:	6810      	ldr	r0, [r2, #0]
 800544a:	6994      	ldr	r4, [r2, #24]
  tqp->next             = tp->queue.next;
 800544c:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800544e:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8005450:	f880 1020 	strb.w	r1, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8005454:	68a1      	ldr	r1, [r4, #8]
  tqp->next             = tp->queue.next;
 8005456:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8005458:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 800545a:	f884 5020 	strb.w	r5, [r4, #32]
 800545e:	e000      	b.n	8005462 <chSchDoReschedule+0x22>
 8005460:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	4291      	cmp	r1, r2
 8005466:	d3fb      	bcc.n	8005460 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8005468:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800546a:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 800546c:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8005470:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8005472:	605c      	str	r4, [r3, #4]
}
 8005474:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 8005476:	f7fa bee3 	b.w	8000240 <_port_switch>
 800547a:	bf00      	nop
 800547c:	200010f0 	.word	0x200010f0

08005480 <chSchRescheduleS>:
  return firstprio(&ch.rlist.queue) > currp->prio;
 8005480:	4b04      	ldr	r3, [pc, #16]	; (8005494 <chSchRescheduleS+0x14>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 8005486:	6892      	ldr	r2, [r2, #8]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	429a      	cmp	r2, r3
 800548c:	d800      	bhi.n	8005490 <chSchRescheduleS+0x10>
}
 800548e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8005490:	f7ff bfd6 	b.w	8005440 <chSchDoReschedule>
 8005494:	200010f0 	.word	0x200010f0
	...

080054a0 <chSemSignalWait.constprop.97>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	2320      	movs	r3, #32
 80054a4:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 80054a8:	4c15      	ldr	r4, [pc, #84]	; (8005500 <chSemSignalWait.constprop.97+0x60>)
 80054aa:	68a3      	ldr	r3, [r4, #8]
 80054ac:	3301      	adds	r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	60a3      	str	r3, [r4, #8]
 80054b2:	dd1a      	ble.n	80054ea <chSemSignalWait.constprop.97+0x4a>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 80054b4:	3b01      	subs	r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	60a3      	str	r3, [r4, #8]
 80054ba:	db06      	blt.n	80054ca <chSemSignalWait.constprop.97+0x2a>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 80054bc:	f7ff ffe0 	bl	8005480 <chSchRescheduleS>
    msg = MSG_OK;
 80054c0:	2000      	movs	r0, #0
 80054c2:	2300      	movs	r3, #0
 80054c4:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 80054c8:	bd38      	pop	{r3, r4, r5, pc}
    thread_t *ctp = currp;
 80054ca:	4a0e      	ldr	r2, [pc, #56]	; (8005504 <chSemSignalWait.constprop.97+0x64>)
  tp->queue.prev             = tqp->prev;
 80054cc:	6863      	ldr	r3, [r4, #4]
 80054ce:	6995      	ldr	r5, [r2, #24]
    chSchGoSleepS(CH_STATE_WTSEM);
 80054d0:	2005      	movs	r0, #5
 80054d2:	e9c5 4300 	strd	r4, r3, [r5]
  tp->queue.prev->queue.next = tp;
 80054d6:	601d      	str	r5, [r3, #0]
    ctp->u.wtsemp = spw;
 80054d8:	626c      	str	r4, [r5, #36]	; 0x24
  tqp->prev                  = tp;
 80054da:	6065      	str	r5, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 80054dc:	f7fd fde8 	bl	80030b0 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 80054e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80054e2:	2300      	movs	r3, #0
 80054e4:	f383 8811 	msr	BASEPRI, r3
}
 80054e8:	bd38      	pop	{r3, r4, r5, pc}
  thread_t *tp = tqp->next;
 80054ea:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 80054ec:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80054ee:	605c      	str	r4, [r3, #4]
  tqp->next             = tp->queue.next;
 80054f0:	6023      	str	r3, [r4, #0]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 80054f2:	f7fc fadd 	bl	8001ab0 <chSchReadyI>
 80054f6:	2200      	movs	r2, #0
 80054f8:	68a3      	ldr	r3, [r4, #8]
 80054fa:	6242      	str	r2, [r0, #36]	; 0x24
 80054fc:	e7da      	b.n	80054b4 <chSemSignalWait.constprop.97+0x14>
 80054fe:	bf00      	nop
 8005500:	20001348 	.word	0x20001348
 8005504:	200010f0 	.word	0x200010f0
	...

08005510 <rt_test_005_005_execute>:

static void rt_test_005_005_teardown(void) {
  test_wait_threads();
}

static void rt_test_005_005_execute(void) {
 8005510:	b538      	push	{r3, r4, r5, lr}

  /* [5.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 8005512:	2401      	movs	r4, #1
  return ch.rlist.current;
 8005514:	4b1d      	ldr	r3, [pc, #116]	; (800558c <rt_test_005_005_execute+0x7c>)
 8005516:	4d1e      	ldr	r5, [pc, #120]	; (8005590 <rt_test_005_005_execute+0x80>)
  return chThdGetSelfX()->prio;
 8005518:	699a      	ldr	r2, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 800551a:	481e      	ldr	r0, [pc, #120]	; (8005594 <rt_test_005_005_execute+0x84>)
 800551c:	6891      	ldr	r1, [r2, #8]
 800551e:	2300      	movs	r3, #0
 8005520:	4421      	add	r1, r4
 8005522:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <rt_test_005_005_execute+0x88>)
  test_set_step(1);
 8005524:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8005526:	f7fd fd13 	bl	8002f50 <chThdCreateStatic.constprop.103>
  }

  /* [5.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 800552a:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 800552c:	4a1b      	ldr	r2, [pc, #108]	; (800559c <rt_test_005_005_execute+0x8c>)
  return (bool)(tqp->next == (const thread_t *)tqp);
 800552e:	4c1c      	ldr	r4, [pc, #112]	; (80055a0 <rt_test_005_005_execute+0x90>)
 8005530:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8005532:	602b      	str	r3, [r5, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8005534:	f7ff ffb4 	bl	80054a0 <chSemSignalWait.constprop.97>
 8005538:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800553a:	491a      	ldr	r1, [pc, #104]	; (80055a4 <rt_test_005_005_execute+0x94>)
 800553c:	1b00      	subs	r0, r0, r4
 800553e:	fab0 f080 	clz	r0, r0
 8005542:	0940      	lsrs	r0, r0, #5
 8005544:	f7fb fa04 	bl	8000950 <_test_assert>
 8005548:	b100      	cbz	r0, 800554c <rt_test_005_005_execute+0x3c>
  {
    chSemSignalWait(&sem1, &sem1);
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }
}
 800554a:	bd38      	pop	{r3, r4, r5, pc}
    test_assert(sem1.cnt == 0, "counter not zero");
 800554c:	68a0      	ldr	r0, [r4, #8]
 800554e:	4916      	ldr	r1, [pc, #88]	; (80055a8 <rt_test_005_005_execute+0x98>)
 8005550:	fab0 f080 	clz	r0, r0
 8005554:	0940      	lsrs	r0, r0, #5
 8005556:	f7fb f9fb 	bl	8000950 <_test_assert>
 800555a:	2800      	cmp	r0, #0
 800555c:	d1f5      	bne.n	800554a <rt_test_005_005_execute+0x3a>
  test_set_step(3);
 800555e:	2303      	movs	r3, #3
 8005560:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
 8005562:	f7ff ff9d 	bl	80054a0 <chSemSignalWait.constprop.97>
 8005566:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8005568:	490e      	ldr	r1, [pc, #56]	; (80055a4 <rt_test_005_005_execute+0x94>)
 800556a:	1b00      	subs	r0, r0, r4
 800556c:	fab0 f080 	clz	r0, r0
 8005570:	0940      	lsrs	r0, r0, #5
 8005572:	f7fb f9ed 	bl	8000950 <_test_assert>
 8005576:	2800      	cmp	r0, #0
 8005578:	d1e7      	bne.n	800554a <rt_test_005_005_execute+0x3a>
    test_assert(sem1.cnt == 0, "counter not zero");
 800557a:	68a0      	ldr	r0, [r4, #8]
 800557c:	490a      	ldr	r1, [pc, #40]	; (80055a8 <rt_test_005_005_execute+0x98>)
 800557e:	fab0 f080 	clz	r0, r0
}
 8005582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_assert(sem1.cnt == 0, "counter not zero");
 8005586:	0940      	lsrs	r0, r0, #5
 8005588:	f7fb b9e2 	b.w	8000950 <_test_assert>
 800558c:	200010f0 	.word	0x200010f0
 8005590:	20001a7c 	.word	0x20001a7c
 8005594:	20001368 	.word	0x20001368
 8005598:	08004401 	.word	0x08004401
 800559c:	20001a94 	.word	0x20001a94
 80055a0:	20001348 	.word	0x20001348
 80055a4:	0800b3dc 	.word	0x0800b3dc
 80055a8:	0800b3ec 	.word	0x0800b3ec
 80055ac:	00000000 	.word	0x00000000

080055b0 <chMBReset.constprop.72>:
void chMBReset(mailbox_t *mbp) {
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	2320      	movs	r3, #32
 80055b4:	f383 8811 	msr	BASEPRI, r3
  mbp->reset = true;
 80055b8:	2201      	movs	r2, #1
  mbp->cnt   = (size_t)0;
 80055ba:	2500      	movs	r5, #0
  mbp->wrptr = mbp->buffer;
 80055bc:	4c0b      	ldr	r4, [pc, #44]	; (80055ec <chMBReset.constprop.72+0x3c>)
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80055be:	f06f 0101 	mvn.w	r1, #1
  mbp->wrptr = mbp->buffer;
 80055c2:	6823      	ldr	r3, [r4, #0]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80055c4:	f104 0018 	add.w	r0, r4, #24
  mbp->reset = true;
 80055c8:	7522      	strb	r2, [r4, #20]
  mbp->rdptr = mbp->buffer;
 80055ca:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 80055ce:	6125      	str	r5, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80055d0:	f7fc fc1e 	bl	8001e10 <chThdDequeueAllI>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 80055d4:	f104 0020 	add.w	r0, r4, #32
 80055d8:	f06f 0101 	mvn.w	r1, #1
 80055dc:	f7fc fc18 	bl	8001e10 <chThdDequeueAllI>
  chSchRescheduleS();
 80055e0:	f7ff ff4e 	bl	8005480 <chSchRescheduleS>
 80055e4:	f385 8811 	msr	BASEPRI, r5
}
 80055e8:	bd38      	pop	{r3, r4, r5, pc}
 80055ea:	bf00      	nop
 80055ec:	20000860 	.word	0x20000860

080055f0 <oslib_test_001_003_teardown>:

static void oslib_test_001_003_teardown(void) {
  chMBReset(&mb1);
 80055f0:	f7ff bfde 	b.w	80055b0 <chMBReset.constprop.72>
	...

08005600 <oslib_test_001_002_teardown>:
 8005600:	f7ff bff6 	b.w	80055f0 <oslib_test_001_003_teardown>
	...

08005610 <oslib_test_001_001_teardown>:
 8005610:	f7ff bfee 	b.w	80055f0 <oslib_test_001_003_teardown>
	...

08005620 <chMBPostTimeout.constprop.70>:
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	4607      	mov	r7, r0
 8005624:	460e      	mov	r6, r1
 8005626:	2320      	movs	r3, #32
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	4c15      	ldr	r4, [pc, #84]	; (8005684 <chMBPostTimeout.constprop.70+0x64>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800562e:	f104 0518 	add.w	r5, r4, #24
 8005632:	e00b      	b.n	800564c <chMBPostTimeout.constprop.70+0x2c>
 8005634:	6923      	ldr	r3, [r4, #16]
 8005636:	e9d4 1200 	ldrd	r1, r2, [r4]
 800563a:	1a50      	subs	r0, r2, r1
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800563c:	ebb3 0fa0 	cmp.w	r3, r0, asr #2
 8005640:	d10d      	bne.n	800565e <chMBPostTimeout.constprop.70+0x3e>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8005642:	4631      	mov	r1, r6
 8005644:	4628      	mov	r0, r5
 8005646:	f7fd ff13 	bl	8003470 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800564a:	b920      	cbnz	r0, 8005656 <chMBPostTimeout.constprop.70+0x36>
    if (mbp->reset) {
 800564c:	7d23      	ldrb	r3, [r4, #20]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0f0      	beq.n	8005634 <chMBPostTimeout.constprop.70+0x14>
      return MSG_RESET;
 8005652:	f06f 0001 	mvn.w	r0, #1
 8005656:	2300      	movs	r3, #0
 8005658:	f383 8811 	msr	BASEPRI, r3
}
 800565c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *mbp->wrptr++ = msg;
 800565e:	68a5      	ldr	r5, [r4, #8]
      mbp->cnt++;
 8005660:	3301      	adds	r3, #1
      *mbp->wrptr++ = msg;
 8005662:	1d28      	adds	r0, r5, #4
 8005664:	60a0      	str	r0, [r4, #8]
      if (mbp->wrptr >= mbp->top) {
 8005666:	4282      	cmp	r2, r0
      *mbp->wrptr++ = msg;
 8005668:	602f      	str	r7, [r5, #0]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 800566a:	4807      	ldr	r0, [pc, #28]	; (8005688 <chMBPostTimeout.constprop.70+0x68>)
        mbp->wrptr = mbp->buffer;
 800566c:	bf98      	it	ls
 800566e:	60a1      	strls	r1, [r4, #8]
      mbp->cnt++;
 8005670:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8005672:	f7fc fa35 	bl	8001ae0 <chThdDequeueNextI.constprop.101>
      chSchRescheduleS();
 8005676:	f7ff ff03 	bl	8005480 <chSchRescheduleS>
      return MSG_OK;
 800567a:	2000      	movs	r0, #0
 800567c:	2300      	movs	r3, #0
 800567e:	f383 8811 	msr	BASEPRI, r3
}
 8005682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005684:	20000860 	.word	0x20000860
 8005688:	20000880 	.word	0x20000880
 800568c:	00000000 	.word	0x00000000

08005690 <chMBPostAheadTimeout.constprop.67>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005692:	4607      	mov	r7, r0
 8005694:	460e      	mov	r6, r1
 8005696:	2320      	movs	r3, #32
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	4c15      	ldr	r4, [pc, #84]	; (80056f4 <chMBPostAheadTimeout.constprop.67+0x64>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800569e:	f104 0518 	add.w	r5, r4, #24
 80056a2:	e00b      	b.n	80056bc <chMBPostAheadTimeout.constprop.67+0x2c>
 80056a4:	6923      	ldr	r3, [r4, #16]
 80056a6:	e9d4 2100 	ldrd	r2, r1, [r4]
 80056aa:	1a88      	subs	r0, r1, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 80056ac:	ebb3 0fa0 	cmp.w	r3, r0, asr #2
 80056b0:	d10d      	bne.n	80056ce <chMBPostAheadTimeout.constprop.67+0x3e>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 80056b2:	4631      	mov	r1, r6
 80056b4:	4628      	mov	r0, r5
 80056b6:	f7fd fedb 	bl	8003470 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 80056ba:	b920      	cbnz	r0, 80056c6 <chMBPostAheadTimeout.constprop.67+0x36>
    if (mbp->reset) {
 80056bc:	7d23      	ldrb	r3, [r4, #20]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <chMBPostAheadTimeout.constprop.67+0x14>
      return MSG_RESET;
 80056c2:	f06f 0001 	mvn.w	r0, #1
 80056c6:	2300      	movs	r3, #0
 80056c8:	f383 8811 	msr	BASEPRI, r3
}
 80056cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (--mbp->rdptr < mbp->buffer) {
 80056ce:	68e0      	ldr	r0, [r4, #12]
      mbp->cnt++;
 80056d0:	3301      	adds	r3, #1
      if (--mbp->rdptr < mbp->buffer) {
 80056d2:	3804      	subs	r0, #4
 80056d4:	4282      	cmp	r2, r0
        mbp->rdptr = mbp->top - 1;
 80056d6:	bf88      	it	hi
 80056d8:	1f08      	subhi	r0, r1, #4
 80056da:	60e0      	str	r0, [r4, #12]
      *mbp->rdptr = msg;
 80056dc:	6007      	str	r7, [r0, #0]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 80056de:	4806      	ldr	r0, [pc, #24]	; (80056f8 <chMBPostAheadTimeout.constprop.67+0x68>)
      mbp->cnt++;
 80056e0:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 80056e2:	f7fc f9fd 	bl	8001ae0 <chThdDequeueNextI.constprop.101>
      chSchRescheduleS();
 80056e6:	f7ff fecb 	bl	8005480 <chSchRescheduleS>
      return MSG_OK;
 80056ea:	2000      	movs	r0, #0
 80056ec:	2300      	movs	r3, #0
 80056ee:	f383 8811 	msr	BASEPRI, r3
}
 80056f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f4:	20000860 	.word	0x20000860
 80056f8:	20000880 	.word	0x20000880
 80056fc:	00000000 	.word	0x00000000

08005700 <chMBFetchTimeout.constprop.64>:
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8005700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005702:	4607      	mov	r7, r0
 8005704:	460e      	mov	r6, r1
 8005706:	2320      	movs	r3, #32
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	4c15      	ldr	r4, [pc, #84]	; (8005764 <chMBFetchTimeout.constprop.64+0x64>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800570e:	18e5      	adds	r5, r4, r3
 8005710:	e006      	b.n	8005720 <chMBFetchTimeout.constprop.64+0x20>
 8005712:	6923      	ldr	r3, [r4, #16]
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8005714:	b96b      	cbnz	r3, 8005732 <chMBFetchTimeout.constprop.64+0x32>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8005716:	4631      	mov	r1, r6
 8005718:	4628      	mov	r0, r5
 800571a:	f7fd fea9 	bl	8003470 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800571e:	b920      	cbnz	r0, 800572a <chMBFetchTimeout.constprop.64+0x2a>
    if (mbp->reset) {
 8005720:	7d23      	ldrb	r3, [r4, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0f5      	beq.n	8005712 <chMBFetchTimeout.constprop.64+0x12>
      return MSG_RESET;
 8005726:	f06f 0001 	mvn.w	r0, #1
 800572a:	2300      	movs	r3, #0
 800572c:	f383 8811 	msr	BASEPRI, r3
}
 8005730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *msgp = *mbp->rdptr++;
 8005732:	68e1      	ldr	r1, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
 8005734:	6860      	ldr	r0, [r4, #4]
      *msgp = *mbp->rdptr++;
 8005736:	1d0a      	adds	r2, r1, #4
      if (mbp->rdptr >= mbp->top) {
 8005738:	4282      	cmp	r2, r0
      *msgp = *mbp->rdptr++;
 800573a:	6809      	ldr	r1, [r1, #0]
 800573c:	60e2      	str	r2, [r4, #12]
        mbp->rdptr = mbp->buffer;
 800573e:	bf28      	it	cs
 8005740:	6822      	ldrcs	r2, [r4, #0]
      *msgp = *mbp->rdptr++;
 8005742:	6039      	str	r1, [r7, #0]
      mbp->cnt--;
 8005744:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8005748:	4807      	ldr	r0, [pc, #28]	; (8005768 <chMBFetchTimeout.constprop.64+0x68>)
        mbp->rdptr = mbp->buffer;
 800574a:	bf28      	it	cs
 800574c:	60e2      	strcs	r2, [r4, #12]
      mbp->cnt--;
 800574e:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8005750:	f7fc f9c6 	bl	8001ae0 <chThdDequeueNextI.constprop.101>
      chSchRescheduleS();
 8005754:	f7ff fe94 	bl	8005480 <chSchRescheduleS>
      return MSG_OK;
 8005758:	2000      	movs	r0, #0
 800575a:	2300      	movs	r3, #0
 800575c:	f383 8811 	msr	BASEPRI, r3
}
 8005760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005762:	bf00      	nop
 8005764:	20000860 	.word	0x20000860
 8005768:	20000878 	.word	0x20000878
 800576c:	00000000 	.word	0x00000000

08005770 <oslib_test_001_003_execute>:
static void oslib_test_001_003_execute(void) {
  msg_t msg1, msg2;
  unsigned i;

  /* [1.3.1] Filling the mailbox.*/
  test_set_step(1);
 8005770:	2301      	movs	r3, #1
static void oslib_test_001_003_execute(void) {
 8005772:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8005774:	2442      	movs	r4, #66	; 0x42
 8005776:	4e40      	ldr	r6, [pc, #256]	; (8005878 <oslib_test_001_003_execute+0x108>)
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005778:	4d40      	ldr	r5, [pc, #256]	; (800587c <oslib_test_001_003_execute+0x10c>)
static void oslib_test_001_003_execute(void) {
 800577a:	b082      	sub	sp, #8
  test_set_step(1);
 800577c:	6033      	str	r3, [r6, #0]
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800577e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005782:	4620      	mov	r0, r4
 8005784:	f7ff ff4c 	bl	8005620 <chMBPostTimeout.constprop.70>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005788:	fab0 f080 	clz	r0, r0
 800578c:	4629      	mov	r1, r5
 800578e:	0940      	lsrs	r0, r0, #5
 8005790:	f7fb f8de 	bl	8000950 <_test_assert>
 8005794:	3401      	adds	r4, #1
 8005796:	b988      	cbnz	r0, 80057bc <oslib_test_001_003_execute+0x4c>
    for (i = 0; i < MB_SIZE; i++) {
 8005798:	2c46      	cmp	r4, #70	; 0x46
 800579a:	d1f0      	bne.n	800577e <oslib_test_001_003_execute+0xe>
    }
  }

  /* [1.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 800579c:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 800579e:	2101      	movs	r1, #1
 80057a0:	2058      	movs	r0, #88	; 0x58
  test_set_step(2);
 80057a2:	6033      	str	r3, [r6, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 80057a4:	f7ff ff3c 	bl	8005620 <chMBPostTimeout.constprop.70>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80057a8:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 80057ac:	fab0 f080 	clz	r0, r0
 80057b0:	4932      	ldr	r1, [pc, #200]	; (800587c <oslib_test_001_003_execute+0x10c>)
 80057b2:	0940      	lsrs	r0, r0, #5
 80057b4:	f7fb f8cc 	bl	8000950 <_test_assert>
 80057b8:	4604      	mov	r4, r0
 80057ba:	b108      	cbz	r0, 80057c0 <oslib_test_001_003_execute+0x50>
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
}
 80057bc:	b002      	add	sp, #8
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	2520      	movs	r5, #32
 80057c2:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostI(&mb1, 'X');
 80057c6:	2058      	movs	r0, #88	; 0x58
 80057c8:	f7fc f99a 	bl	8001b00 <chMBPostI.constprop.69>
 80057cc:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80057d0:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 80057d4:	fab0 f080 	clz	r0, r0
 80057d8:	4928      	ldr	r1, [pc, #160]	; (800587c <oslib_test_001_003_execute+0x10c>)
 80057da:	0940      	lsrs	r0, r0, #5
 80057dc:	f7fb f8b8 	bl	8000950 <_test_assert>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d1eb      	bne.n	80057bc <oslib_test_001_003_execute+0x4c>
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 80057e4:	2101      	movs	r1, #1
 80057e6:	2058      	movs	r0, #88	; 0x58
 80057e8:	f7ff ff52 	bl	8005690 <chMBPostAheadTimeout.constprop.67>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80057ec:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 80057f0:	fab0 f080 	clz	r0, r0
 80057f4:	4921      	ldr	r1, [pc, #132]	; (800587c <oslib_test_001_003_execute+0x10c>)
 80057f6:	0940      	lsrs	r0, r0, #5
 80057f8:	f7fb f8aa 	bl	8000950 <_test_assert>
 80057fc:	4604      	mov	r4, r0
 80057fe:	2800      	cmp	r0, #0
 8005800:	d1dc      	bne.n	80057bc <oslib_test_001_003_execute+0x4c>
 8005802:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostAheadI(&mb1, 'X');
 8005806:	2058      	movs	r0, #88	; 0x58
 8005808:	f7fc f9a2 	bl	8001b50 <chMBPostAheadI.constprop.66>
 800580c:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8005810:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8005814:	fab0 f080 	clz	r0, r0
 8005818:	4918      	ldr	r1, [pc, #96]	; (800587c <oslib_test_001_003_execute+0x10c>)
 800581a:	0940      	lsrs	r0, r0, #5
 800581c:	f7fb f898 	bl	8000950 <_test_assert>
 8005820:	4604      	mov	r4, r0
 8005822:	2800      	cmp	r0, #0
 8005824:	d1ca      	bne.n	80057bc <oslib_test_001_003_execute+0x4c>
  test_set_step(3);
 8005826:	2303      	movs	r3, #3
 8005828:	6033      	str	r3, [r6, #0]
    chMBReset(&mb1);
 800582a:	f7ff fec1 	bl	80055b0 <chMBReset.constprop.72>
  test_set_step(4);
 800582e:	2204      	movs	r2, #4
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 8005830:	4b13      	ldr	r3, [pc, #76]	; (8005880 <oslib_test_001_003_execute+0x110>)
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 8005832:	eb0d 0002 	add.w	r0, sp, r2
 8005836:	751c      	strb	r4, [r3, #20]
 8005838:	2101      	movs	r1, #1
  test_set_step(4);
 800583a:	6032      	str	r2, [r6, #0]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800583c:	f7ff ff60 	bl	8005700 <chMBFetchTimeout.constprop.64>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8005840:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8005844:	fab0 f080 	clz	r0, r0
 8005848:	490c      	ldr	r1, [pc, #48]	; (800587c <oslib_test_001_003_execute+0x10c>)
 800584a:	0940      	lsrs	r0, r0, #5
 800584c:	f7fb f880 	bl	8000950 <_test_assert>
 8005850:	4604      	mov	r4, r0
 8005852:	2800      	cmp	r0, #0
 8005854:	d1b2      	bne.n	80057bc <oslib_test_001_003_execute+0x4c>
 8005856:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBFetchI(&mb1, &msg2);
 800585a:	a801      	add	r0, sp, #4
 800585c:	f7fc f9a0 	bl	8001ba0 <chMBFetchI.constprop.63>
 8005860:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8005864:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8005868:	fab0 f080 	clz	r0, r0
 800586c:	4903      	ldr	r1, [pc, #12]	; (800587c <oslib_test_001_003_execute+0x10c>)
 800586e:	0940      	lsrs	r0, r0, #5
 8005870:	f7fb f86e 	bl	8000950 <_test_assert>
 8005874:	e7a2      	b.n	80057bc <oslib_test_001_003_execute+0x4c>
 8005876:	bf00      	nop
 8005878:	20001a7c 	.word	0x20001a7c
 800587c:	0800a4a0 	.word	0x0800a4a0
 8005880:	20000860 	.word	0x20000860
	...

08005890 <oslib_test_001_002_execute>:
static void oslib_test_001_002_execute(void) {
 8005890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8005894:	f04f 0801 	mov.w	r8, #1
 8005898:	4fae      	ldr	r7, [pc, #696]	; (8005b54 <oslib_test_001_002_execute+0x2c4>)
static void oslib_test_001_002_execute(void) {
 800589a:	b082      	sub	sp, #8
 800589c:	2620      	movs	r6, #32
  test_set_step(1);
 800589e:	f8c7 8000 	str.w	r8, [r7]
 80058a2:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80058a6:	4cac      	ldr	r4, [pc, #688]	; (8005b58 <oslib_test_001_002_execute+0x2c8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 80058a8:	49ac      	ldr	r1, [pc, #688]	; (8005b5c <oslib_test_001_002_execute+0x2cc>)
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80058aa:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80058ac:	e9d4 2300 	ldrd	r2, r3, [r4]
 80058b0:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80058b2:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 80058b6:	f1a0 0004 	sub.w	r0, r0, #4
 80058ba:	fab0 f080 	clz	r0, r0
 80058be:	0940      	lsrs	r0, r0, #5
 80058c0:	f7fb f846 	bl	8000950 <_test_assert>
 80058c4:	b128      	cbz	r0, 80058d2 <oslib_test_001_002_execute+0x42>
 80058c6:	2300      	movs	r3, #0
 80058c8:	f383 8811 	msr	BASEPRI, r3
}
 80058cc:	b002      	add	sp, #8
 80058ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d2:	4605      	mov	r5, r0
 80058d4:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 80058d8:	2302      	movs	r3, #2
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	f386 8811 	msr	BASEPRI, r6
  mbp->wrptr = mbp->buffer;
 80058e0:	6823      	ldr	r3, [r4, #0]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80058e2:	f104 0018 	add.w	r0, r4, #24
 80058e6:	f06f 0101 	mvn.w	r1, #1
  mbp->rdptr = mbp->buffer;
 80058ea:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 80058ee:	6125      	str	r5, [r4, #16]
  mbp->reset = true;
 80058f0:	f884 8014 	strb.w	r8, [r4, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80058f4:	f7fc fa8c 	bl	8001e10 <chThdDequeueAllI>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 80058f8:	f104 0020 	add.w	r0, r4, #32
 80058fc:	f06f 0101 	mvn.w	r1, #1
 8005900:	f7fc fa86 	bl	8001e10 <chThdDequeueAllI>
 8005904:	f385 8811 	msr	BASEPRI, r5
 8005908:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 800590c:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8005910:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8005912:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8005914:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8005918:	f1a0 0004 	sub.w	r0, r0, #4
 800591c:	fab0 f080 	clz	r0, r0
 8005920:	498f      	ldr	r1, [pc, #572]	; (8005b60 <oslib_test_001_002_execute+0x2d0>)
 8005922:	0940      	lsrs	r0, r0, #5
 8005924:	f7fb f814 	bl	8000950 <_test_assert>
 8005928:	4680      	mov	r8, r0
 800592a:	b120      	cbz	r0, 8005936 <oslib_test_001_002_execute+0xa6>
 800592c:	f385 8811 	msr	BASEPRI, r5
}
 8005930:	b002      	add	sp, #8
 8005932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005936:	f380 8811 	msr	BASEPRI, r0
 800593a:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800593e:	6920      	ldr	r0, [r4, #16]
 8005940:	4988      	ldr	r1, [pc, #544]	; (8005b64 <oslib_test_001_002_execute+0x2d4>)
 8005942:	fab0 f080 	clz	r0, r0
 8005946:	0940      	lsrs	r0, r0, #5
 8005948:	f7fb f802 	bl	8000950 <_test_assert>
 800594c:	4605      	mov	r5, r0
 800594e:	b110      	cbz	r0, 8005956 <oslib_test_001_002_execute+0xc6>
 8005950:	f388 8811 	msr	BASEPRI, r8
 8005954:	e7ba      	b.n	80058cc <oslib_test_001_002_execute+0x3c>
 8005956:	f380 8811 	msr	BASEPRI, r0
 800595a:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800595e:	6820      	ldr	r0, [r4, #0]
 8005960:	68a3      	ldr	r3, [r4, #8]
 8005962:	4981      	ldr	r1, [pc, #516]	; (8005b68 <oslib_test_001_002_execute+0x2d8>)
 8005964:	1ac0      	subs	r0, r0, r3
 8005966:	fab0 f080 	clz	r0, r0
 800596a:	0940      	lsrs	r0, r0, #5
 800596c:	f7fa fff0 	bl	8000950 <_test_assert>
 8005970:	4680      	mov	r8, r0
 8005972:	2800      	cmp	r0, #0
 8005974:	d1da      	bne.n	800592c <oslib_test_001_002_execute+0x9c>
 8005976:	f380 8811 	msr	BASEPRI, r0
 800597a:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800597e:	6820      	ldr	r0, [r4, #0]
 8005980:	68e3      	ldr	r3, [r4, #12]
 8005982:	497a      	ldr	r1, [pc, #488]	; (8005b6c <oslib_test_001_002_execute+0x2dc>)
 8005984:	1ac0      	subs	r0, r0, r3
 8005986:	fab0 f080 	clz	r0, r0
 800598a:	0940      	lsrs	r0, r0, #5
 800598c:	f7fa ffe0 	bl	8000950 <_test_assert>
 8005990:	2800      	cmp	r0, #0
 8005992:	d1dd      	bne.n	8005950 <oslib_test_001_002_execute+0xc0>
 8005994:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8005998:	2303      	movs	r3, #3
 800599a:	4681      	mov	r9, r0
 800599c:	2542      	movs	r5, #66	; 0x42
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800599e:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8005b70 <oslib_test_001_002_execute+0x2e0>
  mbp->reset = false;
 80059a2:	7520      	strb	r0, [r4, #20]
  test_set_step(3);
 80059a4:	603b      	str	r3, [r7, #0]
 80059a6:	f386 8811 	msr	BASEPRI, r6
      msg1 = chMBPostI(&mb1, 'B' + i);
 80059aa:	4628      	mov	r0, r5
 80059ac:	f7fc f8a8 	bl	8001b00 <chMBPostI.constprop.69>
 80059b0:	f389 8811 	msr	BASEPRI, r9
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80059b4:	fab0 f080 	clz	r0, r0
 80059b8:	4651      	mov	r1, sl
 80059ba:	0940      	lsrs	r0, r0, #5
 80059bc:	f7fa ffc8 	bl	8000950 <_test_assert>
 80059c0:	3501      	adds	r5, #1
 80059c2:	4680      	mov	r8, r0
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d181      	bne.n	80058cc <oslib_test_001_002_execute+0x3c>
    for (i = 0; i < MB_SIZE - 1; i++) {
 80059c8:	2d45      	cmp	r5, #69	; 0x45
 80059ca:	d1ec      	bne.n	80059a6 <oslib_test_001_002_execute+0x116>
 80059cc:	f386 8811 	msr	BASEPRI, r6
    msg1 = chMBPostAheadI(&mb1, 'A');
 80059d0:	2041      	movs	r0, #65	; 0x41
 80059d2:	f7fc f8bd 	bl	8001b50 <chMBPostAheadI.constprop.66>
 80059d6:	f388 8811 	msr	BASEPRI, r8
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80059da:	fab0 f080 	clz	r0, r0
 80059de:	4964      	ldr	r1, [pc, #400]	; (8005b70 <oslib_test_001_002_execute+0x2e0>)
 80059e0:	0940      	lsrs	r0, r0, #5
 80059e2:	f7fa ffb5 	bl	8000950 <_test_assert>
 80059e6:	4605      	mov	r5, r0
 80059e8:	2800      	cmp	r0, #0
 80059ea:	f47f af6f 	bne.w	80058cc <oslib_test_001_002_execute+0x3c>
  test_set_step(4);
 80059ee:	f04f 0804 	mov.w	r8, #4
 80059f2:	f8c7 8000 	str.w	r8, [r7]
 80059f6:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 80059fa:	6922      	ldr	r2, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80059fc:	e9d4 1300 	ldrd	r1, r3, [r4]
 8005a00:	1a5b      	subs	r3, r3, r1
 8005a02:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8005a06:	bf0c      	ite	eq
 8005a08:	2001      	moveq	r0, #1
 8005a0a:	2000      	movne	r0, #0
 8005a0c:	4959      	ldr	r1, [pc, #356]	; (8005b74 <oslib_test_001_002_execute+0x2e4>)
 8005a0e:	f7fa ff9f 	bl	8000950 <_test_assert>
 8005a12:	4681      	mov	r9, r0
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d189      	bne.n	800592c <oslib_test_001_002_execute+0x9c>
 8005a18:	f380 8811 	msr	BASEPRI, r0
 8005a1c:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8005a20:	6920      	ldr	r0, [r4, #16]
 8005a22:	4955      	ldr	r1, [pc, #340]	; (8005b78 <oslib_test_001_002_execute+0x2e8>)
 8005a24:	f1a0 0004 	sub.w	r0, r0, #4
 8005a28:	fab0 f080 	clz	r0, r0
 8005a2c:	0940      	lsrs	r0, r0, #5
 8005a2e:	f7fa ff8f 	bl	8000950 <_test_assert>
 8005a32:	4605      	mov	r5, r0
 8005a34:	b110      	cbz	r0, 8005a3c <oslib_test_001_002_execute+0x1ac>
 8005a36:	f389 8811 	msr	BASEPRI, r9
 8005a3a:	e747      	b.n	80058cc <oslib_test_001_002_execute+0x3c>
 8005a3c:	f380 8811 	msr	BASEPRI, r0
 8005a40:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8005a44:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8005a48:	1ac6      	subs	r6, r0, r3
 8005a4a:	4270      	negs	r0, r6
 8005a4c:	4170      	adcs	r0, r6
 8005a4e:	494b      	ldr	r1, [pc, #300]	; (8005b7c <oslib_test_001_002_execute+0x2ec>)
 8005a50:	f7fa ff7e 	bl	8000950 <_test_assert>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	f47f af69 	bne.w	800592c <oslib_test_001_002_execute+0x9c>
 8005a5a:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 8005a5e:	2305      	movs	r3, #5
 8005a60:	4645      	mov	r5, r8
 8005a62:	4606      	mov	r6, r0
 8005a64:	f04f 0820 	mov.w	r8, #32
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005a68:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8005b70 <oslib_test_001_002_execute+0x2e0>
  test_set_step(5);
 8005a6c:	603b      	str	r3, [r7, #0]
 8005a6e:	f388 8811 	msr	BASEPRI, r8
      msg1 = chMBFetchI(&mb1, &msg2);
 8005a72:	a801      	add	r0, sp, #4
 8005a74:	f7fc f894 	bl	8001ba0 <chMBFetchI.constprop.63>
 8005a78:	f386 8811 	msr	BASEPRI, r6
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005a7c:	fab0 f080 	clz	r0, r0
 8005a80:	4649      	mov	r1, r9
 8005a82:	0940      	lsrs	r0, r0, #5
 8005a84:	f7fa ff64 	bl	8000950 <_test_assert>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	f47f af1f 	bne.w	80058cc <oslib_test_001_002_execute+0x3c>
      test_emit_token(msg2);
 8005a8e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8005a92:	f7fa fffd 	bl	8000a90 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8005a96:	3d01      	subs	r5, #1
 8005a98:	d1e9      	bne.n	8005a6e <oslib_test_001_002_execute+0x1de>
    test_assert_sequence("ABCD", "wrong get sequence");
 8005a9a:	4939      	ldr	r1, [pc, #228]	; (8005b80 <oslib_test_001_002_execute+0x2f0>)
 8005a9c:	4839      	ldr	r0, [pc, #228]	; (8005b84 <oslib_test_001_002_execute+0x2f4>)
 8005a9e:	f7fb f86f 	bl	8000b80 <_test_assert_sequence>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	f47f af12 	bne.w	80058cc <oslib_test_001_002_execute+0x3c>
  test_set_step(6);
 8005aa8:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8005aaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005aae:	2046      	movs	r0, #70	; 0x46
  test_set_step(6);
 8005ab0:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8005ab2:	f7ff fdb5 	bl	8005620 <chMBPostTimeout.constprop.70>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005ab6:	fab0 f080 	clz	r0, r0
 8005aba:	492d      	ldr	r1, [pc, #180]	; (8005b70 <oslib_test_001_002_execute+0x2e0>)
 8005abc:	0940      	lsrs	r0, r0, #5
 8005abe:	f7fa ff47 	bl	8000950 <_test_assert>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	f47f af02 	bne.w	80058cc <oslib_test_001_002_execute+0x3c>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8005ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005acc:	a801      	add	r0, sp, #4
 8005ace:	f7ff fe17 	bl	8005700 <chMBFetchTimeout.constprop.64>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005ad2:	fab0 f080 	clz	r0, r0
 8005ad6:	4926      	ldr	r1, [pc, #152]	; (8005b70 <oslib_test_001_002_execute+0x2e0>)
 8005ad8:	0940      	lsrs	r0, r0, #5
 8005ada:	f7fa ff39 	bl	8000950 <_test_assert>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	f47f aef4 	bne.w	80058cc <oslib_test_001_002_execute+0x3c>
  test_set_step(7);
 8005ae4:	2307      	movs	r3, #7
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	f388 8811 	msr	BASEPRI, r8
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8005aec:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8005aee:	e9d4 1200 	ldrd	r1, r2, [r4]
 8005af2:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8005af4:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8005af8:	1f19      	subs	r1, r3, #4
 8005afa:	4248      	negs	r0, r1
 8005afc:	4148      	adcs	r0, r1
 8005afe:	4918      	ldr	r1, [pc, #96]	; (8005b60 <oslib_test_001_002_execute+0x2d0>)
 8005b00:	f7fa ff26 	bl	8000950 <_test_assert>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	f47f af11 	bne.w	800592c <oslib_test_001_002_execute+0x9c>
 8005b0a:	f385 8811 	msr	BASEPRI, r5
 8005b0e:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8005b12:	6920      	ldr	r0, [r4, #16]
 8005b14:	4913      	ldr	r1, [pc, #76]	; (8005b64 <oslib_test_001_002_execute+0x2d4>)
 8005b16:	fab0 f080 	clz	r0, r0
 8005b1a:	0940      	lsrs	r0, r0, #5
 8005b1c:	f7fa ff18 	bl	8000950 <_test_assert>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	f47f af03 	bne.w	800592c <oslib_test_001_002_execute+0x9c>
 8005b26:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8005b2a:	6820      	ldr	r0, [r4, #0]
 8005b2c:	68a3      	ldr	r3, [r4, #8]
 8005b2e:	490e      	ldr	r1, [pc, #56]	; (8005b68 <oslib_test_001_002_execute+0x2d8>)
 8005b30:	1ac2      	subs	r2, r0, r3
 8005b32:	4250      	negs	r0, r2
 8005b34:	4150      	adcs	r0, r2
 8005b36:	f7fa ff0b 	bl	8000950 <_test_assert>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	f47f aec6 	bne.w	80058cc <oslib_test_001_002_execute+0x3c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8005b40:	6820      	ldr	r0, [r4, #0]
 8005b42:	68e3      	ldr	r3, [r4, #12]
 8005b44:	4909      	ldr	r1, [pc, #36]	; (8005b6c <oslib_test_001_002_execute+0x2dc>)
 8005b46:	1ac3      	subs	r3, r0, r3
 8005b48:	4258      	negs	r0, r3
 8005b4a:	4158      	adcs	r0, r3
 8005b4c:	f7fa ff00 	bl	8000950 <_test_assert>
 8005b50:	e6bc      	b.n	80058cc <oslib_test_001_002_execute+0x3c>
 8005b52:	bf00      	nop
 8005b54:	20001a7c 	.word	0x20001a7c
 8005b58:	20000860 	.word	0x20000860
 8005b5c:	0800a3d8 	.word	0x0800a3d8
 8005b60:	0800a3e4 	.word	0x0800a3e4
 8005b64:	0800a3f0 	.word	0x0800a3f0
 8005b68:	0800a3fc 	.word	0x0800a3fc
 8005b6c:	0800a420 	.word	0x0800a420
 8005b70:	0800a4a0 	.word	0x0800a4a0
 8005b74:	0800a444 	.word	0x0800a444
 8005b78:	0800a450 	.word	0x0800a450
 8005b7c:	0800a45c 	.word	0x0800a45c
 8005b80:	0800a474 	.word	0x0800a474
 8005b84:	0800a488 	.word	0x0800a488
	...

08005b90 <oslib_test_001_001_execute>:
  test_set_step(1);
 8005b90:	2301      	movs	r3, #1
static void oslib_test_001_001_execute(void) {
 8005b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005b96:	4fb3      	ldr	r7, [pc, #716]	; (8005e64 <oslib_test_001_001_execute+0x2d4>)
static void oslib_test_001_001_execute(void) {
 8005b98:	b082      	sub	sp, #8
 8005b9a:	2620      	movs	r6, #32
  test_set_step(1);
 8005b9c:	603b      	str	r3, [r7, #0]
 8005b9e:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8005ba2:	4cb1      	ldr	r4, [pc, #708]	; (8005e68 <oslib_test_001_001_execute+0x2d8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8005ba4:	49b1      	ldr	r1, [pc, #708]	; (8005e6c <oslib_test_001_001_execute+0x2dc>)
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8005ba6:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8005ba8:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005bac:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8005bae:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8005bb2:	f1a0 0004 	sub.w	r0, r0, #4
 8005bb6:	fab0 f080 	clz	r0, r0
 8005bba:	0940      	lsrs	r0, r0, #5
 8005bbc:	f7fa fec8 	bl	8000950 <_test_assert>
 8005bc0:	b128      	cbz	r0, 8005bce <oslib_test_001_001_execute+0x3e>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f383 8811 	msr	BASEPRI, r3
}
 8005bc8:	b002      	add	sp, #8
 8005bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bce:	4605      	mov	r5, r0
 8005bd0:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 8005bd8:	f7ff fcea 	bl	80055b0 <chMBReset.constprop.72>
 8005bdc:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8005be0:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8005be4:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8005be6:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8005be8:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8005bec:	f1a0 0004 	sub.w	r0, r0, #4
 8005bf0:	fab0 f080 	clz	r0, r0
 8005bf4:	499e      	ldr	r1, [pc, #632]	; (8005e70 <oslib_test_001_001_execute+0x2e0>)
 8005bf6:	0940      	lsrs	r0, r0, #5
 8005bf8:	f7fa feaa 	bl	8000950 <_test_assert>
 8005bfc:	4680      	mov	r8, r0
 8005bfe:	b120      	cbz	r0, 8005c0a <oslib_test_001_001_execute+0x7a>
 8005c00:	f385 8811 	msr	BASEPRI, r5
}
 8005c04:	b002      	add	sp, #8
 8005c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c0a:	f380 8811 	msr	BASEPRI, r0
 8005c0e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8005c12:	6920      	ldr	r0, [r4, #16]
 8005c14:	4997      	ldr	r1, [pc, #604]	; (8005e74 <oslib_test_001_001_execute+0x2e4>)
 8005c16:	fab0 f080 	clz	r0, r0
 8005c1a:	0940      	lsrs	r0, r0, #5
 8005c1c:	f7fa fe98 	bl	8000950 <_test_assert>
 8005c20:	4605      	mov	r5, r0
 8005c22:	b110      	cbz	r0, 8005c2a <oslib_test_001_001_execute+0x9a>
 8005c24:	f388 8811 	msr	BASEPRI, r8
 8005c28:	e7ce      	b.n	8005bc8 <oslib_test_001_001_execute+0x38>
 8005c2a:	f380 8811 	msr	BASEPRI, r0
 8005c2e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8005c32:	6820      	ldr	r0, [r4, #0]
 8005c34:	68a3      	ldr	r3, [r4, #8]
 8005c36:	4990      	ldr	r1, [pc, #576]	; (8005e78 <oslib_test_001_001_execute+0x2e8>)
 8005c38:	1ac0      	subs	r0, r0, r3
 8005c3a:	fab0 f080 	clz	r0, r0
 8005c3e:	0940      	lsrs	r0, r0, #5
 8005c40:	f7fa fe86 	bl	8000950 <_test_assert>
 8005c44:	4680      	mov	r8, r0
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d1da      	bne.n	8005c00 <oslib_test_001_001_execute+0x70>
 8005c4a:	f380 8811 	msr	BASEPRI, r0
 8005c4e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8005c52:	6820      	ldr	r0, [r4, #0]
 8005c54:	68e3      	ldr	r3, [r4, #12]
 8005c56:	4989      	ldr	r1, [pc, #548]	; (8005e7c <oslib_test_001_001_execute+0x2ec>)
 8005c58:	1ac0      	subs	r0, r0, r3
 8005c5a:	fab0 f080 	clz	r0, r0
 8005c5e:	0940      	lsrs	r0, r0, #5
 8005c60:	f7fa fe76 	bl	8000950 <_test_assert>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d1dd      	bne.n	8005c24 <oslib_test_001_001_execute+0x94>
 8005c68:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8005c6c:	2303      	movs	r3, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8005c6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  test_set_step(3);
 8005c72:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8005c74:	f7ff fcd4 	bl	8005620 <chMBPostTimeout.constprop.70>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8005c78:	1c85      	adds	r5, r0, #2
 8005c7a:	bf14      	ite	ne
 8005c7c:	2000      	movne	r0, #0
 8005c7e:	2001      	moveq	r0, #1
 8005c80:	497f      	ldr	r1, [pc, #508]	; (8005e80 <oslib_test_001_001_execute+0x2f0>)
 8005c82:	f7fa fe65 	bl	8000950 <_test_assert>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d19e      	bne.n	8005bc8 <oslib_test_001_001_execute+0x38>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8005c8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c8e:	f7ff fcff 	bl	8005690 <chMBPostAheadTimeout.constprop.67>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8005c92:	1c82      	adds	r2, r0, #2
 8005c94:	bf14      	ite	ne
 8005c96:	2000      	movne	r0, #0
 8005c98:	2001      	moveq	r0, #1
 8005c9a:	4979      	ldr	r1, [pc, #484]	; (8005e80 <oslib_test_001_001_execute+0x2f0>)
 8005c9c:	f7fa fe58 	bl	8000950 <_test_assert>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d191      	bne.n	8005bc8 <oslib_test_001_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8005ca4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ca8:	a801      	add	r0, sp, #4
 8005caa:	f7ff fd29 	bl	8005700 <chMBFetchTimeout.constprop.64>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8005cae:	1c83      	adds	r3, r0, #2
 8005cb0:	bf14      	ite	ne
 8005cb2:	2000      	movne	r0, #0
 8005cb4:	2001      	moveq	r0, #1
 8005cb6:	4972      	ldr	r1, [pc, #456]	; (8005e80 <oslib_test_001_001_execute+0x2f0>)
 8005cb8:	f7fa fe4a 	bl	8000950 <_test_assert>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d183      	bne.n	8005bc8 <oslib_test_001_001_execute+0x38>
  test_set_step(4);
 8005cc0:	2304      	movs	r3, #4
 8005cc2:	2542      	movs	r5, #66	; 0x42
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005cc4:	4e6f      	ldr	r6, [pc, #444]	; (8005e84 <oslib_test_001_001_execute+0x2f4>)
  mbp->reset = false;
 8005cc6:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8005cc8:	603b      	str	r3, [r7, #0]
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8005cca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f7ff fca6 	bl	8005620 <chMBPostTimeout.constprop.70>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005cd4:	fab0 f080 	clz	r0, r0
 8005cd8:	4631      	mov	r1, r6
 8005cda:	0940      	lsrs	r0, r0, #5
 8005cdc:	f7fa fe38 	bl	8000950 <_test_assert>
 8005ce0:	3501      	adds	r5, #1
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	f47f af70 	bne.w	8005bc8 <oslib_test_001_001_execute+0x38>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8005ce8:	2d45      	cmp	r5, #69	; 0x45
 8005cea:	d1ee      	bne.n	8005cca <oslib_test_001_001_execute+0x13a>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 8005cec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005cf0:	2041      	movs	r0, #65	; 0x41
 8005cf2:	f7ff fccd 	bl	8005690 <chMBPostAheadTimeout.constprop.67>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005cf6:	fab0 f080 	clz	r0, r0
 8005cfa:	4962      	ldr	r1, [pc, #392]	; (8005e84 <oslib_test_001_001_execute+0x2f4>)
 8005cfc:	0940      	lsrs	r0, r0, #5
 8005cfe:	f7fa fe27 	bl	8000950 <_test_assert>
 8005d02:	4605      	mov	r5, r0
 8005d04:	2800      	cmp	r0, #0
 8005d06:	f47f af5f 	bne.w	8005bc8 <oslib_test_001_001_execute+0x38>
  test_set_step(5);
 8005d0a:	2305      	movs	r3, #5
 8005d0c:	2620      	movs	r6, #32
 8005d0e:	603b      	str	r3, [r7, #0]
 8005d10:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8005d14:	6922      	ldr	r2, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8005d16:	e9d4 1300 	ldrd	r1, r3, [r4]
 8005d1a:	1a5b      	subs	r3, r3, r1
 8005d1c:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8005d20:	bf0c      	ite	eq
 8005d22:	2001      	moveq	r0, #1
 8005d24:	2000      	movne	r0, #0
 8005d26:	4958      	ldr	r1, [pc, #352]	; (8005e88 <oslib_test_001_001_execute+0x2f8>)
 8005d28:	f7fa fe12 	bl	8000950 <_test_assert>
 8005d2c:	4680      	mov	r8, r0
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	f47f af66 	bne.w	8005c00 <oslib_test_001_001_execute+0x70>
 8005d34:	f380 8811 	msr	BASEPRI, r0
 8005d38:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8005d3c:	6920      	ldr	r0, [r4, #16]
 8005d3e:	4953      	ldr	r1, [pc, #332]	; (8005e8c <oslib_test_001_001_execute+0x2fc>)
 8005d40:	f1a0 0c04 	sub.w	ip, r0, #4
 8005d44:	f1dc 0000 	rsbs	r0, ip, #0
 8005d48:	eb40 000c 	adc.w	r0, r0, ip
 8005d4c:	f7fa fe00 	bl	8000950 <_test_assert>
 8005d50:	4605      	mov	r5, r0
 8005d52:	2800      	cmp	r0, #0
 8005d54:	f47f af66 	bne.w	8005c24 <oslib_test_001_001_execute+0x94>
 8005d58:	f380 8811 	msr	BASEPRI, r0
 8005d5c:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8005d60:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8005d64:	1ac6      	subs	r6, r0, r3
 8005d66:	4270      	negs	r0, r6
 8005d68:	4170      	adcs	r0, r6
 8005d6a:	4949      	ldr	r1, [pc, #292]	; (8005e90 <oslib_test_001_001_execute+0x300>)
 8005d6c:	f7fa fdf0 	bl	8000950 <_test_assert>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	f47f af45 	bne.w	8005c00 <oslib_test_001_001_execute+0x70>
 8005d76:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 8005d7a:	2306      	movs	r3, #6
 8005d7c:	2504      	movs	r5, #4
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005d7e:	4e41      	ldr	r6, [pc, #260]	; (8005e84 <oslib_test_001_001_execute+0x2f4>)
  test_set_step(6);
 8005d80:	603b      	str	r3, [r7, #0]
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8005d82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005d86:	a801      	add	r0, sp, #4
 8005d88:	f7ff fcba 	bl	8005700 <chMBFetchTimeout.constprop.64>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005d8c:	fab0 f080 	clz	r0, r0
 8005d90:	4631      	mov	r1, r6
 8005d92:	0940      	lsrs	r0, r0, #5
 8005d94:	f7fa fddc 	bl	8000950 <_test_assert>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	f47f af15 	bne.w	8005bc8 <oslib_test_001_001_execute+0x38>
      test_emit_token(msg2);
 8005d9e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8005da2:	f7fa fe75 	bl	8000a90 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8005da6:	3d01      	subs	r5, #1
 8005da8:	d1eb      	bne.n	8005d82 <oslib_test_001_001_execute+0x1f2>
    test_assert_sequence("ABCD", "wrong get sequence");
 8005daa:	493a      	ldr	r1, [pc, #232]	; (8005e94 <oslib_test_001_001_execute+0x304>)
 8005dac:	483a      	ldr	r0, [pc, #232]	; (8005e98 <oslib_test_001_001_execute+0x308>)
 8005dae:	f7fa fee7 	bl	8000b80 <_test_assert_sequence>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	f47f af08 	bne.w	8005bc8 <oslib_test_001_001_execute+0x38>
  test_set_step(7);
 8005db8:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8005dba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005dbe:	2046      	movs	r0, #70	; 0x46
  test_set_step(7);
 8005dc0:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8005dc2:	f7ff fc2d 	bl	8005620 <chMBPostTimeout.constprop.70>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005dc6:	fab0 f080 	clz	r0, r0
 8005dca:	492e      	ldr	r1, [pc, #184]	; (8005e84 <oslib_test_001_001_execute+0x2f4>)
 8005dcc:	0940      	lsrs	r0, r0, #5
 8005dce:	f7fa fdbf 	bl	8000950 <_test_assert>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	f47f aef8 	bne.w	8005bc8 <oslib_test_001_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8005dd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ddc:	a801      	add	r0, sp, #4
 8005dde:	f7ff fc8f 	bl	8005700 <chMBFetchTimeout.constprop.64>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005de2:	fab0 f080 	clz	r0, r0
 8005de6:	4927      	ldr	r1, [pc, #156]	; (8005e84 <oslib_test_001_001_execute+0x2f4>)
 8005de8:	0940      	lsrs	r0, r0, #5
 8005dea:	f7fa fdb1 	bl	8000950 <_test_assert>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	f47f aeea 	bne.w	8005bc8 <oslib_test_001_001_execute+0x38>
  test_set_step(8);
 8005df4:	2308      	movs	r3, #8
 8005df6:	2620      	movs	r6, #32
 8005df8:	603b      	str	r3, [r7, #0]
 8005dfa:	f386 8811 	msr	BASEPRI, r6
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8005dfe:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8005e00:	e9d4 1200 	ldrd	r1, r2, [r4]
 8005e04:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8005e06:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8005e0a:	1f19      	subs	r1, r3, #4
 8005e0c:	4248      	negs	r0, r1
 8005e0e:	4148      	adcs	r0, r1
 8005e10:	4917      	ldr	r1, [pc, #92]	; (8005e70 <oslib_test_001_001_execute+0x2e0>)
 8005e12:	f7fa fd9d 	bl	8000950 <_test_assert>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	f47f aef2 	bne.w	8005c00 <oslib_test_001_001_execute+0x70>
 8005e1c:	f385 8811 	msr	BASEPRI, r5
 8005e20:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8005e24:	6920      	ldr	r0, [r4, #16]
 8005e26:	4913      	ldr	r1, [pc, #76]	; (8005e74 <oslib_test_001_001_execute+0x2e4>)
 8005e28:	fab0 f080 	clz	r0, r0
 8005e2c:	0940      	lsrs	r0, r0, #5
 8005e2e:	f7fa fd8f 	bl	8000950 <_test_assert>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	f47f aee4 	bne.w	8005c00 <oslib_test_001_001_execute+0x70>
 8005e38:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8005e3c:	6820      	ldr	r0, [r4, #0]
 8005e3e:	68a3      	ldr	r3, [r4, #8]
 8005e40:	490d      	ldr	r1, [pc, #52]	; (8005e78 <oslib_test_001_001_execute+0x2e8>)
 8005e42:	1ac2      	subs	r2, r0, r3
 8005e44:	4250      	negs	r0, r2
 8005e46:	4150      	adcs	r0, r2
 8005e48:	f7fa fd82 	bl	8000950 <_test_assert>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	f47f aebb 	bne.w	8005bc8 <oslib_test_001_001_execute+0x38>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8005e52:	6820      	ldr	r0, [r4, #0]
 8005e54:	68e3      	ldr	r3, [r4, #12]
 8005e56:	4909      	ldr	r1, [pc, #36]	; (8005e7c <oslib_test_001_001_execute+0x2ec>)
 8005e58:	1ac3      	subs	r3, r0, r3
 8005e5a:	4258      	negs	r0, r3
 8005e5c:	4158      	adcs	r0, r3
 8005e5e:	f7fa fd77 	bl	8000950 <_test_assert>
 8005e62:	e6b1      	b.n	8005bc8 <oslib_test_001_001_execute+0x38>
 8005e64:	20001a7c 	.word	0x20001a7c
 8005e68:	20000860 	.word	0x20000860
 8005e6c:	0800a3d8 	.word	0x0800a3d8
 8005e70:	0800a3e4 	.word	0x0800a3e4
 8005e74:	0800a3f0 	.word	0x0800a3f0
 8005e78:	0800a3fc 	.word	0x0800a3fc
 8005e7c:	0800a420 	.word	0x0800a420
 8005e80:	0800a3b4 	.word	0x0800a3b4
 8005e84:	0800a4a0 	.word	0x0800a4a0
 8005e88:	0800a444 	.word	0x0800a444
 8005e8c:	0800a450 	.word	0x0800a450
 8005e90:	0800a45c 	.word	0x0800a45c
 8005e94:	0800a474 	.word	0x0800a474
 8005e98:	0800a488 	.word	0x0800a488
 8005e9c:	00000000 	.word	0x00000000

08005ea0 <oslib_test_002_002_execute>:
static void oslib_test_002_002_execute(void) {
 8005ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea4:	4d39      	ldr	r5, [pc, #228]	; (8005f8c <oslib_test_002_002_execute+0xec>)
  test_set_step(1);
 8005ea6:	2301      	movs	r3, #1
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8005ea8:	46a9      	mov	r9, r5
 8005eaa:	2604      	movs	r6, #4
 8005eac:	f04f 0820 	mov.w	r8, #32
 8005eb0:	2700      	movs	r7, #0
 8005eb2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8005f9c <oslib_test_002_002_execute+0xfc>
 8005eb6:	4c36      	ldr	r4, [pc, #216]	; (8005f90 <oslib_test_002_002_execute+0xf0>)
 8005eb8:	f8ca 3000 	str.w	r3, [sl]
 8005ebc:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 8005ec0:	68eb      	ldr	r3, [r5, #12]
  chSemSignalI(&gmp->sem);
 8005ec2:	4648      	mov	r0, r9
  php->next = mp->next;
 8005ec4:	6023      	str	r3, [r4, #0]
  mp->next = php;
 8005ec6:	60ec      	str	r4, [r5, #12]
  chSemSignalI(&gmp->sem);
 8005ec8:	f7fb ff8a 	bl	8001de0 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 8005ecc:	f7ff fad8 	bl	8005480 <chSchRescheduleS>
 8005ed0:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8005ed4:	692b      	ldr	r3, [r5, #16]
  while (n != 0U) {
 8005ed6:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8005ed8:	441c      	add	r4, r3
  while (n != 0U) {
 8005eda:	d1ef      	bne.n	8005ebc <oslib_test_002_002_execute+0x1c>
  test_set_step(2);
 8005edc:	2302      	movs	r3, #2
 8005ede:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8005ee0:	4e2c      	ldr	r6, [pc, #176]	; (8005f94 <oslib_test_002_002_execute+0xf4>)
  test_set_step(2);
 8005ee2:	f8ca 3000 	str.w	r3, [sl]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	f7fd f9ba 	bl	8003260 <chGuardedPoolAllocTimeout.constprop.58>
 8005eec:	3000      	adds	r0, #0
 8005eee:	bf18      	it	ne
 8005ef0:	2001      	movne	r0, #1
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	f7fa fd2c 	bl	8000950 <_test_assert>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d145      	bne.n	8005f88 <oslib_test_002_002_execute+0xe8>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005efc:	3c01      	subs	r4, #1
 8005efe:	d1f2      	bne.n	8005ee6 <oslib_test_002_002_execute+0x46>
  test_set_step(3);
 8005f00:	2303      	movs	r3, #3
 8005f02:	f8ca 3000 	str.w	r3, [sl]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8005f06:	f7fd f9ab 	bl	8003260 <chGuardedPoolAllocTimeout.constprop.58>
 8005f0a:	fab0 f080 	clz	r0, r0
 8005f0e:	4922      	ldr	r1, [pc, #136]	; (8005f98 <oslib_test_002_002_execute+0xf8>)
 8005f10:	0940      	lsrs	r0, r0, #5
 8005f12:	f7fa fd1d 	bl	8000950 <_test_assert>
 8005f16:	bbb8      	cbnz	r0, 8005f88 <oslib_test_002_002_execute+0xe8>
  test_set_step(4);
 8005f18:	2304      	movs	r3, #4
 8005f1a:	f04f 0920 	mov.w	r9, #32
 8005f1e:	4e1c      	ldr	r6, [pc, #112]	; (8005f90 <oslib_test_002_002_execute+0xf0>)
  chSemSignalI(&gmp->sem);
 8005f20:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8005f8c <oslib_test_002_002_execute+0xec>
 8005f24:	f8ca 3000 	str.w	r3, [sl]
 8005f28:	f106 0710 	add.w	r7, r6, #16
      chGuardedPoolFree(&gmp1, &objects[i]);
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	f389 8811 	msr	BASEPRI, r9
  php->next = mp->next;
 8005f32:	68eb      	ldr	r3, [r5, #12]
  chSemSignalI(&gmp->sem);
 8005f34:	4640      	mov	r0, r8
  php->next = mp->next;
 8005f36:	f846 3b04 	str.w	r3, [r6], #4
  mp->next = php;
 8005f3a:	60ea      	str	r2, [r5, #12]
  chSemSignalI(&gmp->sem);
 8005f3c:	f7fb ff50 	bl	8001de0 <chSemSignalI>
  chSchRescheduleS();
 8005f40:	f7ff fa9e 	bl	8005480 <chSchRescheduleS>
 8005f44:	f384 8811 	msr	BASEPRI, r4
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005f48:	42b7      	cmp	r7, r6
 8005f4a:	d1ef      	bne.n	8005f2c <oslib_test_002_002_execute+0x8c>
  test_set_step(5);
 8005f4c:	2305      	movs	r3, #5
 8005f4e:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8005f50:	4d10      	ldr	r5, [pc, #64]	; (8005f94 <oslib_test_002_002_execute+0xf4>)
  test_set_step(5);
 8005f52:	f8ca 3000 	str.w	r3, [sl]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8005f56:	2000      	movs	r0, #0
 8005f58:	f7fd f982 	bl	8003260 <chGuardedPoolAllocTimeout.constprop.58>
 8005f5c:	3000      	adds	r0, #0
 8005f5e:	bf18      	it	ne
 8005f60:	2001      	movne	r0, #1
 8005f62:	4629      	mov	r1, r5
 8005f64:	f7fa fcf4 	bl	8000950 <_test_assert>
 8005f68:	b970      	cbnz	r0, 8005f88 <oslib_test_002_002_execute+0xe8>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005f6a:	3c01      	subs	r4, #1
 8005f6c:	d1f3      	bne.n	8005f56 <oslib_test_002_002_execute+0xb6>
  test_set_step(6);
 8005f6e:	2306      	movs	r3, #6
 8005f70:	f8ca 3000 	str.w	r3, [sl]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8005f74:	f7fd f974 	bl	8003260 <chGuardedPoolAllocTimeout.constprop.58>
}
 8005f78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8005f7c:	fab0 f080 	clz	r0, r0
 8005f80:	4905      	ldr	r1, [pc, #20]	; (8005f98 <oslib_test_002_002_execute+0xf8>)
 8005f82:	0940      	lsrs	r0, r0, #5
 8005f84:	f7fa bce4 	b.w	8000950 <_test_assert>
}
 8005f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f8c:	2000081c 	.word	0x2000081c
 8005f90:	20001338 	.word	0x20001338
 8005f94:	0800a4c8 	.word	0x0800a4c8
 8005f98:	0800a4d4 	.word	0x0800a4d4
 8005f9c:	20001a7c 	.word	0x20001a7c

08005fa0 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	2520      	movs	r5, #32
 8005fa4:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8005fa8:	2100      	movs	r1, #0
 8005faa:	480b      	ldr	r0, [pc, #44]	; (8005fd8 <evt_thread7+0x38>)
 8005fac:	f7fb fe50 	bl	8001c50 <chEvtBroadcastFlagsI>
 8005fb0:	2400      	movs	r4, #0
  chSchRescheduleS();
 8005fb2:	f7ff fa65 	bl	8005480 <chSchRescheduleS>
 8005fb6:	f384 8811 	msr	BASEPRI, r4
  chThdSleepMilliseconds(50);
 8005fba:	2064      	movs	r0, #100	; 0x64
 8005fbc:	f7fd fdd0 	bl	8003b60 <chThdSleep>
 8005fc0:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8005fc4:	4805      	ldr	r0, [pc, #20]	; (8005fdc <evt_thread7+0x3c>)
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	f7fb fe42 	bl	8001c50 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 8005fcc:	f7ff fa58 	bl	8005480 <chSchRescheduleS>
 8005fd0:	f384 8811 	msr	BASEPRI, r4
}
 8005fd4:	bd38      	pop	{r3, r4, r5, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000814 	.word	0x20000814
 8005fdc:	20000818 	.word	0x20000818

08005fe0 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 8005fe0:	b510      	push	{r4, lr}
 8005fe2:	4604      	mov	r4, r0
  chThdSleepMilliseconds(50);
 8005fe4:	2064      	movs	r0, #100	; 0x64
 8005fe6:	f7fd fdbb 	bl	8003b60 <chThdSleep>
 8005fea:	2320      	movs	r3, #32
 8005fec:	f383 8811 	msr	BASEPRI, r3
  chEvtSignalI(tp, events);
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f7fb fe14 	bl	8001c20 <chEvtSignalI>
  chSchRescheduleS();
 8005ff8:	f7ff fa42 	bl	8005480 <chSchRescheduleS>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f383 8811 	msr	BASEPRI, r3
}
 8006002:	bd10      	pop	{r4, pc}
	...

08006010 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 8006010:	b510      	push	{r4, lr}
  chThdSleepMilliseconds(150);
 8006012:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006016:	f7fd fda3 	bl	8003b60 <chThdSleep>
 800601a:	2320      	movs	r3, #32
 800601c:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 8006020:	4c06      	ldr	r4, [pc, #24]	; (800603c <thread4B+0x2c>)
 8006022:	4620      	mov	r0, r4
 8006024:	f7fe f8dc 	bl	80041e0 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 8006028:	4620      	mov	r0, r4
 800602a:	f7fb feb1 	bl	8001d90 <chMtxUnlockS>
  chSchRescheduleS();
 800602e:	f7ff fa27 	bl	8005480 <chSchRescheduleS>
 8006032:	2300      	movs	r3, #0
 8006034:	f383 8811 	msr	BASEPRI, r3
}
 8006038:	bd10      	pop	{r4, pc}
 800603a:	bf00      	nop
 800603c:	20000850 	.word	0x20000850

08006040 <thread2>:
static THD_FUNCTION(thread2, p) {
 8006040:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(50);
 8006042:	2064      	movs	r0, #100	; 0x64
 8006044:	f7fd fd8c 	bl	8003b60 <chThdSleep>
 8006048:	2320      	movs	r3, #32
 800604a:	f383 8811 	msr	BASEPRI, r3
  chSemSignalI(&sem1); /* For coverage reasons */
 800604e:	4804      	ldr	r0, [pc, #16]	; (8006060 <thread2+0x20>)
 8006050:	f7fb fec6 	bl	8001de0 <chSemSignalI>
  chSchRescheduleS();
 8006054:	f7ff fa14 	bl	8005480 <chSchRescheduleS>
 8006058:	2300      	movs	r3, #0
 800605a:	f383 8811 	msr	BASEPRI, r3
}
 800605e:	bd08      	pop	{r3, pc}
 8006060:	20001348 	.word	0x20001348
	...

08006070 <thread4>:
static THD_FUNCTION(thread4, p) {
 8006070:	b508      	push	{r3, lr}
 8006072:	2220      	movs	r2, #32
 8006074:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 8006078:	6883      	ldr	r3, [r0, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	dd05      	ble.n	800608a <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800607e:	f7ff f9ff 	bl	8005480 <chSchRescheduleS>
 8006082:	2300      	movs	r3, #0
 8006084:	f383 8811 	msr	BASEPRI, r3
}
 8006088:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 800608a:	f7fb fea9 	bl	8001de0 <chSemSignalI>
  chSchRescheduleS();
 800608e:	f7ff f9f7 	bl	8005480 <chSchRescheduleS>
 8006092:	2300      	movs	r3, #0
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	bd08      	pop	{r3, pc}
 800609a:	bf00      	nop
 800609c:	0000      	movs	r0, r0
	...

080060a0 <thread1.lto_priv.113>:
static THD_FUNCTION(thread1, p) {
 80060a0:	b510      	push	{r4, lr}
 80060a2:	2320      	movs	r3, #32
 80060a4:	4604      	mov	r4, r0
 80060a6:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 80060aa:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <thread1.lto_priv.113+0x30>)
 80060ac:	6813      	ldr	r3, [r2, #0]
 80060ae:	b12b      	cbz	r3, 80060bc <thread1.lto_priv.113+0x1c>
    *trp = NULL;
 80060b0:	2100      	movs	r1, #0
    (void) chSchReadyI(tp);
 80060b2:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 80060b4:	6259      	str	r1, [r3, #36]	; 0x24
    *trp = NULL;
 80060b6:	6011      	str	r1, [r2, #0]
    (void) chSchReadyI(tp);
 80060b8:	f7fb fcfa 	bl	8001ab0 <chSchReadyI>
  chSchRescheduleS();
 80060bc:	f7ff f9e0 	bl	8005480 <chSchRescheduleS>
 80060c0:	2300      	movs	r3, #0
 80060c2:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 80060c6:	7820      	ldrb	r0, [r4, #0]
}
 80060c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 80060cc:	f7fa bce0 	b.w	8000a90 <test_emit_token>
 80060d0:	20001aa8 	.word	0x20001aa8
	...

080060e0 <chMtxUnlock>:
  thread_t *ctp = currp;
 80060e0:	4b17      	ldr	r3, [pc, #92]	; (8006140 <chMtxUnlock+0x60>)
void chMtxUnlock(mutex_t *mp) {
 80060e2:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 80060e4:	699d      	ldr	r5, [r3, #24]
 80060e6:	2320      	movs	r3, #32
 80060e8:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 80060ec:	6804      	ldr	r4, [r0, #0]
    ctp->mtxlist = mp->next;
 80060ee:	68c3      	ldr	r3, [r0, #12]
    if (chMtxQueueNotEmptyS(mp)) {
 80060f0:	4284      	cmp	r4, r0
    ctp->mtxlist = mp->next;
 80060f2:	63ab      	str	r3, [r5, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 80060f4:	d01d      	beq.n	8006132 <chMtxUnlock+0x52>
      tprio_t newprio = ctp->realprio;
 80060f6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      while (lmp != NULL) {
 80060f8:	b14b      	cbz	r3, 800610e <chMtxUnlock+0x2e>
 80060fa:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <chMtxUnlock+0x28>
 8006100:	6892      	ldr	r2, [r2, #8]
 8006102:	4291      	cmp	r1, r2
 8006104:	bf38      	it	cc
 8006106:	4611      	movcc	r1, r2
        lmp = lmp->next;
 8006108:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f5      	bne.n	80060fa <chMtxUnlock+0x1a>
 800610e:	4603      	mov	r3, r0
  tqp->next             = tp->queue.next;
 8006110:	6822      	ldr	r2, [r4, #0]
      mp->next = tp->mtxlist;
 8006112:	6ba6      	ldr	r6, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
 8006114:	4620      	mov	r0, r4
      ctp->prio = newprio;
 8006116:	60a9      	str	r1, [r5, #8]
 8006118:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800611a:	6053      	str	r3, [r2, #4]
      mp->next = tp->mtxlist;
 800611c:	e9c3 4602 	strd	r4, r6, [r3, #8]
      tp->mtxlist = mp;
 8006120:	63a3      	str	r3, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
 8006122:	f7fb fcc5 	bl	8001ab0 <chSchReadyI>
      chSchRescheduleS();
 8006126:	f7ff f9ab 	bl	8005480 <chSchRescheduleS>
 800612a:	2300      	movs	r3, #0
 800612c:	f383 8811 	msr	BASEPRI, r3
}
 8006130:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 8006132:	2300      	movs	r3, #0
 8006134:	60a3      	str	r3, [r4, #8]
 8006136:	2300      	movs	r3, #0
 8006138:	f383 8811 	msr	BASEPRI, r3
}
 800613c:	bd70      	pop	{r4, r5, r6, pc}
 800613e:	bf00      	nop
 8006140:	200010f0 	.word	0x200010f0
	...

08006150 <chHeapAllocAligned.constprop.75>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8006150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
    heapp = &default_heap;
 8006154:	4d38      	ldr	r5, [pc, #224]	; (8006238 <chHeapAllocAligned.constprop.75+0xe8>)
  if (align < CH_HEAP_ALIGNMENT) {
    align = CH_HEAP_ALIGNMENT;
  }

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8006156:	f101 0807 	add.w	r8, r1, #7
    heapp = &default_heap;
 800615a:	2800      	cmp	r0, #0
 800615c:	bf18      	it	ne
 800615e:	4605      	movne	r5, r0

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8006160:	f105 070c 	add.w	r7, r5, #12
 8006164:	4638      	mov	r0, r7
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8006166:	460e      	mov	r6, r1
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8006168:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  H_LOCK(heapp);
 800616c:	f7fe f8b0 	bl	80042d0 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
 8006170:	f105 0c04 	add.w	ip, r5, #4
  while (H_NEXT(qp) != NULL) {
 8006174:	f8dc 3000 	ldr.w	r3, [ip]

    /* Next free block.*/
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8006178:	f103 000f 	add.w	r0, r3, #15
 800617c:	f020 0007 	bic.w	r0, r0, #7
 8006180:	f1a0 0e08 	sub.w	lr, r0, #8
 8006184:	f103 0a08 	add.w	sl, r3, #8
  while (H_NEXT(qp) != NULL) {
 8006188:	b173      	cbz	r3, 80061a8 <chHeapAllocAligned.constprop.75+0x58>

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 800618a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800618e:	f109 0201 	add.w	r2, r9, #1
 8006192:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006196:	4596      	cmp	lr, r2
 8006198:	d204      	bcs.n	80061a4 <chHeapAllocAligned.constprop.75+0x54>
 800619a:	1a11      	subs	r1, r2, r0
 800619c:	10c9      	asrs	r1, r1, #3
 800619e:	4588      	cmp	r8, r1
 80061a0:	4604      	mov	r4, r0
 80061a2:	d913      	bls.n	80061cc <chHeapAllocAligned.constprop.75+0x7c>
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
          H_NEXT(fp) = H_NEXT(hp);
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
          H_NEXT(qp) = fp;
 80061a4:	469c      	mov	ip, r3
 80061a6:	e7e5      	b.n	8006174 <chHeapAllocAligned.constprop.75+0x24>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 80061a8:	4638      	mov	r0, r7
 80061aa:	f7ff ff99 	bl	80060e0 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 80061ae:	682c      	ldr	r4, [r5, #0]
 80061b0:	b14c      	cbz	r4, 80061c6 <chHeapAllocAligned.constprop.75+0x76>
    ahp = heapp->provider((pages + 1U) * CH_HEAP_ALIGNMENT,
 80061b2:	2208      	movs	r2, #8
 80061b4:	f108 0001 	add.w	r0, r8, #1
 80061b8:	00c0      	lsls	r0, r0, #3
 80061ba:	4611      	mov	r1, r2
 80061bc:	47a0      	blx	r4
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 80061be:	4604      	mov	r4, r0
 80061c0:	b108      	cbz	r0, 80061c6 <chHeapAllocAligned.constprop.75+0x76>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
      H_SIZE(hp) = size;
 80061c2:	e940 5602 	strd	r5, r6, [r0, #-8]
      /*lint -restore*/
    }
  }

  return NULL;
}
 80061c6:	4620      	mov	r0, r4
 80061c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ahp > hp) {
 80061cc:	4573      	cmp	r3, lr
 80061ce:	d319      	bcc.n	8006204 <chHeapAllocAligned.constprop.75+0xb4>
        if (H_PAGES(hp) == pages) {
 80061d0:	45c8      	cmp	r8, r9
 80061d2:	6818      	ldr	r0, [r3, #0]
 80061d4:	d02a      	beq.n	800622c <chHeapAllocAligned.constprop.75+0xdc>
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80061d6:	4654      	mov	r4, sl
          fp = H_BLOCK(hp) + pages;
 80061d8:	f108 0801 	add.w	r8, r8, #1
 80061dc:	eb03 01c8 	add.w	r1, r3, r8, lsl #3
          H_NEXT(fp) = H_NEXT(hp);
 80061e0:	f843 0038 	str.w	r0, [r3, r8, lsl #3]
          H_NEXT(qp) = fp;
 80061e4:	469e      	mov	lr, r3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 80061e6:	f101 0308 	add.w	r3, r1, #8
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	10db      	asrs	r3, r3, #3
 80061ee:	604b      	str	r3, [r1, #4]
          H_NEXT(qp) = fp;
 80061f0:	f8cc 1000 	str.w	r1, [ip]
      H_UNLOCK(heapp);
 80061f4:	4638      	mov	r0, r7
      H_HEAP(hp) = heapp;
 80061f6:	e9ce 5600 	strd	r5, r6, [lr]
      H_UNLOCK(heapp);
 80061fa:	f7ff ff71 	bl	80060e0 <chMtxUnlock>
}
 80061fe:	4620      	mov	r0, r4
 8006200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8006204:	ebae 0a0a 	sub.w	sl, lr, sl
 8006208:	ea4f 02ea 	mov.w	r2, sl, asr #3
        if (bpages > pages) {
 800620c:	4588      	cmp	r8, r1
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 800620e:	605a      	str	r2, [r3, #4]
        if (bpages > pages) {
 8006210:	d2f0      	bcs.n	80061f4 <chHeapAllocAligned.constprop.75+0xa4>
          H_PAGES(fp) = (bpages - pages) - 1U;
 8006212:	ea6f 0208 	mvn.w	r2, r8
          H_NEXT(fp) = H_NEXT(hp);
 8006216:	6818      	ldr	r0, [r3, #0]
          fp = H_BLOCK(ahp) + pages;
 8006218:	f108 0801 	add.w	r8, r8, #1
          H_PAGES(fp) = (bpages - pages) - 1U;
 800621c:	4411      	add	r1, r2
          fp = H_BLOCK(ahp) + pages;
 800621e:	eb0e 02c8 	add.w	r2, lr, r8, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 8006222:	6051      	str	r1, [r2, #4]
          H_NEXT(fp) = H_NEXT(hp);
 8006224:	f84e 0038 	str.w	r0, [lr, r8, lsl #3]
          H_NEXT(hp) = fp;
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	e7e3      	b.n	80061f4 <chHeapAllocAligned.constprop.75+0xa4>
          H_NEXT(qp) = H_NEXT(hp);
 800622c:	f8cc 0000 	str.w	r0, [ip]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8006230:	4654      	mov	r4, sl
          H_NEXT(qp) = H_NEXT(hp);
 8006232:	469e      	mov	lr, r3
 8006234:	e7de      	b.n	80061f4 <chHeapAllocAligned.constprop.75+0xa4>
 8006236:	bf00      	nop
 8006238:	20001288 	.word	0x20001288
 800623c:	00000000 	.word	0x00000000

08006240 <dyn_create_object_heap>:
                                             size_t size) {
 8006240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8006242:	680c      	ldr	r4, [r1, #0]
                                             size_t size) {
 8006244:	460d      	mov	r5, r1
  while (p != (dyn_element_t *)dlp) {
 8006246:	42a1      	cmp	r1, r4
                                             size_t size) {
 8006248:	4606      	mov	r6, r0
 800624a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 800624c:	d103      	bne.n	8006256 <dyn_create_object_heap+0x16>
 800624e:	e00d      	b.n	800626c <dyn_create_object_heap+0x2c>
    p = p->next;
 8006250:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8006252:	42a5      	cmp	r5, r4
 8006254:	d00a      	beq.n	800626c <dyn_create_object_heap+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8006256:	2208      	movs	r2, #8
 8006258:	4631      	mov	r1, r6
 800625a:	18a0      	adds	r0, r4, r2
 800625c:	f003 fda0 	bl	8009da0 <strncmp>
 8006260:	2800      	cmp	r0, #0
 8006262:	d1f5      	bne.n	8006250 <dyn_create_object_heap+0x10>
  if (dep != NULL) {
 8006264:	b114      	cbz	r4, 800626c <dyn_create_object_heap+0x2c>
    return NULL;
 8006266:	4604      	mov	r4, r0
}
 8006268:	4620      	mov	r0, r4
 800626a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 800626c:	4639      	mov	r1, r7
 800626e:	2000      	movs	r0, #0
 8006270:	f7ff ff6e 	bl	8006150 <chHeapAllocAligned.constprop.75>
  if (dep == NULL) {
 8006274:	4604      	mov	r4, r0
 8006276:	b148      	cbz	r0, 800628c <dyn_create_object_heap+0x4c>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8006278:	2208      	movs	r2, #8
 800627a:	4631      	mov	r1, r6
 800627c:	4410      	add	r0, r2
 800627e:	f003 fdd9 	bl	8009e34 <strncpy>
  dep->refs = (ucnt_t)1;
 8006282:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->next = dep;
 800628a:	602c      	str	r4, [r5, #0]
}
 800628c:	4620      	mov	r0, r4
 800628e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006290 <chThdCreateFromHeap>:
                              tfunc_t pf, void *arg) {
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	4616      	mov	r6, r2
 8006296:	461d      	mov	r5, r3
 8006298:	460c      	mov	r4, r1
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 800629a:	f7ff ff59 	bl	8006150 <chHeapAllocAligned.constprop.75>
  if (wsp == NULL) {
 800629e:	b1d8      	cbz	r0, 80062d8 <chThdCreateFromHeap+0x48>
  thread_descriptor_t td = {
 80062a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    (stkalign_t *)((uint8_t *)wsp + size),
 80062a2:	4404      	add	r4, r0
  thread_descriptor_t td = {
 80062a4:	9304      	str	r3, [sp, #16]
 80062a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062a8:	9402      	str	r4, [sp, #8]
 80062aa:	9305      	str	r3, [sp, #20]
 80062ac:	e9cd 6000 	strd	r6, r0, [sp]
 80062b0:	9503      	str	r5, [sp, #12]
 80062b2:	2320      	movs	r3, #32
 80062b4:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(&td);
 80062b8:	4668      	mov	r0, sp
 80062ba:	f7fb fb81 	bl	80019c0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 80062be:	2301      	movs	r3, #1
  chSchWakeupS(tp, MSG_OK);
 80062c0:	2100      	movs	r1, #0
  tp->flags = CH_FLAG_MODE_HEAP;
 80062c2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp = chThdCreateSuspendedI(&td);
 80062c6:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 80062c8:	f7fc fe12 	bl	8002ef0 <chSchWakeupS>
 80062cc:	2300      	movs	r3, #0
 80062ce:	f383 8811 	msr	BASEPRI, r3
}
 80062d2:	4620      	mov	r0, r4
 80062d4:	b006      	add	sp, #24
 80062d6:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 80062d8:	4604      	mov	r4, r0
 80062da:	e7fa      	b.n	80062d2 <chThdCreateFromHeap+0x42>
 80062dc:	0000      	movs	r0, r0
	...

080062e0 <chFactoryRegisterObject.constprop.55>:
 * @retval NULL         if the object to be registered cannot be allocated or
 *                      a registered object with the same name exists.
 *
 * @api
 */
registered_object_t *chFactoryRegisterObject(const char *name,
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4605      	mov	r5, r0
                                             void *objp) {
  registered_object_t *rop;

  F_LOCK();
 80062e4:	4807      	ldr	r0, [pc, #28]	; (8006304 <chFactoryRegisterObject.constprop.55+0x24>)
 80062e6:	f7fd fff3 	bl	80042d0 <chMtxLock>

  rop = (registered_object_t *)dyn_create_object_pool(name,
 80062ea:	4a07      	ldr	r2, [pc, #28]	; (8006308 <chFactoryRegisterObject.constprop.55+0x28>)
 80062ec:	4807      	ldr	r0, [pc, #28]	; (800630c <chFactoryRegisterObject.constprop.55+0x2c>)
 80062ee:	1f11      	subs	r1, r2, #4
 80062f0:	f7fc fd8e 	bl	8002e10 <dyn_create_object_pool>
                                                      &ch_factory.obj_list,
                                                      &ch_factory.obj_pool);
  if (rop != NULL) {
 80062f4:	4604      	mov	r4, r0
 80062f6:	b100      	cbz	r0, 80062fa <chFactoryRegisterObject.constprop.55+0x1a>
    /* Initializing registered object data.*/
    rop->objp = objp;
 80062f8:	6105      	str	r5, [r0, #16]
  }

  F_UNLOCK();
 80062fa:	4802      	ldr	r0, [pc, #8]	; (8006304 <chFactoryRegisterObject.constprop.55+0x24>)
 80062fc:	f7ff fef0 	bl	80060e0 <chMtxUnlock>

  return rop;
}
 8006300:	4620      	mov	r0, r4
 8006302:	bd38      	pop	{r3, r4, r5, pc}
 8006304:	20001164 	.word	0x20001164
 8006308:	20001178 	.word	0x20001178
 800630c:	0800a004 	.word	0x0800a004

08006310 <chFactoryFindObject.constprop.54>:
 * @retval NULL         if a registered object with the specified name
 *                      does not exist.
 *
 * @api
 */
registered_object_t *chFactoryFindObject(const char *name) {
 8006310:	b538      	push	{r3, r4, r5, lr}
  registered_object_t *rop;

  F_LOCK();
 8006312:	4c07      	ldr	r4, [pc, #28]	; (8006330 <chFactoryFindObject.constprop.54+0x20>)
 8006314:	4620      	mov	r0, r4
 8006316:	f7fd ffdb 	bl	80042d0 <chMtxLock>

  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
 800631a:	f104 0110 	add.w	r1, r4, #16
 800631e:	4805      	ldr	r0, [pc, #20]	; (8006334 <chFactoryFindObject.constprop.54+0x24>)
 8006320:	f7fc fd56 	bl	8002dd0 <dyn_find_object>
 8006324:	4605      	mov	r5, r0

  F_UNLOCK();
 8006326:	4620      	mov	r0, r4
 8006328:	f7ff feda 	bl	80060e0 <chMtxUnlock>

  return rop;
}
 800632c:	4628      	mov	r0, r5
 800632e:	bd38      	pop	{r3, r4, r5, pc}
 8006330:	20001164 	.word	0x20001164
 8006334:	0800a004 	.word	0x0800a004
	...

08006340 <chFactoryCreateBuffer.constprop.53>:
 * @retval NULL         if the dynamic buffer object cannot be allocated or
 *                      a dynamic buffer object with the same name exists.
 *
 * @api
 */
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
 8006340:	b510      	push	{r4, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 8006342:	480a      	ldr	r0, [pc, #40]	; (800636c <chFactoryCreateBuffer.constprop.53+0x2c>)
 8006344:	f7fd ffc4 	bl	80042d0 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 8006348:	2280      	movs	r2, #128	; 0x80
 800634a:	4909      	ldr	r1, [pc, #36]	; (8006370 <chFactoryCreateBuffer.constprop.53+0x30>)
 800634c:	4809      	ldr	r0, [pc, #36]	; (8006374 <chFactoryCreateBuffer.constprop.53+0x34>)
 800634e:	f7ff ff77 	bl	8006240 <dyn_create_object_heap>
                                               &ch_factory.buf_list,
                                               size);
  if (dbp != NULL) {
 8006352:	4604      	mov	r4, r0
 8006354:	b120      	cbz	r0, 8006360 <chFactoryCreateBuffer.constprop.53+0x20>
    /* Initializing buffer object data.*/
    memset((void *)dbp->buffer, 0, size);
 8006356:	2280      	movs	r2, #128	; 0x80
 8006358:	2100      	movs	r1, #0
 800635a:	3010      	adds	r0, #16
 800635c:	f003 fc62 	bl	8009c24 <memset>
  }

  F_UNLOCK();
 8006360:	4802      	ldr	r0, [pc, #8]	; (800636c <chFactoryCreateBuffer.constprop.53+0x2c>)
 8006362:	f7ff febd 	bl	80060e0 <chMtxUnlock>

  return dbp;
}
 8006366:	4620      	mov	r0, r4
 8006368:	bd10      	pop	{r4, pc}
 800636a:	bf00      	nop
 800636c:	20001164 	.word	0x20001164
 8006370:	20001188 	.word	0x20001188
 8006374:	08009fe4 	.word	0x08009fe4
	...

08006380 <chFactoryFindBuffer.constprop.52>:
 * @retval NULL         if a dynamic buffer object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 8006380:	b538      	push	{r3, r4, r5, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 8006382:	4c07      	ldr	r4, [pc, #28]	; (80063a0 <chFactoryFindBuffer.constprop.52+0x20>)
 8006384:	4620      	mov	r0, r4
 8006386:	f7fd ffa3 	bl	80042d0 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
 800638a:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800638e:	4805      	ldr	r0, [pc, #20]	; (80063a4 <chFactoryFindBuffer.constprop.52+0x24>)
 8006390:	f7fc fd1e 	bl	8002dd0 <dyn_find_object>
 8006394:	4605      	mov	r5, r0

  F_UNLOCK();
 8006396:	4620      	mov	r0, r4
 8006398:	f7ff fea2 	bl	80060e0 <chMtxUnlock>

  return dbp;
}
 800639c:	4628      	mov	r0, r5
 800639e:	bd38      	pop	{r3, r4, r5, pc}
 80063a0:	20001164 	.word	0x20001164
 80063a4:	08009fe4 	.word	0x08009fe4
	...

080063b0 <chFactoryCreateSemaphore.constprop.51>:
 * @retval NULL         if the dynamic semaphore object cannot be allocated or
 *                      a dynamic semaphore with the same name exists.
 *
 * @api
 */
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 80063b0:	b510      	push	{r4, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 80063b2:	480a      	ldr	r0, [pc, #40]	; (80063dc <chFactoryCreateSemaphore.constprop.51+0x2c>)
 80063b4:	f7fd ff8c 	bl	80042d0 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
 80063b8:	4a09      	ldr	r2, [pc, #36]	; (80063e0 <chFactoryCreateSemaphore.constprop.51+0x30>)
 80063ba:	480a      	ldr	r0, [pc, #40]	; (80063e4 <chFactoryCreateSemaphore.constprop.51+0x34>)
 80063bc:	1f11      	subs	r1, r2, #4
 80063be:	f7fc fd27 	bl	8002e10 <dyn_create_object_pool>
                                                  &ch_factory.sem_list,
                                                  &ch_factory.sem_pool);
  if (dsp != NULL) {
 80063c2:	4604      	mov	r4, r0
 80063c4:	b128      	cbz	r0, 80063d2 <chFactoryCreateSemaphore.constprop.51+0x22>
  sp->cnt = n;
 80063c6:	2200      	movs	r2, #0
    /* Initializing semaphore object dataa.*/
    chSemObjectInit(&dsp->sem, n);
 80063c8:	f100 0310 	add.w	r3, r0, #16
  tqp->prev = (thread_t *)tqp;
 80063cc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063d0:	6182      	str	r2, [r0, #24]
  }

  F_UNLOCK();
 80063d2:	4802      	ldr	r0, [pc, #8]	; (80063dc <chFactoryCreateSemaphore.constprop.51+0x2c>)
 80063d4:	f7ff fe84 	bl	80060e0 <chMtxUnlock>

  return dsp;
}
 80063d8:	4620      	mov	r0, r4
 80063da:	bd10      	pop	{r4, pc}
 80063dc:	20001164 	.word	0x20001164
 80063e0:	20001190 	.word	0x20001190
 80063e4:	08009ffc 	.word	0x08009ffc
	...

080063f0 <chFactoryFindSemaphore.constprop.50>:
 * @retval NULL         if a dynamic semaphore object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 80063f0:	b538      	push	{r3, r4, r5, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 80063f2:	4c07      	ldr	r4, [pc, #28]	; (8006410 <chFactoryFindSemaphore.constprop.50+0x20>)
 80063f4:	4620      	mov	r0, r4
 80063f6:	f7fd ff6b 	bl	80042d0 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
 80063fa:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80063fe:	4805      	ldr	r0, [pc, #20]	; (8006414 <chFactoryFindSemaphore.constprop.50+0x24>)
 8006400:	f7fc fce6 	bl	8002dd0 <dyn_find_object>
 8006404:	4605      	mov	r5, r0

  F_UNLOCK();
 8006406:	4620      	mov	r0, r4
 8006408:	f7ff fe6a 	bl	80060e0 <chMtxUnlock>

  return dsp;
}
 800640c:	4628      	mov	r0, r5
 800640e:	bd38      	pop	{r3, r4, r5, pc}
 8006410:	20001164 	.word	0x20001164
 8006414:	08009ffc 	.word	0x08009ffc
	...

08006420 <chFactoryCreateMailbox.constprop.49>:
 * @retval NULL         if the dynamic mailbox object cannot be allocated or
 *                      a dynamic mailbox object with the same name exists.
 *
 * @api
 */
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 8006420:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 8006422:	4811      	ldr	r0, [pc, #68]	; (8006468 <chFactoryCreateMailbox.constprop.49+0x48>)
 8006424:	f7fd ff54 	bl	80042d0 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 8006428:	2278      	movs	r2, #120	; 0x78
 800642a:	4910      	ldr	r1, [pc, #64]	; (800646c <chFactoryCreateMailbox.constprop.49+0x4c>)
 800642c:	4810      	ldr	r0, [pc, #64]	; (8006470 <chFactoryCreateMailbox.constprop.49+0x50>)
 800642e:	f7ff ff07 	bl	8006240 <dyn_create_object_heap>
                                                &ch_factory.mbx_list,
                                                sizeof (dyn_mailbox_t) +
                                                (n * sizeof (msg_t)));
  if (dmp != NULL) {
 8006432:	4604      	mov	r4, r0
 8006434:	b198      	cbz	r0, 800645e <chFactoryCreateMailbox.constprop.49+0x3e>
  mbp->cnt    = (size_t)0;
 8006436:	2000      	movs	r0, #0
    /* Initializing mailbox object data.*/
    chMBObjectInit(&dmp->mbx, dmp->msgbuf, n);
 8006438:	f104 0338 	add.w	r3, r4, #56	; 0x38
  chThdQueueObjectInit(&mbp->qw);
 800643c:	f104 0128 	add.w	r1, r4, #40	; 0x28
  chThdQueueObjectInit(&mbp->qr);
 8006440:	f104 0230 	add.w	r2, r4, #48	; 0x30
  mbp->wrptr  = buf;
 8006444:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8006448:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
 800644c:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  mbp->top    = &buf[n];
 8006450:	f104 0578 	add.w	r5, r4, #120	; 0x78
  mbp->cnt    = (size_t)0;
 8006454:	6220      	str	r0, [r4, #32]
  mbp->reset  = false;
 8006456:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  mbp->buffer = buf;
 800645a:	6123      	str	r3, [r4, #16]
  mbp->top    = &buf[n];
 800645c:	6165      	str	r5, [r4, #20]
  }

  F_UNLOCK();
 800645e:	4802      	ldr	r0, [pc, #8]	; (8006468 <chFactoryCreateMailbox.constprop.49+0x48>)
 8006460:	f7ff fe3e 	bl	80060e0 <chMtxUnlock>

  return dmp;
}
 8006464:	4620      	mov	r0, r4
 8006466:	bd38      	pop	{r3, r4, r5, pc}
 8006468:	20001164 	.word	0x20001164
 800646c:	200011a0 	.word	0x200011a0
 8006470:	08009fec 	.word	0x08009fec
	...

08006480 <chFactoryFindMailbox.constprop.48>:
 * @retval NULL         if a dynamic mailbox object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 8006480:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 8006482:	4c07      	ldr	r4, [pc, #28]	; (80064a0 <chFactoryFindMailbox.constprop.48+0x20>)
 8006484:	4620      	mov	r0, r4
 8006486:	f7fd ff23 	bl	80042d0 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
 800648a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800648e:	4805      	ldr	r0, [pc, #20]	; (80064a4 <chFactoryFindMailbox.constprop.48+0x24>)
 8006490:	f7fc fc9e 	bl	8002dd0 <dyn_find_object>
 8006494:	4605      	mov	r5, r0

  F_UNLOCK();
 8006496:	4620      	mov	r0, r4
 8006498:	f7ff fe22 	bl	80060e0 <chMtxUnlock>

  return dmp;
}
 800649c:	4628      	mov	r0, r5
 800649e:	bd38      	pop	{r3, r4, r5, pc}
 80064a0:	20001164 	.word	0x20001164
 80064a4:	08009fec 	.word	0x08009fec
	...

080064b0 <chFactoryCreateObjectsFIFO.constprop.47>:
 *                      allocated or a dynamic "objects FIFO" object with
 *                      the same name exists.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 80064b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                                               size_t objsize,
                                               size_t objn,
                                               unsigned objalign) {
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 80064b4:	4823      	ldr	r0, [pc, #140]	; (8006544 <chFactoryCreateObjectsFIFO.constprop.47+0x94>)
 80064b6:	f7fd ff0b 	bl	80042d0 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 80064ba:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80064be:	4922      	ldr	r1, [pc, #136]	; (8006548 <chFactoryCreateObjectsFIFO.constprop.47+0x98>)
 80064c0:	4822      	ldr	r0, [pc, #136]	; (800654c <chFactoryCreateObjectsFIFO.constprop.47+0x9c>)
 80064c2:	f7ff febd 	bl	8006240 <dyn_create_object_heap>
                                                      &ch_factory.fifo_list,
                                                      sizeof (dyn_objects_fifo_t) +
                                                      (objn * sizeof (msg_t)) +
                                                      (objn * objsize));
  if (dofp != NULL) {
 80064c6:	4604      	mov	r4, r0
 80064c8:	b3a8      	cbz	r0, 8006536 <chFactoryCreateObjectsFIFO.constprop.47+0x86>
  mp->next = NULL;
 80064ca:	2300      	movs	r3, #0
  mp->object_size = size;
 80064cc:	2210      	movs	r2, #16
  mp->align = align;
 80064ce:	2104      	movs	r1, #4
    /* Initializing mailbox object data.*/
    chFifoObjectInit(&dofp->fifo, objsize, objn, objalign,
                     (void *)&dofp->msgbuf[objn], dofp->msgbuf);
 80064d0:	f100 0a94 	add.w	sl, r0, #148	; 0x94
 80064d4:	4698      	mov	r8, r3
 80064d6:	4693      	mov	fp, r2
 80064d8:	4655      	mov	r5, sl
 80064da:	2720      	movs	r7, #32
 */
static inline void chFifoObjectInit(objects_fifo_t *ofp, size_t objsize,
                                    size_t objn, unsigned objalign,
                                    void *objbuf, msg_t *msgbuf) {

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 80064dc:	1886      	adds	r6, r0, r2
 80064de:	e9c0 2108 	strd	r2, r1, [r0, #32]
 80064e2:	e9c0 6604 	strd	r6, r6, [r0, #16]
  mp->next = NULL;
 80064e6:	61c3      	str	r3, [r0, #28]
  mp->provider = provider;
 80064e8:	6283      	str	r3, [r0, #40]	; 0x28
 80064ea:	6183      	str	r3, [r0, #24]
 80064ec:	f100 0954 	add.w	r9, r0, #84	; 0x54
 80064f0:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 80064f4:	69e3      	ldr	r3, [r4, #28]
  chSemSignalI(&gmp->sem);
 80064f6:	4630      	mov	r0, r6
  php->next = mp->next;
 80064f8:	602b      	str	r3, [r5, #0]
  mp->next = php;
 80064fa:	61e5      	str	r5, [r4, #28]
  chSemSignalI(&gmp->sem);
 80064fc:	f7fb fc70 	bl	8001de0 <chSemSignalI>
  chSchRescheduleS();
 8006500:	f7fe ffbe 	bl	8005480 <chSchRescheduleS>
 8006504:	f388 8811 	msr	BASEPRI, r8
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8006508:	6a23      	ldr	r3, [r4, #32]
  while (n != 0U) {
 800650a:	f1bb 0b01 	subs.w	fp, fp, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800650e:	441d      	add	r5, r3
  while (n != 0U) {
 8006510:	d1ee      	bne.n	80064f0 <chFactoryCreateObjectsFIFO.constprop.47+0x40>
  chThdQueueObjectInit(&mbp->qw);
 8006512:	f104 0244 	add.w	r2, r4, #68	; 0x44
  chThdQueueObjectInit(&mbp->qr);
 8006516:	f104 034c 	add.w	r3, r4, #76	; 0x4c
  mbp->wrptr  = buf;
 800651a:	e9c4 990d 	strd	r9, r9, [r4, #52]	; 0x34
 800651e:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
 8006522:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  mbp->buffer = buf;
 8006526:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
  mbp->top    = &buf[n];
 800652a:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 800652e:	f8c4 b03c 	str.w	fp, [r4, #60]	; 0x3c
  mbp->reset  = false;
 8006532:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
  }

  F_UNLOCK();
 8006536:	4803      	ldr	r0, [pc, #12]	; (8006544 <chFactoryCreateObjectsFIFO.constprop.47+0x94>)
 8006538:	f7ff fdd2 	bl	80060e0 <chMtxUnlock>

  return dofp;
}
 800653c:	4620      	mov	r0, r4
 800653e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006542:	bf00      	nop
 8006544:	20001164 	.word	0x20001164
 8006548:	200011a4 	.word	0x200011a4
 800654c:	08009ff4 	.word	0x08009ff4

08006550 <chFactoryFindObjectsFIFO.constprop.46>:
 * @retval NULL         if a dynamic "objects FIFO" object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 8006550:	b538      	push	{r3, r4, r5, lr}
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 8006552:	4c07      	ldr	r4, [pc, #28]	; (8006570 <chFactoryFindObjectsFIFO.constprop.46+0x20>)
 8006554:	4620      	mov	r0, r4
 8006556:	f7fd febb 	bl	80042d0 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
 800655a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800655e:	4805      	ldr	r0, [pc, #20]	; (8006574 <chFactoryFindObjectsFIFO.constprop.46+0x24>)
 8006560:	f7fc fc36 	bl	8002dd0 <dyn_find_object>
 8006564:	4605      	mov	r5, r0

  F_UNLOCK();
 8006566:	4620      	mov	r0, r4
 8006568:	f7ff fdba 	bl	80060e0 <chMtxUnlock>

  return dofp;
}
 800656c:	4628      	mov	r0, r5
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	20001164 	.word	0x20001164
 8006574:	08009ff4 	.word	0x08009ff4
	...

08006580 <rt_test_010_011_execute>:
static void rt_test_010_011_execute(void) {
 8006580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8006584:	2301      	movs	r3, #1
 8006586:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800660c <rt_test_010_011_execute+0x8c>
    n = 0;
 800658a:	2500      	movs	r5, #0
  test_set_step(1);
 800658c:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 8006590:	f7fd fb86 	bl	8003ca0 <test_wait_tick>
  return (systime_t)STM32_ST_TIM->CNT;
 8006594:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8006598:	4607      	mov	r7, r0
 800659a:	f500 66fa 	add.w	r6, r0, #2000	; 0x7d0
 800659e:	b2b6      	uxth	r6, r6
      chMtxLock(&mtx1);
 80065a0:	4c17      	ldr	r4, [pc, #92]	; (8006600 <rt_test_010_011_execute+0x80>)
 80065a2:	1a36      	subs	r6, r6, r0
 80065a4:	4620      	mov	r0, r4
 80065a6:	f7fd fe93 	bl	80042d0 <chMtxLock>
      chMtxUnlock(&mtx1);
 80065aa:	4620      	mov	r0, r4
 80065ac:	f7ff fd98 	bl	80060e0 <chMtxUnlock>
      chMtxLock(&mtx1);
 80065b0:	4620      	mov	r0, r4
 80065b2:	f7fd fe8d 	bl	80042d0 <chMtxLock>
      chMtxUnlock(&mtx1);
 80065b6:	4620      	mov	r0, r4
 80065b8:	f7ff fd92 	bl	80060e0 <chMtxUnlock>
      chMtxLock(&mtx1);
 80065bc:	4620      	mov	r0, r4
 80065be:	f7fd fe87 	bl	80042d0 <chMtxLock>
      chMtxUnlock(&mtx1);
 80065c2:	4620      	mov	r0, r4
 80065c4:	f7ff fd8c 	bl	80060e0 <chMtxUnlock>
      chMtxLock(&mtx1);
 80065c8:	4620      	mov	r0, r4
 80065ca:	f7fd fe81 	bl	80042d0 <chMtxLock>
      chMtxUnlock(&mtx1);
 80065ce:	4620      	mov	r0, r4
 80065d0:	f7ff fd86 	bl	80060e0 <chMtxUnlock>
 80065d4:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
      n++;
 80065d8:	3501      	adds	r5, #1
  return (bool)((time - start) < (end - start));
 80065da:	b29b      	uxth	r3, r3
 80065dc:	1bdb      	subs	r3, r3, r7
    } while (chVTIsSystemTimeWithinX(start, end));
 80065de:	42b3      	cmp	r3, r6
 80065e0:	dbe0      	blt.n	80065a4 <rt_test_010_011_execute+0x24>
  test_set_step(2);
 80065e2:	2302      	movs	r3, #2
    test_print("--- Score : ");
 80065e4:	4807      	ldr	r0, [pc, #28]	; (8006604 <rt_test_010_011_execute+0x84>)
  test_set_step(2);
 80065e6:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 80065ea:	f7fa fab1 	bl	8000b50 <test_print>
    test_printn(n * 4);
 80065ee:	00a8      	lsls	r0, r5, #2
 80065f0:	f7fa fa3e 	bl	8000a70 <test_printn>
}
 80065f4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" lock+unlock/S");
 80065f8:	4803      	ldr	r0, [pc, #12]	; (8006608 <rt_test_010_011_execute+0x88>)
 80065fa:	f7fa ba89 	b.w	8000b10 <test_println>
 80065fe:	bf00      	nop
 8006600:	20001328 	.word	0x20001328
 8006604:	0800b7e8 	.word	0x0800b7e8
 8006608:	0800b834 	.word	0x0800b834
 800660c:	20001a7c 	.word	0x20001a7c

08006610 <thread8>:
static THD_FUNCTION(thread8, p) {
 8006610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006612:	4607      	mov	r7, r0
  chMtxLock(&m2);
 8006614:	481c      	ldr	r0, [pc, #112]	; (8006688 <thread8+0x78>)
 8006616:	f7fd fe5b 	bl	80042d0 <chMtxLock>
  chMtxLock(&m1);
 800661a:	481c      	ldr	r0, [pc, #112]	; (800668c <thread8+0x7c>)
 800661c:	f7fd fe58 	bl	80042d0 <chMtxLock>
 8006620:	2320      	movs	r3, #32
 8006622:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8006626:	4d1a      	ldr	r5, [pc, #104]	; (8006690 <thread8+0x80>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->mtxlist;
 8006628:	69ab      	ldr	r3, [r5, #24]
 800662a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
  chDbgAssert(currp->mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 800662c:	4630      	mov	r0, r6
 800662e:	f7fb fbaf 	bl	8001d90 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 8006632:	4a18      	ldr	r2, [pc, #96]	; (8006694 <thread8+0x84>)
 8006634:	69ac      	ldr	r4, [r5, #24]
  thread_t *cp = (thread_t *)tqp;
 8006636:	4610      	mov	r0, r2
 8006638:	4613      	mov	r3, r2
 800663a:	6262      	str	r2, [r4, #36]	; 0x24
 800663c:	e003      	b.n	8006646 <thread8+0x36>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800663e:	6899      	ldr	r1, [r3, #8]
 8006640:	68a2      	ldr	r2, [r4, #8]
 8006642:	4291      	cmp	r1, r2
 8006644:	d302      	bcc.n	800664c <thread8+0x3c>
    cp = cp->queue.next;
 8006646:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8006648:	4283      	cmp	r3, r0
 800664a:	d1f8      	bne.n	800663e <thread8+0x2e>
  tp->queue.prev             = cp->queue.prev;
 800664c:	685a      	ldr	r2, [r3, #4]
    chSchGoSleepS(newstate);
 800664e:	2007      	movs	r0, #7
 8006650:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8006654:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8006656:	605c      	str	r4, [r3, #4]
 8006658:	f7fc fd2a 	bl	80030b0 <chSchGoSleepS>
  return currp->u.rdymsg;
 800665c:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	3301      	adds	r3, #1
 8006662:	d002      	beq.n	800666a <thread8+0x5a>
    chMtxLockS(mp);
 8006664:	4630      	mov	r0, r6
 8006666:	f7fd fdbb 	bl	80041e0 <chMtxLockS>
 800666a:	2300      	movs	r3, #0
 800666c:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8006670:	7838      	ldrb	r0, [r7, #0]
 8006672:	f7fa fa0d 	bl	8000a90 <test_emit_token>
  chMtxUnlock(&m1);
 8006676:	4805      	ldr	r0, [pc, #20]	; (800668c <thread8+0x7c>)
 8006678:	f7ff fd32 	bl	80060e0 <chMtxUnlock>
}
 800667c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m2);
 8006680:	4801      	ldr	r0, [pc, #4]	; (8006688 <thread8+0x78>)
 8006682:	f7ff bd2d 	b.w	80060e0 <chMtxUnlock>
 8006686:	bf00      	nop
 8006688:	20000850 	.word	0x20000850
 800668c:	20000840 	.word	0x20000840
 8006690:	200010f0 	.word	0x200010f0
 8006694:	2000080c 	.word	0x2000080c
	...

080066a0 <thread6>:
static THD_FUNCTION(thread6, p) {
 80066a0:	b570      	push	{r4, r5, r6, lr}
 80066a2:	4606      	mov	r6, r0
  chMtxLock(&m1);
 80066a4:	4816      	ldr	r0, [pc, #88]	; (8006700 <thread6+0x60>)
 80066a6:	f7fd fe13 	bl	80042d0 <chMtxLock>
 80066aa:	2320      	movs	r3, #32
 80066ac:	f383 8811 	msr	BASEPRI, r3
  thread_t *ctp = currp;
 80066b0:	4b14      	ldr	r3, [pc, #80]	; (8006704 <thread6+0x64>)
 80066b2:	699c      	ldr	r4, [r3, #24]
 80066b4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chMtxUnlockS(mp);
 80066b6:	4628      	mov	r0, r5
 80066b8:	f7fb fb6a 	bl	8001d90 <chMtxUnlockS>
  ctp->u.wtobjp = cp;
 80066bc:	4a12      	ldr	r2, [pc, #72]	; (8006708 <thread6+0x68>)
  thread_t *cp = (thread_t *)tqp;
 80066be:	4610      	mov	r0, r2
 80066c0:	4613      	mov	r3, r2
 80066c2:	6262      	str	r2, [r4, #36]	; 0x24
 80066c4:	e003      	b.n	80066ce <thread6+0x2e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80066c6:	6899      	ldr	r1, [r3, #8]
 80066c8:	68a2      	ldr	r2, [r4, #8]
 80066ca:	4291      	cmp	r1, r2
 80066cc:	d302      	bcc.n	80066d4 <thread6+0x34>
    cp = cp->queue.next;
 80066ce:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80066d0:	4283      	cmp	r3, r0
 80066d2:	d1f8      	bne.n	80066c6 <thread6+0x26>
  tp->queue.prev             = cp->queue.prev;
 80066d4:	685a      	ldr	r2, [r3, #4]
  chSchGoSleepS(CH_STATE_WTCOND);
 80066d6:	2007      	movs	r0, #7
 80066d8:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80066dc:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80066de:	605c      	str	r4, [r3, #4]
 80066e0:	f7fc fce6 	bl	80030b0 <chSchGoSleepS>
  chMtxLockS(mp);
 80066e4:	4628      	mov	r0, r5
 80066e6:	f7fd fd7b 	bl	80041e0 <chMtxLockS>
 80066ea:	2300      	movs	r3, #0
 80066ec:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 80066f0:	7830      	ldrb	r0, [r6, #0]
 80066f2:	f7fa f9cd 	bl	8000a90 <test_emit_token>
}
 80066f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chMtxUnlock(&m1);
 80066fa:	4801      	ldr	r0, [pc, #4]	; (8006700 <thread6+0x60>)
 80066fc:	f7ff bcf0 	b.w	80060e0 <chMtxUnlock>
 8006700:	20000840 	.word	0x20000840
 8006704:	200010f0 	.word	0x200010f0
 8006708:	2000080c 	.word	0x2000080c
 800670c:	00000000 	.word	0x00000000

08006710 <thread9>:
static THD_FUNCTION(thread9, p) {
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	4605      	mov	r5, r0
  chMtxLock(&m2);
 8006714:	4c05      	ldr	r4, [pc, #20]	; (800672c <thread9+0x1c>)
 8006716:	4620      	mov	r0, r4
 8006718:	f7fd fdda 	bl	80042d0 <chMtxLock>
  test_emit_token(*(char *)p);
 800671c:	7828      	ldrb	r0, [r5, #0]
 800671e:	f7fa f9b7 	bl	8000a90 <test_emit_token>
  chMtxUnlock(&m2);
 8006722:	4620      	mov	r0, r4
}
 8006724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m2);
 8006728:	f7ff bcda 	b.w	80060e0 <chMtxUnlock>
 800672c:	20000850 	.word	0x20000850

08006730 <rt_test_006_005_execute>:
  test_set_step(2);
 8006730:	2202      	movs	r2, #2
static void rt_test_006_005_execute(void) {
 8006732:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006736:	4d4d      	ldr	r5, [pc, #308]	; (800686c <rt_test_006_005_execute+0x13c>)
  test_set_step(2);
 8006738:	4c4d      	ldr	r4, [pc, #308]	; (8006870 <rt_test_006_005_execute+0x140>)
  return chThdGetSelfX()->prio;
 800673a:	69ab      	ldr	r3, [r5, #24]
 800673c:	6022      	str	r2, [r4, #0]
 800673e:	689e      	ldr	r6, [r3, #8]
    b = chMtxTryLock(&m1);
 8006740:	f7f9 fee6 	bl	8000510 <chMtxTryLock.constprop.95>
    test_assert(b, "already locked");
 8006744:	494b      	ldr	r1, [pc, #300]	; (8006874 <rt_test_006_005_execute+0x144>)
 8006746:	f7fa f903 	bl	8000950 <_test_assert>
 800674a:	b108      	cbz	r0, 8006750 <rt_test_006_005_execute+0x20>
}
 800674c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(3);
 8006750:	2303      	movs	r3, #3
 8006752:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8006754:	f7f9 fedc 	bl	8000510 <chMtxTryLock.constprop.95>
    test_assert(!b, "not locked");
 8006758:	f080 0001 	eor.w	r0, r0, #1
 800675c:	b2c0      	uxtb	r0, r0
 800675e:	4946      	ldr	r1, [pc, #280]	; (8006878 <rt_test_006_005_execute+0x148>)
 8006760:	f7fa f8f6 	bl	8000950 <_test_assert>
 8006764:	2800      	cmp	r0, #0
 8006766:	d1f1      	bne.n	800674c <rt_test_006_005_execute+0x1c>
  test_set_step(4);
 8006768:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 800676a:	4f44      	ldr	r7, [pc, #272]	; (800687c <rt_test_006_005_execute+0x14c>)
  test_set_step(4);
 800676c:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 800676e:	4638      	mov	r0, r7
 8006770:	f7ff fcb6 	bl	80060e0 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 8006774:	68b8      	ldr	r0, [r7, #8]
 8006776:	4942      	ldr	r1, [pc, #264]	; (8006880 <rt_test_006_005_execute+0x150>)
 8006778:	fab0 f080 	clz	r0, r0
 800677c:	0940      	lsrs	r0, r0, #5
 800677e:	f7fa f8e7 	bl	8000950 <_test_assert>
 8006782:	2800      	cmp	r0, #0
 8006784:	d1e2      	bne.n	800674c <rt_test_006_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8006786:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8006788:	493e      	ldr	r1, [pc, #248]	; (8006884 <rt_test_006_005_execute+0x154>)
 800678a:	1bc0      	subs	r0, r0, r7
 800678c:	fab0 f080 	clz	r0, r0
 8006790:	0940      	lsrs	r0, r0, #5
 8006792:	f7fa f8dd 	bl	8000950 <_test_assert>
 8006796:	2800      	cmp	r0, #0
 8006798:	d1d8      	bne.n	800674c <rt_test_006_005_execute+0x1c>
 800679a:	69ab      	ldr	r3, [r5, #24]
  test_set_step(5);
 800679c:	2205      	movs	r2, #5
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800679e:	6898      	ldr	r0, [r3, #8]
 80067a0:	4939      	ldr	r1, [pc, #228]	; (8006888 <rt_test_006_005_execute+0x158>)
 80067a2:	1b80      	subs	r0, r0, r6
 80067a4:	fab0 f080 	clz	r0, r0
 80067a8:	0940      	lsrs	r0, r0, #5
  test_set_step(5);
 80067aa:	6022      	str	r2, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80067ac:	f7fa f8d0 	bl	8000950 <_test_assert>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d1cb      	bne.n	800674c <rt_test_006_005_execute+0x1c>
  test_set_step(6);
 80067b4:	2306      	movs	r3, #6
 80067b6:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 80067b8:	f7f9 feaa 	bl	8000510 <chMtxTryLock.constprop.95>
    test_assert(b, "already locked");
 80067bc:	492d      	ldr	r1, [pc, #180]	; (8006874 <rt_test_006_005_execute+0x144>)
 80067be:	f7fa f8c7 	bl	8000950 <_test_assert>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d1c2      	bne.n	800674c <rt_test_006_005_execute+0x1c>
    b = chMtxTryLock(&m1);
 80067c6:	f7f9 fea3 	bl	8000510 <chMtxTryLock.constprop.95>
    test_assert(!b, "not locked");
 80067ca:	f080 0001 	eor.w	r0, r0, #1
 80067ce:	b2c0      	uxtb	r0, r0
 80067d0:	4929      	ldr	r1, [pc, #164]	; (8006878 <rt_test_006_005_execute+0x148>)
 80067d2:	f7fa f8bd 	bl	8000950 <_test_assert>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d1b8      	bne.n	800674c <rt_test_006_005_execute+0x1c>
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 80067da:	f8d5 8018 	ldr.w	r8, [r5, #24]
 80067de:	2320      	movs	r3, #32
 80067e0:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->mtxlist != NULL) {
 80067e4:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 80067e8:	b1d3      	cbz	r3, 8006820 <rt_test_006_005_execute+0xf0>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 80067ea:	4681      	mov	r9, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 80067ec:	681a      	ldr	r2, [r3, #0]
      ctp->mtxlist = mp->next;
 80067ee:	68d9      	ldr	r1, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 80067f0:	4293      	cmp	r3, r2
      ctp->mtxlist = mp->next;
 80067f2:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 80067f6:	d034      	beq.n	8006862 <rt_test_006_005_execute+0x132>
        mp->next = tp->mtxlist;
 80067f8:	6b90      	ldr	r0, [r2, #56]	; 0x38
  tqp->next             = tp->queue.next;
 80067fa:	6811      	ldr	r1, [r2, #0]
 80067fc:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80067fe:	604b      	str	r3, [r1, #4]
 8006800:	e9c3 2002 	strd	r2, r0, [r3, #8]
        tp->mtxlist = mp;
 8006804:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8006806:	4610      	mov	r0, r2
 8006808:	f7fb f952 	bl	8001ab0 <chSchReadyI>
 800680c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
      }
    } while (ctp->mtxlist != NULL);
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1eb      	bne.n	80067ec <rt_test_006_005_execute+0xbc>
    ctp->prio = ctp->realprio;
 8006814:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8006818:	f8c8 3008 	str.w	r3, [r8, #8]
    chSchRescheduleS();
 800681c:	f7fe fe30 	bl	8005480 <chSchRescheduleS>
 8006820:	2300      	movs	r3, #0
 8006822:	f383 8811 	msr	BASEPRI, r3
    test_assert(m1.owner == NULL, "still owned");
 8006826:	68b8      	ldr	r0, [r7, #8]
 8006828:	4915      	ldr	r1, [pc, #84]	; (8006880 <rt_test_006_005_execute+0x150>)
 800682a:	fab0 f080 	clz	r0, r0
 800682e:	0940      	lsrs	r0, r0, #5
 8006830:	f7fa f88e 	bl	8000950 <_test_assert>
 8006834:	2800      	cmp	r0, #0
 8006836:	d189      	bne.n	800674c <rt_test_006_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8006838:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 800683a:	4912      	ldr	r1, [pc, #72]	; (8006884 <rt_test_006_005_execute+0x154>)
 800683c:	1bc2      	subs	r2, r0, r7
 800683e:	4250      	negs	r0, r2
 8006840:	4150      	adcs	r0, r2
 8006842:	f7fa f885 	bl	8000950 <_test_assert>
 8006846:	2800      	cmp	r0, #0
 8006848:	d180      	bne.n	800674c <rt_test_006_005_execute+0x1c>
  test_set_step(7);
 800684a:	2307      	movs	r3, #7
 800684c:	69aa      	ldr	r2, [r5, #24]
 800684e:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8006850:	6890      	ldr	r0, [r2, #8]
 8006852:	490d      	ldr	r1, [pc, #52]	; (8006888 <rt_test_006_005_execute+0x158>)
 8006854:	1b83      	subs	r3, r0, r6
 8006856:	4258      	negs	r0, r3
 8006858:	4158      	adcs	r0, r3
}
 800685a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800685e:	f7fa b877 	b.w	8000950 <_test_assert>
        mp->owner = NULL;
 8006862:	f8c3 9008 	str.w	r9, [r3, #8]
 8006866:	460b      	mov	r3, r1
 8006868:	e7d2      	b.n	8006810 <rt_test_006_005_execute+0xe0>
 800686a:	bf00      	nop
 800686c:	200010f0 	.word	0x200010f0
 8006870:	20001a7c 	.word	0x20001a7c
 8006874:	0800b488 	.word	0x0800b488
 8006878:	0800b498 	.word	0x0800b498
 800687c:	20000840 	.word	0x20000840
 8006880:	0800b4a4 	.word	0x0800b4a4
 8006884:	0800b3dc 	.word	0x0800b3dc
 8006888:	0800b4b0 	.word	0x0800b4b0
 800688c:	00000000 	.word	0x00000000

08006890 <rt_test_006_004_execute>:
static void rt_test_006_004_execute(void) {
 8006890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(2);
 8006894:	2702      	movs	r7, #2
  return ch.rlist.current;
 8006896:	4d3e      	ldr	r5, [pc, #248]	; (8006990 <rt_test_006_004_execute+0x100>)
 8006898:	4e3e      	ldr	r6, [pc, #248]	; (8006994 <rt_test_006_004_execute+0x104>)
  return chThdGetSelfX()->prio;
 800689a:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800689c:	4b3e      	ldr	r3, [pc, #248]	; (8006998 <rt_test_006_004_execute+0x108>)
 800689e:	6894      	ldr	r4, [r2, #8]
 80068a0:	483e      	ldr	r0, [pc, #248]	; (800699c <rt_test_006_004_execute+0x10c>)
    pa = p + 1;
 80068a2:	f104 0801 	add.w	r8, r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 80068a6:	4a3e      	ldr	r2, [pc, #248]	; (80069a0 <rt_test_006_004_execute+0x110>)
 80068a8:	4641      	mov	r1, r8
  test_set_step(2);
 80068aa:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 80068ac:	f7fc fb50 	bl	8002f50 <chThdCreateStatic.constprop.103>
 80068b0:	4f3c      	ldr	r7, [pc, #240]	; (80069a4 <rt_test_006_004_execute+0x114>)
    pb = p + 2;
 80068b2:	f104 0902 	add.w	r9, r4, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 80068b6:	4649      	mov	r1, r9
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 80068b8:	6038      	str	r0, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 80068ba:	4b3b      	ldr	r3, [pc, #236]	; (80069a8 <rt_test_006_004_execute+0x118>)
 80068bc:	4a3b      	ldr	r2, [pc, #236]	; (80069ac <rt_test_006_004_execute+0x11c>)
 80068be:	483c      	ldr	r0, [pc, #240]	; (80069b0 <rt_test_006_004_execute+0x120>)
 80068c0:	f7fc fb46 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(3);
 80068c4:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 80068c6:	6078      	str	r0, [r7, #4]
    chMtxLock(&m1);
 80068c8:	483a      	ldr	r0, [pc, #232]	; (80069b4 <rt_test_006_004_execute+0x124>)
  test_set_step(3);
 80068ca:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 80068cc:	f7fd fd00 	bl	80042d0 <chMtxLock>
 80068d0:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 80068d2:	4939      	ldr	r1, [pc, #228]	; (80069b8 <rt_test_006_004_execute+0x128>)
 80068d4:	6898      	ldr	r0, [r3, #8]
 80068d6:	1b00      	subs	r0, r0, r4
 80068d8:	fab0 f080 	clz	r0, r0
 80068dc:	0940      	lsrs	r0, r0, #5
 80068de:	f7fa f837 	bl	8000950 <_test_assert>
 80068e2:	b108      	cbz	r0, 80068e8 <rt_test_006_004_execute+0x58>
}
 80068e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(4);
 80068e8:	2304      	movs	r3, #4
    chThdSleepMilliseconds(100);
 80068ea:	20c8      	movs	r0, #200	; 0xc8
  test_set_step(4);
 80068ec:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 80068ee:	f7fd f937 	bl	8003b60 <chThdSleep>
 80068f2:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 80068f4:	4930      	ldr	r1, [pc, #192]	; (80069b8 <rt_test_006_004_execute+0x128>)
 80068f6:	6898      	ldr	r0, [r3, #8]
 80068f8:	eba0 0008 	sub.w	r0, r0, r8
 80068fc:	fab0 f080 	clz	r0, r0
 8006900:	0940      	lsrs	r0, r0, #5
 8006902:	f7fa f825 	bl	8000950 <_test_assert>
 8006906:	2800      	cmp	r0, #0
 8006908:	d1ec      	bne.n	80068e4 <rt_test_006_004_execute+0x54>
  test_set_step(5);
 800690a:	2305      	movs	r3, #5
    chMtxLock(&m2);
 800690c:	482b      	ldr	r0, [pc, #172]	; (80069bc <rt_test_006_004_execute+0x12c>)
  test_set_step(5);
 800690e:	6033      	str	r3, [r6, #0]
    chMtxLock(&m2);
 8006910:	f7fd fcde 	bl	80042d0 <chMtxLock>
 8006914:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8006916:	4928      	ldr	r1, [pc, #160]	; (80069b8 <rt_test_006_004_execute+0x128>)
 8006918:	6898      	ldr	r0, [r3, #8]
 800691a:	eba0 0008 	sub.w	r0, r0, r8
 800691e:	fab0 f080 	clz	r0, r0
 8006922:	0940      	lsrs	r0, r0, #5
 8006924:	f7fa f814 	bl	8000950 <_test_assert>
 8006928:	2800      	cmp	r0, #0
 800692a:	d1db      	bne.n	80068e4 <rt_test_006_004_execute+0x54>
  test_set_step(6);
 800692c:	2306      	movs	r3, #6
    chThdSleepMilliseconds(100);
 800692e:	20c8      	movs	r0, #200	; 0xc8
  test_set_step(6);
 8006930:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 8006932:	f7fd f915 	bl	8003b60 <chThdSleep>
 8006936:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 8006938:	491f      	ldr	r1, [pc, #124]	; (80069b8 <rt_test_006_004_execute+0x128>)
 800693a:	6898      	ldr	r0, [r3, #8]
 800693c:	eba0 0009 	sub.w	r0, r0, r9
 8006940:	fab0 f080 	clz	r0, r0
 8006944:	0940      	lsrs	r0, r0, #5
 8006946:	f7fa f803 	bl	8000950 <_test_assert>
 800694a:	2800      	cmp	r0, #0
 800694c:	d1ca      	bne.n	80068e4 <rt_test_006_004_execute+0x54>
  test_set_step(7);
 800694e:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 8006950:	481a      	ldr	r0, [pc, #104]	; (80069bc <rt_test_006_004_execute+0x12c>)
  test_set_step(7);
 8006952:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m2);
 8006954:	f7ff fbc4 	bl	80060e0 <chMtxUnlock>
 8006958:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 800695a:	4917      	ldr	r1, [pc, #92]	; (80069b8 <rt_test_006_004_execute+0x128>)
 800695c:	6898      	ldr	r0, [r3, #8]
 800695e:	eba0 0008 	sub.w	r0, r0, r8
 8006962:	fab0 f080 	clz	r0, r0
 8006966:	0940      	lsrs	r0, r0, #5
 8006968:	f7f9 fff2 	bl	8000950 <_test_assert>
 800696c:	2800      	cmp	r0, #0
 800696e:	d1b9      	bne.n	80068e4 <rt_test_006_004_execute+0x54>
  test_set_step(8);
 8006970:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 8006972:	4810      	ldr	r0, [pc, #64]	; (80069b4 <rt_test_006_004_execute+0x124>)
  test_set_step(8);
 8006974:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 8006976:	f7ff fbb3 	bl	80060e0 <chMtxUnlock>
 800697a:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 800697c:	490e      	ldr	r1, [pc, #56]	; (80069b8 <rt_test_006_004_execute+0x128>)
 800697e:	6898      	ldr	r0, [r3, #8]
 8006980:	1b00      	subs	r0, r0, r4
 8006982:	fab0 f080 	clz	r0, r0
}
 8006986:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 800698a:	0940      	lsrs	r0, r0, #5
 800698c:	f7f9 bfe0 	b.w	8000950 <_test_assert>
 8006990:	200010f0 	.word	0x200010f0
 8006994:	20001a7c 	.word	0x20001a7c
 8006998:	0800b470 	.word	0x0800b470
 800699c:	20001368 	.word	0x20001368
 80069a0:	080069c1 	.word	0x080069c1
 80069a4:	20001a94 	.word	0x20001a94
 80069a8:	0800b474 	.word	0x0800b474
 80069ac:	08006011 	.word	0x08006011
 80069b0:	200014b0 	.word	0x200014b0
 80069b4:	20000840 	.word	0x20000840
 80069b8:	0800b4b0 	.word	0x0800b4b0
 80069bc:	20000850 	.word	0x20000850

080069c0 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 80069c0:	b510      	push	{r4, lr}
  chMtxLock(&m1);
 80069c2:	4c06      	ldr	r4, [pc, #24]	; (80069dc <thread4A+0x1c>)
  chThdSleepMilliseconds(50);
 80069c4:	2064      	movs	r0, #100	; 0x64
 80069c6:	f7fd f8cb 	bl	8003b60 <chThdSleep>
  chMtxLock(&m1);
 80069ca:	4620      	mov	r0, r4
 80069cc:	f7fd fc80 	bl	80042d0 <chMtxLock>
  chMtxUnlock(&m1);
 80069d0:	4620      	mov	r0, r4
}
 80069d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 80069d6:	f7ff bb83 	b.w	80060e0 <chMtxUnlock>
 80069da:	bf00      	nop
 80069dc:	20000840 	.word	0x20000840

080069e0 <thread1.lto_priv.115>:
static THD_FUNCTION(thread1, p) {
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	4605      	mov	r5, r0
  chMtxLock(&m1);
 80069e4:	4c05      	ldr	r4, [pc, #20]	; (80069fc <thread1.lto_priv.115+0x1c>)
 80069e6:	4620      	mov	r0, r4
 80069e8:	f7fd fc72 	bl	80042d0 <chMtxLock>
  test_emit_token(*(char *)p);
 80069ec:	7828      	ldrb	r0, [r5, #0]
 80069ee:	f7fa f84f 	bl	8000a90 <test_emit_token>
  chMtxUnlock(&m1);
 80069f2:	4620      	mov	r0, r4
}
 80069f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m1);
 80069f8:	f7ff bb72 	b.w	80060e0 <chMtxUnlock>
 80069fc:	20000840 	.word	0x20000840

08006a00 <chFactoryReleaseSemaphore>:
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	4604      	mov	r4, r0
  F_LOCK();
 8006a04:	4d16      	ldr	r5, [pc, #88]	; (8006a60 <chFactoryReleaseSemaphore+0x60>)
 8006a06:	4628      	mov	r0, r5
 8006a08:	f7fd fc62 	bl	80042d0 <chMtxLock>
  dep->refs--;
 8006a0c:	6863      	ldr	r3, [r4, #4]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006a12:	b123      	cbz	r3, 8006a1e <chFactoryReleaseSemaphore+0x1e>
}
 8006a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8006a18:	4811      	ldr	r0, [pc, #68]	; (8006a60 <chFactoryReleaseSemaphore+0x60>)
 8006a1a:	f7ff bb61 	b.w	80060e0 <chMtxUnlock>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8006a1e:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8006a22:	460a      	mov	r2, r1
 8006a24:	e002      	b.n	8006a2c <chFactoryReleaseSemaphore+0x2c>
    if (prev->next == element) {
 8006a26:	429c      	cmp	r4, r3
 8006a28:	d00a      	beq.n	8006a40 <chFactoryReleaseSemaphore+0x40>
 8006a2a:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 8006a2c:	6813      	ldr	r3, [r2, #0]
 8006a2e:	428b      	cmp	r3, r1
 8006a30:	d1f9      	bne.n	8006a26 <chFactoryReleaseSemaphore+0x26>
 8006a32:	2320      	movs	r3, #32
 8006a34:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	deff      	udf	#255	; 0xff
      prev->next = element->next;
 8006a40:	6821      	ldr	r1, [r4, #0]
 8006a42:	2320      	movs	r3, #32
 8006a44:	6011      	str	r1, [r2, #0]
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	6022      	str	r2, [r4, #0]
  mp->next = php;
 8006a50:	62ec      	str	r4, [r5, #44]	; 0x2c
 8006a52:	f383 8811 	msr	BASEPRI, r3
  F_UNLOCK();
 8006a56:	4802      	ldr	r0, [pc, #8]	; (8006a60 <chFactoryReleaseSemaphore+0x60>)
}
 8006a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8006a5c:	f7ff bb40 	b.w	80060e0 <chMtxUnlock>
 8006a60:	20001164 	.word	0x20001164
	...

08006a70 <oslib_test_004_003_execute>:
      chFactoryReleaseSemaphore(dsp);
    }
  }
}

static void oslib_test_004_003_execute(void) {
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_semaphore_t *dsp;

  /* [4.3.1] Retrieving a dynamic semaphore by name, must not exist.*/
  test_set_step(1);
 8006a72:	2501      	movs	r5, #1
 8006a74:	4c41      	ldr	r4, [pc, #260]	; (8006b7c <oslib_test_004_003_execute+0x10c>)
 8006a76:	6025      	str	r5, [r4, #0]
  {
    dsp = chFactoryFindSemaphore("mysem");
 8006a78:	f7ff fcba 	bl	80063f0 <chFactoryFindSemaphore.constprop.50>
    test_assert(dsp == NULL, "found");
 8006a7c:	fab0 f080 	clz	r0, r0
 8006a80:	493f      	ldr	r1, [pc, #252]	; (8006b80 <oslib_test_004_003_execute+0x110>)
 8006a82:	0940      	lsrs	r0, r0, #5
 8006a84:	f7f9 ff64 	bl	8000950 <_test_assert>
 8006a88:	b100      	cbz	r0, 8006a8c <oslib_test_004_003_execute+0x1c>
  test_set_step(6);
  {
    dsp = chFactoryFindSemaphore("mysem");
    test_assert(dsp == NULL, "found");
  }
}
 8006a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	6023      	str	r3, [r4, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 8006a90:	f7ff fc8e 	bl	80063b0 <chFactoryCreateSemaphore.constprop.51>
    test_assert(dsp != NULL, "cannot create");
 8006a94:	4606      	mov	r6, r0
 8006a96:	3000      	adds	r0, #0
 8006a98:	bf18      	it	ne
 8006a9a:	2001      	movne	r0, #1
 8006a9c:	4939      	ldr	r1, [pc, #228]	; (8006b84 <oslib_test_004_003_execute+0x114>)
 8006a9e:	f7f9 ff57 	bl	8000950 <_test_assert>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d1f1      	bne.n	8006a8a <oslib_test_004_003_execute+0x1a>
  test_set_step(3);
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 8006aaa:	f7ff fc81 	bl	80063b0 <chFactoryCreateSemaphore.constprop.51>
    test_assert(dsp1 == NULL, "can create");
 8006aae:	fab0 f080 	clz	r0, r0
 8006ab2:	4935      	ldr	r1, [pc, #212]	; (8006b88 <oslib_test_004_003_execute+0x118>)
 8006ab4:	0940      	lsrs	r0, r0, #5
 8006ab6:	f7f9 ff4b 	bl	8000950 <_test_assert>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d1e5      	bne.n	8006a8a <oslib_test_004_003_execute+0x1a>
  test_set_step(4);
 8006abe:	2304      	movs	r3, #4
 8006ac0:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 8006ac2:	f7ff fc95 	bl	80063f0 <chFactoryFindSemaphore.constprop.50>
    test_assert(dsp1 != NULL, "not found");
 8006ac6:	4607      	mov	r7, r0
 8006ac8:	3000      	adds	r0, #0
 8006aca:	bf18      	it	ne
 8006acc:	2001      	movne	r0, #1
 8006ace:	492f      	ldr	r1, [pc, #188]	; (8006b8c <oslib_test_004_003_execute+0x11c>)
 8006ad0:	f7f9 ff3e 	bl	8000950 <_test_assert>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d1d8      	bne.n	8006a8a <oslib_test_004_003_execute+0x1a>
    test_assert(dsp == dsp1, "object reference mismatch");
 8006ad8:	1bf0      	subs	r0, r6, r7
 8006ada:	fab0 f080 	clz	r0, r0
 8006ade:	492c      	ldr	r1, [pc, #176]	; (8006b90 <oslib_test_004_003_execute+0x120>)
 8006ae0:	0940      	lsrs	r0, r0, #5
 8006ae2:	f7f9 ff35 	bl	8000950 <_test_assert>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d1cf      	bne.n	8006a8a <oslib_test_004_003_execute+0x1a>
    test_assert(dsp1->element.refs == 2, "object reference mismatch");
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	4928      	ldr	r1, [pc, #160]	; (8006b90 <oslib_test_004_003_execute+0x120>)
 8006aee:	f1a0 0002 	sub.w	r0, r0, #2
 8006af2:	fab0 f080 	clz	r0, r0
 8006af6:	0940      	lsrs	r0, r0, #5
 8006af8:	f7f9 ff2a 	bl	8000950 <_test_assert>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d1c4      	bne.n	8006a8a <oslib_test_004_003_execute+0x1a>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 8006b00:	687b      	ldr	r3, [r7, #4]
    test_assert(dsp1 == dsp2, "object reference mismatch");
 8006b02:	4628      	mov	r0, r5
 8006b04:	442b      	add	r3, r5
 8006b06:	607b      	str	r3, [r7, #4]
 8006b08:	4921      	ldr	r1, [pc, #132]	; (8006b90 <oslib_test_004_003_execute+0x120>)
 8006b0a:	f7f9 ff21 	bl	8000950 <_test_assert>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d1bb      	bne.n	8006a8a <oslib_test_004_003_execute+0x1a>
    test_assert(dsp2->element.refs == 3, "object reference mismatch");
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	491e      	ldr	r1, [pc, #120]	; (8006b90 <oslib_test_004_003_execute+0x120>)
 8006b16:	f1a0 0c03 	sub.w	ip, r0, #3
 8006b1a:	f1dc 0000 	rsbs	r0, ip, #0
 8006b1e:	eb40 000c 	adc.w	r0, r0, ip
 8006b22:	f7f9 ff15 	bl	8000950 <_test_assert>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d1af      	bne.n	8006a8a <oslib_test_004_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp2);
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	f7ff ff68 	bl	8006a00 <chFactoryReleaseSemaphore>
    test_assert(dsp1->element.refs == 2, "references mismatch");
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4918      	ldr	r1, [pc, #96]	; (8006b94 <oslib_test_004_003_execute+0x124>)
 8006b34:	1e82      	subs	r2, r0, #2
 8006b36:	4250      	negs	r0, r2
 8006b38:	4150      	adcs	r0, r2
 8006b3a:	f7f9 ff09 	bl	8000950 <_test_assert>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d1a3      	bne.n	8006a8a <oslib_test_004_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp1);
 8006b42:	4638      	mov	r0, r7
 8006b44:	f7ff ff5c 	bl	8006a00 <chFactoryReleaseSemaphore>
    test_assert(dsp->element.refs == 1, "references mismatch");
 8006b48:	6870      	ldr	r0, [r6, #4]
 8006b4a:	4912      	ldr	r1, [pc, #72]	; (8006b94 <oslib_test_004_003_execute+0x124>)
 8006b4c:	1b43      	subs	r3, r0, r5
 8006b4e:	4258      	negs	r0, r3
 8006b50:	4158      	adcs	r0, r3
 8006b52:	f7f9 fefd 	bl	8000950 <_test_assert>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d197      	bne.n	8006a8a <oslib_test_004_003_execute+0x1a>
  test_set_step(5);
 8006b5a:	2305      	movs	r3, #5
    chFactoryReleaseSemaphore(dsp);
 8006b5c:	4630      	mov	r0, r6
  test_set_step(5);
 8006b5e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseSemaphore(dsp);
 8006b60:	f7ff ff4e 	bl	8006a00 <chFactoryReleaseSemaphore>
  test_set_step(6);
 8006b64:	2306      	movs	r3, #6
 8006b66:	6023      	str	r3, [r4, #0]
    dsp = chFactoryFindSemaphore("mysem");
 8006b68:	f7ff fc42 	bl	80063f0 <chFactoryFindSemaphore.constprop.50>
}
 8006b6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dsp == NULL, "found");
 8006b70:	fab0 f080 	clz	r0, r0
 8006b74:	4902      	ldr	r1, [pc, #8]	; (8006b80 <oslib_test_004_003_execute+0x110>)
 8006b76:	0940      	lsrs	r0, r0, #5
 8006b78:	f7f9 beea 	b.w	8000950 <_test_assert>
 8006b7c:	20001a7c 	.word	0x20001a7c
 8006b80:	0800a648 	.word	0x0800a648
 8006b84:	0800a628 	.word	0x0800a628
 8006b88:	0800a638 	.word	0x0800a638
 8006b8c:	0800a644 	.word	0x0800a644
 8006b90:	0800a650 	.word	0x0800a650
 8006b94:	0800a66c 	.word	0x0800a66c
	...

08006ba0 <oslib_test_004_003_teardown>:
static void oslib_test_004_003_teardown(void) {
 8006ba0:	b510      	push	{r4, lr}
  dsp = chFactoryFindSemaphore("mysem");
 8006ba2:	f7ff fc25 	bl	80063f0 <chFactoryFindSemaphore.constprop.50>
  if (dsp != NULL) {
 8006ba6:	b140      	cbz	r0, 8006bba <oslib_test_004_003_teardown+0x1a>
    while (dsp->element.refs > 0U) {
 8006ba8:	6843      	ldr	r3, [r0, #4]
 8006baa:	4604      	mov	r4, r0
 8006bac:	b12b      	cbz	r3, 8006bba <oslib_test_004_003_teardown+0x1a>
      chFactoryReleaseSemaphore(dsp);
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f7ff ff26 	bl	8006a00 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 8006bb4:	6863      	ldr	r3, [r4, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1f9      	bne.n	8006bae <oslib_test_004_003_teardown+0xe>
}
 8006bba:	bd10      	pop	{r4, pc}
 8006bbc:	0000      	movs	r0, r0
	...

08006bc0 <chFactoryReleaseObject>:
void chFactoryReleaseObject(registered_object_t *rop){
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	4604      	mov	r4, r0
  F_LOCK();
 8006bc4:	4d16      	ldr	r5, [pc, #88]	; (8006c20 <chFactoryReleaseObject+0x60>)
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f7fd fb82 	bl	80042d0 <chMtxLock>
  dep->refs--;
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006bd2:	b123      	cbz	r3, 8006bde <chFactoryReleaseObject+0x1e>
}
 8006bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8006bd8:	4811      	ldr	r0, [pc, #68]	; (8006c20 <chFactoryReleaseObject+0x60>)
 8006bda:	f7ff ba81 	b.w	80060e0 <chMtxUnlock>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8006bde:	f105 0110 	add.w	r1, r5, #16
 8006be2:	460a      	mov	r2, r1
 8006be4:	e002      	b.n	8006bec <chFactoryReleaseObject+0x2c>
    if (prev->next == element) {
 8006be6:	429c      	cmp	r4, r3
 8006be8:	d00a      	beq.n	8006c00 <chFactoryReleaseObject+0x40>
 8006bea:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 8006bec:	6813      	ldr	r3, [r2, #0]
 8006bee:	428b      	cmp	r3, r1
 8006bf0:	d1f9      	bne.n	8006be6 <chFactoryReleaseObject+0x26>
 8006bf2:	2320      	movs	r3, #32
 8006bf4:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	696a      	ldr	r2, [r5, #20]
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	deff      	udf	#255	; 0xff
      prev->next = element->next;
 8006c00:	6821      	ldr	r1, [r4, #0]
 8006c02:	2320      	movs	r3, #32
 8006c04:	6011      	str	r1, [r2, #0]
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	696a      	ldr	r2, [r5, #20]
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	6022      	str	r2, [r4, #0]
  mp->next = php;
 8006c10:	616c      	str	r4, [r5, #20]
 8006c12:	f383 8811 	msr	BASEPRI, r3
  F_UNLOCK();
 8006c16:	4802      	ldr	r0, [pc, #8]	; (8006c20 <chFactoryReleaseObject+0x60>)
}
 8006c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8006c1c:	f7ff ba60 	b.w	80060e0 <chMtxUnlock>
 8006c20:	20001164 	.word	0x20001164
	...

08006c30 <oslib_test_004_001_execute>:
static void oslib_test_004_001_execute(void) {
 8006c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8006c34:	2501      	movs	r5, #1
 8006c36:	4c51      	ldr	r4, [pc, #324]	; (8006d7c <oslib_test_004_001_execute+0x14c>)
 8006c38:	6025      	str	r5, [r4, #0]
    rop = chFactoryFindObject("myobj");
 8006c3a:	f7ff fb69 	bl	8006310 <chFactoryFindObject.constprop.54>
    test_assert(rop == NULL, "found");
 8006c3e:	fab0 f080 	clz	r0, r0
 8006c42:	494f      	ldr	r1, [pc, #316]	; (8006d80 <oslib_test_004_001_execute+0x150>)
 8006c44:	0940      	lsrs	r0, r0, #5
 8006c46:	f7f9 fe83 	bl	8000950 <_test_assert>
 8006c4a:	b108      	cbz	r0, 8006c50 <oslib_test_004_001_execute+0x20>
}
 8006c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 8006c50:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 8006c52:	484c      	ldr	r0, [pc, #304]	; (8006d84 <oslib_test_004_001_execute+0x154>)
  test_set_step(2);
 8006c54:	6023      	str	r3, [r4, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 8006c56:	f7ff fb43 	bl	80062e0 <chFactoryRegisterObject.constprop.55>
    test_assert(rop != NULL, "cannot register");
 8006c5a:	4606      	mov	r6, r0
 8006c5c:	3000      	adds	r0, #0
 8006c5e:	bf18      	it	ne
 8006c60:	2001      	movne	r0, #1
 8006c62:	4949      	ldr	r1, [pc, #292]	; (8006d88 <oslib_test_004_001_execute+0x158>)
 8006c64:	f7f9 fe74 	bl	8000950 <_test_assert>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d1ef      	bne.n	8006c4c <oslib_test_004_001_execute+0x1c>
  test_set_step(3);
 8006c6c:	2303      	movs	r3, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8006c6e:	4847      	ldr	r0, [pc, #284]	; (8006d8c <oslib_test_004_001_execute+0x15c>)
  test_set_step(3);
 8006c70:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8006c72:	f7ff fb35 	bl	80062e0 <chFactoryRegisterObject.constprop.55>
    test_assert(rop1 == NULL, "can register");
 8006c76:	fab0 f080 	clz	r0, r0
 8006c7a:	4945      	ldr	r1, [pc, #276]	; (8006d90 <oslib_test_004_001_execute+0x160>)
 8006c7c:	0940      	lsrs	r0, r0, #5
 8006c7e:	f7f9 fe67 	bl	8000950 <_test_assert>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d1e2      	bne.n	8006c4c <oslib_test_004_001_execute+0x1c>
  test_set_step(4);
 8006c86:	2304      	movs	r3, #4
 8006c88:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryFindObject("myobj");
 8006c8a:	f7ff fb41 	bl	8006310 <chFactoryFindObject.constprop.54>
    test_assert(rop1 != NULL, "not found");
 8006c8e:	4607      	mov	r7, r0
 8006c90:	3000      	adds	r0, #0
 8006c92:	bf18      	it	ne
 8006c94:	2001      	movne	r0, #1
 8006c96:	493f      	ldr	r1, [pc, #252]	; (8006d94 <oslib_test_004_001_execute+0x164>)
 8006c98:	f7f9 fe5a 	bl	8000950 <_test_assert>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d1d5      	bne.n	8006c4c <oslib_test_004_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 8006ca0:	f245 58aa 	movw	r8, #21930	; 0x55aa
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	493c      	ldr	r1, [pc, #240]	; (8006d98 <oslib_test_004_001_execute+0x168>)
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	eba0 0008 	sub.w	r0, r0, r8
 8006cae:	fab0 f080 	clz	r0, r0
 8006cb2:	0940      	lsrs	r0, r0, #5
 8006cb4:	f7f9 fe4c 	bl	8000950 <_test_assert>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d1c7      	bne.n	8006c4c <oslib_test_004_001_execute+0x1c>
    test_assert(rop == rop1, "object reference mismatch");
 8006cbc:	1bf0      	subs	r0, r6, r7
 8006cbe:	fab0 f080 	clz	r0, r0
 8006cc2:	4936      	ldr	r1, [pc, #216]	; (8006d9c <oslib_test_004_001_execute+0x16c>)
 8006cc4:	0940      	lsrs	r0, r0, #5
 8006cc6:	f7f9 fe43 	bl	8000950 <_test_assert>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d1be      	bne.n	8006c4c <oslib_test_004_001_execute+0x1c>
    test_assert(rop1->element.refs == 2, "object reference mismatch");
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	4932      	ldr	r1, [pc, #200]	; (8006d9c <oslib_test_004_001_execute+0x16c>)
 8006cd2:	f1a0 0002 	sub.w	r0, r0, #2
 8006cd6:	fab0 f080 	clz	r0, r0
 8006cda:	0940      	lsrs	r0, r0, #5
 8006cdc:	f7f9 fe38 	bl	8000950 <_test_assert>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	d1b3      	bne.n	8006c4c <oslib_test_004_001_execute+0x1c>
 8006ce4:	687b      	ldr	r3, [r7, #4]
    test_assert(rop1 == rop2, "object reference mismatch");
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	442b      	add	r3, r5
 8006cea:	607b      	str	r3, [r7, #4]
 8006cec:	492b      	ldr	r1, [pc, #172]	; (8006d9c <oslib_test_004_001_execute+0x16c>)
 8006cee:	f7f9 fe2f 	bl	8000950 <_test_assert>
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d1aa      	bne.n	8006c4c <oslib_test_004_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop2->objp) == 0x55aa, "object mismatch");
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	4927      	ldr	r1, [pc, #156]	; (8006d98 <oslib_test_004_001_execute+0x168>)
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	eba0 0e08 	sub.w	lr, r0, r8
 8006d00:	f1de 0000 	rsbs	r0, lr, #0
 8006d04:	eb40 000e 	adc.w	r0, r0, lr
 8006d08:	f7f9 fe22 	bl	8000950 <_test_assert>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d19d      	bne.n	8006c4c <oslib_test_004_001_execute+0x1c>
    test_assert(rop2->element.refs == 3, "object reference mismatch");
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	4922      	ldr	r1, [pc, #136]	; (8006d9c <oslib_test_004_001_execute+0x16c>)
 8006d14:	f1a0 0c03 	sub.w	ip, r0, #3
 8006d18:	f1dc 0000 	rsbs	r0, ip, #0
 8006d1c:	eb40 000c 	adc.w	r0, r0, ip
 8006d20:	f7f9 fe16 	bl	8000950 <_test_assert>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d191      	bne.n	8006c4c <oslib_test_004_001_execute+0x1c>
    chFactoryReleaseObject(rop2);
 8006d28:	4638      	mov	r0, r7
 8006d2a:	f7ff ff49 	bl	8006bc0 <chFactoryReleaseObject>
    test_assert(rop1->element.refs == 2, "references mismatch");
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	491b      	ldr	r1, [pc, #108]	; (8006da0 <oslib_test_004_001_execute+0x170>)
 8006d32:	1e82      	subs	r2, r0, #2
 8006d34:	4250      	negs	r0, r2
 8006d36:	4150      	adcs	r0, r2
 8006d38:	f7f9 fe0a 	bl	8000950 <_test_assert>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d185      	bne.n	8006c4c <oslib_test_004_001_execute+0x1c>
    chFactoryReleaseObject(rop1);
 8006d40:	4638      	mov	r0, r7
 8006d42:	f7ff ff3d 	bl	8006bc0 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 8006d46:	6870      	ldr	r0, [r6, #4]
 8006d48:	4915      	ldr	r1, [pc, #84]	; (8006da0 <oslib_test_004_001_execute+0x170>)
 8006d4a:	1b43      	subs	r3, r0, r5
 8006d4c:	4258      	negs	r0, r3
 8006d4e:	4158      	adcs	r0, r3
 8006d50:	f7f9 fdfe 	bl	8000950 <_test_assert>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	f47f af79 	bne.w	8006c4c <oslib_test_004_001_execute+0x1c>
  test_set_step(5);
 8006d5a:	2305      	movs	r3, #5
    chFactoryReleaseObject(rop);
 8006d5c:	4630      	mov	r0, r6
  test_set_step(5);
 8006d5e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObject(rop);
 8006d60:	f7ff ff2e 	bl	8006bc0 <chFactoryReleaseObject>
  test_set_step(6);
 8006d64:	2306      	movs	r3, #6
 8006d66:	6023      	str	r3, [r4, #0]
    rop = chFactoryFindObject("myobj");
 8006d68:	f7ff fad2 	bl	8006310 <chFactoryFindObject.constprop.54>
}
 8006d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(rop == NULL, "found");
 8006d70:	fab0 f080 	clz	r0, r0
 8006d74:	4902      	ldr	r1, [pc, #8]	; (8006d80 <oslib_test_004_001_execute+0x150>)
 8006d76:	0940      	lsrs	r0, r0, #5
 8006d78:	f7f9 bdea 	b.w	8000950 <_test_assert>
 8006d7c:	20001a7c 	.word	0x20001a7c
 8006d80:	0800a648 	.word	0x0800a648
 8006d84:	20000898 	.word	0x20000898
 8006d88:	0800a5d8 	.word	0x0800a5d8
 8006d8c:	2000089c 	.word	0x2000089c
 8006d90:	0800a5e8 	.word	0x0800a5e8
 8006d94:	0800a644 	.word	0x0800a644
 8006d98:	0800a5f8 	.word	0x0800a5f8
 8006d9c:	0800a650 	.word	0x0800a650
 8006da0:	0800a66c 	.word	0x0800a66c
	...

08006db0 <oslib_test_004_001_teardown>:
static void oslib_test_004_001_teardown(void) {
 8006db0:	b510      	push	{r4, lr}
  rop = chFactoryFindObject("myobj");
 8006db2:	f7ff faad 	bl	8006310 <chFactoryFindObject.constprop.54>
  if (rop != NULL) {
 8006db6:	b140      	cbz	r0, 8006dca <oslib_test_004_001_teardown+0x1a>
    while (rop->element.refs > 0U) {
 8006db8:	6843      	ldr	r3, [r0, #4]
 8006dba:	4604      	mov	r4, r0
 8006dbc:	b12b      	cbz	r3, 8006dca <oslib_test_004_001_teardown+0x1a>
      chFactoryReleaseObject(rop);
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f7ff fefe 	bl	8006bc0 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 8006dc4:	6863      	ldr	r3, [r4, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1f9      	bne.n	8006dbe <oslib_test_004_001_teardown+0xe>
}
 8006dca:	bd10      	pop	{r4, pc}
 8006dcc:	0000      	movs	r0, r0
	...

08006dd0 <chHeapStatus>:
 *                      free free block found space or @ NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8006dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8006dd4:	4c17      	ldr	r4, [pc, #92]	; (8006e34 <chHeapStatus+0x64>)
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8006dd6:	4688      	mov	r8, r1
    heapp = &default_heap;
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	bf18      	it	ne
 8006ddc:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 8006dde:	f104 070c 	add.w	r7, r4, #12
 8006de2:	4638      	mov	r0, r7
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8006de4:	4691      	mov	r9, r2
  H_LOCK(heapp);
 8006de6:	f7fd fa73 	bl	80042d0 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8006dea:	6863      	ldr	r3, [r4, #4]
 8006dec:	b1f3      	cbz	r3, 8006e2c <chHeapStatus+0x5c>
  lpages = 0U;
 8006dee:	2400      	movs	r4, #0
  tpages = 0U;
 8006df0:	4625      	mov	r5, r4
  n = 0U;
 8006df2:	4626      	mov	r6, r4
    size_t pages = H_PAGES(H_NEXT(qp));
 8006df4:	6858      	ldr	r0, [r3, #4]
  while (H_NEXT(qp) != NULL) {
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4284      	cmp	r4, r0

    /* Updating counters.*/
    n++;
 8006dfa:	f106 0601 	add.w	r6, r6, #1
    tpages += pages;
 8006dfe:	4405      	add	r5, r0
 8006e00:	bf38      	it	cc
 8006e02:	4604      	movcc	r4, r0
  while (H_NEXT(qp) != NULL) {
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1f5      	bne.n	8006df4 <chHeapStatus+0x24>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 8006e08:	f1b8 0f00 	cmp.w	r8, #0
 8006e0c:	d002      	beq.n	8006e14 <chHeapStatus+0x44>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8006e0e:	00ed      	lsls	r5, r5, #3
 8006e10:	f8c8 5000 	str.w	r5, [r8]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 8006e14:	f1b9 0f00 	cmp.w	r9, #0
 8006e18:	d002      	beq.n	8006e20 <chHeapStatus+0x50>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8006e1a:	00e4      	lsls	r4, r4, #3
 8006e1c:	f8c9 4000 	str.w	r4, [r9]
  }
  H_UNLOCK(heapp);
 8006e20:	4638      	mov	r0, r7
 8006e22:	f7ff f95d 	bl	80060e0 <chMtxUnlock>

  return n;
}
 8006e26:	4630      	mov	r0, r6
 8006e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  lpages = 0U;
 8006e2c:	461c      	mov	r4, r3
  tpages = 0U;
 8006e2e:	461d      	mov	r5, r3
  n = 0U;
 8006e30:	461e      	mov	r6, r3
 8006e32:	e7e9      	b.n	8006e08 <chHeapStatus+0x38>
 8006e34:	20001288 	.word	0x20001288
	...

08006e40 <cmd_mem>:
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006e40:	b530      	push	{r4, r5, lr}
  if (argc > 0) {
 8006e42:	2900      	cmp	r1, #0
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006e44:	b083      	sub	sp, #12
  if (argc > 0) {
 8006e46:	dd05      	ble.n	8006e54 <cmd_mem+0x14>
    shellUsage(chp, "mem");
 8006e48:	4a12      	ldr	r2, [pc, #72]	; (8006e94 <cmd_mem+0x54>)
 8006e4a:	4913      	ldr	r1, [pc, #76]	; (8006e98 <cmd_mem+0x58>)
 8006e4c:	f7fb fa20 	bl	8002290 <chprintf>
}
 8006e50:	b003      	add	sp, #12
 8006e52:	bd30      	pop	{r4, r5, pc}
 8006e54:	4604      	mov	r4, r0
  n = chHeapStatus(NULL, &total, &largest);
 8006e56:	aa01      	add	r2, sp, #4
 8006e58:	4669      	mov	r1, sp
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	f7ff ffb8 	bl	8006dd0 <chHeapStatus>
 8006e60:	4605      	mov	r5, r0
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(ch_memcore.endmem - ch_memcore.nextmem);
 8006e62:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <cmd_mem+0x5c>)
  chprintf(chp, "core free memory : %u bytes"SHELL_NEWLINE_STR, chCoreGetStatusX());
 8006e64:	490e      	ldr	r1, [pc, #56]	; (8006ea0 <cmd_mem+0x60>)
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	1ad2      	subs	r2, r2, r3
 8006e6e:	f7fb fa0f 	bl	8002290 <chprintf>
  chprintf(chp, "heap fragments   : %u"SHELL_NEWLINE_STR, n);
 8006e72:	462a      	mov	r2, r5
 8006e74:	490b      	ldr	r1, [pc, #44]	; (8006ea4 <cmd_mem+0x64>)
 8006e76:	4620      	mov	r0, r4
 8006e78:	f7fb fa0a 	bl	8002290 <chprintf>
  chprintf(chp, "heap free total  : %u bytes"SHELL_NEWLINE_STR, total);
 8006e7c:	9a00      	ldr	r2, [sp, #0]
 8006e7e:	490a      	ldr	r1, [pc, #40]	; (8006ea8 <cmd_mem+0x68>)
 8006e80:	4620      	mov	r0, r4
 8006e82:	f7fb fa05 	bl	8002290 <chprintf>
  chprintf(chp, "heap free largest: %u bytes"SHELL_NEWLINE_STR, largest);
 8006e86:	4620      	mov	r0, r4
 8006e88:	9a01      	ldr	r2, [sp, #4]
 8006e8a:	4908      	ldr	r1, [pc, #32]	; (8006eac <cmd_mem+0x6c>)
 8006e8c:	f7fb fa00 	bl	8002290 <chprintf>
}
 8006e90:	b003      	add	sp, #12
 8006e92:	bd30      	pop	{r4, r5, pc}
 8006e94:	0800a1d0 	.word	0x0800a1d0
 8006e98:	0800a254 	.word	0x0800a254
 8006e9c:	20001280 	.word	0x20001280
 8006ea0:	0800a1d4 	.word	0x0800a1d4
 8006ea4:	0800a1f4 	.word	0x0800a1f4
 8006ea8:	0800a20c 	.word	0x0800a20c
 8006eac:	0800a22c 	.word	0x0800a22c

08006eb0 <chHeapFree>:
void chHeapFree(void *p) {
 8006eb0:	b570      	push	{r4, r5, r6, lr}
  heapp = H_HEAP(hp);
 8006eb2:	e950 4302 	ldrd	r4, r3, [r0, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8006eb6:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8006eb8:	08db      	lsrs	r3, r3, #3
  H_LOCK(heapp);
 8006eba:	f104 060c 	add.w	r6, r4, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8006ebe:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 8006ec2:	4605      	mov	r5, r0
  qp = &heapp->header;
 8006ec4:	3404      	adds	r4, #4
  H_LOCK(heapp);
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	f7fd fa02 	bl	80042d0 <chMtxLock>
  qp = &heapp->header;
 8006ecc:	4623      	mov	r3, r4
  hp = (heap_header_t *)p - 1U;
 8006ece:	f1a5 0108 	sub.w	r1, r5, #8
    if (((qp == &heapp->header) || (hp > qp)) &&
 8006ed2:	42a3      	cmp	r3, r4
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	d001      	beq.n	8006edc <chHeapFree+0x2c>
 8006ed8:	4299      	cmp	r1, r3
 8006eda:	d902      	bls.n	8006ee2 <chHeapFree+0x32>
 8006edc:	b11a      	cbz	r2, 8006ee6 <chHeapFree+0x36>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8006ede:	4291      	cmp	r1, r2
 8006ee0:	d301      	bcc.n	8006ee6 <chHeapFree+0x36>
void chHeapFree(void *p) {
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	e7f5      	b.n	8006ed2 <chHeapFree+0x22>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8006ee6:	f855 0c04 	ldr.w	r0, [r5, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 8006eea:	f845 2c08 	str.w	r2, [r5, #-8]
      H_NEXT(qp) = hp;
 8006eee:	6019      	str	r1, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8006ef0:	1c42      	adds	r2, r0, #1
 8006ef2:	f855 4c08 	ldr.w	r4, [r5, #-8]
 8006ef6:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 8006efa:	42a0      	cmp	r0, r4
 8006efc:	d00a      	beq.n	8006f14 <chHeapFree+0x64>
      if ((H_LIMIT(qp) == hp)) {
 8006efe:	6858      	ldr	r0, [r3, #4]
 8006f00:	1c42      	adds	r2, r0, #1
 8006f02:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006f06:	4291      	cmp	r1, r2
 8006f08:	d010      	beq.n	8006f2c <chHeapFree+0x7c>
  H_UNLOCK(heapp);
 8006f0a:	4630      	mov	r0, r6
}
 8006f0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  H_UNLOCK(heapp);
 8006f10:	f7ff b8e6 	b.w	80060e0 <chMtxUnlock>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8006f14:	6840      	ldr	r0, [r0, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8006f16:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8006f1a:	4402      	add	r2, r0
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8006f1c:	e945 4202 	strd	r4, r2, [r5, #-8]
      if ((H_LIMIT(qp) == hp)) {
 8006f20:	6858      	ldr	r0, [r3, #4]
 8006f22:	1c42      	adds	r2, r0, #1
 8006f24:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006f28:	4291      	cmp	r1, r2
 8006f2a:	d1ee      	bne.n	8006f0a <chHeapFree+0x5a>
        H_NEXT(qp) = H_NEXT(hp);
 8006f2c:	e955 1202 	ldrd	r1, r2, [r5, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8006f30:	3201      	adds	r2, #1
 8006f32:	4410      	add	r0, r2
        H_NEXT(qp) = H_NEXT(hp);
 8006f34:	e9c3 1000 	strd	r1, r0, [r3]
  H_UNLOCK(heapp);
 8006f38:	4630      	mov	r0, r6
}
 8006f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  H_UNLOCK(heapp);
 8006f3e:	f7ff b8cf 	b.w	80060e0 <chMtxUnlock>
 8006f42:	bf00      	nop
	...

08006f50 <oslib_test_003_002_execute>:
  void *p1;
  size_t total_size, largest_size;

  /* [3.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 8006f50:	2301      	movs	r3, #1
static void oslib_test_003_002_execute(void) {
 8006f52:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8006f54:	4c13      	ldr	r4, [pc, #76]	; (8006fa4 <oslib_test_003_002_execute+0x54>)
static void oslib_test_003_002_execute(void) {
 8006f56:	b082      	sub	sp, #8
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8006f58:	466a      	mov	r2, sp
 8006f5a:	a901      	add	r1, sp, #4
 8006f5c:	2000      	movs	r0, #0
  test_set_step(1);
 8006f5e:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8006f60:	f7ff ff36 	bl	8006dd0 <chHeapStatus>
 8006f64:	2110      	movs	r1, #16
 8006f66:	4810      	ldr	r0, [pc, #64]	; (8006fa8 <oslib_test_003_002_execute+0x58>)
 8006f68:	f7ff f8f2 	bl	8006150 <chHeapAllocAligned.constprop.75>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 8006f6c:	4606      	mov	r6, r0
 8006f6e:	3000      	adds	r0, #0
 8006f70:	bf18      	it	ne
 8006f72:	2001      	movne	r0, #1
 8006f74:	490d      	ldr	r1, [pc, #52]	; (8006fac <oslib_test_003_002_execute+0x5c>)
 8006f76:	f7f9 fceb 	bl	8000950 <_test_assert>
 8006f7a:	b980      	cbnz	r0, 8006f9e <oslib_test_003_002_execute+0x4e>
 8006f7c:	4605      	mov	r5, r0
    chHeapFree(p1);
 8006f7e:	4630      	mov	r0, r6
 8006f80:	f7ff ff96 	bl	8006eb0 <chHeapFree>
  }

  /* [3.2.2] Testing allocation failure.*/
  test_set_step(2);
 8006f84:	2302      	movs	r3, #2
 8006f86:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	f7ff f8df 	bl	8006150 <chHeapAllocAligned.constprop.75>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
 8006f92:	fab0 f080 	clz	r0, r0
 8006f96:	4906      	ldr	r1, [pc, #24]	; (8006fb0 <oslib_test_003_002_execute+0x60>)
 8006f98:	0940      	lsrs	r0, r0, #5
 8006f9a:	f7f9 fcd9 	bl	8000950 <_test_assert>
  }
}
 8006f9e:	b002      	add	sp, #8
 8006fa0:	bd70      	pop	{r4, r5, r6, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20001a7c 	.word	0x20001a7c
 8006fa8:	200019dc 	.word	0x200019dc
 8006fac:	0800a59c 	.word	0x0800a59c
 8006fb0:	0800a5b0 	.word	0x0800a5b0
	...

08006fc0 <oslib_test_003_001_execute>:
  test_set_step(1);
 8006fc0:	2301      	movs	r3, #1
static void oslib_test_003_001_execute(void) {
 8006fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8006fc6:	4cbf      	ldr	r4, [pc, #764]	; (80072c4 <oslib_test_003_001_execute+0x304>)
static void oslib_test_003_001_execute(void) {
 8006fc8:	b084      	sub	sp, #16
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8006fca:	4669      	mov	r1, sp
 8006fcc:	2200      	movs	r2, #0
 8006fce:	48be      	ldr	r0, [pc, #760]	; (80072c8 <oslib_test_003_001_execute+0x308>)
  test_set_step(1);
 8006fd0:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8006fd2:	f7ff fefd 	bl	8006dd0 <chHeapStatus>
 8006fd6:	f1a0 0001 	sub.w	r0, r0, #1
 8006fda:	fab0 f080 	clz	r0, r0
 8006fde:	49bb      	ldr	r1, [pc, #748]	; (80072cc <oslib_test_003_001_execute+0x30c>)
 8006fe0:	0940      	lsrs	r0, r0, #5
 8006fe2:	f7f9 fcb5 	bl	8000950 <_test_assert>
 8006fe6:	b110      	cbz	r0, 8006fee <oslib_test_003_001_execute+0x2e>
}
 8006fe8:	b004      	add	sp, #16
 8006fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 8006fee:	2302      	movs	r3, #2
 8006ff0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ff4:	48b4      	ldr	r0, [pc, #720]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 8006ff6:	6023      	str	r3, [r4, #0]
 8006ff8:	f7ff f8aa 	bl	8006150 <chHeapAllocAligned.constprop.75>
    test_assert(p1 == NULL, "allocation not failed");
 8006ffc:	fab0 f080 	clz	r0, r0
 8007000:	49b3      	ldr	r1, [pc, #716]	; (80072d0 <oslib_test_003_001_execute+0x310>)
 8007002:	0940      	lsrs	r0, r0, #5
 8007004:	f7f9 fca4 	bl	8000950 <_test_assert>
 8007008:	2800      	cmp	r0, #0
 800700a:	d1ed      	bne.n	8006fe8 <oslib_test_003_001_execute+0x28>
  test_set_step(3);
 800700c:	2303      	movs	r3, #3
 800700e:	2110      	movs	r1, #16
 8007010:	48ad      	ldr	r0, [pc, #692]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 8007012:	6023      	str	r3, [r4, #0]
 8007014:	f7ff f89c 	bl	8006150 <chHeapAllocAligned.constprop.75>
    test_assert(p1 != NULL, "allocation failed");
 8007018:	4605      	mov	r5, r0
 800701a:	3000      	adds	r0, #0
 800701c:	bf18      	it	ne
 800701e:	2001      	movne	r0, #1
 8007020:	49ac      	ldr	r1, [pc, #688]	; (80072d4 <oslib_test_003_001_execute+0x314>)
 8007022:	f7f9 fc95 	bl	8000950 <_test_assert>
 8007026:	2800      	cmp	r0, #0
 8007028:	d1de      	bne.n	8006fe8 <oslib_test_003_001_execute+0x28>
    chHeapFree(p1);
 800702a:	4628      	mov	r0, r5
 800702c:	f7ff ff40 	bl	8006eb0 <chHeapFree>
  test_set_step(4);
 8007030:	2304      	movs	r3, #4
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8007032:	a903      	add	r1, sp, #12
 8007034:	aa02      	add	r2, sp, #8
 8007036:	48a4      	ldr	r0, [pc, #656]	; (80072c8 <oslib_test_003_001_execute+0x308>)
  test_set_step(4);
 8007038:	6023      	str	r3, [r4, #0]
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 800703a:	f7ff fec9 	bl	8006dd0 <chHeapStatus>
 800703e:	4603      	mov	r3, r0
    test_assert(n == 1, "missing free block");
 8007040:	f1a0 0001 	sub.w	r0, r0, #1
 8007044:	fab0 f080 	clz	r0, r0
 8007048:	49a3      	ldr	r1, [pc, #652]	; (80072d8 <oslib_test_003_001_execute+0x318>)
 800704a:	0940      	lsrs	r0, r0, #5
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 800704c:	9301      	str	r3, [sp, #4]
    test_assert(n == 1, "missing free block");
 800704e:	f7f9 fc7f 	bl	8000950 <_test_assert>
 8007052:	2800      	cmp	r0, #0
 8007054:	d1c8      	bne.n	8006fe8 <oslib_test_003_001_execute+0x28>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 8007056:	9803      	ldr	r0, [sp, #12]
 8007058:	49a0      	ldr	r1, [pc, #640]	; (80072dc <oslib_test_003_001_execute+0x31c>)
 800705a:	280f      	cmp	r0, #15
 800705c:	bf94      	ite	ls
 800705e:	2000      	movls	r0, #0
 8007060:	2001      	movhi	r0, #1
 8007062:	f7f9 fc75 	bl	8000950 <_test_assert>
 8007066:	2800      	cmp	r0, #0
 8007068:	d1be      	bne.n	8006fe8 <oslib_test_003_001_execute+0x28>
    test_assert(total_size == largest_size, "unexpected heap state");
 800706a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 800706e:	1ac0      	subs	r0, r0, r3
 8007070:	fab0 f080 	clz	r0, r0
 8007074:	4999      	ldr	r1, [pc, #612]	; (80072dc <oslib_test_003_001_execute+0x31c>)
 8007076:	0940      	lsrs	r0, r0, #5
 8007078:	f7f9 fc6a 	bl	8000950 <_test_assert>
 800707c:	4605      	mov	r5, r0
 800707e:	2800      	cmp	r0, #0
 8007080:	d1b2      	bne.n	8006fe8 <oslib_test_003_001_execute+0x28>
  test_set_step(5);
 8007082:	2305      	movs	r3, #5
 8007084:	2110      	movs	r1, #16
 8007086:	4890      	ldr	r0, [pc, #576]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	f7ff f861 	bl	8006150 <chHeapAllocAligned.constprop.75>
 800708e:	2110      	movs	r1, #16
 8007090:	4680      	mov	r8, r0
 8007092:	488d      	ldr	r0, [pc, #564]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 8007094:	f7ff f85c 	bl	8006150 <chHeapAllocAligned.constprop.75>
 8007098:	2110      	movs	r1, #16
 800709a:	4607      	mov	r7, r0
 800709c:	488a      	ldr	r0, [pc, #552]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 800709e:	f7ff f857 	bl	8006150 <chHeapAllocAligned.constprop.75>
 80070a2:	4606      	mov	r6, r0
    chHeapFree(p1);                                 /* Does not merge.*/
 80070a4:	4640      	mov	r0, r8
 80070a6:	f7ff ff03 	bl	8006eb0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 80070aa:	4638      	mov	r0, r7
 80070ac:	f7ff ff00 	bl	8006eb0 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 80070b0:	4630      	mov	r0, r6
 80070b2:	f7ff fefd 	bl	8006eb0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80070b6:	462a      	mov	r2, r5
 80070b8:	a901      	add	r1, sp, #4
 80070ba:	4883      	ldr	r0, [pc, #524]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 80070bc:	f7ff fe88 	bl	8006dd0 <chHeapStatus>
 80070c0:	f1a0 0001 	sub.w	r0, r0, #1
 80070c4:	fab0 f080 	clz	r0, r0
 80070c8:	4980      	ldr	r1, [pc, #512]	; (80072cc <oslib_test_003_001_execute+0x30c>)
 80070ca:	0940      	lsrs	r0, r0, #5
 80070cc:	f7f9 fc40 	bl	8000950 <_test_assert>
 80070d0:	4605      	mov	r5, r0
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d188      	bne.n	8006fe8 <oslib_test_003_001_execute+0x28>
  test_set_step(6);
 80070d6:	2306      	movs	r3, #6
 80070d8:	2110      	movs	r1, #16
 80070da:	487b      	ldr	r0, [pc, #492]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	f7ff f837 	bl	8006150 <chHeapAllocAligned.constprop.75>
 80070e2:	2110      	movs	r1, #16
 80070e4:	4606      	mov	r6, r0
 80070e6:	4878      	ldr	r0, [pc, #480]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 80070e8:	f7ff f832 	bl	8006150 <chHeapAllocAligned.constprop.75>
 80070ec:	4607      	mov	r7, r0
 80070ee:	2110      	movs	r1, #16
 80070f0:	4875      	ldr	r0, [pc, #468]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 80070f2:	f7ff f82d 	bl	8006150 <chHeapAllocAligned.constprop.75>
    chHeapFree(p3);                                 /* Merges forward.*/
 80070f6:	f7ff fedb 	bl	8006eb0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 80070fa:	4638      	mov	r0, r7
 80070fc:	f7ff fed8 	bl	8006eb0 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 8007100:	4630      	mov	r0, r6
 8007102:	f7ff fed5 	bl	8006eb0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8007106:	462a      	mov	r2, r5
 8007108:	a901      	add	r1, sp, #4
 800710a:	486f      	ldr	r0, [pc, #444]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 800710c:	f7ff fe60 	bl	8006dd0 <chHeapStatus>
 8007110:	1e43      	subs	r3, r0, #1
 8007112:	4258      	negs	r0, r3
 8007114:	496d      	ldr	r1, [pc, #436]	; (80072cc <oslib_test_003_001_execute+0x30c>)
 8007116:	4158      	adcs	r0, r3
 8007118:	f7f9 fc1a 	bl	8000950 <_test_assert>
 800711c:	4605      	mov	r5, r0
 800711e:	2800      	cmp	r0, #0
 8007120:	f47f af62 	bne.w	8006fe8 <oslib_test_003_001_execute+0x28>
  test_set_step(7);
 8007124:	2307      	movs	r3, #7
 8007126:	2111      	movs	r1, #17
 8007128:	4867      	ldr	r0, [pc, #412]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 800712a:	6023      	str	r3, [r4, #0]
 800712c:	f7ff f810 	bl	8006150 <chHeapAllocAligned.constprop.75>
 8007130:	2110      	movs	r1, #16
 8007132:	4606      	mov	r6, r0
 8007134:	4864      	ldr	r0, [pc, #400]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 8007136:	f7ff f80b 	bl	8006150 <chHeapAllocAligned.constprop.75>
 800713a:	4607      	mov	r7, r0
    chHeapFree(p1);
 800713c:	4630      	mov	r0, r6
 800713e:	f7ff feb7 	bl	8006eb0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8007142:	462a      	mov	r2, r5
 8007144:	a901      	add	r1, sp, #4
 8007146:	4860      	ldr	r0, [pc, #384]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 8007148:	f7ff fe42 	bl	8006dd0 <chHeapStatus>
 800714c:	f1a0 0802 	sub.w	r8, r0, #2
 8007150:	f1d8 0000 	rsbs	r0, r8, #0
 8007154:	4962      	ldr	r1, [pc, #392]	; (80072e0 <oslib_test_003_001_execute+0x320>)
 8007156:	eb40 0008 	adc.w	r0, r0, r8
 800715a:	f7f9 fbf9 	bl	8000950 <_test_assert>
 800715e:	4605      	mov	r5, r0
 8007160:	2800      	cmp	r0, #0
 8007162:	f47f af41 	bne.w	8006fe8 <oslib_test_003_001_execute+0x28>
 8007166:	2110      	movs	r1, #16
 8007168:	4857      	ldr	r0, [pc, #348]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 800716a:	f7fe fff1 	bl	8006150 <chHeapAllocAligned.constprop.75>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800716e:	462a      	mov	r2, r5
 8007170:	4606      	mov	r6, r0
 8007172:	a901      	add	r1, sp, #4
 8007174:	4854      	ldr	r0, [pc, #336]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 8007176:	f7ff fe2b 	bl	8006dd0 <chHeapStatus>
 800717a:	2801      	cmp	r0, #1
 800717c:	f000 809f 	beq.w	80072be <oslib_test_003_001_execute+0x2fe>
 8007180:	2200      	movs	r2, #0
 8007182:	a901      	add	r1, sp, #4
 8007184:	4850      	ldr	r0, [pc, #320]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 8007186:	f7ff fe23 	bl	8006dd0 <chHeapStatus>
 800718a:	f1a0 0e02 	sub.w	lr, r0, #2
 800718e:	f1de 0000 	rsbs	r0, lr, #0
 8007192:	eb40 000e 	adc.w	r0, r0, lr
 8007196:	494d      	ldr	r1, [pc, #308]	; (80072cc <oslib_test_003_001_execute+0x30c>)
 8007198:	f7f9 fbda 	bl	8000950 <_test_assert>
 800719c:	4605      	mov	r5, r0
 800719e:	2800      	cmp	r0, #0
 80071a0:	f47f af22 	bne.w	8006fe8 <oslib_test_003_001_execute+0x28>
    chHeapFree(p2);
 80071a4:	4638      	mov	r0, r7
 80071a6:	f7ff fe83 	bl	8006eb0 <chHeapFree>
    chHeapFree(p1);
 80071aa:	4630      	mov	r0, r6
 80071ac:	f7ff fe80 	bl	8006eb0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80071b0:	462a      	mov	r2, r5
 80071b2:	a901      	add	r1, sp, #4
 80071b4:	4844      	ldr	r0, [pc, #272]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 80071b6:	f7ff fe0b 	bl	8006dd0 <chHeapStatus>
 80071ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80071be:	f1dc 0000 	rsbs	r0, ip, #0
 80071c2:	4942      	ldr	r1, [pc, #264]	; (80072cc <oslib_test_003_001_execute+0x30c>)
 80071c4:	eb40 000c 	adc.w	r0, r0, ip
 80071c8:	f7f9 fbc2 	bl	8000950 <_test_assert>
 80071cc:	4605      	mov	r5, r0
 80071ce:	2800      	cmp	r0, #0
 80071d0:	f47f af0a 	bne.w	8006fe8 <oslib_test_003_001_execute+0x28>
  test_set_step(8);
 80071d4:	2308      	movs	r3, #8
 80071d6:	2110      	movs	r1, #16
 80071d8:	483b      	ldr	r0, [pc, #236]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 80071da:	6023      	str	r3, [r4, #0]
 80071dc:	f7fe ffb8 	bl	8006150 <chHeapAllocAligned.constprop.75>
 80071e0:	2110      	movs	r1, #16
 80071e2:	4607      	mov	r7, r0
 80071e4:	4838      	ldr	r0, [pc, #224]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 80071e6:	f7fe ffb3 	bl	8006150 <chHeapAllocAligned.constprop.75>
 80071ea:	4606      	mov	r6, r0
    chHeapFree(p1);
 80071ec:	4638      	mov	r0, r7
 80071ee:	f7ff fe5f 	bl	8006eb0 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 80071f2:	462a      	mov	r2, r5
 80071f4:	a901      	add	r1, sp, #4
 80071f6:	4834      	ldr	r0, [pc, #208]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 80071f8:	f7ff fdea 	bl	8006dd0 <chHeapStatus>
 80071fc:	1e87      	subs	r7, r0, #2
 80071fe:	4278      	negs	r0, r7
 8007200:	4937      	ldr	r1, [pc, #220]	; (80072e0 <oslib_test_003_001_execute+0x320>)
 8007202:	4178      	adcs	r0, r7
 8007204:	f7f9 fba4 	bl	8000950 <_test_assert>
 8007208:	4605      	mov	r5, r0
 800720a:	2800      	cmp	r0, #0
 800720c:	f47f aeec 	bne.w	8006fe8 <oslib_test_003_001_execute+0x28>
 8007210:	2120      	movs	r1, #32
 8007212:	482d      	ldr	r0, [pc, #180]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 8007214:	f7fe ff9c 	bl	8006150 <chHeapAllocAligned.constprop.75>
    chHeapFree(p1);
 8007218:	f7ff fe4a 	bl	8006eb0 <chHeapFree>
    chHeapFree(p2);
 800721c:	4630      	mov	r0, r6
 800721e:	f7ff fe47 	bl	8006eb0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8007222:	462a      	mov	r2, r5
 8007224:	a901      	add	r1, sp, #4
 8007226:	4828      	ldr	r0, [pc, #160]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 8007228:	f7ff fdd2 	bl	8006dd0 <chHeapStatus>
 800722c:	1e45      	subs	r5, r0, #1
 800722e:	4268      	negs	r0, r5
 8007230:	4926      	ldr	r1, [pc, #152]	; (80072cc <oslib_test_003_001_execute+0x30c>)
 8007232:	4168      	adcs	r0, r5
 8007234:	f7f9 fb8c 	bl	8000950 <_test_assert>
 8007238:	4602      	mov	r2, r0
 800723a:	2800      	cmp	r0, #0
 800723c:	f47f aed4 	bne.w	8006fe8 <oslib_test_003_001_execute+0x28>
  test_set_step(9);
 8007240:	2309      	movs	r3, #9
    (void)chHeapStatus(&test_heap, &n, NULL);
 8007242:	a901      	add	r1, sp, #4
 8007244:	4820      	ldr	r0, [pc, #128]	; (80072c8 <oslib_test_003_001_execute+0x308>)
  test_set_step(9);
 8007246:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 8007248:	f7ff fdc2 	bl	8006dd0 <chHeapStatus>
 800724c:	9901      	ldr	r1, [sp, #4]
 800724e:	481e      	ldr	r0, [pc, #120]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 8007250:	f7fe ff7e 	bl	8006150 <chHeapAllocAligned.constprop.75>
    test_assert(p1 != NULL, "allocation failed");
 8007254:	4606      	mov	r6, r0
 8007256:	3000      	adds	r0, #0
 8007258:	491e      	ldr	r1, [pc, #120]	; (80072d4 <oslib_test_003_001_execute+0x314>)
 800725a:	bf18      	it	ne
 800725c:	2001      	movne	r0, #1
 800725e:	f7f9 fb77 	bl	8000950 <_test_assert>
 8007262:	4602      	mov	r2, r0
 8007264:	2800      	cmp	r0, #0
 8007266:	f47f aebf 	bne.w	8006fe8 <oslib_test_003_001_execute+0x28>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 800726a:	4601      	mov	r1, r0
 800726c:	4816      	ldr	r0, [pc, #88]	; (80072c8 <oslib_test_003_001_execute+0x308>)
 800726e:	f7ff fdaf 	bl	8006dd0 <chHeapStatus>
 8007272:	fab0 f080 	clz	r0, r0
 8007276:	491b      	ldr	r1, [pc, #108]	; (80072e4 <oslib_test_003_001_execute+0x324>)
 8007278:	0940      	lsrs	r0, r0, #5
 800727a:	f7f9 fb69 	bl	8000950 <_test_assert>
 800727e:	4605      	mov	r5, r0
 8007280:	2800      	cmp	r0, #0
 8007282:	f47f aeb1 	bne.w	8006fe8 <oslib_test_003_001_execute+0x28>
    chHeapFree(p1);
 8007286:	4630      	mov	r0, r6
 8007288:	f7ff fe12 	bl	8006eb0 <chHeapFree>
  test_set_step(10);
 800728c:	230a      	movs	r3, #10
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800728e:	462a      	mov	r2, r5
 8007290:	a901      	add	r1, sp, #4
 8007292:	480d      	ldr	r0, [pc, #52]	; (80072c8 <oslib_test_003_001_execute+0x308>)
  test_set_step(10);
 8007294:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8007296:	f7ff fd9b 	bl	8006dd0 <chHeapStatus>
 800729a:	1e42      	subs	r2, r0, #1
 800729c:	4250      	negs	r0, r2
 800729e:	4150      	adcs	r0, r2
 80072a0:	490a      	ldr	r1, [pc, #40]	; (80072cc <oslib_test_003_001_execute+0x30c>)
 80072a2:	f7f9 fb55 	bl	8000950 <_test_assert>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	f47f ae9e 	bne.w	8006fe8 <oslib_test_003_001_execute+0x28>
    test_assert(n == sz, "size changed");
 80072ac:	e9dd 3000 	ldrd	r3, r0, [sp]
 80072b0:	1ac3      	subs	r3, r0, r3
 80072b2:	4258      	negs	r0, r3
 80072b4:	490c      	ldr	r1, [pc, #48]	; (80072e8 <oslib_test_003_001_execute+0x328>)
 80072b6:	4158      	adcs	r0, r3
 80072b8:	f7f9 fb4a 	bl	8000950 <_test_assert>
 80072bc:	e694      	b.n	8006fe8 <oslib_test_003_001_execute+0x28>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 80072be:	2001      	movs	r0, #1
 80072c0:	e769      	b.n	8007196 <oslib_test_003_001_execute+0x1d6>
 80072c2:	bf00      	nop
 80072c4:	20001a7c 	.word	0x20001a7c
 80072c8:	200019dc 	.word	0x200019dc
 80072cc:	0800a530 	.word	0x0800a530
 80072d0:	0800a5b0 	.word	0x0800a5b0
 80072d4:	0800a59c 	.word	0x0800a59c
 80072d8:	0800a540 	.word	0x0800a540
 80072dc:	0800a554 	.word	0x0800a554
 80072e0:	0800a56c 	.word	0x0800a56c
 80072e4:	0800a3e4 	.word	0x0800a3e4
 80072e8:	0800a57c 	.word	0x0800a57c
 80072ec:	00000000 	.word	0x00000000

080072f0 <dyn_release_object_heap.part.3>:
  dyn_element_t *prev = (dyn_element_t *)dlp;
 80072f0:	460a      	mov	r2, r1
 80072f2:	e002      	b.n	80072fa <dyn_release_object_heap.part.3+0xa>
    if (prev->next == element) {
 80072f4:	4298      	cmp	r0, r3
 80072f6:	d006      	beq.n	8007306 <dyn_release_object_heap.part.3+0x16>
 80072f8:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 80072fa:	6813      	ldr	r3, [r2, #0]
 80072fc:	428b      	cmp	r3, r1
 80072fe:	d1f9      	bne.n	80072f4 <dyn_release_object_heap.part.3+0x4>
  return NULL;
 8007300:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8007302:	f7ff bdd5 	b.w	8006eb0 <chHeapFree>
      prev->next = element->next;
 8007306:	6803      	ldr	r3, [r0, #0]
 8007308:	6013      	str	r3, [r2, #0]
    chHeapFree((void *)dep);
 800730a:	f7ff bdd1 	b.w	8006eb0 <chHeapFree>
 800730e:	bf00      	nop

08007310 <chFactoryReleaseObjectsFIFO>:
 *
 * @param[in] dofp      dynamic "objects FIFO" object reference
 *
 * @api
 */
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 8007310:	b510      	push	{r4, lr}
 8007312:	4604      	mov	r4, r0

  F_LOCK();
 8007314:	4807      	ldr	r0, [pc, #28]	; (8007334 <chFactoryReleaseObjectsFIFO+0x24>)
 8007316:	f7fc ffdb 	bl	80042d0 <chMtxLock>
  dep->refs--;
 800731a:	6863      	ldr	r3, [r4, #4]
 800731c:	3b01      	subs	r3, #1
 800731e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8007320:	b91b      	cbnz	r3, 800732a <chFactoryReleaseObjectsFIFO+0x1a>
 8007322:	4620      	mov	r0, r4
 8007324:	4904      	ldr	r1, [pc, #16]	; (8007338 <chFactoryReleaseObjectsFIFO+0x28>)
 8007326:	f7ff ffe3 	bl	80072f0 <dyn_release_object_heap.part.3>

  dyn_release_object_heap(&dofp->element, &ch_factory.fifo_list);

  F_UNLOCK();
}
 800732a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800732e:	4801      	ldr	r0, [pc, #4]	; (8007334 <chFactoryReleaseObjectsFIFO+0x24>)
 8007330:	f7fe bed6 	b.w	80060e0 <chMtxUnlock>
 8007334:	20001164 	.word	0x20001164
 8007338:	200011a4 	.word	0x200011a4
 800733c:	00000000 	.word	0x00000000

08007340 <oslib_test_004_005_execute>:
      chFactoryReleaseObjectsFIFO(dofp);
    }
  }
}

static void oslib_test_004_005_execute(void) {
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_objects_fifo_t *dofp;

  /* [4.5.1] Retrieving a dynamic objects FIFO by name, must not
     exist.*/
  test_set_step(1);
 8007342:	2501      	movs	r5, #1
 8007344:	4c41      	ldr	r4, [pc, #260]	; (800744c <oslib_test_004_005_execute+0x10c>)
 8007346:	6025      	str	r5, [r4, #0]
  {
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8007348:	f7ff f902 	bl	8006550 <chFactoryFindObjectsFIFO.constprop.46>
    test_assert(dofp == NULL, "found");
 800734c:	fab0 f080 	clz	r0, r0
 8007350:	493f      	ldr	r1, [pc, #252]	; (8007450 <oslib_test_004_005_execute+0x110>)
 8007352:	0940      	lsrs	r0, r0, #5
 8007354:	f7f9 fafc 	bl	8000950 <_test_assert>
 8007358:	b100      	cbz	r0, 800735c <oslib_test_004_005_execute+0x1c>
  test_set_step(6);
  {
    dofp = chFactoryFindObjectsFIFO("myfifo");
    test_assert(dofp == NULL, "found");
  }
}
 800735a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800735c:	2302      	movs	r3, #2
 800735e:	6023      	str	r3, [r4, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 8007360:	f7ff f8a6 	bl	80064b0 <chFactoryCreateObjectsFIFO.constprop.47>
    test_assert(dofp != NULL, "cannot create");
 8007364:	4606      	mov	r6, r0
 8007366:	3000      	adds	r0, #0
 8007368:	bf18      	it	ne
 800736a:	2001      	movne	r0, #1
 800736c:	4939      	ldr	r1, [pc, #228]	; (8007454 <oslib_test_004_005_execute+0x114>)
 800736e:	f7f9 faef 	bl	8000950 <_test_assert>
 8007372:	2800      	cmp	r0, #0
 8007374:	d1f1      	bne.n	800735a <oslib_test_004_005_execute+0x1a>
  test_set_step(3);
 8007376:	2303      	movs	r3, #3
 8007378:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800737a:	f7ff f899 	bl	80064b0 <chFactoryCreateObjectsFIFO.constprop.47>
    test_assert(dofp1 == NULL, "can create");
 800737e:	fab0 f080 	clz	r0, r0
 8007382:	4935      	ldr	r1, [pc, #212]	; (8007458 <oslib_test_004_005_execute+0x118>)
 8007384:	0940      	lsrs	r0, r0, #5
 8007386:	f7f9 fae3 	bl	8000950 <_test_assert>
 800738a:	2800      	cmp	r0, #0
 800738c:	d1e5      	bne.n	800735a <oslib_test_004_005_execute+0x1a>
  test_set_step(4);
 800738e:	2304      	movs	r3, #4
 8007390:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 8007392:	f7ff f8dd 	bl	8006550 <chFactoryFindObjectsFIFO.constprop.46>
    test_assert(dofp1 != NULL, "not found");
 8007396:	4607      	mov	r7, r0
 8007398:	3000      	adds	r0, #0
 800739a:	bf18      	it	ne
 800739c:	2001      	movne	r0, #1
 800739e:	492f      	ldr	r1, [pc, #188]	; (800745c <oslib_test_004_005_execute+0x11c>)
 80073a0:	f7f9 fad6 	bl	8000950 <_test_assert>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d1d8      	bne.n	800735a <oslib_test_004_005_execute+0x1a>
    test_assert(dofp == dofp1, "object reference mismatch");
 80073a8:	1bf0      	subs	r0, r6, r7
 80073aa:	fab0 f080 	clz	r0, r0
 80073ae:	492c      	ldr	r1, [pc, #176]	; (8007460 <oslib_test_004_005_execute+0x120>)
 80073b0:	0940      	lsrs	r0, r0, #5
 80073b2:	f7f9 facd 	bl	8000950 <_test_assert>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d1cf      	bne.n	800735a <oslib_test_004_005_execute+0x1a>
    test_assert(dofp1->element.refs == 2, "object reference mismatch");
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4928      	ldr	r1, [pc, #160]	; (8007460 <oslib_test_004_005_execute+0x120>)
 80073be:	f1a0 0002 	sub.w	r0, r0, #2
 80073c2:	fab0 f080 	clz	r0, r0
 80073c6:	0940      	lsrs	r0, r0, #5
 80073c8:	f7f9 fac2 	bl	8000950 <_test_assert>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d1c4      	bne.n	800735a <oslib_test_004_005_execute+0x1a>
 80073d0:	687b      	ldr	r3, [r7, #4]
    test_assert(dofp1 == dofp2, "object reference mismatch");
 80073d2:	4628      	mov	r0, r5
 80073d4:	442b      	add	r3, r5
 80073d6:	607b      	str	r3, [r7, #4]
 80073d8:	4921      	ldr	r1, [pc, #132]	; (8007460 <oslib_test_004_005_execute+0x120>)
 80073da:	f7f9 fab9 	bl	8000950 <_test_assert>
 80073de:	2800      	cmp	r0, #0
 80073e0:	d1bb      	bne.n	800735a <oslib_test_004_005_execute+0x1a>
    test_assert(dofp2->element.refs == 3, "object reference mismatch");
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	491e      	ldr	r1, [pc, #120]	; (8007460 <oslib_test_004_005_execute+0x120>)
 80073e6:	f1a0 0c03 	sub.w	ip, r0, #3
 80073ea:	f1dc 0000 	rsbs	r0, ip, #0
 80073ee:	eb40 000c 	adc.w	r0, r0, ip
 80073f2:	f7f9 faad 	bl	8000950 <_test_assert>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d1af      	bne.n	800735a <oslib_test_004_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp2);
 80073fa:	4638      	mov	r0, r7
 80073fc:	f7ff ff88 	bl	8007310 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp1->element.refs == 2, "references mismatch");
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	4918      	ldr	r1, [pc, #96]	; (8007464 <oslib_test_004_005_execute+0x124>)
 8007404:	1e82      	subs	r2, r0, #2
 8007406:	4250      	negs	r0, r2
 8007408:	4150      	adcs	r0, r2
 800740a:	f7f9 faa1 	bl	8000950 <_test_assert>
 800740e:	2800      	cmp	r0, #0
 8007410:	d1a3      	bne.n	800735a <oslib_test_004_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp1);
 8007412:	4638      	mov	r0, r7
 8007414:	f7ff ff7c 	bl	8007310 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp->element.refs == 1, "references mismatch");
 8007418:	6870      	ldr	r0, [r6, #4]
 800741a:	4912      	ldr	r1, [pc, #72]	; (8007464 <oslib_test_004_005_execute+0x124>)
 800741c:	1b43      	subs	r3, r0, r5
 800741e:	4258      	negs	r0, r3
 8007420:	4158      	adcs	r0, r3
 8007422:	f7f9 fa95 	bl	8000950 <_test_assert>
 8007426:	2800      	cmp	r0, #0
 8007428:	d197      	bne.n	800735a <oslib_test_004_005_execute+0x1a>
  test_set_step(5);
 800742a:	2305      	movs	r3, #5
    chFactoryReleaseObjectsFIFO(dofp);
 800742c:	4630      	mov	r0, r6
  test_set_step(5);
 800742e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 8007430:	f7ff ff6e 	bl	8007310 <chFactoryReleaseObjectsFIFO>
  test_set_step(6);
 8007434:	2306      	movs	r3, #6
 8007436:	6023      	str	r3, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8007438:	f7ff f88a 	bl	8006550 <chFactoryFindObjectsFIFO.constprop.46>
}
 800743c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dofp == NULL, "found");
 8007440:	fab0 f080 	clz	r0, r0
 8007444:	4902      	ldr	r1, [pc, #8]	; (8007450 <oslib_test_004_005_execute+0x110>)
 8007446:	0940      	lsrs	r0, r0, #5
 8007448:	f7f9 ba82 	b.w	8000950 <_test_assert>
 800744c:	20001a7c 	.word	0x20001a7c
 8007450:	0800a648 	.word	0x0800a648
 8007454:	0800a628 	.word	0x0800a628
 8007458:	0800a638 	.word	0x0800a638
 800745c:	0800a644 	.word	0x0800a644
 8007460:	0800a650 	.word	0x0800a650
 8007464:	0800a66c 	.word	0x0800a66c
	...

08007470 <oslib_test_004_005_teardown>:
static void oslib_test_004_005_teardown(void) {
 8007470:	b510      	push	{r4, lr}
  dofp = chFactoryFindObjectsFIFO("myfifo");
 8007472:	f7ff f86d 	bl	8006550 <chFactoryFindObjectsFIFO.constprop.46>
  if (dofp != NULL) {
 8007476:	b140      	cbz	r0, 800748a <oslib_test_004_005_teardown+0x1a>
    while (dofp->element.refs > 0U) {
 8007478:	6843      	ldr	r3, [r0, #4]
 800747a:	4604      	mov	r4, r0
 800747c:	b12b      	cbz	r3, 800748a <oslib_test_004_005_teardown+0x1a>
      chFactoryReleaseObjectsFIFO(dofp);
 800747e:	4620      	mov	r0, r4
 8007480:	f7ff ff46 	bl	8007310 <chFactoryReleaseObjectsFIFO>
    while (dofp->element.refs > 0U) {
 8007484:	6863      	ldr	r3, [r4, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1f9      	bne.n	800747e <oslib_test_004_005_teardown+0xe>
}
 800748a:	bd10      	pop	{r4, pc}
 800748c:	0000      	movs	r0, r0
	...

08007490 <chFactoryReleaseMailbox>:
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8007490:	b510      	push	{r4, lr}
 8007492:	4604      	mov	r4, r0
  F_LOCK();
 8007494:	4807      	ldr	r0, [pc, #28]	; (80074b4 <chFactoryReleaseMailbox+0x24>)
 8007496:	f7fc ff1b 	bl	80042d0 <chMtxLock>
  dep->refs--;
 800749a:	6863      	ldr	r3, [r4, #4]
 800749c:	3b01      	subs	r3, #1
 800749e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 80074a0:	b91b      	cbnz	r3, 80074aa <chFactoryReleaseMailbox+0x1a>
 80074a2:	4620      	mov	r0, r4
 80074a4:	4904      	ldr	r1, [pc, #16]	; (80074b8 <chFactoryReleaseMailbox+0x28>)
 80074a6:	f7ff ff23 	bl	80072f0 <dyn_release_object_heap.part.3>
}
 80074aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 80074ae:	4801      	ldr	r0, [pc, #4]	; (80074b4 <chFactoryReleaseMailbox+0x24>)
 80074b0:	f7fe be16 	b.w	80060e0 <chMtxUnlock>
 80074b4:	20001164 	.word	0x20001164
 80074b8:	200011a0 	.word	0x200011a0
 80074bc:	00000000 	.word	0x00000000

080074c0 <oslib_test_004_004_execute>:
static void oslib_test_004_004_execute(void) {
 80074c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 80074c2:	2501      	movs	r5, #1
 80074c4:	4c41      	ldr	r4, [pc, #260]	; (80075cc <oslib_test_004_004_execute+0x10c>)
 80074c6:	6025      	str	r5, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 80074c8:	f7fe ffda 	bl	8006480 <chFactoryFindMailbox.constprop.48>
    test_assert(dmp == NULL, "found");
 80074cc:	fab0 f080 	clz	r0, r0
 80074d0:	493f      	ldr	r1, [pc, #252]	; (80075d0 <oslib_test_004_004_execute+0x110>)
 80074d2:	0940      	lsrs	r0, r0, #5
 80074d4:	f7f9 fa3c 	bl	8000950 <_test_assert>
 80074d8:	b100      	cbz	r0, 80074dc <oslib_test_004_004_execute+0x1c>
}
 80074da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 80074dc:	2302      	movs	r3, #2
 80074de:	6023      	str	r3, [r4, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 80074e0:	f7fe ff9e 	bl	8006420 <chFactoryCreateMailbox.constprop.49>
    test_assert(dmp != NULL, "cannot create");
 80074e4:	4606      	mov	r6, r0
 80074e6:	3000      	adds	r0, #0
 80074e8:	bf18      	it	ne
 80074ea:	2001      	movne	r0, #1
 80074ec:	4939      	ldr	r1, [pc, #228]	; (80075d4 <oslib_test_004_004_execute+0x114>)
 80074ee:	f7f9 fa2f 	bl	8000950 <_test_assert>
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d1f1      	bne.n	80074da <oslib_test_004_004_execute+0x1a>
  test_set_step(3);
 80074f6:	2303      	movs	r3, #3
 80074f8:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 80074fa:	f7fe ff91 	bl	8006420 <chFactoryCreateMailbox.constprop.49>
    test_assert(dmp1 == NULL, "can create");
 80074fe:	fab0 f080 	clz	r0, r0
 8007502:	4935      	ldr	r1, [pc, #212]	; (80075d8 <oslib_test_004_004_execute+0x118>)
 8007504:	0940      	lsrs	r0, r0, #5
 8007506:	f7f9 fa23 	bl	8000950 <_test_assert>
 800750a:	2800      	cmp	r0, #0
 800750c:	d1e5      	bne.n	80074da <oslib_test_004_004_execute+0x1a>
  test_set_step(4);
 800750e:	2304      	movs	r3, #4
 8007510:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 8007512:	f7fe ffb5 	bl	8006480 <chFactoryFindMailbox.constprop.48>
    test_assert(dmp1 != NULL, "not found");
 8007516:	4607      	mov	r7, r0
 8007518:	3000      	adds	r0, #0
 800751a:	bf18      	it	ne
 800751c:	2001      	movne	r0, #1
 800751e:	492f      	ldr	r1, [pc, #188]	; (80075dc <oslib_test_004_004_execute+0x11c>)
 8007520:	f7f9 fa16 	bl	8000950 <_test_assert>
 8007524:	2800      	cmp	r0, #0
 8007526:	d1d8      	bne.n	80074da <oslib_test_004_004_execute+0x1a>
    test_assert(dmp == dmp1, "object reference mismatch");
 8007528:	1bf0      	subs	r0, r6, r7
 800752a:	fab0 f080 	clz	r0, r0
 800752e:	492c      	ldr	r1, [pc, #176]	; (80075e0 <oslib_test_004_004_execute+0x120>)
 8007530:	0940      	lsrs	r0, r0, #5
 8007532:	f7f9 fa0d 	bl	8000950 <_test_assert>
 8007536:	2800      	cmp	r0, #0
 8007538:	d1cf      	bne.n	80074da <oslib_test_004_004_execute+0x1a>
    test_assert(dmp1->element.refs == 2, "object reference mismatch");
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	4928      	ldr	r1, [pc, #160]	; (80075e0 <oslib_test_004_004_execute+0x120>)
 800753e:	f1a0 0002 	sub.w	r0, r0, #2
 8007542:	fab0 f080 	clz	r0, r0
 8007546:	0940      	lsrs	r0, r0, #5
 8007548:	f7f9 fa02 	bl	8000950 <_test_assert>
 800754c:	2800      	cmp	r0, #0
 800754e:	d1c4      	bne.n	80074da <oslib_test_004_004_execute+0x1a>
 8007550:	687b      	ldr	r3, [r7, #4]
    test_assert(dmp1 == dmp2, "object reference mismatch");
 8007552:	4628      	mov	r0, r5
 8007554:	442b      	add	r3, r5
 8007556:	607b      	str	r3, [r7, #4]
 8007558:	4921      	ldr	r1, [pc, #132]	; (80075e0 <oslib_test_004_004_execute+0x120>)
 800755a:	f7f9 f9f9 	bl	8000950 <_test_assert>
 800755e:	2800      	cmp	r0, #0
 8007560:	d1bb      	bne.n	80074da <oslib_test_004_004_execute+0x1a>
    test_assert(dmp2->element.refs == 3, "object reference mismatch");
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	491e      	ldr	r1, [pc, #120]	; (80075e0 <oslib_test_004_004_execute+0x120>)
 8007566:	f1a0 0c03 	sub.w	ip, r0, #3
 800756a:	f1dc 0000 	rsbs	r0, ip, #0
 800756e:	eb40 000c 	adc.w	r0, r0, ip
 8007572:	f7f9 f9ed 	bl	8000950 <_test_assert>
 8007576:	2800      	cmp	r0, #0
 8007578:	d1af      	bne.n	80074da <oslib_test_004_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp2);
 800757a:	4638      	mov	r0, r7
 800757c:	f7ff ff88 	bl	8007490 <chFactoryReleaseMailbox>
    test_assert(dmp1->element.refs == 2, "references mismatch");
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	4918      	ldr	r1, [pc, #96]	; (80075e4 <oslib_test_004_004_execute+0x124>)
 8007584:	1e82      	subs	r2, r0, #2
 8007586:	4250      	negs	r0, r2
 8007588:	4150      	adcs	r0, r2
 800758a:	f7f9 f9e1 	bl	8000950 <_test_assert>
 800758e:	2800      	cmp	r0, #0
 8007590:	d1a3      	bne.n	80074da <oslib_test_004_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp1);
 8007592:	4638      	mov	r0, r7
 8007594:	f7ff ff7c 	bl	8007490 <chFactoryReleaseMailbox>
    test_assert(dmp->element.refs == 1, "references mismatch");
 8007598:	6870      	ldr	r0, [r6, #4]
 800759a:	4912      	ldr	r1, [pc, #72]	; (80075e4 <oslib_test_004_004_execute+0x124>)
 800759c:	1b43      	subs	r3, r0, r5
 800759e:	4258      	negs	r0, r3
 80075a0:	4158      	adcs	r0, r3
 80075a2:	f7f9 f9d5 	bl	8000950 <_test_assert>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d197      	bne.n	80074da <oslib_test_004_004_execute+0x1a>
  test_set_step(5);
 80075aa:	2305      	movs	r3, #5
    chFactoryReleaseMailbox(dmp);
 80075ac:	4630      	mov	r0, r6
  test_set_step(5);
 80075ae:	6023      	str	r3, [r4, #0]
    chFactoryReleaseMailbox(dmp);
 80075b0:	f7ff ff6e 	bl	8007490 <chFactoryReleaseMailbox>
  test_set_step(6);
 80075b4:	2306      	movs	r3, #6
 80075b6:	6023      	str	r3, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 80075b8:	f7fe ff62 	bl	8006480 <chFactoryFindMailbox.constprop.48>
}
 80075bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dmp == NULL, "found");
 80075c0:	fab0 f080 	clz	r0, r0
 80075c4:	4902      	ldr	r1, [pc, #8]	; (80075d0 <oslib_test_004_004_execute+0x110>)
 80075c6:	0940      	lsrs	r0, r0, #5
 80075c8:	f7f9 b9c2 	b.w	8000950 <_test_assert>
 80075cc:	20001a7c 	.word	0x20001a7c
 80075d0:	0800a648 	.word	0x0800a648
 80075d4:	0800a628 	.word	0x0800a628
 80075d8:	0800a638 	.word	0x0800a638
 80075dc:	0800a644 	.word	0x0800a644
 80075e0:	0800a650 	.word	0x0800a650
 80075e4:	0800a66c 	.word	0x0800a66c
	...

080075f0 <oslib_test_004_004_teardown>:
static void oslib_test_004_004_teardown(void) {
 80075f0:	b510      	push	{r4, lr}
  dmp = chFactoryFindMailbox("mymbx");
 80075f2:	f7fe ff45 	bl	8006480 <chFactoryFindMailbox.constprop.48>
  if (dmp != NULL) {
 80075f6:	b140      	cbz	r0, 800760a <oslib_test_004_004_teardown+0x1a>
    while (dmp->element.refs > 0U) {
 80075f8:	6843      	ldr	r3, [r0, #4]
 80075fa:	4604      	mov	r4, r0
 80075fc:	b12b      	cbz	r3, 800760a <oslib_test_004_004_teardown+0x1a>
      chFactoryReleaseMailbox(dmp);
 80075fe:	4620      	mov	r0, r4
 8007600:	f7ff ff46 	bl	8007490 <chFactoryReleaseMailbox>
    while (dmp->element.refs > 0U) {
 8007604:	6863      	ldr	r3, [r4, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1f9      	bne.n	80075fe <oslib_test_004_004_teardown+0xe>
}
 800760a:	bd10      	pop	{r4, pc}
 800760c:	0000      	movs	r0, r0
	...

08007610 <chFactoryReleaseBuffer>:
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8007610:	b510      	push	{r4, lr}
 8007612:	4604      	mov	r4, r0
  F_LOCK();
 8007614:	4807      	ldr	r0, [pc, #28]	; (8007634 <chFactoryReleaseBuffer+0x24>)
 8007616:	f7fc fe5b 	bl	80042d0 <chMtxLock>
  dep->refs--;
 800761a:	6863      	ldr	r3, [r4, #4]
 800761c:	3b01      	subs	r3, #1
 800761e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8007620:	b91b      	cbnz	r3, 800762a <chFactoryReleaseBuffer+0x1a>
 8007622:	4620      	mov	r0, r4
 8007624:	4904      	ldr	r1, [pc, #16]	; (8007638 <chFactoryReleaseBuffer+0x28>)
 8007626:	f7ff fe63 	bl	80072f0 <dyn_release_object_heap.part.3>
}
 800762a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800762e:	4801      	ldr	r0, [pc, #4]	; (8007634 <chFactoryReleaseBuffer+0x24>)
 8007630:	f7fe bd56 	b.w	80060e0 <chMtxUnlock>
 8007634:	20001164 	.word	0x20001164
 8007638:	20001188 	.word	0x20001188
 800763c:	00000000 	.word	0x00000000

08007640 <oslib_test_004_002_execute>:
static void oslib_test_004_002_execute(void) {
 8007640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8007642:	2501      	movs	r5, #1
 8007644:	4c41      	ldr	r4, [pc, #260]	; (800774c <oslib_test_004_002_execute+0x10c>)
 8007646:	6025      	str	r5, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8007648:	f7fe fe9a 	bl	8006380 <chFactoryFindBuffer.constprop.52>
    test_assert(dbp == NULL, "found");
 800764c:	fab0 f080 	clz	r0, r0
 8007650:	493f      	ldr	r1, [pc, #252]	; (8007750 <oslib_test_004_002_execute+0x110>)
 8007652:	0940      	lsrs	r0, r0, #5
 8007654:	f7f9 f97c 	bl	8000950 <_test_assert>
 8007658:	b100      	cbz	r0, 800765c <oslib_test_004_002_execute+0x1c>
}
 800765a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800765c:	2302      	movs	r3, #2
 800765e:	6023      	str	r3, [r4, #0]
    dbp = chFactoryCreateBuffer("mybuf", 128U);
 8007660:	f7fe fe6e 	bl	8006340 <chFactoryCreateBuffer.constprop.53>
    test_assert(dbp != NULL, "cannot create");
 8007664:	4606      	mov	r6, r0
 8007666:	3000      	adds	r0, #0
 8007668:	bf18      	it	ne
 800766a:	2001      	movne	r0, #1
 800766c:	4939      	ldr	r1, [pc, #228]	; (8007754 <oslib_test_004_002_execute+0x114>)
 800766e:	f7f9 f96f 	bl	8000950 <_test_assert>
 8007672:	2800      	cmp	r0, #0
 8007674:	d1f1      	bne.n	800765a <oslib_test_004_002_execute+0x1a>
  test_set_step(3);
 8007676:	2303      	movs	r3, #3
 8007678:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryCreateBuffer("mybuf", 128U);
 800767a:	f7fe fe61 	bl	8006340 <chFactoryCreateBuffer.constprop.53>
    test_assert(dbp1 == NULL, "can create");
 800767e:	fab0 f080 	clz	r0, r0
 8007682:	4935      	ldr	r1, [pc, #212]	; (8007758 <oslib_test_004_002_execute+0x118>)
 8007684:	0940      	lsrs	r0, r0, #5
 8007686:	f7f9 f963 	bl	8000950 <_test_assert>
 800768a:	2800      	cmp	r0, #0
 800768c:	d1e5      	bne.n	800765a <oslib_test_004_002_execute+0x1a>
  test_set_step(4);
 800768e:	2304      	movs	r3, #4
 8007690:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 8007692:	f7fe fe75 	bl	8006380 <chFactoryFindBuffer.constprop.52>
    test_assert(dbp1 != NULL, "not found");
 8007696:	4607      	mov	r7, r0
 8007698:	3000      	adds	r0, #0
 800769a:	bf18      	it	ne
 800769c:	2001      	movne	r0, #1
 800769e:	492f      	ldr	r1, [pc, #188]	; (800775c <oslib_test_004_002_execute+0x11c>)
 80076a0:	f7f9 f956 	bl	8000950 <_test_assert>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d1d8      	bne.n	800765a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp == dbp1, "object reference mismatch");
 80076a8:	1bf0      	subs	r0, r6, r7
 80076aa:	fab0 f080 	clz	r0, r0
 80076ae:	492c      	ldr	r1, [pc, #176]	; (8007760 <oslib_test_004_002_execute+0x120>)
 80076b0:	0940      	lsrs	r0, r0, #5
 80076b2:	f7f9 f94d 	bl	8000950 <_test_assert>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d1cf      	bne.n	800765a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp1->element.refs == 2, "object reference mismatch");
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4928      	ldr	r1, [pc, #160]	; (8007760 <oslib_test_004_002_execute+0x120>)
 80076be:	f1a0 0002 	sub.w	r0, r0, #2
 80076c2:	fab0 f080 	clz	r0, r0
 80076c6:	0940      	lsrs	r0, r0, #5
 80076c8:	f7f9 f942 	bl	8000950 <_test_assert>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	d1c4      	bne.n	800765a <oslib_test_004_002_execute+0x1a>
 80076d0:	687b      	ldr	r3, [r7, #4]
    test_assert(dbp1 == dbp2, "object reference mismatch");
 80076d2:	4628      	mov	r0, r5
 80076d4:	442b      	add	r3, r5
 80076d6:	607b      	str	r3, [r7, #4]
 80076d8:	4921      	ldr	r1, [pc, #132]	; (8007760 <oslib_test_004_002_execute+0x120>)
 80076da:	f7f9 f939 	bl	8000950 <_test_assert>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d1bb      	bne.n	800765a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp2->element.refs == 3, "object reference mismatch");
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	491e      	ldr	r1, [pc, #120]	; (8007760 <oslib_test_004_002_execute+0x120>)
 80076e6:	f1a0 0c03 	sub.w	ip, r0, #3
 80076ea:	f1dc 0000 	rsbs	r0, ip, #0
 80076ee:	eb40 000c 	adc.w	r0, r0, ip
 80076f2:	f7f9 f92d 	bl	8000950 <_test_assert>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d1af      	bne.n	800765a <oslib_test_004_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp2);
 80076fa:	4638      	mov	r0, r7
 80076fc:	f7ff ff88 	bl	8007610 <chFactoryReleaseBuffer>
    test_assert(dbp1->element.refs == 2, "references mismatch");
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	4918      	ldr	r1, [pc, #96]	; (8007764 <oslib_test_004_002_execute+0x124>)
 8007704:	1e82      	subs	r2, r0, #2
 8007706:	4250      	negs	r0, r2
 8007708:	4150      	adcs	r0, r2
 800770a:	f7f9 f921 	bl	8000950 <_test_assert>
 800770e:	2800      	cmp	r0, #0
 8007710:	d1a3      	bne.n	800765a <oslib_test_004_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp1);
 8007712:	4638      	mov	r0, r7
 8007714:	f7ff ff7c 	bl	8007610 <chFactoryReleaseBuffer>
    test_assert(dbp->element.refs == 1, "references mismatch");
 8007718:	6870      	ldr	r0, [r6, #4]
 800771a:	4912      	ldr	r1, [pc, #72]	; (8007764 <oslib_test_004_002_execute+0x124>)
 800771c:	1b43      	subs	r3, r0, r5
 800771e:	4258      	negs	r0, r3
 8007720:	4158      	adcs	r0, r3
 8007722:	f7f9 f915 	bl	8000950 <_test_assert>
 8007726:	2800      	cmp	r0, #0
 8007728:	d197      	bne.n	800765a <oslib_test_004_002_execute+0x1a>
  test_set_step(5);
 800772a:	2305      	movs	r3, #5
    chFactoryReleaseBuffer(dbp);
 800772c:	4630      	mov	r0, r6
  test_set_step(5);
 800772e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseBuffer(dbp);
 8007730:	f7ff ff6e 	bl	8007610 <chFactoryReleaseBuffer>
  test_set_step(6);
 8007734:	2306      	movs	r3, #6
 8007736:	6023      	str	r3, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8007738:	f7fe fe22 	bl	8006380 <chFactoryFindBuffer.constprop.52>
}
 800773c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dbp == NULL, "found");
 8007740:	fab0 f080 	clz	r0, r0
 8007744:	4902      	ldr	r1, [pc, #8]	; (8007750 <oslib_test_004_002_execute+0x110>)
 8007746:	0940      	lsrs	r0, r0, #5
 8007748:	f7f9 b902 	b.w	8000950 <_test_assert>
 800774c:	20001a7c 	.word	0x20001a7c
 8007750:	0800a648 	.word	0x0800a648
 8007754:	0800a628 	.word	0x0800a628
 8007758:	0800a638 	.word	0x0800a638
 800775c:	0800a644 	.word	0x0800a644
 8007760:	0800a650 	.word	0x0800a650
 8007764:	0800a66c 	.word	0x0800a66c
	...

08007770 <oslib_test_004_002_teardown>:
static void oslib_test_004_002_teardown(void) {
 8007770:	b510      	push	{r4, lr}
  dbp = chFactoryFindBuffer("mybuf");
 8007772:	f7fe fe05 	bl	8006380 <chFactoryFindBuffer.constprop.52>
  if (dbp != NULL) {
 8007776:	b140      	cbz	r0, 800778a <oslib_test_004_002_teardown+0x1a>
    while (dbp->element.refs > 0U) {
 8007778:	6843      	ldr	r3, [r0, #4]
 800777a:	4604      	mov	r4, r0
 800777c:	b12b      	cbz	r3, 800778a <oslib_test_004_002_teardown+0x1a>
      chFactoryReleaseBuffer(dbp);
 800777e:	4620      	mov	r0, r4
 8007780:	f7ff ff46 	bl	8007610 <chFactoryReleaseBuffer>
    while (dbp->element.refs > 0U) {
 8007784:	6863      	ldr	r3, [r4, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f9      	bne.n	800777e <oslib_test_004_002_teardown+0xe>
}
 800778a:	bd10      	pop	{r4, pc}
 800778c:	0000      	movs	r0, r0
	...

08007790 <chThdRelease>:
 8007790:	2220      	movs	r2, #32
 8007792:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 8007796:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800779a:	3b01      	subs	r3, #1
 800779c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 80077a0:	6a03      	ldr	r3, [r0, #32]
 80077a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80077a6:	2b0f      	cmp	r3, #15
 80077a8:	d003      	beq.n	80077b2 <chThdRelease+0x22>
 80077aa:	2300      	movs	r3, #0
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	4770      	bx	lr
void chThdRelease(thread_t *tp) {
 80077b2:	b410      	push	{r4}
    REG_REMOVE(tp);
 80077b4:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 80077b8:	611c      	str	r4, [r3, #16]
 80077ba:	6904      	ldr	r4, [r0, #16]
 80077bc:	2100      	movs	r1, #0
 80077be:	6163      	str	r3, [r4, #20]
 80077c0:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 80077c4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80077c8:	f003 0303 	and.w	r3, r3, #3
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d00c      	beq.n	80077ea <chThdRelease+0x5a>
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d108      	bne.n	80077e6 <chThdRelease+0x56>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 80077d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80077d6:	69c0      	ldr	r0, [r0, #28]
 80077d8:	f382 8811 	msr	BASEPRI, r2
  php->next = mp->next;
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	6002      	str	r2, [r0, #0]
  mp->next = php;
 80077e0:	6018      	str	r0, [r3, #0]
 80077e2:	f381 8811 	msr	BASEPRI, r1
}
 80077e6:	bc10      	pop	{r4}
 80077e8:	4770      	bx	lr
      chHeapFree(chThdGetWorkingAreaX(tp));
 80077ea:	69c0      	ldr	r0, [r0, #28]
}
 80077ec:	bc10      	pop	{r4}
      chHeapFree(chThdGetWorkingAreaX(tp));
 80077ee:	f7ff bb5f 	b.w	8006eb0 <chHeapFree>
 80077f2:	bf00      	nop
	...

08007800 <cmd_threads>:
  if (argc > 0) {
 8007800:	2900      	cmp	r1, #0
 8007802:	dd03      	ble.n	800780c <cmd_threads+0xc>
    shellUsage(chp, "threads");
 8007804:	4a28      	ldr	r2, [pc, #160]	; (80078a8 <cmd_threads+0xa8>)
 8007806:	4929      	ldr	r1, [pc, #164]	; (80078ac <cmd_threads+0xac>)
 8007808:	f7fa bd42 	b.w	8002290 <chprintf>
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n"SHELL_NEWLINE_STR);
 8007810:	4927      	ldr	r1, [pc, #156]	; (80078b0 <cmd_threads+0xb0>)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007812:	b087      	sub	sp, #28
 8007814:	4605      	mov	r5, r0
 8007816:	2620      	movs	r6, #32
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n"SHELL_NEWLINE_STR);
 8007818:	f7fa fd3a 	bl	8002290 <chprintf>
 800781c:	f386 8811 	msr	BASEPRI, r6
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 8007820:	4f24      	ldr	r7, [pc, #144]	; (80078b4 <cmd_threads+0xb4>)
 8007822:	2200      	movs	r2, #0
 8007824:	693c      	ldr	r4, [r7, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 8007826:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800782a:	3301      	adds	r3, #1
 800782c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8007830:	f382 8811 	msr	BASEPRI, r2
 8007834:	f8df a080 	ldr.w	sl, [pc, #128]	; 80078b8 <cmd_threads+0xb8>
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s"SHELL_NEWLINE_STR,
 8007838:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80078bc <cmd_threads+0xbc>
 800783c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80078c0 <cmd_threads+0xc0>
 8007840:	e00b      	b.n	800785a <cmd_threads+0x5a>
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
    ntp->refs++;
 8007842:	f89b 3022 	ldrb.w	r3, [fp, #34]	; 0x22
 8007846:	2200      	movs	r2, #0
 8007848:	3301      	adds	r3, #1
 800784a:	f88b 3022 	strb.w	r3, [fp, #34]	; 0x22
 800784e:	f382 8811 	msr	BASEPRI, r2
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 8007852:	4620      	mov	r0, r4
 8007854:	f7ff ff9c 	bl	8007790 <chThdRelease>
 8007858:	465c      	mov	r4, fp
             tp->name == NULL ? "" : tp->name);
 800785a:	69a1      	ldr	r1, [r4, #24]
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 800785c:	f894 3020 	ldrb.w	r3, [r4, #32]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s"SHELL_NEWLINE_STR,
 8007860:	2900      	cmp	r1, #0
 8007862:	bf08      	it	eq
 8007864:	4649      	moveq	r1, r9
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 8007866:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s"SHELL_NEWLINE_STR,
 800786a:	f85a e023 	ldr.w	lr, [sl, r3, lsl #2]
 800786e:	3801      	subs	r0, #1
    uint32_t stklimit = (uint32_t)tp->wabase;
 8007870:	69e2      	ldr	r2, [r4, #28]
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 8007872:	e9d4 c302 	ldrd	ip, r3, [r4, #8]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s"SHELL_NEWLINE_STR,
 8007876:	e9cd e103 	strd	lr, r1, [sp, #12]
 800787a:	e9cd 0c01 	strd	r0, ip, [sp, #4]
 800787e:	9400      	str	r4, [sp, #0]
 8007880:	4641      	mov	r1, r8
 8007882:	4628      	mov	r0, r5
 8007884:	f7fa fd04 	bl	8002290 <chprintf>
 8007888:	f386 8811 	msr	BASEPRI, r6
  ntp = tp->newer;
 800788c:	f8d4 b010 	ldr.w	fp, [r4, #16]
  if (ntp == (thread_t *)&ch.rlist) {
 8007890:	45bb      	cmp	fp, r7
 8007892:	d1d6      	bne.n	8007842 <cmd_threads+0x42>
 8007894:	2300      	movs	r3, #0
 8007896:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 800789a:	4620      	mov	r0, r4
}
 800789c:	b007      	add	sp, #28
 800789e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a2:	f7ff bf75 	b.w	8007790 <chThdRelease>
 80078a6:	bf00      	nop
 80078a8:	0800c118 	.word	0x0800c118
 80078ac:	0800a254 	.word	0x0800a254
 80078b0:	0800a28c 	.word	0x0800a28c
 80078b4:	200010f0 	.word	0x200010f0
 80078b8:	0800bb08 	.word	0x0800bb08
 80078bc:	0800bac4 	.word	0x0800bac4
 80078c0:	0800a2cc 	.word	0x0800a2cc
	...

080078d0 <rt_test_010_006_execute>:
  test_set_step(1);
 80078d0:	2201      	movs	r2, #1
  return ch.rlist.current;
 80078d2:	4b1a      	ldr	r3, [pc, #104]	; (800793c <rt_test_010_006_execute+0x6c>)
static void rt_test_010_006_execute(void) {
 80078d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return chThdGetSelfX()->prio;
 80078d8:	699b      	ldr	r3, [r3, #24]
  test_set_step(1);
 80078da:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8007948 <rt_test_010_006_execute+0x78>
  tprio_t prio = chThdGetPriorityX() + 1;
 80078de:	689f      	ldr	r7, [r3, #8]
  test_set_step(1);
 80078e0:	f8ca 2000 	str.w	r2, [sl]
  tprio_t prio = chThdGetPriorityX() + 1;
 80078e4:	4417      	add	r7, r2
    start = test_wait_tick();
 80078e6:	f7fc f9db 	bl	8003ca0 <test_wait_tick>
    n = 0;
 80078ea:	2400      	movs	r4, #0
    start = test_wait_tick();
 80078ec:	4606      	mov	r6, r0
  return systime + (systime_t)interval;
 80078ee:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 80078f2:	b2ad      	uxth	r5, r5
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80078f4:	f8df 9054 	ldr.w	r9, [pc, #84]	; 800794c <rt_test_010_006_execute+0x7c>
 80078f8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8007950 <rt_test_010_006_execute+0x80>
 80078fc:	1a2d      	subs	r5, r5, r0
 80078fe:	2300      	movs	r3, #0
 8007900:	464a      	mov	r2, r9
 8007902:	4639      	mov	r1, r7
 8007904:	4640      	mov	r0, r8
 8007906:	f7fb fb23 	bl	8002f50 <chThdCreateStatic.constprop.103>
 800790a:	f7ff ff41 	bl	8007790 <chThdRelease>
 800790e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 8007914:	3401      	adds	r4, #1
  return (bool)((time - start) < (end - start));
 8007916:	b29b      	uxth	r3, r3
 8007918:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 800791a:	42ab      	cmp	r3, r5
 800791c:	dbef      	blt.n	80078fe <rt_test_010_006_execute+0x2e>
  test_set_step(2);
 800791e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8007920:	4807      	ldr	r0, [pc, #28]	; (8007940 <rt_test_010_006_execute+0x70>)
  test_set_step(2);
 8007922:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 8007926:	f7f9 f913 	bl	8000b50 <test_print>
    test_printn(n);
 800792a:	4620      	mov	r0, r4
 800792c:	f7f9 f8a0 	bl	8000a70 <test_printn>
}
 8007930:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" threads/S");
 8007934:	4803      	ldr	r0, [pc, #12]	; (8007944 <rt_test_010_006_execute+0x74>)
 8007936:	f7f9 b8eb 	b.w	8000b10 <test_println>
 800793a:	bf00      	nop
 800793c:	200010f0 	.word	0x200010f0
 8007940:	0800b7e8 	.word	0x0800b7e8
 8007944:	0800b78c 	.word	0x0800b78c
 8007948:	20001a7c 	.word	0x20001a7c
 800794c:	08005431 	.word	0x08005431
 8007950:	20001368 	.word	0x20001368
	...

08007960 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4604      	mov	r4, r0
 8007964:	2320      	movs	r3, #32
 8007966:	f383 8811 	msr	BASEPRI, r3
  if (tp->state != CH_STATE_FINAL) {
 800796a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800796e:	2b0f      	cmp	r3, #15
 8007970:	d007      	beq.n	8007982 <chThdWait+0x22>
    list_insert(currp, &tp->waiting);
 8007972:	4b08      	ldr	r3, [pc, #32]	; (8007994 <chThdWait+0x34>)
  tp->queue.next = tlp->next;
 8007974:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007976:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8007978:	2009      	movs	r0, #9
 800797a:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
 800797c:	62a3      	str	r3, [r4, #40]	; 0x28
 800797e:	f7fb fb97 	bl	80030b0 <chSchGoSleepS>
  msg = tp->u.exitcode;
 8007982:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007984:	2300      	movs	r3, #0
 8007986:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 800798a:	4620      	mov	r0, r4
 800798c:	f7ff ff00 	bl	8007790 <chThdRelease>
}
 8007990:	4628      	mov	r0, r5
 8007992:	bd38      	pop	{r3, r4, r5, pc}
 8007994:	200010f0 	.word	0x200010f0
	...

080079a0 <main>:
  rccResetAPB1(0xFFFFFFFF);
 80079a0:	2100      	movs	r1, #0
 80079a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079a6:	4b0e      	ldr	r3, [pc, #56]	; (80079e0 <main+0x40>)

/*
 * Application entry point.
 */
int main(void)
{
 80079a8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80079ac:	691e      	ldr	r6, [r3, #16]
 80079ae:	6118      	str	r0, [r3, #16]
 80079b0:	6119      	str	r1, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 80079b2:	68de      	ldr	r6, [r3, #12]
 80079b4:	60d8      	str	r0, [r3, #12]
 80079b6:	60d9      	str	r1, [r3, #12]
void dmaInit(void) {
  int i;

  dma.streams_mask = 0U;
  dma.isr_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80079b8:	460a      	mov	r2, r1
    _stm32_dma_streams[i].channel->CCR = 0U;
 80079ba:	460d      	mov	r5, r1
  rccEnablePWRInterface(true);
 80079bc:	69d9      	ldr	r1, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 80079be:	4c09      	ldr	r4, [pc, #36]	; (80079e4 <main+0x44>)
  rccEnablePWRInterface(true);
 80079c0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80079c4:	61d9      	str	r1, [r3, #28]
  rccEnableBKPInterface(true);
 80079c6:	69d9      	ldr	r1, [r3, #28]
 80079c8:	b083      	sub	sp, #12
 80079ca:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80079ce:	61d9      	str	r1, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	4805      	ldr	r0, [pc, #20]	; (80079e8 <main+0x48>)
 80079d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	4904      	ldr	r1, [pc, #16]	; (80079ec <main+0x4c>)
 80079dc:	4b04      	ldr	r3, [pc, #16]	; (80079f0 <main+0x50>)
 80079de:	e00b      	b.n	80079f8 <main+0x58>
 80079e0:	40021000 	.word	0x40021000
 80079e4:	40007000 	.word	0x40007000
 80079e8:	08009f58 	.word	0x08009f58
 80079ec:	40020008 	.word	0x40020008
 80079f0:	200010b8 	.word	0x200010b8
 80079f4:	f850 1c14 	ldr.w	r1, [r0, #-20]
 80079f8:	600d      	str	r5, [r1, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 80079fa:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80079fe:	3201      	adds	r2, #1
 8007a00:	2a07      	cmp	r2, #7
 8007a02:	f100 0014 	add.w	r0, r0, #20
 8007a06:	d1f5      	bne.n	80079f4 <main+0x54>
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 8007a08:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007a0c:	2060      	movs	r0, #96	; 0x60
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007a0e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8007a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a16:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8007a1a:	2780      	movs	r7, #128	; 0x80
 8007a1c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8007a20:	f44f 0500 	mov.w	r5, #8388608	; 0x800000

#if PAL_USE_CALLBACKS || PAL_USE_WAIT || defined(__DOXYGEN__)
  unsigned i;

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
 8007a24:	2100      	movs	r1, #0
 8007a26:	4bd0      	ldr	r3, [pc, #832]	; (8007d68 <main+0x3c8>)
 8007a28:	f8c3 e004 	str.w	lr, [r3, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007a2c:	4bcf      	ldr	r3, [pc, #828]	; (8007d6c <main+0x3cc>)
 8007a2e:	f883 0306 	strb.w	r0, [r3, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007a32:	f8c3 c180 	str.w	ip, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007a36:	f8c3 c000 	str.w	ip, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007a3a:	f883 0307 	strb.w	r0, [r3, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007a3e:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007a42:	601f      	str	r7, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007a44:	f883 0308 	strb.w	r0, [r3, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007a48:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007a4c:	601c      	str	r4, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007a4e:	f883 0309 	strb.w	r0, [r3, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007a52:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	4ac5      	ldr	r2, [pc, #788]	; (8007d70 <main+0x3d0>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007a5a:	f883 030a 	strb.w	r0, [r3, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007a5e:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007a62:	601e      	str	r6, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007a64:	f883 0317 	strb.w	r0, [r3, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007a68:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007a6c:	601d      	str	r5, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007a6e:	f883 0328 	strb.w	r0, [r3, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007a72:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
 8007a76:	1910      	adds	r0, r2, r4
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007a78:	605c      	str	r4, [r3, #4]
  tqp->prev = (thread_t *)tqp;
 8007a7a:	e9c2 2200 	strd	r2, r2, [r2]
 8007a7e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8007a82:	3210      	adds	r2, #16
  for (i = 0; i < 16; i++) {
 8007a84:	4282      	cmp	r2, r0
 8007a86:	d1f8      	bne.n	8007a7a <main+0xda>
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8007a88:	2001      	movs	r0, #1
  rccEnableAPB2(APB2_EN_MASK, true);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8007a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
 8007a8e:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
  sdp->vmt = &vmt;
 8007a92:	4db8      	ldr	r5, [pc, #736]	; (8007d74 <main+0x3d4>)
  oqp->q_counter = size;
 8007a94:	f04f 0c10 	mov.w	ip, #16
 8007a98:	462e      	mov	r6, r5
    usbp->in_params[i]  = NULL;
 8007a9a:	2400      	movs	r4, #0
  rccEnableAPB2(APB2_EN_MASK, true);
 8007a9c:	f8df e330 	ldr.w	lr, [pc, #816]	; 8007dd0 <main+0x430>
  sdp->state = SD_STOP;
 8007aa0:	7228      	strb	r0, [r5, #8]
 8007aa2:	f8de 7018 	ldr.w	r7, [lr, #24]
 8007aa6:	f047 077d 	orr.w	r7, r7, #125	; 0x7d
 8007aaa:	f8ce 7018 	str.w	r7, [lr, #24]
  GPIOA->CRH = config->PAData.crh;
 8007aae:	f10e 4e91 	add.w	lr, lr, #1216348160	; 0x48800000
  GPIOA->ODR = config->PAData.odr;
 8007ab2:	4fb1      	ldr	r7, [pc, #708]	; (8007d78 <main+0x3d8>)
  GPIOA->CRH = config->PAData.crh;
 8007ab4:	f50e 2ece 	add.w	lr, lr, #421888	; 0x67000
 8007ab8:	f50e 6e97 	add.w	lr, lr, #1208	; 0x4b8
  GPIOA->ODR = config->PAData.odr;
 8007abc:	60fb      	str	r3, [r7, #12]
  GPIOA->CRH = config->PAData.crh;
 8007abe:	f8c7 e004 	str.w	lr, [r7, #4]
  GPIOA->CRL = config->PAData.crl;
 8007ac2:	f5ae 5e64 	sub.w	lr, lr, #14592	; 0x3900
 8007ac6:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007aca:	f8c7 e000 	str.w	lr, [r7]
  GPIOB->CRH = config->PBData.crh;
 8007ace:	f50e 5e72 	add.w	lr, lr, #15488	; 0x3c80
 8007ad2:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
  GPIOB->ODR = config->PBData.odr;
 8007ad6:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
  GPIOB->CRH = config->PBData.crh;
 8007ada:	f8c7 e404 	str.w	lr, [r7, #1028]	; 0x404
  GPIOB->CRL = config->PBData.crl;
 8007ade:	f8c7 e400 	str.w	lr, [r7, #1024]	; 0x400
  GPIOC->ODR = config->PCData.odr;
 8007ae2:	f8df e2f0 	ldr.w	lr, [pc, #752]	; 8007dd4 <main+0x434>
  GPIOC->CRH = config->PCData.crh;
 8007ae6:	4fa5      	ldr	r7, [pc, #660]	; (8007d7c <main+0x3dc>)
  GPIOC->ODR = config->PCData.odr;
 8007ae8:	f8ce 300c 	str.w	r3, [lr, #12]
  GPIOC->CRH = config->PCData.crh;
 8007aec:	f8ce 7004 	str.w	r7, [lr, #4]
  GPIOC->CRL = config->PCData.crl;
 8007af0:	f8ce 2000 	str.w	r2, [lr]
  GPIOD->ODR = config->PDData.odr;
 8007af4:	4fa2      	ldr	r7, [pc, #648]	; (8007d80 <main+0x3e0>)
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8007af6:	f8df e2e0 	ldr.w	lr, [pc, #736]	; 8007dd8 <main+0x438>
  GPIOD->ODR = config->PDData.odr;
 8007afa:	60fb      	str	r3, [r7, #12]
  GPIOD->CRH = config->PDData.crh;
 8007afc:	607a      	str	r2, [r7, #4]
  GPIOD->CRL = config->PDData.crl;
 8007afe:	f8c7 e000 	str.w	lr, [r7]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8007b02:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
  sdp->vmt = &vmt;
 8007b06:	4b9f      	ldr	r3, [pc, #636]	; (8007d84 <main+0x3e4>)
  GPIOE->CRH = config->PEData.crh;
 8007b08:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
  GPIOE->CRL = config->PEData.crl;
 8007b0c:	f8c7 2400 	str.w	r2, [r7, #1024]	; 0x400
 8007b10:	f846 3b04 	str.w	r3, [r6], #4

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8007b14:	4a9c      	ldr	r2, [pc, #624]	; (8007d88 <main+0x3e8>)
 8007b16:	4b9d      	ldr	r3, [pc, #628]	; (8007d8c <main+0x3ec>)
  esp->next = (event_listener_t *)esp;
 8007b18:	606e      	str	r6, [r5, #4]
 8007b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  I2CD1.i2c    = I2C1;
 8007b1c:	4e9c      	ldr	r6, [pc, #624]	; (8007d90 <main+0x3f0>)
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 8007b1e:	3a14      	subs	r2, #20
 8007b20:	631a      	str	r2, [r3, #48]	; 0x30
  tqp->next = (thread_t *)tqp;
 8007b22:	f103 020c 	add.w	r2, r3, #12
  I2CD1.i2c    = I2C1;
 8007b26:	635e      	str	r6, [r3, #52]	; 0x34
  tqp->prev = (thread_t *)tqp;
 8007b28:	e9c3 2203 	strd	r2, r2, [r3, #12]
  i2cp->config = NULL;
 8007b2c:	6059      	str	r1, [r3, #4]
  mp->owner = NULL;
 8007b2e:	6159      	str	r1, [r3, #20]
  I2CD1.thread = NULL;
 8007b30:	61d9      	str	r1, [r3, #28]
  i2cp->state  = I2C_STOP;
 8007b32:	7018      	strb	r0, [r3, #0]
  tqp->next = (thread_t *)tqp;
 8007b34:	f105 030c 	add.w	r3, r5, #12
  iqp->q_buffer  = bp;
 8007b38:	f105 0254 	add.w	r2, r5, #84	; 0x54
  tqp->prev = (thread_t *)tqp;
 8007b3c:	e9c5 3303 	strd	r3, r3, [r5, #12]
  oqp->q_notify  = onfy;
 8007b40:	4e94      	ldr	r6, [pc, #592]	; (8007d94 <main+0x3f4>)
  oqp->q_top     = bp + size;
 8007b42:	f105 0374 	add.w	r3, r5, #116	; 0x74
  iqp->q_counter = 0;
 8007b46:	6169      	str	r1, [r5, #20]
  iqp->q_buffer  = bp;
 8007b48:	61aa      	str	r2, [r5, #24]
  oqp->q_top     = bp + size;
 8007b4a:	642b      	str	r3, [r5, #64]	; 0x40
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 8007b4c:	4b92      	ldr	r3, [pc, #584]	; (8007d98 <main+0x3f8>)
  oqp->q_notify  = onfy;
 8007b4e:	64ee      	str	r6, [r5, #76]	; 0x4c
  iqp->q_link    = link;
 8007b50:	e9c5 150a 	strd	r1, r5, [r5, #40]	; 0x28
  usbp->state        = USB_STOP;
 8007b54:	4e91      	ldr	r6, [pc, #580]	; (8007d9c <main+0x3fc>)
  iqp->q_wrptr   = bp;
 8007b56:	e9c5 2208 	strd	r2, r2, [r5, #32]
 8007b5a:	676b      	str	r3, [r5, #116]	; 0x74
  tqp->next = (thread_t *)tqp;
 8007b5c:	f105 0230 	add.w	r2, r5, #48	; 0x30
  iqp->q_top     = bp + size;
 8007b60:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8007b64:	61eb      	str	r3, [r5, #28]
  oqp->q_buffer  = bp;
 8007b66:	63eb      	str	r3, [r5, #60]	; 0x3c
  oqp->q_wrptr   = bp;
 8007b68:	e9c5 3311 	strd	r3, r3, [r5, #68]	; 0x44
  tqp->prev = (thread_t *)tqp;
 8007b6c:	e9c5 220c 	strd	r2, r2, [r5, #48]	; 0x30
  oqp->q_link    = link;
 8007b70:	652d      	str	r5, [r5, #80]	; 0x50
  oqp->q_counter = size;
 8007b72:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
 8007b76:	7030      	strb	r0, [r6, #0]
  usbp->config       = NULL;
 8007b78:	6071      	str	r1, [r6, #4]
 8007b7a:	f106 032c 	add.w	r3, r6, #44	; 0x2c
 8007b7e:	f106 0248 	add.w	r2, r6, #72	; 0x48
    usbp->in_params[i]  = NULL;
 8007b82:	f843 4b04 	str.w	r4, [r3], #4
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8007b86:	429a      	cmp	r2, r3
    usbp->out_params[i] = NULL;
 8007b88:	619c      	str	r4, [r3, #24]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8007b8a:	d1fa      	bne.n	8007b82 <main+0x1e2>
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8007b8c:	2701      	movs	r7, #1
  ST_ENABLE_CLOCK();
 8007b8e:	f8df 8240 	ldr.w	r8, [pc, #576]	; 8007dd0 <main+0x430>
  ST_ENABLE_STOP();
 8007b92:	f8df e248 	ldr.w	lr, [pc, #584]	; 8007ddc <main+0x43c>
  ST_ENABLE_CLOCK();
 8007b96:	f8d8 101c 	ldr.w	r1, [r8, #28]
  usbp->transmitting = 0;
 8007b9a:	60b4      	str	r4, [r6, #8]
 8007b9c:	4339      	orrs	r1, r7
 8007b9e:	f8c8 101c 	str.w	r1, [r8, #28]
  ST_ENABLE_STOP();
 8007ba2:	f8de 1004 	ldr.w	r1, [lr, #4]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8007ba6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  ST_ENABLE_STOP();
 8007baa:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007bae:	f8ce 1004 	str.w	r1, [lr, #4]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8007bb2:	f648 419f 	movw	r1, #35999	; 0x8c9f
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8007bb6:	f64f 7aff 	movw	sl, #65535	; 0xffff
  ch.vtlist.delta = (sysinterval_t)-1;
 8007bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007bbe:	2280      	movs	r2, #128	; 0x80
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007bc0:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bc4:	f04f 0b10 	mov.w	fp, #16
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8007bc8:	6299      	str	r1, [r3, #40]	; 0x28
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8007bca:	f8df e214 	ldr.w	lr, [pc, #532]	; 8007de0 <main+0x440>
  tqp->next = (thread_t *)tqp;
 8007bce:	4974      	ldr	r1, [pc, #464]	; (8007da0 <main+0x400>)
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8007bd0:	f8c3 a02c 	str.w	sl, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8007bd4:	619c      	str	r4, [r3, #24]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007bd6:	f8df a194 	ldr.w	sl, [pc, #404]	; 8007d6c <main+0x3cc>
  tqp->prev = (thread_t *)tqp;
 8007bda:	6049      	str	r1, [r1, #4]
  STM32_ST_TIM->CCR[0] = 0;
 8007bdc:	635c      	str	r4, [r3, #52]	; 0x34
  ch.rlist.prio = NOPRIO;
 8007bde:	608c      	str	r4, [r1, #8]
  STM32_ST_TIM->DIER   = 0;
 8007be0:	60dc      	str	r4, [r3, #12]
  ch.vtlist.lasttime = (systime_t)0;
 8007be2:	850c      	strh	r4, [r1, #40]	; 0x28
  STM32_ST_TIM->CR2    = 0;
 8007be4:	605c      	str	r4, [r3, #4]
  ch.vtlist.delta = (sysinterval_t)-1;
 8007be6:	6248      	str	r0, [r1, #36]	; 0x24
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8007be8:	615f      	str	r7, [r3, #20]
  H_NEXT(&default_heap.header) = NULL;
 8007bea:	f8ce 4004 	str.w	r4, [lr, #4]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8007bee:	601f      	str	r7, [r3, #0]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8007bf0:	4b6c      	ldr	r3, [pc, #432]	; (8007da4 <main+0x404>)
  H_PAGES(&default_heap.header) = 0;
 8007bf2:	f8ce 4008 	str.w	r4, [lr, #8]
 8007bf6:	f88a 231c 	strb.w	r2, [sl, #796]	; 0x31c
 8007bfa:	f8ce 4014 	str.w	r4, [lr, #20]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007bfe:	f8ca c180 	str.w	ip, [sl, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007c02:	f8ca c000 	str.w	ip, [sl]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8007c06:	f8ce 3000 	str.w	r3, [lr]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8007c0a:	f101 0c1c 	add.w	ip, r1, #28
  tqp->next = (thread_t *)tqp;
 8007c0e:	f10e 030c 	add.w	r3, lr, #12
  tqp->prev = (thread_t *)tqp;
 8007c12:	e9ce 3303 	strd	r3, r3, [lr, #12]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8007c16:	e9c1 cc07 	strd	ip, ip, [r1, #28]
  ch_memcore.nextmem = __heap_base__;
 8007c1a:	4b63      	ldr	r3, [pc, #396]	; (8007da8 <main+0x408>)
 8007c1c:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 8007de4 <main+0x444>
  tqp->next = (thread_t *)tqp;
 8007c20:	6009      	str	r1, [r1, #0]
 8007c22:	f8c3 c000 	str.w	ip, [r3]
  ch_memcore.endmem  = __heap_end__;
 8007c26:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8007de8 <main+0x448>
  mp->object_size = size;
 8007c2a:	201c      	movs	r0, #28
 8007c2c:	f8c3 c004 	str.w	ip, [r3, #4]
 8007c30:	4b5e      	ldr	r3, [pc, #376]	; (8007dac <main+0x40c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c32:	f64f 0eff 	movw	lr, #63743	; 0xf8ff
  tqp->prev = (thread_t *)tqp;
 8007c36:	e9c3 3300 	strd	r3, r3, [r3]
  tp->prio      = prio;
 8007c3a:	638a      	str	r2, [r1, #56]	; 0x38
  tp->realprio  = prio;
 8007c3c:	66ca      	str	r2, [r1, #108]	; 0x6c
  tp->name      = name;
 8007c3e:	4a5c      	ldr	r2, [pc, #368]	; (8007db0 <main+0x410>)
  tp->epending  = (eventmask_t)0;
 8007c40:	e9c1 4419 	strd	r4, r4, [r1, #100]	; 0x64
  tp->name      = name;
 8007c44:	648a      	str	r2, [r1, #72]	; 0x48
  dlp->next = (dyn_element_t *)dlp;
 8007c46:	eb03 020b 	add.w	r2, r3, fp
 8007c4a:	611a      	str	r2, [r3, #16]
 8007c4c:	2214      	movs	r2, #20
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c4e:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8007dec <main+0x44c>
 8007c52:	619a      	str	r2, [r3, #24]
 8007c54:	f103 0224 	add.w	r2, r3, #36	; 0x24
  currp->wabase = NULL;
 8007c58:	64cc      	str	r4, [r1, #76]	; 0x4c
 8007c5a:	f8a1 7050 	strh.w	r7, [r1, #80]	; 0x50
  tp->flags     = CH_FLAG_MODE_STATIC;
 8007c5e:	f881 7052 	strb.w	r7, [r1, #82]	; 0x52
 8007c62:	625a      	str	r2, [r3, #36]	; 0x24
 8007c64:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8007c68:	629a      	str	r2, [r3, #40]	; 0x28
 8007c6a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8007c6e:	6318      	str	r0, [r3, #48]	; 0x30
  mp->align = align;
 8007c70:	2004      	movs	r0, #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c72:	f04f 0920 	mov.w	r9, #32
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c76:	ea02 0e0e 	and.w	lr, r2, lr
 8007c7a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007c7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007c80:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007c84:	641a      	str	r2, [r3, #64]	; 0x40
  tlp->next = (thread_t *)tlp;
 8007c86:	f101 0258 	add.w	r2, r1, #88	; 0x58
 8007c8a:	658a      	str	r2, [r1, #88]	; 0x58
  reg_value  =  (reg_value                                   |
 8007c8c:	4a49      	ldr	r2, [pc, #292]	; (8007db4 <main+0x414>)
 8007c8e:	609c      	str	r4, [r3, #8]
 8007c90:	ea4e 0202 	orr.w	r2, lr, r2
  mp->next = NULL;
 8007c94:	615c      	str	r4, [r3, #20]
 8007c96:	62dc      	str	r4, [r3, #44]	; 0x2c
  mp->align = align;
 8007c98:	61d8      	str	r0, [r3, #28]
  REG_INSERT(tp);
 8007c9a:	e9c1 1110 	strd	r1, r1, [r1, #64]	; 0x40
  SCB->AIRCR =  reg_value;
 8007c9e:	f8cc 200c 	str.w	r2, [ip, #12]
  mp->provider = provider;
 8007ca2:	4a45      	ldr	r2, [pc, #276]	; (8007db8 <main+0x418>)
  mp->align = align;
 8007ca4:	6358      	str	r0, [r3, #52]	; 0x34
  mp->provider = provider;
 8007ca6:	621a      	str	r2, [r3, #32]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007ca8:	4844      	ldr	r0, [pc, #272]	; (8007dbc <main+0x41c>)
 8007caa:	639a      	str	r2, [r3, #56]	; 0x38
 8007cac:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8007cb0:	e9c1 3304 	strd	r3, r3, [r1, #16]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8007cb4:	618b      	str	r3, [r1, #24]
  tqp->next = (thread_t *)tqp;
 8007cb6:	f101 035c 	add.w	r3, r1, #92	; 0x5c
  tqp->prev = (thread_t *)tqp;
 8007cba:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
 8007cbe:	68c3      	ldr	r3, [r0, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007cc0:	4a3f      	ldr	r2, [pc, #252]	; (8007dc0 <main+0x420>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cc6:	60c3      	str	r3, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007cc8:	6813      	ldr	r3, [r2, #0]
 8007cca:	433b      	orrs	r3, r7
 8007ccc:	6013      	str	r3, [r2, #0]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cce:	f88c b01f 	strb.w	fp, [ip, #31]
 8007cd2:	f88c 9022 	strb.w	r9, [ip, #34]	; 0x22
 8007cd6:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 8007cda:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007cdc:	f389 8811 	msr	BASEPRI, r9
  tp = chThdCreateSuspendedI(tdp);
 8007ce0:	4838      	ldr	r0, [pc, #224]	; (8007dc4 <main+0x424>)
 8007ce2:	f7f9 fe6d 	bl	80019c0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	f7fb f902 	bl	8002ef0 <chSchWakeupS>
 8007cec:	f384 8811 	msr	BASEPRI, r4
  sdup->vmt = &vmt;
 8007cf0:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 8007df0 <main+0x450>
  ibqp->bn        = n;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	465a      	mov	r2, fp
  ibqp->bsize     = size + sizeof (size_t);
 8007cf8:	f44f 7082 	mov.w	r0, #260	; 0x104
 8007cfc:	4932      	ldr	r1, [pc, #200]	; (8007dc8 <main+0x428>)
  sdup->state = SDU_STOP;
 8007cfe:	f88b 7008 	strb.w	r7, [fp, #8]
  sdup->vmt = &vmt;
 8007d02:	f842 1b04 	str.w	r1, [r2], #4
  ibqp->suspended = suspended;
 8007d06:	f88b 7014 	strb.w	r7, [fp, #20]
  obqp->suspended = suspended;
 8007d0a:	f88b 704c 	strb.w	r7, [fp, #76]	; 0x4c
  obqp->notify    = onfy;
 8007d0e:	492f      	ldr	r1, [pc, #188]	; (8007dcc <main+0x42c>)
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8007d10:	f20b 478c 	addw	r7, fp, #1164	; 0x48c
  ibqp->notify    = infy;
 8007d14:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8007df4 <main+0x454>
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8007d18:	f8cb 705c 	str.w	r7, [fp, #92]	; 0x5c
  tqp->next = (thread_t *)tqp;
 8007d1c:	f10b 070c 	add.w	r7, fp, #12
  obqp->notify    = onfy;
 8007d20:	f8cb 1074 	str.w	r1, [fp, #116]	; 0x74
 8007d24:	f8cb 2004 	str.w	r2, [fp, #4]
  ibqp->brdptr    = bp;
 8007d28:	f10b 017c 	add.w	r1, fp, #124	; 0x7c
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8007d2c:	f50b 7221 	add.w	r2, fp, #644	; 0x284
  tqp->prev = (thread_t *)tqp;
 8007d30:	e9cb 7703 	strd	r7, r7, [fp, #12]
  tqp->next = (thread_t *)tqp;
 8007d34:	f10b 0744 	add.w	r7, fp, #68	; 0x44
  ibqp->bcounter  = 0;
 8007d38:	f8cb 4018 	str.w	r4, [fp, #24]
  ibqp->top       = NULL;
 8007d3c:	e9cb 440d 	strd	r4, r4, [fp, #52]	; 0x34
  obqp->top       = NULL;
 8007d40:	e9cb 441b 	strd	r4, r4, [fp, #108]	; 0x6c
  ibqp->link      = link;
 8007d44:	f8cb b040 	str.w	fp, [fp, #64]	; 0x40
  obqp->link      = link;
 8007d48:	f8cb b078 	str.w	fp, [fp, #120]	; 0x78
  ibqp->notify    = infy;
 8007d4c:	f8cb c03c 	str.w	ip, [fp, #60]	; 0x3c
  ibqp->bwrptr    = bp;
 8007d50:	e9cb 1107 	strd	r1, r1, [fp, #28]
  ibqp->buffers   = bp;
 8007d54:	f8cb 1030 	str.w	r1, [fp, #48]	; 0x30
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8007d58:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
  obqp->bwrptr    = bp;
 8007d5c:	e9cb 2215 	strd	r2, r2, [fp, #84]	; 0x54
  obqp->buffers   = bp;
 8007d60:	f8cb 2068 	str.w	r2, [fp, #104]	; 0x68
 8007d64:	e048      	b.n	8007df8 <main+0x458>
 8007d66:	bf00      	nop
 8007d68:	40020000 	.word	0x40020000
 8007d6c:	e000e100 	.word	0xe000e100
 8007d70:	20000fb8 	.word	0x20000fb8
 8007d74:	200008d8 	.word	0x200008d8
 8007d78:	40010800 	.word	0x40010800
 8007d7c:	88688888 	.word	0x88688888
 8007d80:	40011400 	.word	0x40011400
 8007d84:	0800c698 	.word	0x0800c698
 8007d88:	08009fb8 	.word	0x08009fb8
 8007d8c:	200008a0 	.word	0x200008a0
 8007d90:	40005400 	.word	0x40005400
 8007d94:	08000601 	.word	0x08000601
 8007d98:	40013800 	.word	0x40013800
 8007d9c:	20000de4 	.word	0x20000de4
 8007da0:	200010f0 	.word	0x200010f0
 8007da4:	080005b1 	.word	0x080005b1
 8007da8:	20001280 	.word	0x20001280
 8007dac:	20001164 	.word	0x20001164
 8007db0:	0800a014 	.word	0x0800a014
 8007db4:	05fa0300 	.word	0x05fa0300
 8007db8:	080016f1 	.word	0x080016f1
 8007dbc:	e000edf0 	.word	0xe000edf0
 8007dc0:	e0001000 	.word	0xe0001000
 8007dc4:	0800a370 	.word	0x0800a370
 8007dc8:	0800c6bc 	.word	0x0800c6bc
 8007dcc:	080015b1 	.word	0x080015b1
 8007dd0:	40021000 	.word	0x40021000
 8007dd4:	40011000 	.word	0x40011000
 8007dd8:	88888844 	.word	0x88888844
 8007ddc:	e0042000 	.word	0xe0042000
 8007de0:	20001288 	.word	0x20001288
 8007de4:	20001ad8 	.word	0x20001ad8
 8007de8:	20005000 	.word	0x20005000
 8007dec:	e000ed00 	.word	0xe000ed00
 8007df0:	20000954 	.word	0x20000954
 8007df4:	08001581 	.word	0x08001581
  tqp->prev = (thread_t *)tqp;
 8007df8:	e9cb 7711 	strd	r7, r7, [fp, #68]	; 0x44
  ibqp->bsize     = size + sizeof (size_t);
 8007dfc:	f8cb 0028 	str.w	r0, [fp, #40]	; 0x28
  obqp->bsize     = size + sizeof (size_t);
 8007e00:	f8cb 0060 	str.w	r0, [fp, #96]	; 0x60
  ibqp->bn        = n;
 8007e04:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
  obqp->bcounter  = n;
 8007e08:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
  obqp->bn        = n;
 8007e0c:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
 8007e10:	f389 8811 	msr	BASEPRI, r9
  sdup->config = config;
 8007e14:	4a59      	ldr	r2, [pc, #356]	; (8007f7c <main+0x5dc>)
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8007e16:	f8c6 b02c 	str.w	fp, [r6, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1U] = sdup;
 8007e1a:	f8c6 b048 	str.w	fp, [r6, #72]	; 0x48
    usbp->in_params[config->int_in - 1U]  = sdup;
 8007e1e:	f8c6 b030 	str.w	fp, [r6, #48]	; 0x30
  sdup->state = SDU_READY;
 8007e22:	f88b 3008 	strb.w	r3, [fp, #8]
  sdup->config = config;
 8007e26:	f8cb 248c 	str.w	r2, [fp, #1164]	; 0x48c
 8007e2a:	f384 8811 	msr	BASEPRI, r4
	/*
	 * Activates the USB driver and then the USB bus pull-up on D+.
	 * Note, a delay is inserted in order to not have to disconnect the cable
	 * after a reset.
	 */
	usbDisconnectBus(serusbcfg.usbp);
 8007e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e32:	4b53      	ldr	r3, [pc, #332]	; (8007f80 <main+0x5e0>)
	chThdSleepMilliseconds(1500);
 8007e34:	f640 30b8 	movw	r0, #3000	; 0xbb8
	usbDisconnectBus(serusbcfg.usbp);
 8007e38:	611a      	str	r2, [r3, #16]
	chThdSleepMilliseconds(1500);
 8007e3a:	f7fb fe91 	bl	8003b60 <chThdSleep>
 8007e3e:	f389 8811 	msr	BASEPRI, r9
  if (usbp->state == USB_STOP) {
 8007e42:	7830      	ldrb	r0, [r6, #0]
  usbp->config = config;
 8007e44:	4b4f      	ldr	r3, [pc, #316]	; (8007f84 <main+0x5e4>)
 8007e46:	2801      	cmp	r0, #1
    usbp->epc[i] = NULL;
 8007e48:	e9c6 4403 	strd	r4, r4, [r6, #12]
 8007e4c:	e9c6 4405 	strd	r4, r4, [r6, #20]
 8007e50:	e9c6 4407 	strd	r4, r4, [r6, #28]
 8007e54:	e9c6 4409 	strd	r4, r4, [r6, #36]	; 0x24
  usbp->config = config;
 8007e58:	6073      	str	r3, [r6, #4]
 8007e5a:	d06e      	beq.n	8007f3a <main+0x59a>
  usbp->state = USB_READY;
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	2300      	movs	r3, #0
 8007e60:	7032      	strb	r2, [r6, #0]
 8007e62:	f383 8811 	msr	BASEPRI, r3
	usbStart(serusbcfg.usbp, &usbcfg);
	usbConnectBus(serusbcfg.usbp);
 8007e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e6a:	4b45      	ldr	r3, [pc, #276]	; (8007f80 <main+0x5e0>)
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	6159      	str	r1, [r3, #20]
 8007e70:	f382 8811 	msr	BASEPRI, r2
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8007e74:	7a2b      	ldrb	r3, [r5, #8]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d052      	beq.n	8007f20 <main+0x580>
 8007e7a:	4943      	ldr	r1, [pc, #268]	; (8007f88 <main+0x5e8>)
 8007e7c:	4a43      	ldr	r2, [pc, #268]	; (8007f8c <main+0x5ec>)
 8007e7e:	680c      	ldr	r4, [r1, #0]
  USART_TypeDef *u = sdp->usart;
 8007e80:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007e82:	fbb2 f2f4 	udiv	r2, r2, r4
  u->SR = 0;
 8007e86:	2400      	movs	r4, #0
    u->BRR = STM32_PCLK2 / config->speed;
 8007e88:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8007e8a:	88c8      	ldrh	r0, [r1, #6]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8007e8c:	888a      	ldrh	r2, [r1, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8007e8e:	8909      	ldrh	r1, [r1, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8007e90:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8007e94:	f041 0101 	orr.w	r1, r1, #1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8007e98:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8007e9a:	6159      	str	r1, [r3, #20]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8007e9c:	f442 5104 	orr.w	r1, r2, #8448	; 0x2100
 8007ea0:	f041 012c 	orr.w	r1, r1, #44	; 0x2c
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8007ea4:	f402 52a0 	and.w	r2, r2, #5120	; 0x1400
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8007ea8:	60d9      	str	r1, [r3, #12]
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8007eaa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
  u->SR = 0;
 8007eae:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8007eb0:	6819      	ldr	r1, [r3, #0]
  sdp->state = SD_READY;
 8007eb2:	f04f 0202 	mov.w	r2, #2
  (void)u->DR;  /* SR reset step 2.*/
 8007eb6:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0x7F;
 8007eb8:	bf0c      	ite	eq
 8007eba:	237f      	moveq	r3, #127	; 0x7f
    sdp->rxmask = 0xFF;
 8007ebc:	23ff      	movne	r3, #255	; 0xff
 8007ebe:	722a      	strb	r2, [r5, #8]
 8007ec0:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	4c31      	ldr	r4, [pc, #196]	; (8007f90 <main+0x5f0>)
	shellInit();

	/*
	 * Creates the blinker thread.
	 */
	chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8007ecc:	4a31      	ldr	r2, [pc, #196]	; (8007f94 <main+0x5f4>)
 8007ece:	2180      	movs	r1, #128	; 0x80
 8007ed0:	4831      	ldr	r0, [pc, #196]	; (8007f98 <main+0x5f8>)
 8007ed2:	6024      	str	r4, [r4, #0]
 8007ed4:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8007fbc <main+0x61c>
 8007ed8:	f7fb f83a 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8007edc:	4f2f      	ldr	r7, [pc, #188]	; (8007f9c <main+0x5fc>)
			thread_t *shelltp = chThdCreateFromHeap(NULL,
													SHELL_WA_SIZE,
													"shell",
													NORMALPRIO + 1,
													shellThread,
													(void *)&shell_cfg1);
 8007ede:	4e30      	ldr	r6, [pc, #192]	; (8007fa0 <main+0x600>)
			chThdWait(shelltp); /* Waiting termination.             */
		}
		chThdSleepMilliseconds(300);

		sdWrite(&SD1, (uint8_t *)"Button Pressed!\r\n", 17);
 8007ee0:	4d30      	ldr	r5, [pc, #192]	; (8007fa4 <main+0x604>)
 8007ee2:	4c31      	ldr	r4, [pc, #196]	; (8007fa8 <main+0x608>)
 8007ee4:	e00a      	b.n	8007efc <main+0x55c>
		chThdSleepMilliseconds(300);
 8007ee6:	f44f 7016 	mov.w	r0, #600	; 0x258
 8007eea:	f7fb fe39 	bl	8003b60 <chThdSleep>
		sdWrite(&SD1, (uint8_t *)"Button Pressed!\r\n", 17);
 8007eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ef2:	2211      	movs	r2, #17
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f7fb fad2 	bl	80034a0 <oqWriteTimeout>
		if (SDU1.config->usbp->state == USB_ACTIVE)
 8007efc:	f8db 348c 	ldr.w	r3, [fp, #1164]	; 0x48c
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d1ee      	bne.n	8007ee6 <main+0x546>
													(void *)&shell_cfg1);
 8007f08:	2381      	movs	r3, #129	; 0x81
 8007f0a:	4632      	mov	r2, r6
 8007f0c:	f640 01c8 	movw	r1, #2248	; 0x8c8
 8007f10:	e9cd 7800 	strd	r7, r8, [sp]
 8007f14:	2000      	movs	r0, #0
 8007f16:	f7fe f9bb 	bl	8006290 <chThdCreateFromHeap>
			chThdWait(shelltp); /* Waiting termination.             */
 8007f1a:	f7ff fd21 	bl	8007960 <chThdWait>
 8007f1e:	e7e2      	b.n	8007ee6 <main+0x546>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007f20:	24c0      	movs	r4, #192	; 0xc0
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(true);
 8007f22:	4822      	ldr	r0, [pc, #136]	; (8007fac <main+0x60c>)
 8007f24:	4b22      	ldr	r3, [pc, #136]	; (8007fb0 <main+0x610>)
 8007f26:	6981      	ldr	r1, [r0, #24]
 8007f28:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8007f2c:	6181      	str	r1, [r0, #24]
 8007f2e:	f883 4325 	strb.w	r4, [r3, #805]	; 0x325
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007f32:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007f36:	605a      	str	r2, [r3, #4]
 8007f38:	e79f      	b.n	8007e7a <main+0x4da>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007f3a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007f3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007f42:	f04f 0cd0 	mov.w	ip, #208	; 0xd0
 8007f46:	27e0      	movs	r7, #224	; 0xe0
      rccEnableUSB(true);
 8007f48:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007f4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f50:	f8c8 301c 	str.w	r3, [r8, #28]
      STM32_USB->CNTR = CNTR_FRES;
 8007f54:	4b17      	ldr	r3, [pc, #92]	; (8007fb4 <main+0x614>)
 8007f56:	6418      	str	r0, [r3, #64]	; 0x40
 8007f58:	f88a c313 	strb.w	ip, [sl, #787]	; 0x313
    usb_lld_reset(usbp);
 8007f5c:	4816      	ldr	r0, [pc, #88]	; (8007fb8 <main+0x618>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007f5e:	f8ca 1180 	str.w	r1, [sl, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007f62:	f8ca 1000 	str.w	r1, [sl]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007f66:	f88a 7314 	strb.w	r7, [sl, #788]	; 0x314
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007f6a:	f8ca 2180 	str.w	r2, [sl, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007f6e:	f8ca 2000 	str.w	r2, [sl]
      STM32_USB->CNTR = 0;
 8007f72:	641c      	str	r4, [r3, #64]	; 0x40
    usb_lld_reset(usbp);
 8007f74:	f7f8 ff44 	bl	8000e00 <usb_lld_reset>
 8007f78:	e770      	b.n	8007e5c <main+0x4bc>
 8007f7a:	bf00      	nop
 8007f7c:	0800ba50 	.word	0x0800ba50
 8007f80:	40010c00 	.word	0x40010c00
 8007f84:	0800c594 	.word	0x0800c594
 8007f88:	20000800 	.word	0x20000800
 8007f8c:	02255100 	.word	0x02255100
 8007f90:	20001360 	.word	0x20001360
 8007f94:	08003b81 	.word	0x08003b81
 8007f98:	20000e70 	.word	0x20000e70
 8007f9c:	08004491 	.word	0x08004491
 8007fa0:	0800a388 	.word	0x0800a388
 8007fa4:	0800a390 	.word	0x0800a390
 8007fa8:	20000908 	.word	0x20000908
 8007fac:	40021000 	.word	0x40021000
 8007fb0:	e000e100 	.word	0xe000e100
 8007fb4:	40005c00 	.word	0x40005c00
 8007fb8:	20000de4 	.word	0x20000de4
 8007fbc:	08009f10 	.word	0x08009f10

08007fc0 <cmd_test>:
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007fc0:	b530      	push	{r4, r5, lr}
  thread_t *tp;
  tfunc_t tfp;

  (void)argv;
  if (argc != 1) {
 8007fc2:	2901      	cmp	r1, #1
static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	4604      	mov	r4, r0
  if (argc != 1) {
 8007fc8:	d11c      	bne.n	8008004 <cmd_test+0x44>
    shellUsage(chp, "test rt|oslib");
    return;
  }
  if (!strcmp(argv[0], "rt")) {
 8007fca:	6815      	ldr	r5, [r2, #0]
 8007fcc:	4916      	ldr	r1, [pc, #88]	; (8008028 <cmd_test+0x68>)
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f7f8 f9c0 	bl	8000354 <strcmp>
 8007fd4:	b1f0      	cbz	r0, 8008014 <cmd_test+0x54>
    tfp = test_rt;
  }
  else if (!strcmp(argv[0], "oslib")) {
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	4914      	ldr	r1, [pc, #80]	; (800802c <cmd_test+0x6c>)
 8007fda:	f7f8 f9bb 	bl	8000354 <strcmp>
 8007fde:	b988      	cbnz	r0, 8008004 <cmd_test+0x44>
    tfp = test_oslib;
 8007fe0:	4813      	ldr	r0, [pc, #76]	; (8008030 <cmd_test+0x70>)
  return ch.rlist.current;
 8007fe2:	4b14      	ldr	r3, [pc, #80]	; (8008034 <cmd_test+0x74>)
  }
  else {
    shellUsage(chp, "test rt|oslib");
    return;
  }
  tp = chThdCreateFromHeap(NULL, SHELL_CMD_TEST_WA_SIZE,
 8007fe4:	4a14      	ldr	r2, [pc, #80]	; (8008038 <cmd_test+0x78>)
  return chThdGetSelfX()->prio;
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	e9cd 0400 	strd	r0, r4, [sp]
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	f7fe f94c 	bl	8006290 <chThdCreateFromHeap>
                           "test", chThdGetPriorityX(),
                           tfp, chp);
  if (tp == NULL) {
 8007ff8:	b170      	cbz	r0, 8008018 <cmd_test+0x58>
    chprintf(chp, "out of memory"SHELL_NEWLINE_STR);
    return;
  }
  chThdWait(tp);
}
 8007ffa:	b003      	add	sp, #12
 8007ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  chThdWait(tp);
 8008000:	f7ff bcae 	b.w	8007960 <chThdWait>
    shellUsage(chp, "test rt|oslib");
 8008004:	4620      	mov	r0, r4
 8008006:	4a0d      	ldr	r2, [pc, #52]	; (800803c <cmd_test+0x7c>)
 8008008:	490d      	ldr	r1, [pc, #52]	; (8008040 <cmd_test+0x80>)
}
 800800a:	b003      	add	sp, #12
 800800c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    shellUsage(chp, "test rt|oslib");
 8008010:	f7fa b93e 	b.w	8002290 <chprintf>
    tfp = test_rt;
 8008014:	480b      	ldr	r0, [pc, #44]	; (8008044 <cmd_test+0x84>)
 8008016:	e7e4      	b.n	8007fe2 <cmd_test+0x22>
    chprintf(chp, "out of memory"SHELL_NEWLINE_STR);
 8008018:	4620      	mov	r0, r4
 800801a:	490b      	ldr	r1, [pc, #44]	; (8008048 <cmd_test+0x88>)
}
 800801c:	b003      	add	sp, #12
 800801e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    chprintf(chp, "out of memory"SHELL_NEWLINE_STR);
 8008022:	f7fa b935 	b.w	8002290 <chprintf>
 8008026:	bf00      	nop
 8008028:	0800a278 	.word	0x0800a278
 800802c:	0800a270 	.word	0x0800a270
 8008030:	080040c1 	.word	0x080040c1
 8008034:	200010f0 	.word	0x200010f0
 8008038:	0800bffc 	.word	0x0800bffc
 800803c:	0800a268 	.word	0x0800a268
 8008040:	0800a254 	.word	0x0800a254
 8008044:	080040b1 	.word	0x080040b1
 8008048:	0800a27c 	.word	0x0800a27c
 800804c:	00000000 	.word	0x00000000

08008050 <rt_test_010_005_execute>:
  test_set_step(1);
 8008050:	2201      	movs	r2, #1
  return ch.rlist.current;
 8008052:	4b1a      	ldr	r3, [pc, #104]	; (80080bc <rt_test_010_005_execute+0x6c>)
static void rt_test_010_005_execute(void) {
 8008054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return chThdGetSelfX()->prio;
 8008058:	699b      	ldr	r3, [r3, #24]
  test_set_step(1);
 800805a:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80080c8 <rt_test_010_005_execute+0x78>
  tprio_t prio = chThdGetPriorityX() - 1;
 800805e:	689f      	ldr	r7, [r3, #8]
  test_set_step(1);
 8008060:	f8ca 2000 	str.w	r2, [sl]
    start = test_wait_tick();
 8008064:	f7fb fe1c 	bl	8003ca0 <test_wait_tick>
    n = 0;
 8008068:	2400      	movs	r4, #0
    start = test_wait_tick();
 800806a:	4606      	mov	r6, r0
  return systime + (systime_t)interval;
 800806c:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 8008070:	b2ad      	uxth	r5, r5
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8008072:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80080cc <rt_test_010_005_execute+0x7c>
 8008076:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80080d0 <rt_test_010_005_execute+0x80>
  tprio_t prio = chThdGetPriorityX() - 1;
 800807a:	3f01      	subs	r7, #1
 800807c:	1a2d      	subs	r5, r5, r0
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800807e:	2300      	movs	r3, #0
 8008080:	464a      	mov	r2, r9
 8008082:	4639      	mov	r1, r7
 8008084:	4640      	mov	r0, r8
 8008086:	f7fa ff63 	bl	8002f50 <chThdCreateStatic.constprop.103>
 800808a:	f7ff fc69 	bl	8007960 <chThdWait>
 800808e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 8008094:	3401      	adds	r4, #1
  return (bool)((time - start) < (end - start));
 8008096:	b29b      	uxth	r3, r3
 8008098:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 800809a:	42ab      	cmp	r3, r5
 800809c:	dbef      	blt.n	800807e <rt_test_010_005_execute+0x2e>
  test_set_step(2);
 800809e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 80080a0:	4807      	ldr	r0, [pc, #28]	; (80080c0 <rt_test_010_005_execute+0x70>)
  test_set_step(2);
 80080a2:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 80080a6:	f7f8 fd53 	bl	8000b50 <test_print>
    test_printn(n);
 80080aa:	4620      	mov	r0, r4
 80080ac:	f7f8 fce0 	bl	8000a70 <test_printn>
}
 80080b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" threads/S");
 80080b4:	4803      	ldr	r0, [pc, #12]	; (80080c4 <rt_test_010_005_execute+0x74>)
 80080b6:	f7f8 bd2b 	b.w	8000b10 <test_println>
 80080ba:	bf00      	nop
 80080bc:	200010f0 	.word	0x200010f0
 80080c0:	0800b7e8 	.word	0x0800b7e8
 80080c4:	0800b78c 	.word	0x0800b78c
 80080c8:	20001a7c 	.word	0x20001a7c
 80080cc:	08005431 	.word	0x08005431
 80080d0:	20001368 	.word	0x20001368
	...

080080e0 <test_wait_threads>:
void test_wait_threads(void) {
 80080e0:	b570      	push	{r4, r5, r6, lr}
      threads[i] = NULL;
 80080e2:	2600      	movs	r6, #0
 80080e4:	4c06      	ldr	r4, [pc, #24]	; (8008100 <test_wait_threads+0x20>)
 80080e6:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 80080ea:	f854 0b04 	ldr.w	r0, [r4], #4
 80080ee:	b118      	cbz	r0, 80080f8 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 80080f0:	f7ff fc36 	bl	8007960 <chThdWait>
      threads[i] = NULL;
 80080f4:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80080f8:	42ac      	cmp	r4, r5
 80080fa:	d1f6      	bne.n	80080ea <test_wait_threads+0xa>
}
 80080fc:	bd70      	pop	{r4, r5, r6, pc}
 80080fe:	bf00      	nop
 8008100:	20001a94 	.word	0x20001a94
	...

08008110 <rt_test_010_008_execute>:
  test_set_step(1);
 8008110:	2201      	movs	r2, #1
    n = 0;
 8008112:	2300      	movs	r3, #0
static void rt_test_010_008_execute(void) {
 8008114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8008118:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80081ec <rt_test_010_008_execute+0xdc>
 800811c:	b083      	sub	sp, #12
  test_set_step(1);
 800811e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80081f0 <rt_test_010_008_execute+0xe0>
    n = 0;
 8008122:	ac02      	add	r4, sp, #8
 8008124:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_set_step(1);
 8008128:	f8c9 2000 	str.w	r2, [r9]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800812c:	f7fb fdb8 	bl	8003ca0 <test_wait_tick>
  return chThdGetSelfX()->prio;
 8008130:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008134:	4f28      	ldr	r7, [pc, #160]	; (80081d8 <rt_test_010_008_execute+0xc8>)
 8008136:	4e29      	ldr	r6, [pc, #164]	; (80081dc <rt_test_010_008_execute+0xcc>)
 8008138:	6899      	ldr	r1, [r3, #8]
 800813a:	463a      	mov	r2, r7
 800813c:	4623      	mov	r3, r4
 800813e:	3901      	subs	r1, #1
 8008140:	4630      	mov	r0, r6
 8008142:	f7fa ff05 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8008146:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800814a:	4d25      	ldr	r5, [pc, #148]	; (80081e0 <rt_test_010_008_execute+0xd0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800814c:	6899      	ldr	r1, [r3, #8]
 800814e:	463a      	mov	r2, r7
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008150:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008152:	4623      	mov	r3, r4
 8008154:	3901      	subs	r1, #1
 8008156:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 800815a:	f7fa fef9 	bl	8002f50 <chThdCreateStatic.constprop.103>
 800815e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008162:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008164:	6899      	ldr	r1, [r3, #8]
 8008166:	463a      	mov	r2, r7
 8008168:	4623      	mov	r3, r4
 800816a:	3901      	subs	r1, #1
 800816c:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8008170:	f7fa feee 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8008174:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008178:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800817a:	6899      	ldr	r1, [r3, #8]
 800817c:	463a      	mov	r2, r7
 800817e:	4623      	mov	r3, r4
 8008180:	3901      	subs	r1, #1
 8008182:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8008186:	f7fa fee3 	bl	8002f50 <chThdCreateStatic.constprop.103>
 800818a:	f8d8 3018 	ldr.w	r3, [r8, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800818e:	463a      	mov	r2, r7
 8008190:	6899      	ldr	r1, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008192:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008194:	3901      	subs	r1, #1
 8008196:	4623      	mov	r3, r4
 8008198:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 800819c:	f7fa fed8 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(2);
 80081a0:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80081a2:	6128      	str	r0, [r5, #16]
    chThdSleepSeconds(1);
 80081a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  test_set_step(2);
 80081a8:	f8c9 3000 	str.w	r3, [r9]
    chThdSleepSeconds(1);
 80081ac:	f7fb fcd8 	bl	8003b60 <chThdSleep>
    test_terminate_threads();
 80081b0:	f7f8 fc0e 	bl	80009d0 <test_terminate_threads>
    test_wait_threads();
 80081b4:	f7ff ff94 	bl	80080e0 <test_wait_threads>
  test_set_step(3);
 80081b8:	2303      	movs	r3, #3
    test_print("--- Score : ");
 80081ba:	480a      	ldr	r0, [pc, #40]	; (80081e4 <rt_test_010_008_execute+0xd4>)
  test_set_step(3);
 80081bc:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 80081c0:	f7f8 fcc6 	bl	8000b50 <test_print>
    test_printn(n);
 80081c4:	9801      	ldr	r0, [sp, #4]
 80081c6:	f7f8 fc53 	bl	8000a70 <test_printn>
    test_println(" ctxswc/S");
 80081ca:	4807      	ldr	r0, [pc, #28]	; (80081e8 <rt_test_010_008_execute+0xd8>)
 80081cc:	f7f8 fca0 	bl	8000b10 <test_println>
}
 80081d0:	b003      	add	sp, #12
 80081d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081d6:	bf00      	nop
 80081d8:	08002ec1 	.word	0x08002ec1
 80081dc:	20001368 	.word	0x20001368
 80081e0:	20001a94 	.word	0x20001a94
 80081e4:	0800b7e8 	.word	0x0800b7e8
 80081e8:	0800b7cc 	.word	0x0800b7cc
 80081ec:	200010f0 	.word	0x200010f0
 80081f0:	20001a7c 	.word	0x20001a7c
	...

08008200 <rt_test_010_004_execute>:
static void rt_test_010_004_execute(void) {
 8008200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 8008204:	2401      	movs	r4, #1
  return ch.rlist.current;
 8008206:	4b2b      	ldr	r3, [pc, #172]	; (80082b4 <rt_test_010_004_execute+0xb4>)
 8008208:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 80082cc <rt_test_010_004_execute+0xcc>
  return chThdGetSelfX()->prio;
 800820c:	699a      	ldr	r2, [r3, #24]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800820e:	482a      	ldr	r0, [pc, #168]	; (80082b8 <rt_test_010_004_execute+0xb8>)
 8008210:	6891      	ldr	r1, [r2, #8]
 8008212:	2300      	movs	r3, #0
 8008214:	4421      	add	r1, r4
 8008216:	4a29      	ldr	r2, [pc, #164]	; (80082bc <rt_test_010_004_execute+0xbc>)
  test_set_step(1);
 8008218:	f8cb 4000 	str.w	r4, [fp]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800821c:	f7fa fe98 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(2);
 8008220:	2202      	movs	r2, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8008222:	4b27      	ldr	r3, [pc, #156]	; (80082c0 <rt_test_010_004_execute+0xc0>)
 8008224:	4604      	mov	r4, r0
    n = 0;
 8008226:	2500      	movs	r5, #0
  test_set_step(2);
 8008228:	f8cb 2000 	str.w	r2, [fp]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800822c:	6018      	str	r0, [r3, #0]
    start = test_wait_tick();
 800822e:	f7fb fd37 	bl	8003ca0 <test_wait_tick>
      chSchWakeupS(tp, MSG_OK);
 8008232:	46a8      	mov	r8, r5
    start = test_wait_tick();
 8008234:	4607      	mov	r7, r0
 8008236:	f04f 0920 	mov.w	r9, #32
 800823a:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 800823e:	f500 66fa 	add.w	r6, r0, #2000	; 0x7d0
 8008242:	b2b6      	uxth	r6, r6
 8008244:	1a36      	subs	r6, r6, r0
 8008246:	f389 8811 	msr	BASEPRI, r9
      chSchWakeupS(tp, MSG_OK);
 800824a:	2100      	movs	r1, #0
 800824c:	4620      	mov	r0, r4
 800824e:	f7fa fe4f 	bl	8002ef0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8008252:	4620      	mov	r0, r4
 8008254:	2100      	movs	r1, #0
 8008256:	f7fa fe4b 	bl	8002ef0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800825a:	4620      	mov	r0, r4
 800825c:	2100      	movs	r1, #0
 800825e:	f7fa fe47 	bl	8002ef0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8008262:	4620      	mov	r0, r4
 8008264:	2100      	movs	r1, #0
 8008266:	f7fa fe43 	bl	8002ef0 <chSchWakeupS>
 800826a:	f388 8811 	msr	BASEPRI, r8
 800826e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
      n += 4;
 8008272:	3504      	adds	r5, #4
  return (bool)((time - start) < (end - start));
 8008274:	b29b      	uxth	r3, r3
 8008276:	1bdb      	subs	r3, r3, r7
    } while (chVTIsSystemTimeWithinX(start, end));
 8008278:	42b3      	cmp	r3, r6
 800827a:	dbe4      	blt.n	8008246 <rt_test_010_004_execute+0x46>
  test_set_step(3);
 800827c:	2303      	movs	r3, #3
 800827e:	f8cb 3000 	str.w	r3, [fp]
 8008282:	f389 8811 	msr	BASEPRI, r9
    chSchWakeupS(tp, MSG_TIMEOUT);
 8008286:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800828a:	4620      	mov	r0, r4
 800828c:	f7fa fe30 	bl	8002ef0 <chSchWakeupS>
 8008290:	f388 8811 	msr	BASEPRI, r8
    test_wait_threads();
 8008294:	f7ff ff24 	bl	80080e0 <test_wait_threads>
  test_set_step(4);
 8008298:	2304      	movs	r3, #4
    test_print("--- Score : ");
 800829a:	480a      	ldr	r0, [pc, #40]	; (80082c4 <rt_test_010_004_execute+0xc4>)
  test_set_step(4);
 800829c:	f8cb 3000 	str.w	r3, [fp]
    test_print("--- Score : ");
 80082a0:	f7f8 fc56 	bl	8000b50 <test_print>
    test_printn(n * 2);
 80082a4:	0068      	lsls	r0, r5, #1
 80082a6:	f7f8 fbe3 	bl	8000a70 <test_printn>
}
 80082aa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" ctxswc/S");
 80082ae:	4806      	ldr	r0, [pc, #24]	; (80082c8 <rt_test_010_004_execute+0xc8>)
 80082b0:	f7f8 bc2e 	b.w	8000b10 <test_println>
 80082b4:	200010f0 	.word	0x200010f0
 80082b8:	20001368 	.word	0x20001368
 80082bc:	08003191 	.word	0x08003191
 80082c0:	20001a94 	.word	0x20001a94
 80082c4:	0800b7e8 	.word	0x0800b7e8
 80082c8:	0800b7cc 	.word	0x0800b7cc
 80082cc:	20001a7c 	.word	0x20001a7c

080082d0 <rt_test_010_003_execute>:
static void rt_test_010_003_execute(void) {
 80082d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80082d4:	2401      	movs	r4, #1
  return ch.rlist.current;
 80082d6:	4e2b      	ldr	r6, [pc, #172]	; (8008384 <rt_test_010_003_execute+0xb4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80082d8:	4d2b      	ldr	r5, [pc, #172]	; (8008388 <rt_test_010_003_execute+0xb8>)
  return chThdGetSelfX()->prio;
 80082da:	69b3      	ldr	r3, [r6, #24]
  test_set_step(1);
 80082dc:	4f2b      	ldr	r7, [pc, #172]	; (800838c <rt_test_010_003_execute+0xbc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80082de:	6899      	ldr	r1, [r3, #8]
 80082e0:	4628      	mov	r0, r5
 80082e2:	4421      	add	r1, r4
 80082e4:	2300      	movs	r3, #0
 80082e6:	4a2a      	ldr	r2, [pc, #168]	; (8008390 <rt_test_010_003_execute+0xc0>)
  test_set_step(1);
 80082e8:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80082ea:	f7fa fe31 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(2);
 80082ee:	f04f 0c02 	mov.w	ip, #2
 80082f2:	69b3      	ldr	r3, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80082f4:	4c27      	ldr	r4, [pc, #156]	; (8008394 <rt_test_010_003_execute+0xc4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 80082f6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80083a4 <rt_test_010_003_execute+0xd4>
 80082fa:	6899      	ldr	r1, [r3, #8]
 80082fc:	4642      	mov	r2, r8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80082fe:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8008300:	3902      	subs	r1, #2
 8008302:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8008306:	2300      	movs	r3, #0
  test_set_step(2);
 8008308:	f8c7 c000 	str.w	ip, [r7]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 800830c:	f7fa fe20 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8008310:	69b3      	ldr	r3, [r6, #24]
 8008312:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 8008314:	6899      	ldr	r1, [r3, #8]
 8008316:	4642      	mov	r2, r8
 8008318:	3903      	subs	r1, #3
 800831a:	f505 7024 	add.w	r0, r5, #656	; 0x290
 800831e:	2300      	movs	r3, #0
 8008320:	f7fa fe16 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8008324:	69b3      	ldr	r3, [r6, #24]
 8008326:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 8008328:	6899      	ldr	r1, [r3, #8]
 800832a:	4642      	mov	r2, r8
 800832c:	3904      	subs	r1, #4
 800832e:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8008332:	2300      	movs	r3, #0
 8008334:	f7fa fe0c 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8008338:	69b3      	ldr	r3, [r6, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 800833a:	4642      	mov	r2, r8
 800833c:	6899      	ldr	r1, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800833e:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8008340:	3905      	subs	r1, #5
 8008342:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8008346:	2300      	movs	r3, #0
 8008348:	f7fa fe02 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(3);
 800834c:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 800834e:	6120      	str	r0, [r4, #16]
    n = msg_loop_test(threads[0]);
 8008350:	6820      	ldr	r0, [r4, #0]
  test_set_step(3);
 8008352:	603b      	str	r3, [r7, #0]
    n = msg_loop_test(threads[0]);
 8008354:	f7fb ff0c 	bl	8004170 <msg_loop_test>
 8008358:	4604      	mov	r4, r0
    test_wait_threads();
 800835a:	f7ff fec1 	bl	80080e0 <test_wait_threads>
  test_set_step(4);
 800835e:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8008360:	480d      	ldr	r0, [pc, #52]	; (8008398 <rt_test_010_003_execute+0xc8>)
  test_set_step(4);
 8008362:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 8008364:	f7f8 fbf4 	bl	8000b50 <test_print>
    test_printn(n);
 8008368:	4620      	mov	r0, r4
 800836a:	f7f8 fb81 	bl	8000a70 <test_printn>
    test_print(" msgs/S, ");
 800836e:	480b      	ldr	r0, [pc, #44]	; (800839c <rt_test_010_003_execute+0xcc>)
 8008370:	f7f8 fbee 	bl	8000b50 <test_print>
    test_printn(n << 1);
 8008374:	0060      	lsls	r0, r4, #1
 8008376:	f7f8 fb7b 	bl	8000a70 <test_printn>
}
 800837a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 800837e:	4808      	ldr	r0, [pc, #32]	; (80083a0 <rt_test_010_003_execute+0xd0>)
 8008380:	f7f8 bbc6 	b.w	8000b10 <test_println>
 8008384:	200010f0 	.word	0x200010f0
 8008388:	20001368 	.word	0x20001368
 800838c:	20001a7c 	.word	0x20001a7c
 8008390:	08004111 	.word	0x08004111
 8008394:	20001a94 	.word	0x20001a94
 8008398:	0800b7e8 	.word	0x0800b7e8
 800839c:	0800b750 	.word	0x0800b750
 80083a0:	0800b7cc 	.word	0x0800b7cc
 80083a4:	08005431 	.word	0x08005431
	...

080083b0 <rt_test_010_002_execute>:
static void rt_test_010_002_execute(void) {
 80083b0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 80083b2:	2501      	movs	r5, #1
  return ch.rlist.current;
 80083b4:	4b13      	ldr	r3, [pc, #76]	; (8008404 <rt_test_010_002_execute+0x54>)
 80083b6:	4c14      	ldr	r4, [pc, #80]	; (8008408 <rt_test_010_002_execute+0x58>)
  return chThdGetSelfX()->prio;
 80083b8:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80083ba:	4814      	ldr	r0, [pc, #80]	; (800840c <rt_test_010_002_execute+0x5c>)
 80083bc:	6891      	ldr	r1, [r2, #8]
 80083be:	2300      	movs	r3, #0
 80083c0:	4429      	add	r1, r5
 80083c2:	4a13      	ldr	r2, [pc, #76]	; (8008410 <rt_test_010_002_execute+0x60>)
  test_set_step(1);
 80083c4:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80083c6:	f7fa fdc3 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(2);
 80083ca:	2202      	movs	r2, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80083cc:	4b11      	ldr	r3, [pc, #68]	; (8008414 <rt_test_010_002_execute+0x64>)
  test_set_step(2);
 80083ce:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80083d0:	6018      	str	r0, [r3, #0]
    n = msg_loop_test(threads[0]);
 80083d2:	f7fb fecd 	bl	8004170 <msg_loop_test>
 80083d6:	4605      	mov	r5, r0
    test_wait_threads();
 80083d8:	f7ff fe82 	bl	80080e0 <test_wait_threads>
  test_set_step(3);
 80083dc:	2303      	movs	r3, #3
    test_print("--- Score : ");
 80083de:	480e      	ldr	r0, [pc, #56]	; (8008418 <rt_test_010_002_execute+0x68>)
  test_set_step(3);
 80083e0:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
 80083e2:	f7f8 fbb5 	bl	8000b50 <test_print>
    test_printn(n);
 80083e6:	4628      	mov	r0, r5
 80083e8:	f7f8 fb42 	bl	8000a70 <test_printn>
    test_print(" msgs/S, ");
 80083ec:	480b      	ldr	r0, [pc, #44]	; (800841c <rt_test_010_002_execute+0x6c>)
 80083ee:	f7f8 fbaf 	bl	8000b50 <test_print>
    test_printn(n << 1);
 80083f2:	0068      	lsls	r0, r5, #1
 80083f4:	f7f8 fb3c 	bl	8000a70 <test_printn>
}
 80083f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 80083fc:	4808      	ldr	r0, [pc, #32]	; (8008420 <rt_test_010_002_execute+0x70>)
 80083fe:	f7f8 bb87 	b.w	8000b10 <test_println>
 8008402:	bf00      	nop
 8008404:	200010f0 	.word	0x200010f0
 8008408:	20001a7c 	.word	0x20001a7c
 800840c:	20001368 	.word	0x20001368
 8008410:	08004111 	.word	0x08004111
 8008414:	20001a94 	.word	0x20001a94
 8008418:	0800b7e8 	.word	0x0800b7e8
 800841c:	0800b750 	.word	0x0800b750
 8008420:	0800b7cc 	.word	0x0800b7cc
	...

08008430 <rt_test_010_001_execute>:
static void rt_test_010_001_execute(void) {
 8008430:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8008432:	2501      	movs	r5, #1
  return ch.rlist.current;
 8008434:	4b13      	ldr	r3, [pc, #76]	; (8008484 <rt_test_010_001_execute+0x54>)
 8008436:	4c14      	ldr	r4, [pc, #80]	; (8008488 <rt_test_010_001_execute+0x58>)
  return chThdGetSelfX()->prio;
 8008438:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800843a:	4814      	ldr	r0, [pc, #80]	; (800848c <rt_test_010_001_execute+0x5c>)
 800843c:	6891      	ldr	r1, [r2, #8]
 800843e:	2300      	movs	r3, #0
 8008440:	3901      	subs	r1, #1
 8008442:	4a13      	ldr	r2, [pc, #76]	; (8008490 <rt_test_010_001_execute+0x60>)
  test_set_step(1);
 8008444:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008446:	f7fa fd83 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(2);
 800844a:	2202      	movs	r2, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800844c:	4b11      	ldr	r3, [pc, #68]	; (8008494 <rt_test_010_001_execute+0x64>)
  test_set_step(2);
 800844e:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008450:	6018      	str	r0, [r3, #0]
    n = msg_loop_test(threads[0]);
 8008452:	f7fb fe8d 	bl	8004170 <msg_loop_test>
 8008456:	4605      	mov	r5, r0
    test_wait_threads();
 8008458:	f7ff fe42 	bl	80080e0 <test_wait_threads>
  test_set_step(3);
 800845c:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800845e:	480e      	ldr	r0, [pc, #56]	; (8008498 <rt_test_010_001_execute+0x68>)
  test_set_step(3);
 8008460:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
 8008462:	f7f8 fb75 	bl	8000b50 <test_print>
    test_printn(n);
 8008466:	4628      	mov	r0, r5
 8008468:	f7f8 fb02 	bl	8000a70 <test_printn>
    test_print(" msgs/S, ");
 800846c:	480b      	ldr	r0, [pc, #44]	; (800849c <rt_test_010_001_execute+0x6c>)
 800846e:	f7f8 fb6f 	bl	8000b50 <test_print>
    test_printn(n << 1);
 8008472:	0068      	lsls	r0, r5, #1
 8008474:	f7f8 fafc 	bl	8000a70 <test_printn>
}
 8008478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 800847c:	4808      	ldr	r0, [pc, #32]	; (80084a0 <rt_test_010_001_execute+0x70>)
 800847e:	f7f8 bb47 	b.w	8000b10 <test_println>
 8008482:	bf00      	nop
 8008484:	200010f0 	.word	0x200010f0
 8008488:	20001a7c 	.word	0x20001a7c
 800848c:	20001368 	.word	0x20001368
 8008490:	08004111 	.word	0x08004111
 8008494:	20001a94 	.word	0x20001a94
 8008498:	0800b7e8 	.word	0x0800b7e8
 800849c:	0800b750 	.word	0x0800b750
 80084a0:	0800b7cc 	.word	0x0800b7cc
	...

080084b0 <rt_test_009_002_execute>:
static void rt_test_009_002_execute(void) {
  unsigned i;
  tprio_t prio;

  /* [9.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 80084b0:	2001      	movs	r0, #1
static void rt_test_009_002_execute(void) {
 80084b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b4:	2720      	movs	r7, #32
 80084b6:	2600      	movs	r6, #0
  test_set_step(1);
 80084b8:	4d3b      	ldr	r5, [pc, #236]	; (80085a8 <rt_test_009_002_execute+0xf8>)
 80084ba:	4b3c      	ldr	r3, [pc, #240]	; (80085ac <rt_test_009_002_execute+0xfc>)
 80084bc:	4a3c      	ldr	r2, [pc, #240]	; (80085b0 <rt_test_009_002_execute+0x100>)
 80084be:	493d      	ldr	r1, [pc, #244]	; (80085b4 <rt_test_009_002_execute+0x104>)
 80084c0:	6028      	str	r0, [r5, #0]
 80084c2:	f103 040c 	add.w	r4, r3, #12
 80084c6:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 80084ca:	6808      	ldr	r0, [r1, #0]
 80084cc:	6010      	str	r0, [r2, #0]
  mp->next = php;
 80084ce:	600a      	str	r2, [r1, #0]
 80084d0:	f386 8811 	msr	BASEPRI, r6
  {
    for (i = 0; i < 4; i++)
 80084d4:	429c      	cmp	r4, r3
 80084d6:	d002      	beq.n	80084de <rt_test_009_002_execute+0x2e>
 80084d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084dc:	e7f3      	b.n	80084c6 <rt_test_009_002_execute+0x16>
  {
    prio = chThdGetPriorityX();
  }

  /* [9.2.3] Creating the five threads.*/
  test_set_step(3);
 80084de:	2303      	movs	r3, #3
  return ch.rlist.current;
 80084e0:	4935      	ldr	r1, [pc, #212]	; (80085b8 <rt_test_009_002_execute+0x108>)
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80084e2:	4a36      	ldr	r2, [pc, #216]	; (80085bc <rt_test_009_002_execute+0x10c>)
  return chThdGetSelfX()->prio;
 80084e4:	6989      	ldr	r1, [r1, #24]
 80084e6:	4836      	ldr	r0, [pc, #216]	; (80085c0 <rt_test_009_002_execute+0x110>)
 80084e8:	688e      	ldr	r6, [r1, #8]
  test_set_step(3);
 80084ea:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80084ec:	1e71      	subs	r1, r6, #1
 80084ee:	f7fa fd8f 	bl	8003010 <chThdCreateFromMemoryPool.constprop.74>
 80084f2:	4c34      	ldr	r4, [pc, #208]	; (80085c4 <rt_test_009_002_execute+0x114>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80084f4:	1eb1      	subs	r1, r6, #2
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80084f6:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80084f8:	4a33      	ldr	r2, [pc, #204]	; (80085c8 <rt_test_009_002_execute+0x118>)
 80084fa:	4834      	ldr	r0, [pc, #208]	; (80085cc <rt_test_009_002_execute+0x11c>)
 80084fc:	f7fa fd88 	bl	8003010 <chThdCreateFromMemoryPool.constprop.74>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8008500:	1ef1      	subs	r1, r6, #3
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8008502:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8008504:	4a32      	ldr	r2, [pc, #200]	; (80085d0 <rt_test_009_002_execute+0x120>)
 8008506:	4833      	ldr	r0, [pc, #204]	; (80085d4 <rt_test_009_002_execute+0x124>)
 8008508:	f7fa fd82 	bl	8003010 <chThdCreateFromMemoryPool.constprop.74>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 800850c:	1f31      	subs	r1, r6, #4
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 800850e:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8008510:	4a31      	ldr	r2, [pc, #196]	; (80085d8 <rt_test_009_002_execute+0x128>)
 8008512:	4832      	ldr	r0, [pc, #200]	; (80085dc <rt_test_009_002_execute+0x12c>)
 8008514:	f7fa fd7c 	bl	8003010 <chThdCreateFromMemoryPool.constprop.74>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8008518:	1f71      	subs	r1, r6, #5
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 800851a:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 800851c:	4a30      	ldr	r2, [pc, #192]	; (80085e0 <rt_test_009_002_execute+0x130>)
 800851e:	4831      	ldr	r0, [pc, #196]	; (80085e4 <rt_test_009_002_execute+0x134>)
 8008520:	f7fa fd76 	bl	8003010 <chThdCreateFromMemoryPool.constprop.74>
  }

  /* [9.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
 8008524:	2304      	movs	r3, #4
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8008526:	4606      	mov	r6, r0
  {
    test_assert((threads[0] != NULL) &&
 8008528:	6820      	ldr	r0, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 800852a:	6126      	str	r6, [r4, #16]
  test_set_step(4);
 800852c:	602b      	str	r3, [r5, #0]
    test_assert((threads[0] != NULL) &&
 800852e:	b138      	cbz	r0, 8008540 <rt_test_009_002_execute+0x90>
 8008530:	6860      	ldr	r0, [r4, #4]
 8008532:	b128      	cbz	r0, 8008540 <rt_test_009_002_execute+0x90>
 8008534:	68a0      	ldr	r0, [r4, #8]
 8008536:	b118      	cbz	r0, 8008540 <rt_test_009_002_execute+0x90>
 8008538:	68e0      	ldr	r0, [r4, #12]
 800853a:	3000      	adds	r0, #0
 800853c:	bf18      	it	ne
 800853e:	2001      	movne	r0, #1
 8008540:	4929      	ldr	r1, [pc, #164]	; (80085e8 <rt_test_009_002_execute+0x138>)
 8008542:	f7f8 fa05 	bl	8000950 <_test_assert>
 8008546:	b100      	cbz	r0, 800854a <rt_test_009_002_execute+0x9a>
  {
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
}
 8008548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert(threads[4] == NULL,
 800854a:	fab6 f086 	clz	r0, r6
 800854e:	4927      	ldr	r1, [pc, #156]	; (80085ec <rt_test_009_002_execute+0x13c>)
 8008550:	0940      	lsrs	r0, r0, #5
 8008552:	f7f8 f9fd 	bl	8000950 <_test_assert>
 8008556:	2800      	cmp	r0, #0
 8008558:	d1f6      	bne.n	8008548 <rt_test_009_002_execute+0x98>
  test_set_step(5);
 800855a:	2305      	movs	r3, #5
 800855c:	602b      	str	r3, [r5, #0]
    test_wait_threads();
 800855e:	f7ff fdbf 	bl	80080e0 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 8008562:	4923      	ldr	r1, [pc, #140]	; (80085f0 <rt_test_009_002_execute+0x140>)
 8008564:	4823      	ldr	r0, [pc, #140]	; (80085f4 <rt_test_009_002_execute+0x144>)
 8008566:	f7f8 fb0b 	bl	8000b80 <_test_assert_sequence>
 800856a:	2800      	cmp	r0, #0
 800856c:	d1ec      	bne.n	8008548 <rt_test_009_002_execute+0x98>
  test_set_step(6);
 800856e:	2306      	movs	r3, #6
 8008570:	2404      	movs	r4, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8008572:	4f10      	ldr	r7, [pc, #64]	; (80085b4 <rt_test_009_002_execute+0x104>)
 8008574:	4e20      	ldr	r6, [pc, #128]	; (80085f8 <rt_test_009_002_execute+0x148>)
  test_set_step(6);
 8008576:	602b      	str	r3, [r5, #0]
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8008578:	4638      	mov	r0, r7
 800857a:	f7f9 f8d9 	bl	8001730 <chPoolAlloc>
 800857e:	3000      	adds	r0, #0
 8008580:	bf18      	it	ne
 8008582:	2001      	movne	r0, #1
 8008584:	4631      	mov	r1, r6
 8008586:	f7f8 f9e3 	bl	8000950 <_test_assert>
 800858a:	2800      	cmp	r0, #0
 800858c:	d1dc      	bne.n	8008548 <rt_test_009_002_execute+0x98>
    for (i = 0; i < 4; i++)
 800858e:	3c01      	subs	r4, #1
 8008590:	d1f2      	bne.n	8008578 <rt_test_009_002_execute+0xc8>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8008592:	4808      	ldr	r0, [pc, #32]	; (80085b4 <rt_test_009_002_execute+0x104>)
 8008594:	f7f9 f8cc 	bl	8001730 <chPoolAlloc>
}
 8008598:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800859c:	fab0 f080 	clz	r0, r0
 80085a0:	4916      	ldr	r1, [pc, #88]	; (80085fc <rt_test_009_002_execute+0x14c>)
 80085a2:	0940      	lsrs	r0, r0, #5
 80085a4:	f7f8 b9d4 	b.w	8000950 <_test_assert>
 80085a8:	20001a7c 	.word	0x20001a7c
 80085ac:	0800c6e4 	.word	0x0800c6e4
 80085b0:	20001368 	.word	0x20001368
 80085b4:	20001318 	.word	0x20001318
 80085b8:	200010f0 	.word	0x200010f0
 80085bc:	0800b470 	.word	0x0800b470
 80085c0:	0800b69c 	.word	0x0800b69c
 80085c4:	20001a94 	.word	0x20001a94
 80085c8:	0800b474 	.word	0x0800b474
 80085cc:	0800b6a4 	.word	0x0800b6a4
 80085d0:	0800b6ac 	.word	0x0800b6ac
 80085d4:	0800b6b0 	.word	0x0800b6b0
 80085d8:	0800c3fc 	.word	0x0800c3fc
 80085dc:	0800b6b8 	.word	0x0800b6b8
 80085e0:	0800b4ec 	.word	0x0800b4ec
 80085e4:	0800b6c0 	.word	0x0800b6c0
 80085e8:	0800b6c8 	.word	0x0800b6c8
 80085ec:	0800b6e0 	.word	0x0800b6e0
 80085f0:	0800b54c 	.word	0x0800b54c
 80085f4:	0800a488 	.word	0x0800a488
 80085f8:	0800b6fc 	.word	0x0800b6fc
 80085fc:	0800b70c 	.word	0x0800b70c

08008600 <rt_test_009_001_execute>:
  test_set_step(2);
 8008600:	2302      	movs	r3, #2
static void rt_test_009_001_execute(void) {
 8008602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008606:	4a48      	ldr	r2, [pc, #288]	; (8008728 <rt_test_009_001_execute+0x128>)
 8008608:	b086      	sub	sp, #24
  return chThdGetSelfX()->prio;
 800860a:	6995      	ldr	r5, [r2, #24]
  test_set_step(2);
 800860c:	4c47      	ldr	r4, [pc, #284]	; (800872c <rt_test_009_001_execute+0x12c>)
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 800860e:	a905      	add	r1, sp, #20
 8008610:	aa04      	add	r2, sp, #16
 8008612:	4847      	ldr	r0, [pc, #284]	; (8008730 <rt_test_009_001_execute+0x130>)
 8008614:	68ae      	ldr	r6, [r5, #8]
  test_set_step(2);
 8008616:	6023      	str	r3, [r4, #0]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8008618:	f7fe fbda 	bl	8006dd0 <chHeapStatus>
 800861c:	4605      	mov	r5, r0
    test_assert(n1 == 1, "heap fragmented");
 800861e:	f1a0 0001 	sub.w	r0, r0, #1
 8008622:	fab0 f080 	clz	r0, r0
 8008626:	4943      	ldr	r1, [pc, #268]	; (8008734 <rt_test_009_001_execute+0x134>)
 8008628:	0940      	lsrs	r0, r0, #5
 800862a:	f7f8 f991 	bl	8000950 <_test_assert>
 800862e:	b110      	cbz	r0, 8008636 <rt_test_009_001_execute+0x36>
}
 8008630:	b006      	add	sp, #24
 8008632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(3);
 8008636:	2703      	movs	r7, #3
    threads[0] = chThdCreateFromHeap(&heap1,
 8008638:	4b3f      	ldr	r3, [pc, #252]	; (8008738 <rt_test_009_001_execute+0x138>)
 800863a:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8008770 <rt_test_009_001_execute+0x170>
 800863e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008642:	e9cd 8300 	strd	r8, r3, [sp]
 8008646:	4a3d      	ldr	r2, [pc, #244]	; (800873c <rt_test_009_001_execute+0x13c>)
 8008648:	1e73      	subs	r3, r6, #1
 800864a:	4839      	ldr	r0, [pc, #228]	; (8008730 <rt_test_009_001_execute+0x130>)
  test_set_step(3);
 800864c:	6027      	str	r7, [r4, #0]
    threads[0] = chThdCreateFromHeap(&heap1,
 800864e:	f7fd fe1f 	bl	8006290 <chThdCreateFromHeap>
 8008652:	4603      	mov	r3, r0
 8008654:	4f3a      	ldr	r7, [pc, #232]	; (8008740 <rt_test_009_001_execute+0x140>)
    test_assert(threads[0] != NULL, "thread creation failed");
 8008656:	3000      	adds	r0, #0
 8008658:	bf18      	it	ne
 800865a:	2001      	movne	r0, #1
 800865c:	4939      	ldr	r1, [pc, #228]	; (8008744 <rt_test_009_001_execute+0x144>)
    threads[0] = chThdCreateFromHeap(&heap1,
 800865e:	603b      	str	r3, [r7, #0]
    test_assert(threads[0] != NULL, "thread creation failed");
 8008660:	f7f8 f976 	bl	8000950 <_test_assert>
 8008664:	2800      	cmp	r0, #0
 8008666:	d1e3      	bne.n	8008630 <rt_test_009_001_execute+0x30>
  test_set_step(4);
 8008668:	f04f 0c04 	mov.w	ip, #4
    threads[1] = chThdCreateFromHeap(&heap1,
 800866c:	4b36      	ldr	r3, [pc, #216]	; (8008748 <rt_test_009_001_execute+0x148>)
 800866e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008672:	e9cd 8300 	strd	r8, r3, [sp]
 8008676:	4a35      	ldr	r2, [pc, #212]	; (800874c <rt_test_009_001_execute+0x14c>)
 8008678:	1eb3      	subs	r3, r6, #2
 800867a:	482d      	ldr	r0, [pc, #180]	; (8008730 <rt_test_009_001_execute+0x130>)
  test_set_step(4);
 800867c:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateFromHeap(&heap1,
 8008680:	f7fd fe06 	bl	8006290 <chThdCreateFromHeap>
 8008684:	4603      	mov	r3, r0
    test_assert(threads[1] != NULL, "thread creation failed");
 8008686:	3000      	adds	r0, #0
 8008688:	bf18      	it	ne
 800868a:	2001      	movne	r0, #1
 800868c:	492d      	ldr	r1, [pc, #180]	; (8008744 <rt_test_009_001_execute+0x144>)
    threads[1] = chThdCreateFromHeap(&heap1,
 800868e:	607b      	str	r3, [r7, #4]
    test_assert(threads[1] != NULL, "thread creation failed");
 8008690:	f7f8 f95e 	bl	8000950 <_test_assert>
 8008694:	2800      	cmp	r0, #0
 8008696:	d1cb      	bne.n	8008630 <rt_test_009_001_execute+0x30>
  test_set_step(5);
 8008698:	f04f 0c05 	mov.w	ip, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 800869c:	4a2c      	ldr	r2, [pc, #176]	; (8008750 <rt_test_009_001_execute+0x150>)
 800869e:	1ef3      	subs	r3, r6, #3
 80086a0:	9201      	str	r2, [sp, #4]
 80086a2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80086a6:	f8cd 8000 	str.w	r8, [sp]
 80086aa:	4a2a      	ldr	r2, [pc, #168]	; (8008754 <rt_test_009_001_execute+0x154>)
 80086ac:	4820      	ldr	r0, [pc, #128]	; (8008730 <rt_test_009_001_execute+0x130>)
  test_set_step(5);
 80086ae:	f8c4 c000 	str.w	ip, [r4]
    threads[2] = chThdCreateFromHeap(&heap1,
 80086b2:	f7fd fded 	bl	8006290 <chThdCreateFromHeap>
 80086b6:	4603      	mov	r3, r0
    test_assert(threads[2] == NULL, "thread creation not failed");
 80086b8:	fab0 f080 	clz	r0, r0
 80086bc:	4926      	ldr	r1, [pc, #152]	; (8008758 <rt_test_009_001_execute+0x158>)
 80086be:	0940      	lsrs	r0, r0, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 80086c0:	60bb      	str	r3, [r7, #8]
    test_assert(threads[2] == NULL, "thread creation not failed");
 80086c2:	f7f8 f945 	bl	8000950 <_test_assert>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	d1b2      	bne.n	8008630 <rt_test_009_001_execute+0x30>
  test_set_step(6);
 80086ca:	2306      	movs	r3, #6
 80086cc:	6023      	str	r3, [r4, #0]
    test_wait_threads();
 80086ce:	f7ff fd07 	bl	80080e0 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 80086d2:	4922      	ldr	r1, [pc, #136]	; (800875c <rt_test_009_001_execute+0x15c>)
 80086d4:	4822      	ldr	r0, [pc, #136]	; (8008760 <rt_test_009_001_execute+0x160>)
 80086d6:	f7f8 fa53 	bl	8000b80 <_test_assert_sequence>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d1a8      	bne.n	8008630 <rt_test_009_001_execute+0x30>
  test_set_step(7);
 80086de:	2307      	movs	r3, #7
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 80086e0:	a903      	add	r1, sp, #12
 80086e2:	aa02      	add	r2, sp, #8
 80086e4:	4812      	ldr	r0, [pc, #72]	; (8008730 <rt_test_009_001_execute+0x130>)
  test_set_step(7);
 80086e6:	6023      	str	r3, [r4, #0]
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 80086e8:	f7fe fb72 	bl	8006dd0 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 80086ec:	1a28      	subs	r0, r5, r0
 80086ee:	fab0 f080 	clz	r0, r0
 80086f2:	491c      	ldr	r1, [pc, #112]	; (8008764 <rt_test_009_001_execute+0x164>)
 80086f4:	0940      	lsrs	r0, r0, #5
 80086f6:	f7f8 f92b 	bl	8000950 <_test_assert>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d198      	bne.n	8008630 <rt_test_009_001_execute+0x30>
    test_assert(total1 == total2, "total free space changed");
 80086fe:	9805      	ldr	r0, [sp, #20]
 8008700:	9b03      	ldr	r3, [sp, #12]
 8008702:	4919      	ldr	r1, [pc, #100]	; (8008768 <rt_test_009_001_execute+0x168>)
 8008704:	1ac0      	subs	r0, r0, r3
 8008706:	fab0 f080 	clz	r0, r0
 800870a:	0940      	lsrs	r0, r0, #5
 800870c:	f7f8 f920 	bl	8000950 <_test_assert>
 8008710:	2800      	cmp	r0, #0
 8008712:	d18d      	bne.n	8008630 <rt_test_009_001_execute+0x30>
    test_assert(largest1 == largest2, "largest fragment size changed");
 8008714:	9804      	ldr	r0, [sp, #16]
 8008716:	9b02      	ldr	r3, [sp, #8]
 8008718:	4914      	ldr	r1, [pc, #80]	; (800876c <rt_test_009_001_execute+0x16c>)
 800871a:	1ac3      	subs	r3, r0, r3
 800871c:	4258      	negs	r0, r3
 800871e:	4158      	adcs	r0, r3
 8008720:	f7f8 f916 	bl	8000950 <_test_assert>
 8008724:	e784      	b.n	8008630 <rt_test_009_001_execute+0x30>
 8008726:	bf00      	nop
 8008728:	200010f0 	.word	0x200010f0
 800872c:	20001a7c 	.word	0x20001a7c
 8008730:	200012ec 	.word	0x200012ec
 8008734:	0800a530 	.word	0x0800a530
 8008738:	0800b470 	.word	0x0800b470
 800873c:	0800b69c 	.word	0x0800b69c
 8008740:	20001a94 	.word	0x20001a94
 8008744:	0800b6c8 	.word	0x0800b6c8
 8008748:	0800b474 	.word	0x0800b474
 800874c:	0800b6a4 	.word	0x0800b6a4
 8008750:	0800b6ac 	.word	0x0800b6ac
 8008754:	0800b6b0 	.word	0x0800b6b0
 8008758:	0800b6e0 	.word	0x0800b6e0
 800875c:	0800b54c 	.word	0x0800b54c
 8008760:	0800b634 	.word	0x0800b634
 8008764:	0800b638 	.word	0x0800b638
 8008768:	0800b650 	.word	0x0800b650
 800876c:	0800b66c 	.word	0x0800b66c
 8008770:	08000b01 	.word	0x08000b01
	...

08008780 <rt_test_008_007_execute>:

static void rt_test_008_007_execute(void) {
 8008780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [8.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8008784:	2501      	movs	r5, #1
 8008786:	4e3f      	ldr	r6, [pc, #252]	; (8008884 <rt_test_008_007_execute+0x104>)
static void rt_test_008_007_execute(void) {
 8008788:	b08b      	sub	sp, #44	; 0x2c
 800878a:	2420      	movs	r4, #32
  test_set_step(1);
 800878c:	6035      	str	r5, [r6, #0]
 800878e:	f384 8811 	msr	BASEPRI, r4
  elp->flags    = (eventflags_t)0;
 8008792:	2300      	movs	r3, #0
  elp->wflags   = wflags;
 8008794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  elp->next     = esp->next;
 8008798:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80088a0 <rt_test_008_007_execute+0x120>
  elp->listener = currp;
 800879c:	f8df b104 	ldr.w	fp, [pc, #260]	; 80088a4 <rt_test_008_007_execute+0x124>
  elp->next     = esp->next;
 80087a0:	f8d8 1000 	ldr.w	r1, [r8]
 80087a4:	af0a      	add	r7, sp, #40	; 0x28
  elp->listener = currp;
 80087a6:	f8db 2018 	ldr.w	r2, [fp, #24]
  elp->next     = esp->next;
 80087aa:	f847 1d14 	str.w	r1, [r7, #-20]!
  elp->listener = currp;
 80087ae:	e9cd 2506 	strd	r2, r5, [sp, #24]
  esp->next     = elp;
 80087b2:	f8c8 7000 	str.w	r7, [r8]
  elp->wflags   = wflags;
 80087b6:	e9cd 3008 	strd	r3, r0, [sp, #32]
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f384 8811 	msr	BASEPRI, r4
  elp->events   = events;
 80087c2:	f04f 0a04 	mov.w	sl, #4
  elp->next     = esp->next;
 80087c6:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80088a8 <rt_test_008_007_execute+0x128>
 80087ca:	ad0a      	add	r5, sp, #40	; 0x28
 80087cc:	f8d9 1000 	ldr.w	r1, [r9]
  elp->listener = currp;
 80087d0:	f8db 2018 	ldr.w	r2, [fp, #24]
  elp->next     = esp->next;
 80087d4:	f845 1d28 	str.w	r1, [r5, #-40]!
  elp->flags    = (eventflags_t)0;
 80087d8:	9303      	str	r3, [sp, #12]
  elp->wflags   = wflags;
 80087da:	9004      	str	r0, [sp, #16]
  elp->listener = currp;
 80087dc:	9201      	str	r2, [sp, #4]
  esp->next     = elp;
 80087de:	f8c9 5000 	str.w	r5, [r9]
  elp->events   = events;
 80087e2:	f8cd a008 	str.w	sl, [sp, #8]
 80087e6:	f383 8811 	msr	BASEPRI, r3
  }

  /* [8.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 80087ea:	2302      	movs	r3, #2
 80087ec:	6033      	str	r3, [r6, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80087ee:	f7fb fa57 	bl	8003ca0 <test_wait_tick>
 80087f2:	f8db 2018 	ldr.w	r2, [fp, #24]
 80087f6:	4604      	mov	r4, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80087f8:	6891      	ldr	r1, [r2, #8]
 80087fa:	4b23      	ldr	r3, [pc, #140]	; (8008888 <rt_test_008_007_execute+0x108>)
 80087fc:	3901      	subs	r1, #1
 80087fe:	4a23      	ldr	r2, [pc, #140]	; (800888c <rt_test_008_007_execute+0x10c>)
 8008800:	4823      	ldr	r0, [pc, #140]	; (8008890 <rt_test_008_007_execute+0x110>)
 8008802:	f7fa fba5 	bl	8002f50 <chThdCreateStatic.constprop.103>
  }

  /* [8.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 8008806:	2203      	movs	r2, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008808:	4b22      	ldr	r3, [pc, #136]	; (8008894 <rt_test_008_007_execute+0x114>)
  test_set_step(3);
 800880a:	6032      	str	r2, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800880c:	6018      	str	r0, [r3, #0]
  {
    m = chEvtWaitAll(5);
 800880e:	f7fa fc9f 	bl	8003150 <chEvtWaitAll.constprop.79>
  return systime + (systime_t)interval;
 8008812:	f104 0168 	add.w	r1, r4, #104	; 0x68
 8008816:	f104 0064 	add.w	r0, r4, #100	; 0x64
    test_assert_time_window(target_time,
 800881a:	b289      	uxth	r1, r1
 800881c:	b280      	uxth	r0, r0
 800881e:	f7f7 fea7 	bl	8000570 <_test_assert_time_window.constprop.3>
 8008822:	b110      	cbz	r0, 800882a <rt_test_008_007_execute+0xaa>
    chEvtUnregister(&es1, &el1);
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
}
 8008824:	b00b      	add	sp, #44	; 0x2c
 8008826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800882a:	f7f7 fe91 	bl	8000550 <chEvtGetAndClearEvents.constprop.85>
    test_assert(m == 0, "stuck event");
 800882e:	fab0 f080 	clz	r0, r0
 8008832:	4919      	ldr	r1, [pc, #100]	; (8008898 <rt_test_008_007_execute+0x118>)
 8008834:	0940      	lsrs	r0, r0, #5
 8008836:	f7f8 f88b 	bl	8000950 <_test_assert>
 800883a:	2800      	cmp	r0, #0
 800883c:	d1f2      	bne.n	8008824 <rt_test_008_007_execute+0xa4>
    test_wait_threads();
 800883e:	f7ff fc4f 	bl	80080e0 <test_wait_threads>
    chEvtUnregister(&es1, &el1);
 8008842:	4639      	mov	r1, r7
 8008844:	4640      	mov	r0, r8
  test_set_step(4);
 8008846:	f8c6 a000 	str.w	sl, [r6]
    chEvtUnregister(&es1, &el1);
 800884a:	f7f9 f821 	bl	8001890 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 800884e:	4629      	mov	r1, r5
 8008850:	4648      	mov	r0, r9
 8008852:	f7f9 f81d 	bl	8001890 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 8008856:	f8d8 0000 	ldr.w	r0, [r8]
 800885a:	4910      	ldr	r1, [pc, #64]	; (800889c <rt_test_008_007_execute+0x11c>)
 800885c:	eba0 0008 	sub.w	r0, r0, r8
 8008860:	fab0 f080 	clz	r0, r0
 8008864:	0940      	lsrs	r0, r0, #5
 8008866:	f7f8 f873 	bl	8000950 <_test_assert>
 800886a:	2800      	cmp	r0, #0
 800886c:	d1da      	bne.n	8008824 <rt_test_008_007_execute+0xa4>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 800886e:	f8d9 0000 	ldr.w	r0, [r9]
 8008872:	490a      	ldr	r1, [pc, #40]	; (800889c <rt_test_008_007_execute+0x11c>)
 8008874:	eba0 0009 	sub.w	r0, r0, r9
 8008878:	fab0 f080 	clz	r0, r0
 800887c:	0940      	lsrs	r0, r0, #5
 800887e:	f7f8 f867 	bl	8000950 <_test_assert>
 8008882:	e7cf      	b.n	8008824 <rt_test_008_007_execute+0xa4>
 8008884:	20001a7c 	.word	0x20001a7c
 8008888:	0800b470 	.word	0x0800b470
 800888c:	08005fa1 	.word	0x08005fa1
 8008890:	20001368 	.word	0x20001368
 8008894:	20001a94 	.word	0x20001a94
 8008898:	0800b618 	.word	0x0800b618
 800889c:	0800b52c 	.word	0x0800b52c
 80088a0:	20000814 	.word	0x20000814
 80088a4:	200010f0 	.word	0x200010f0
 80088a8:	20000818 	.word	0x20000818
 80088ac:	00000000 	.word	0x00000000

080088b0 <rt_test_008_005_execute>:
static void rt_test_008_005_execute(void) {
 80088b0:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(5);
 80088b2:	2005      	movs	r0, #5
 80088b4:	f7f8 ffdc 	bl	8001870 <chEvtAddEvents>
  test_set_step(2);
 80088b8:	2302      	movs	r3, #2
 80088ba:	4c28      	ldr	r4, [pc, #160]	; (800895c <rt_test_008_005_execute+0xac>)
 80088bc:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAll(5);
 80088be:	f7fa fc47 	bl	8003150 <chEvtWaitAll.constprop.79>
    test_assert(m == 5, "unexpected pending bit");
 80088c2:	f1a0 0005 	sub.w	r0, r0, #5
 80088c6:	fab0 f080 	clz	r0, r0
 80088ca:	4925      	ldr	r1, [pc, #148]	; (8008960 <rt_test_008_005_execute+0xb0>)
 80088cc:	0940      	lsrs	r0, r0, #5
 80088ce:	f7f8 f83f 	bl	8000950 <_test_assert>
 80088d2:	b100      	cbz	r0, 80088d6 <rt_test_008_005_execute+0x26>
}
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80088d6:	f7f7 fe3b 	bl	8000550 <chEvtGetAndClearEvents.constprop.85>
    test_assert(m == 0, "stuck event");
 80088da:	fab0 f080 	clz	r0, r0
 80088de:	4921      	ldr	r1, [pc, #132]	; (8008964 <rt_test_008_005_execute+0xb4>)
 80088e0:	0940      	lsrs	r0, r0, #5
 80088e2:	f7f8 f835 	bl	8000950 <_test_assert>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	d1f4      	bne.n	80088d4 <rt_test_008_005_execute+0x24>
    chEvtAddEvents(4);
 80088ea:	2004      	movs	r0, #4
 80088ec:	f7f8 ffc0 	bl	8001870 <chEvtAddEvents>
  test_set_step(4);
 80088f0:	2304      	movs	r3, #4
 80088f2:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80088f4:	f7fb f9d4 	bl	8003ca0 <test_wait_tick>
  return ch.rlist.current;
 80088f8:	4b1b      	ldr	r3, [pc, #108]	; (8008968 <rt_test_008_005_execute+0xb8>)
 80088fa:	4605      	mov	r5, r0
 80088fc:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80088fe:	4a1b      	ldr	r2, [pc, #108]	; (800896c <rt_test_008_005_execute+0xbc>)
 8008900:	6899      	ldr	r1, [r3, #8]
 8008902:	481b      	ldr	r0, [pc, #108]	; (8008970 <rt_test_008_005_execute+0xc0>)
 8008904:	3901      	subs	r1, #1
 8008906:	f7fa fb23 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(5);
 800890a:	2205      	movs	r2, #5
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800890c:	4b19      	ldr	r3, [pc, #100]	; (8008974 <rt_test_008_005_execute+0xc4>)
  test_set_step(5);
 800890e:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008910:	6018      	str	r0, [r3, #0]
    m = chEvtWaitAll(5);
 8008912:	f7fa fc1d 	bl	8003150 <chEvtWaitAll.constprop.79>
 8008916:	f105 0168 	add.w	r1, r5, #104	; 0x68
 800891a:	4604      	mov	r4, r0
 800891c:	f105 0064 	add.w	r0, r5, #100	; 0x64
    test_assert_time_window(target_time,
 8008920:	b289      	uxth	r1, r1
 8008922:	b280      	uxth	r0, r0
 8008924:	f7f7 fe24 	bl	8000570 <_test_assert_time_window.constprop.3>
 8008928:	2800      	cmp	r0, #0
 800892a:	d1d3      	bne.n	80088d4 <rt_test_008_005_execute+0x24>
    test_assert(m == 5, "event flags error");
 800892c:	f1a4 0005 	sub.w	r0, r4, #5
 8008930:	fab0 f080 	clz	r0, r0
 8008934:	4910      	ldr	r1, [pc, #64]	; (8008978 <rt_test_008_005_execute+0xc8>)
 8008936:	0940      	lsrs	r0, r0, #5
 8008938:	f7f8 f80a 	bl	8000950 <_test_assert>
 800893c:	2800      	cmp	r0, #0
 800893e:	d1c9      	bne.n	80088d4 <rt_test_008_005_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008940:	f7f7 fe06 	bl	8000550 <chEvtGetAndClearEvents.constprop.85>
    test_assert(m == 0, "stuck event");
 8008944:	fab0 f080 	clz	r0, r0
 8008948:	4906      	ldr	r1, [pc, #24]	; (8008964 <rt_test_008_005_execute+0xb4>)
 800894a:	0940      	lsrs	r0, r0, #5
 800894c:	f7f8 f800 	bl	8000950 <_test_assert>
 8008950:	2800      	cmp	r0, #0
 8008952:	d1bf      	bne.n	80088d4 <rt_test_008_005_execute+0x24>
}
 8008954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8008958:	f7ff bbc2 	b.w	80080e0 <test_wait_threads>
 800895c:	20001a7c 	.word	0x20001a7c
 8008960:	0800b5bc 	.word	0x0800b5bc
 8008964:	0800b618 	.word	0x0800b618
 8008968:	200010f0 	.word	0x200010f0
 800896c:	08005fe1 	.word	0x08005fe1
 8008970:	20001368 	.word	0x20001368
 8008974:	20001a94 	.word	0x20001a94
 8008978:	0800b5d4 	.word	0x0800b5d4
 800897c:	00000000 	.word	0x00000000

08008980 <rt_test_008_004_execute>:
static void rt_test_008_004_execute(void) {
 8008980:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(5);
 8008982:	2005      	movs	r0, #5
 8008984:	f7f8 ff74 	bl	8001870 <chEvtAddEvents>
  test_set_step(2);
 8008988:	2302      	movs	r3, #2
 800898a:	4c27      	ldr	r4, [pc, #156]	; (8008a28 <rt_test_008_004_execute+0xa8>)
 800898c:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 800898e:	f7fa fbc7 	bl	8003120 <chEvtWaitAny.constprop.80>
    test_assert(m == 5, "unexpected pending bit");
 8008992:	f1a0 0005 	sub.w	r0, r0, #5
 8008996:	fab0 f080 	clz	r0, r0
 800899a:	4924      	ldr	r1, [pc, #144]	; (8008a2c <rt_test_008_004_execute+0xac>)
 800899c:	0940      	lsrs	r0, r0, #5
 800899e:	f7f7 ffd7 	bl	8000950 <_test_assert>
 80089a2:	b100      	cbz	r0, 80089a6 <rt_test_008_004_execute+0x26>
}
 80089a4:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80089a6:	f7f7 fdd3 	bl	8000550 <chEvtGetAndClearEvents.constprop.85>
    test_assert(m == 0, "stuck event");
 80089aa:	fab0 f080 	clz	r0, r0
 80089ae:	4920      	ldr	r1, [pc, #128]	; (8008a30 <rt_test_008_004_execute+0xb0>)
 80089b0:	0940      	lsrs	r0, r0, #5
 80089b2:	f7f7 ffcd 	bl	8000950 <_test_assert>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d1f4      	bne.n	80089a4 <rt_test_008_004_execute+0x24>
  test_set_step(3);
 80089ba:	2303      	movs	r3, #3
 80089bc:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80089be:	f7fb f96f 	bl	8003ca0 <test_wait_tick>
 80089c2:	4b1c      	ldr	r3, [pc, #112]	; (8008a34 <rt_test_008_004_execute+0xb4>)
 80089c4:	4605      	mov	r5, r0
 80089c6:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80089c8:	4a1b      	ldr	r2, [pc, #108]	; (8008a38 <rt_test_008_004_execute+0xb8>)
 80089ca:	6899      	ldr	r1, [r3, #8]
 80089cc:	481b      	ldr	r0, [pc, #108]	; (8008a3c <rt_test_008_004_execute+0xbc>)
 80089ce:	3901      	subs	r1, #1
 80089d0:	f7fa fabe 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(4);
 80089d4:	2204      	movs	r2, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80089d6:	4b1a      	ldr	r3, [pc, #104]	; (8008a40 <rt_test_008_004_execute+0xc0>)
  test_set_step(4);
 80089d8:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80089da:	6018      	str	r0, [r3, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 80089dc:	f7fa fba0 	bl	8003120 <chEvtWaitAny.constprop.80>
 80089e0:	f105 0168 	add.w	r1, r5, #104	; 0x68
 80089e4:	4604      	mov	r4, r0
 80089e6:	f105 0064 	add.w	r0, r5, #100	; 0x64
    test_assert_time_window(target_time,
 80089ea:	b289      	uxth	r1, r1
 80089ec:	b280      	uxth	r0, r0
 80089ee:	f7f7 fdbf 	bl	8000570 <_test_assert_time_window.constprop.3>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d1d6      	bne.n	80089a4 <rt_test_008_004_execute+0x24>
    test_assert(m == 1, "event flag error");
 80089f6:	f1a4 0001 	sub.w	r0, r4, #1
 80089fa:	fab0 f080 	clz	r0, r0
 80089fe:	4911      	ldr	r1, [pc, #68]	; (8008a44 <rt_test_008_004_execute+0xc4>)
 8008a00:	0940      	lsrs	r0, r0, #5
 8008a02:	f7f7 ffa5 	bl	8000950 <_test_assert>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d1cc      	bne.n	80089a4 <rt_test_008_004_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008a0a:	f7f7 fda1 	bl	8000550 <chEvtGetAndClearEvents.constprop.85>
    test_assert(m == 0, "stuck event");
 8008a0e:	fab0 f080 	clz	r0, r0
 8008a12:	4907      	ldr	r1, [pc, #28]	; (8008a30 <rt_test_008_004_execute+0xb0>)
 8008a14:	0940      	lsrs	r0, r0, #5
 8008a16:	f7f7 ff9b 	bl	8000950 <_test_assert>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d1c2      	bne.n	80089a4 <rt_test_008_004_execute+0x24>
}
 8008a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8008a22:	f7ff bb5d 	b.w	80080e0 <test_wait_threads>
 8008a26:	bf00      	nop
 8008a28:	20001a7c 	.word	0x20001a7c
 8008a2c:	0800b5bc 	.word	0x0800b5bc
 8008a30:	0800b618 	.word	0x0800b618
 8008a34:	200010f0 	.word	0x200010f0
 8008a38:	08005fe1 	.word	0x08005fe1
 8008a3c:	20001368 	.word	0x20001368
 8008a40:	20001a94 	.word	0x20001a94
 8008a44:	0800b598 	.word	0x0800b598
	...

08008a50 <rt_test_008_003_execute>:
static void rt_test_008_003_execute(void) {
 8008a50:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(7);
 8008a52:	2007      	movs	r0, #7
 8008a54:	f7f8 ff0c 	bl	8001870 <chEvtAddEvents>
  test_set_step(2);
 8008a58:	2302      	movs	r3, #2
 8008a5a:	4c33      	ldr	r4, [pc, #204]	; (8008b28 <rt_test_008_003_execute+0xd8>)
 8008a5c:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8008a5e:	f7fa fb3f 	bl	80030e0 <chEvtWaitOne.constprop.81>
    test_assert(m == 1, "single event error");
 8008a62:	f1a0 0001 	sub.w	r0, r0, #1
 8008a66:	fab0 f080 	clz	r0, r0
 8008a6a:	4930      	ldr	r1, [pc, #192]	; (8008b2c <rt_test_008_003_execute+0xdc>)
 8008a6c:	0940      	lsrs	r0, r0, #5
 8008a6e:	f7f7 ff6f 	bl	8000950 <_test_assert>
 8008a72:	b100      	cbz	r0, 8008a76 <rt_test_008_003_execute+0x26>
}
 8008a74:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtWaitOne(ALL_EVENTS);
 8008a76:	f7fa fb33 	bl	80030e0 <chEvtWaitOne.constprop.81>
    test_assert(m == 2, "single event error");
 8008a7a:	f1a0 0002 	sub.w	r0, r0, #2
 8008a7e:	fab0 f080 	clz	r0, r0
 8008a82:	492a      	ldr	r1, [pc, #168]	; (8008b2c <rt_test_008_003_execute+0xdc>)
 8008a84:	0940      	lsrs	r0, r0, #5
 8008a86:	f7f7 ff63 	bl	8000950 <_test_assert>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d1f2      	bne.n	8008a74 <rt_test_008_003_execute+0x24>
    m = chEvtWaitOne(ALL_EVENTS);
 8008a8e:	f7fa fb27 	bl	80030e0 <chEvtWaitOne.constprop.81>
    test_assert(m == 4, "single event error");
 8008a92:	f1a0 0004 	sub.w	r0, r0, #4
 8008a96:	fab0 f080 	clz	r0, r0
 8008a9a:	4924      	ldr	r1, [pc, #144]	; (8008b2c <rt_test_008_003_execute+0xdc>)
 8008a9c:	0940      	lsrs	r0, r0, #5
 8008a9e:	f7f7 ff57 	bl	8000950 <_test_assert>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d1e6      	bne.n	8008a74 <rt_test_008_003_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008aa6:	f7f7 fd53 	bl	8000550 <chEvtGetAndClearEvents.constprop.85>
    test_assert(m == 0, "stuck event");
 8008aaa:	fab0 f080 	clz	r0, r0
 8008aae:	4920      	ldr	r1, [pc, #128]	; (8008b30 <rt_test_008_003_execute+0xe0>)
 8008ab0:	0940      	lsrs	r0, r0, #5
 8008ab2:	f7f7 ff4d 	bl	8000950 <_test_assert>
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d1dc      	bne.n	8008a74 <rt_test_008_003_execute+0x24>
  test_set_step(3);
 8008aba:	2303      	movs	r3, #3
 8008abc:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8008abe:	f7fb f8ef 	bl	8003ca0 <test_wait_tick>
 8008ac2:	4b1c      	ldr	r3, [pc, #112]	; (8008b34 <rt_test_008_003_execute+0xe4>)
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008ac8:	4a1b      	ldr	r2, [pc, #108]	; (8008b38 <rt_test_008_003_execute+0xe8>)
 8008aca:	6899      	ldr	r1, [r3, #8]
 8008acc:	481b      	ldr	r0, [pc, #108]	; (8008b3c <rt_test_008_003_execute+0xec>)
 8008ace:	3901      	subs	r1, #1
 8008ad0:	f7fa fa3e 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(4);
 8008ad4:	2204      	movs	r2, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008ad6:	4b1a      	ldr	r3, [pc, #104]	; (8008b40 <rt_test_008_003_execute+0xf0>)
  test_set_step(4);
 8008ad8:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008ada:	6018      	str	r0, [r3, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8008adc:	f7fa fb00 	bl	80030e0 <chEvtWaitOne.constprop.81>
 8008ae0:	f105 0168 	add.w	r1, r5, #104	; 0x68
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	f105 0064 	add.w	r0, r5, #100	; 0x64
    test_assert_time_window(target_time,
 8008aea:	b289      	uxth	r1, r1
 8008aec:	b280      	uxth	r0, r0
 8008aee:	f7f7 fd3f 	bl	8000570 <_test_assert_time_window.constprop.3>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	d1be      	bne.n	8008a74 <rt_test_008_003_execute+0x24>
    test_assert(m == 1, "event flag error");
 8008af6:	f1a4 0001 	sub.w	r0, r4, #1
 8008afa:	fab0 f080 	clz	r0, r0
 8008afe:	4911      	ldr	r1, [pc, #68]	; (8008b44 <rt_test_008_003_execute+0xf4>)
 8008b00:	0940      	lsrs	r0, r0, #5
 8008b02:	f7f7 ff25 	bl	8000950 <_test_assert>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d1b4      	bne.n	8008a74 <rt_test_008_003_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008b0a:	f7f7 fd21 	bl	8000550 <chEvtGetAndClearEvents.constprop.85>
    test_assert(m == 0, "stuck event");
 8008b0e:	fab0 f080 	clz	r0, r0
 8008b12:	4907      	ldr	r1, [pc, #28]	; (8008b30 <rt_test_008_003_execute+0xe0>)
 8008b14:	0940      	lsrs	r0, r0, #5
 8008b16:	f7f7 ff1b 	bl	8000950 <_test_assert>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d1aa      	bne.n	8008a74 <rt_test_008_003_execute+0x24>
}
 8008b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8008b22:	f7ff badd 	b.w	80080e0 <test_wait_threads>
 8008b26:	bf00      	nop
 8008b28:	20001a7c 	.word	0x20001a7c
 8008b2c:	0800b574 	.word	0x0800b574
 8008b30:	0800b618 	.word	0x0800b618
 8008b34:	200010f0 	.word	0x200010f0
 8008b38:	08005fe1 	.word	0x08005fe1
 8008b3c:	20001368 	.word	0x20001368
 8008b40:	20001a94 	.word	0x20001a94
 8008b44:	0800b598 	.word	0x0800b598
	...

08008b50 <rt_test_007_001_execute>:
 * - [7.1.1] Starting the messenger thread.
 * - [7.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_007_001_execute(void) {
 8008b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *tp;
  msg_t msg;

  /* [7.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8008b52:	2401      	movs	r4, #1
 8008b54:	4b13      	ldr	r3, [pc, #76]	; (8008ba4 <rt_test_007_001_execute+0x54>)
 8008b56:	4d14      	ldr	r5, [pc, #80]	; (8008ba8 <rt_test_007_001_execute+0x58>)
 8008b58:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8008b5a:	4a14      	ldr	r2, [pc, #80]	; (8008bac <rt_test_007_001_execute+0x5c>)
 8008b5c:	6899      	ldr	r1, [r3, #8]
 8008b5e:	4814      	ldr	r0, [pc, #80]	; (8008bb0 <rt_test_007_001_execute+0x60>)
 8008b60:	4421      	add	r1, r4
  test_set_step(1);
 8008b62:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8008b64:	f7fa f9f4 	bl	8002f50 <chThdCreateStatic.constprop.103>
                                   msg_thread1, chThdGetSelfX());
  }

  /* [7.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 8008b68:	2202      	movs	r2, #2
 8008b6a:	2404      	movs	r4, #4
 8008b6c:	2720      	movs	r7, #32
 8008b6e:	2600      	movs	r6, #0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8008b70:	4b10      	ldr	r3, [pc, #64]	; (8008bb4 <rt_test_007_001_execute+0x64>)
  test_set_step(2);
 8008b72:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8008b74:	6018      	str	r0, [r3, #0]
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
 8008b76:	f7fb faab 	bl	80040d0 <chMsgWait>
 8008b7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b7c:	f387 8811 	msr	BASEPRI, r7
 8008b80:	4629      	mov	r1, r5
 8008b82:	f7fa f9b5 	bl	8002ef0 <chSchWakeupS>
 8008b86:	f386 8811 	msr	BASEPRI, r6
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 8008b8a:	b2e8      	uxtb	r0, r5
 8008b8c:	f7f7 ff80 	bl	8000a90 <test_emit_token>
    for (i = 0; i < 4; i++) {
 8008b90:	3c01      	subs	r4, #1
 8008b92:	d1f0      	bne.n	8008b76 <rt_test_007_001_execute+0x26>
    }
    test_wait_threads();
 8008b94:	f7ff faa4 	bl	80080e0 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
  }
}
 8008b98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 8008b9c:	4906      	ldr	r1, [pc, #24]	; (8008bb8 <rt_test_007_001_execute+0x68>)
 8008b9e:	4807      	ldr	r0, [pc, #28]	; (8008bbc <rt_test_007_001_execute+0x6c>)
 8008ba0:	f7f7 bfee 	b.w	8000b80 <_test_assert_sequence>
 8008ba4:	200010f0 	.word	0x200010f0
 8008ba8:	20001a7c 	.word	0x20001a7c
 8008bac:	080041b1 	.word	0x080041b1
 8008bb0:	20001368 	.word	0x20001368
 8008bb4:	20001a94 	.word	0x20001a94
 8008bb8:	0800b54c 	.word	0x0800b54c
 8008bbc:	0800a488 	.word	0x0800a488

08008bc0 <rt_test_006_009_execute>:

static void rt_test_006_009_execute(void) {
 8008bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    prio = chThdGetPriorityX();
  }

  /* [6.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 8008bc2:	2502      	movs	r5, #2
 8008bc4:	4b1b      	ldr	r3, [pc, #108]	; (8008c34 <rt_test_006_009_execute+0x74>)
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8008bc6:	4e1c      	ldr	r6, [pc, #112]	; (8008c38 <rt_test_006_009_execute+0x78>)
  return chThdGetSelfX()->prio;
 8008bc8:	699b      	ldr	r3, [r3, #24]
  test_set_step(2);
 8008bca:	4c1c      	ldr	r4, [pc, #112]	; (8008c3c <rt_test_006_009_execute+0x7c>)
 8008bcc:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8008bce:	4630      	mov	r0, r6
 8008bd0:	1c79      	adds	r1, r7, #1
 8008bd2:	4b1b      	ldr	r3, [pc, #108]	; (8008c40 <rt_test_006_009_execute+0x80>)
 8008bd4:	4a1b      	ldr	r2, [pc, #108]	; (8008c44 <rt_test_006_009_execute+0x84>)
  test_set_step(2);
 8008bd6:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8008bd8:	f7fa f9ba 	bl	8002f50 <chThdCreateStatic.constprop.103>
  }

  /* [6.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 8008bdc:	f04f 0c03 	mov.w	ip, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8008be0:	4d19      	ldr	r5, [pc, #100]	; (8008c48 <rt_test_006_009_execute+0x88>)
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8008be2:	1cb9      	adds	r1, r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8008be4:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8008be6:	4b19      	ldr	r3, [pc, #100]	; (8008c4c <rt_test_006_009_execute+0x8c>)
 8008be8:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8008bec:	4a18      	ldr	r2, [pc, #96]	; (8008c50 <rt_test_006_009_execute+0x90>)
  test_set_step(3);
 8008bee:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8008bf2:	f7fa f9ad 	bl	8002f50 <chThdCreateStatic.constprop.103>
  }

  /* [6.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
 8008bf6:	f04f 0c04 	mov.w	ip, #4
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8008bfa:	1cf9      	adds	r1, r7, #3
 8008bfc:	4a15      	ldr	r2, [pc, #84]	; (8008c54 <rt_test_006_009_execute+0x94>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8008bfe:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8008c00:	4b15      	ldr	r3, [pc, #84]	; (8008c58 <rt_test_006_009_execute+0x98>)
 8008c02:	f506 7024 	add.w	r0, r6, #656	; 0x290
  test_set_step(4);
 8008c06:	f8c4 c000 	str.w	ip, [r4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8008c0a:	f7fa f9a1 	bl	8002f50 <chThdCreateStatic.constprop.103>
  }

  /* [6.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 8008c0e:	2305      	movs	r3, #5
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8008c10:	60a8      	str	r0, [r5, #8]
  test_set_step(5);
 8008c12:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8008c14:	f7fa f9e4 	bl	8002fe0 <chCondSignal.constprop.93>
  }

  /* [6.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8008c18:	2306      	movs	r3, #6
 8008c1a:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8008c1c:	f7fa f9e0 	bl	8002fe0 <chCondSignal.constprop.93>
  }

  /* [6.9.7] Checking the order of operations.*/
  test_set_step(7);
 8008c20:	2307      	movs	r3, #7
 8008c22:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
 8008c24:	f7ff fa5c 	bl	80080e0 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
  }
}
 8008c28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8008c2c:	490b      	ldr	r1, [pc, #44]	; (8008c5c <rt_test_006_009_execute+0x9c>)
 8008c2e:	480c      	ldr	r0, [pc, #48]	; (8008c60 <rt_test_006_009_execute+0xa0>)
 8008c30:	f7f7 bfa6 	b.w	8000b80 <_test_assert_sequence>
 8008c34:	200010f0 	.word	0x200010f0
 8008c38:	20001368 	.word	0x20001368
 8008c3c:	20001a7c 	.word	0x20001a7c
 8008c40:	0800b470 	.word	0x0800b470
 8008c44:	08006611 	.word	0x08006611
 8008c48:	20001a94 	.word	0x20001a94
 8008c4c:	0800b6ac 	.word	0x0800b6ac
 8008c50:	080066a1 	.word	0x080066a1
 8008c54:	08006711 	.word	0x08006711
 8008c58:	0800b474 	.word	0x0800b474
 8008c5c:	0800b54c 	.word	0x0800b54c
 8008c60:	0800b560 	.word	0x0800b560
	...

08008c70 <rt_test_006_008_execute>:
static void rt_test_006_008_execute(void) {
 8008c70:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8008c72:	2401      	movs	r4, #1
  return ch.rlist.current;
 8008c74:	4b25      	ldr	r3, [pc, #148]	; (8008d0c <rt_test_006_008_execute+0x9c>)
 8008c76:	4e26      	ldr	r6, [pc, #152]	; (8008d10 <rt_test_006_008_execute+0xa0>)
  return chThdGetSelfX()->prio;
 8008c78:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008c7a:	4826      	ldr	r0, [pc, #152]	; (8008d14 <rt_test_006_008_execute+0xa4>)
 8008c7c:	6895      	ldr	r5, [r2, #8]
 8008c7e:	4b26      	ldr	r3, [pc, #152]	; (8008d18 <rt_test_006_008_execute+0xa8>)
 8008c80:	1929      	adds	r1, r5, r4
 8008c82:	4a26      	ldr	r2, [pc, #152]	; (8008d1c <rt_test_006_008_execute+0xac>)
  test_set_step(1);
 8008c84:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008c86:	f7fa f963 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8008c8a:	4c25      	ldr	r4, [pc, #148]	; (8008d20 <rt_test_006_008_execute+0xb0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008c8c:	1ca9      	adds	r1, r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008c8e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008c90:	4b24      	ldr	r3, [pc, #144]	; (8008d24 <rt_test_006_008_execute+0xb4>)
 8008c92:	4a22      	ldr	r2, [pc, #136]	; (8008d1c <rt_test_006_008_execute+0xac>)
 8008c94:	4824      	ldr	r0, [pc, #144]	; (8008d28 <rt_test_006_008_execute+0xb8>)
 8008c96:	f7fa f95b 	bl	8002f50 <chThdCreateStatic.constprop.103>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008c9a:	1ce9      	adds	r1, r5, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008c9c:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008c9e:	4b23      	ldr	r3, [pc, #140]	; (8008d2c <rt_test_006_008_execute+0xbc>)
 8008ca0:	4a1e      	ldr	r2, [pc, #120]	; (8008d1c <rt_test_006_008_execute+0xac>)
 8008ca2:	4823      	ldr	r0, [pc, #140]	; (8008d30 <rt_test_006_008_execute+0xc0>)
 8008ca4:	f7fa f954 	bl	8002f50 <chThdCreateStatic.constprop.103>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008ca8:	1d29      	adds	r1, r5, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008caa:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008cac:	4b21      	ldr	r3, [pc, #132]	; (8008d34 <rt_test_006_008_execute+0xc4>)
 8008cae:	4a1b      	ldr	r2, [pc, #108]	; (8008d1c <rt_test_006_008_execute+0xac>)
 8008cb0:	4821      	ldr	r0, [pc, #132]	; (8008d38 <rt_test_006_008_execute+0xc8>)
 8008cb2:	f7fa f94d 	bl	8002f50 <chThdCreateStatic.constprop.103>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008cb6:	1d69      	adds	r1, r5, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008cb8:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008cba:	4b20      	ldr	r3, [pc, #128]	; (8008d3c <rt_test_006_008_execute+0xcc>)
 8008cbc:	4a17      	ldr	r2, [pc, #92]	; (8008d1c <rt_test_006_008_execute+0xac>)
 8008cbe:	4820      	ldr	r0, [pc, #128]	; (8008d40 <rt_test_006_008_execute+0xd0>)
 8008cc0:	f7fa f946 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(2);
 8008cc4:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008cc6:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8008cc8:	6033      	str	r3, [r6, #0]
 8008cca:	2320      	movs	r3, #32
 8008ccc:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8008cd0:	4c1c      	ldr	r4, [pc, #112]	; (8008d44 <rt_test_006_008_execute+0xd4>)
 8008cd2:	6823      	ldr	r3, [r4, #0]
  while (queue_notempty(&cp->queue)) {
 8008cd4:	42a3      	cmp	r3, r4
 8008cd6:	d00b      	beq.n	8008cf0 <rt_test_006_008_execute+0x80>
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8008cd8:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8008ce0:	6054      	str	r4, [r2, #4]
  tqp->next             = tp->queue.next;
 8008ce2:	6022      	str	r2, [r4, #0]
 8008ce4:	f7f8 fee4 	bl	8001ab0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	6245      	str	r5, [r0, #36]	; 0x24
  while (queue_notempty(&cp->queue)) {
 8008cec:	42a3      	cmp	r3, r4
 8008cee:	d1f5      	bne.n	8008cdc <rt_test_006_008_execute+0x6c>
  chSchRescheduleS();
 8008cf0:	f7fc fbc6 	bl	8005480 <chSchRescheduleS>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8008cfa:	f7ff f9f1 	bl	80080e0 <test_wait_threads>
}
 8008cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8008d02:	4911      	ldr	r1, [pc, #68]	; (8008d48 <rt_test_006_008_execute+0xd8>)
 8008d04:	4811      	ldr	r0, [pc, #68]	; (8008d4c <rt_test_006_008_execute+0xdc>)
 8008d06:	f7f7 bf3b 	b.w	8000b80 <_test_assert_sequence>
 8008d0a:	bf00      	nop
 8008d0c:	200010f0 	.word	0x200010f0
 8008d10:	20001a7c 	.word	0x20001a7c
 8008d14:	20001368 	.word	0x20001368
 8008d18:	0800b4ec 	.word	0x0800b4ec
 8008d1c:	080066a1 	.word	0x080066a1
 8008d20:	20001a94 	.word	0x20001a94
 8008d24:	0800c3fc 	.word	0x0800c3fc
 8008d28:	200014b0 	.word	0x200014b0
 8008d2c:	0800b6ac 	.word	0x0800b6ac
 8008d30:	200015f8 	.word	0x200015f8
 8008d34:	0800b474 	.word	0x0800b474
 8008d38:	20001740 	.word	0x20001740
 8008d3c:	0800b470 	.word	0x0800b470
 8008d40:	20001888 	.word	0x20001888
 8008d44:	2000080c 	.word	0x2000080c
 8008d48:	0800b54c 	.word	0x0800b54c
 8008d4c:	0800b4e8 	.word	0x0800b4e8

08008d50 <rt_test_006_007_execute>:
static void rt_test_006_007_execute(void) {
 8008d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8008d54:	2401      	movs	r4, #1
  return ch.rlist.current;
 8008d56:	4b27      	ldr	r3, [pc, #156]	; (8008df4 <rt_test_006_007_execute+0xa4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008d58:	4e27      	ldr	r6, [pc, #156]	; (8008df8 <rt_test_006_007_execute+0xa8>)
  return chThdGetSelfX()->prio;
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	4d27      	ldr	r5, [pc, #156]	; (8008dfc <rt_test_006_007_execute+0xac>)
 8008d5e:	689f      	ldr	r7, [r3, #8]
  test_set_step(1);
 8008d60:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8008e20 <rt_test_006_007_execute+0xd0>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008d64:	1939      	adds	r1, r7, r4
 8008d66:	4632      	mov	r2, r6
 8008d68:	4628      	mov	r0, r5
 8008d6a:	4b25      	ldr	r3, [pc, #148]	; (8008e00 <rt_test_006_007_execute+0xb0>)
  test_set_step(1);
 8008d6c:	f8c8 4000 	str.w	r4, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008d70:	f7fa f8ee 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8008d74:	4c23      	ldr	r4, [pc, #140]	; (8008e04 <rt_test_006_007_execute+0xb4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008d76:	1cb9      	adds	r1, r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8008d78:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008d7a:	4632      	mov	r2, r6
 8008d7c:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8008d80:	4b21      	ldr	r3, [pc, #132]	; (8008e08 <rt_test_006_007_execute+0xb8>)
 8008d82:	f7fa f8e5 	bl	8002f50 <chThdCreateStatic.constprop.103>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008d86:	1cf9      	adds	r1, r7, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8008d88:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008d8a:	4632      	mov	r2, r6
 8008d8c:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8008d90:	4b1e      	ldr	r3, [pc, #120]	; (8008e0c <rt_test_006_007_execute+0xbc>)
 8008d92:	f7fa f8dd 	bl	8002f50 <chThdCreateStatic.constprop.103>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008d96:	1d39      	adds	r1, r7, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8008d98:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008d9a:	4632      	mov	r2, r6
 8008d9c:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8008da0:	4b1b      	ldr	r3, [pc, #108]	; (8008e10 <rt_test_006_007_execute+0xc0>)
 8008da2:	f7fa f8d5 	bl	8002f50 <chThdCreateStatic.constprop.103>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008da6:	1d79      	adds	r1, r7, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8008da8:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008daa:	4632      	mov	r2, r6
 8008dac:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8008db0:	4b18      	ldr	r3, [pc, #96]	; (8008e14 <rt_test_006_007_execute+0xc4>)
 8008db2:	f7fa f8cd 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(2);
 8008db6:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8008db8:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8008dba:	f8c8 3000 	str.w	r3, [r8]
 8008dbe:	2320      	movs	r3, #32
 8008dc0:	f383 8811 	msr	BASEPRI, r3
    chCondSignalI(&c1);
 8008dc4:	f7f8 ff14 	bl	8001bf0 <chCondSignalI.constprop.92>
    chCondSignalI(&c1);
 8008dc8:	f7f8 ff12 	bl	8001bf0 <chCondSignalI.constprop.92>
    chCondSignalI(&c1);
 8008dcc:	f7f8 ff10 	bl	8001bf0 <chCondSignalI.constprop.92>
    chCondSignalI(&c1);
 8008dd0:	f7f8 ff0e 	bl	8001bf0 <chCondSignalI.constprop.92>
    chCondSignalI(&c1);
 8008dd4:	f7f8 ff0c 	bl	8001bf0 <chCondSignalI.constprop.92>
    chSchRescheduleS();
 8008dd8:	f7fc fb52 	bl	8005480 <chSchRescheduleS>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8008de2:	f7ff f97d 	bl	80080e0 <test_wait_threads>
}
 8008de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8008dea:	490b      	ldr	r1, [pc, #44]	; (8008e18 <rt_test_006_007_execute+0xc8>)
 8008dec:	480b      	ldr	r0, [pc, #44]	; (8008e1c <rt_test_006_007_execute+0xcc>)
 8008dee:	f7f7 bec7 	b.w	8000b80 <_test_assert_sequence>
 8008df2:	bf00      	nop
 8008df4:	200010f0 	.word	0x200010f0
 8008df8:	080066a1 	.word	0x080066a1
 8008dfc:	20001368 	.word	0x20001368
 8008e00:	0800b4ec 	.word	0x0800b4ec
 8008e04:	20001a94 	.word	0x20001a94
 8008e08:	0800c3fc 	.word	0x0800c3fc
 8008e0c:	0800b6ac 	.word	0x0800b6ac
 8008e10:	0800b474 	.word	0x0800b474
 8008e14:	0800b470 	.word	0x0800b470
 8008e18:	0800b54c 	.word	0x0800b54c
 8008e1c:	0800b4e8 	.word	0x0800b4e8
 8008e20:	20001a7c 	.word	0x20001a7c
	...

08008e30 <rt_test_005_006_teardown>:
 *   must not change from "not taken".
 * .
 */

static void rt_test_005_006_teardown(void) {
  test_wait_threads();
 8008e30:	f7ff b956 	b.w	80080e0 <test_wait_threads>
	...

08008e40 <rt_test_006_004_teardown>:
 8008e40:	f7ff b94e 	b.w	80080e0 <test_wait_threads>
	...

08008e50 <rt_test_006_001_execute>:
static void rt_test_006_001_execute(void) {
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(2);
 8008e52:	2302      	movs	r3, #2
  test_set_step(3);
 8008e54:	2503      	movs	r5, #3
  return ch.rlist.current;
 8008e56:	4f22      	ldr	r7, [pc, #136]	; (8008ee0 <rt_test_006_001_execute+0x90>)
  test_set_step(2);
 8008e58:	4e22      	ldr	r6, [pc, #136]	; (8008ee4 <rt_test_006_001_execute+0x94>)
  return chThdGetSelfX()->prio;
 8008e5a:	69ba      	ldr	r2, [r7, #24]
    chMtxLock(&m1);
 8008e5c:	4822      	ldr	r0, [pc, #136]	; (8008ee8 <rt_test_006_001_execute+0x98>)
 8008e5e:	6894      	ldr	r4, [r2, #8]
  test_set_step(2);
 8008e60:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8008e62:	f7fb fa35 	bl	80042d0 <chMtxLock>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8008e66:	1c61      	adds	r1, r4, #1
 8008e68:	4b20      	ldr	r3, [pc, #128]	; (8008eec <rt_test_006_001_execute+0x9c>)
 8008e6a:	4a21      	ldr	r2, [pc, #132]	; (8008ef0 <rt_test_006_001_execute+0xa0>)
 8008e6c:	4821      	ldr	r0, [pc, #132]	; (8008ef4 <rt_test_006_001_execute+0xa4>)
  test_set_step(3);
 8008e6e:	6035      	str	r5, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8008e70:	f7fa f86e 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8008e74:	4d20      	ldr	r5, [pc, #128]	; (8008ef8 <rt_test_006_001_execute+0xa8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008e76:	1ca1      	adds	r1, r4, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8008e78:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008e7a:	4b20      	ldr	r3, [pc, #128]	; (8008efc <rt_test_006_001_execute+0xac>)
 8008e7c:	4a1c      	ldr	r2, [pc, #112]	; (8008ef0 <rt_test_006_001_execute+0xa0>)
 8008e7e:	4820      	ldr	r0, [pc, #128]	; (8008f00 <rt_test_006_001_execute+0xb0>)
 8008e80:	f7fa f866 	bl	8002f50 <chThdCreateStatic.constprop.103>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8008e84:	1ce1      	adds	r1, r4, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008e86:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8008e88:	4b1e      	ldr	r3, [pc, #120]	; (8008f04 <rt_test_006_001_execute+0xb4>)
 8008e8a:	4a19      	ldr	r2, [pc, #100]	; (8008ef0 <rt_test_006_001_execute+0xa0>)
 8008e8c:	481e      	ldr	r0, [pc, #120]	; (8008f08 <rt_test_006_001_execute+0xb8>)
 8008e8e:	f7fa f85f 	bl	8002f50 <chThdCreateStatic.constprop.103>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8008e92:	1d21      	adds	r1, r4, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8008e94:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8008e96:	4b1d      	ldr	r3, [pc, #116]	; (8008f0c <rt_test_006_001_execute+0xbc>)
 8008e98:	4a15      	ldr	r2, [pc, #84]	; (8008ef0 <rt_test_006_001_execute+0xa0>)
 8008e9a:	481d      	ldr	r0, [pc, #116]	; (8008f10 <rt_test_006_001_execute+0xc0>)
 8008e9c:	f7fa f858 	bl	8002f50 <chThdCreateStatic.constprop.103>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8008ea0:	1d61      	adds	r1, r4, #5
 8008ea2:	4a13      	ldr	r2, [pc, #76]	; (8008ef0 <rt_test_006_001_execute+0xa0>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8008ea4:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8008ea6:	4b1b      	ldr	r3, [pc, #108]	; (8008f14 <rt_test_006_001_execute+0xc4>)
 8008ea8:	481b      	ldr	r0, [pc, #108]	; (8008f18 <rt_test_006_001_execute+0xc8>)
 8008eaa:	f7fa f851 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(4);
 8008eae:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8008eb0:	6128      	str	r0, [r5, #16]
    chMtxUnlock(&m1);
 8008eb2:	480d      	ldr	r0, [pc, #52]	; (8008ee8 <rt_test_006_001_execute+0x98>)
  test_set_step(4);
 8008eb4:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 8008eb6:	f7fd f913 	bl	80060e0 <chMtxUnlock>
    test_wait_threads();
 8008eba:	f7ff f911 	bl	80080e0 <test_wait_threads>
 8008ebe:	69bb      	ldr	r3, [r7, #24]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 8008ec0:	4916      	ldr	r1, [pc, #88]	; (8008f1c <rt_test_006_001_execute+0xcc>)
 8008ec2:	6898      	ldr	r0, [r3, #8]
 8008ec4:	1b00      	subs	r0, r0, r4
 8008ec6:	fab0 f080 	clz	r0, r0
 8008eca:	0940      	lsrs	r0, r0, #5
 8008ecc:	f7f7 fd40 	bl	8000950 <_test_assert>
 8008ed0:	b100      	cbz	r0, 8008ed4 <rt_test_006_001_execute+0x84>
}
 8008ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert_sequence("ABCDE", "invalid sequence");
 8008ed4:	4912      	ldr	r1, [pc, #72]	; (8008f20 <rt_test_006_001_execute+0xd0>)
 8008ed6:	4813      	ldr	r0, [pc, #76]	; (8008f24 <rt_test_006_001_execute+0xd4>)
}
 8008ed8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8008edc:	f7f7 be50 	b.w	8000b80 <_test_assert_sequence>
 8008ee0:	200010f0 	.word	0x200010f0
 8008ee4:	20001a7c 	.word	0x20001a7c
 8008ee8:	20000840 	.word	0x20000840
 8008eec:	0800b4ec 	.word	0x0800b4ec
 8008ef0:	080069e1 	.word	0x080069e1
 8008ef4:	20001368 	.word	0x20001368
 8008ef8:	20001a94 	.word	0x20001a94
 8008efc:	0800c3fc 	.word	0x0800c3fc
 8008f00:	200014b0 	.word	0x200014b0
 8008f04:	0800b6ac 	.word	0x0800b6ac
 8008f08:	200015f8 	.word	0x200015f8
 8008f0c:	0800b474 	.word	0x0800b474
 8008f10:	20001740 	.word	0x20001740
 8008f14:	0800b470 	.word	0x0800b470
 8008f18:	20001888 	.word	0x20001888
 8008f1c:	0800b4b0 	.word	0x0800b4b0
 8008f20:	0800b54c 	.word	0x0800b54c
 8008f24:	0800b4e8 	.word	0x0800b4e8
	...

08008f30 <rt_test_005_005_teardown>:
 8008f30:	f7ff b8d6 	b.w	80080e0 <test_wait_threads>
	...

08008f40 <rt_test_005_004_execute>:
static void rt_test_005_004_execute(void) {
 8008f40:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8008f42:	2501      	movs	r5, #1
  return ch.rlist.current;
 8008f44:	4b22      	ldr	r3, [pc, #136]	; (8008fd0 <rt_test_005_004_execute+0x90>)
 8008f46:	4c23      	ldr	r4, [pc, #140]	; (8008fd4 <rt_test_005_004_execute+0x94>)
  return chThdGetSelfX()->prio;
 8008f48:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008f4a:	4823      	ldr	r0, [pc, #140]	; (8008fd8 <rt_test_005_004_execute+0x98>)
 8008f4c:	6891      	ldr	r1, [r2, #8]
 8008f4e:	4b23      	ldr	r3, [pc, #140]	; (8008fdc <rt_test_005_004_execute+0x9c>)
 8008f50:	4429      	add	r1, r5
 8008f52:	4a23      	ldr	r2, [pc, #140]	; (8008fe0 <rt_test_005_004_execute+0xa0>)
  test_set_step(1);
 8008f54:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008f56:	f7f9 fffb 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(2);
 8008f5a:	2502      	movs	r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008f5c:	4b21      	ldr	r3, [pc, #132]	; (8008fe4 <rt_test_005_004_execute+0xa4>)
  test_set_step(2);
 8008f5e:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008f60:	6018      	str	r0, [r3, #0]
 8008f62:	2320      	movs	r3, #32
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	4c1f      	ldr	r4, [pc, #124]	; (8008fe8 <rt_test_005_004_execute+0xa8>)
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8008f6a:	2600      	movs	r6, #0
 8008f6c:	e002      	b.n	8008f74 <rt_test_005_004_execute+0x34>
  while (n > (cnt_t)0) {
 8008f6e:	2d01      	cmp	r5, #1
 8008f70:	d00e      	beq.n	8008f90 <rt_test_005_004_execute+0x50>
 8008f72:	2501      	movs	r5, #1
    if (++sp->cnt <= (cnt_t)0) {
 8008f74:	68a3      	ldr	r3, [r4, #8]
 8008f76:	3301      	adds	r3, #1
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	60a3      	str	r3, [r4, #8]
 8008f7c:	dcf7      	bgt.n	8008f6e <rt_test_005_004_execute+0x2e>
  thread_t *tp = tqp->next;
 8008f7e:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8008f80:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8008f82:	605c      	str	r4, [r3, #4]
  tqp->next             = tp->queue.next;
 8008f84:	6023      	str	r3, [r4, #0]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8008f86:	f7f8 fd93 	bl	8001ab0 <chSchReadyI>
  while (n > (cnt_t)0) {
 8008f8a:	2d01      	cmp	r5, #1
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8008f8c:	6246      	str	r6, [r0, #36]	; 0x24
  while (n > (cnt_t)0) {
 8008f8e:	d1f0      	bne.n	8008f72 <rt_test_005_004_execute+0x32>
    chSchRescheduleS();
 8008f90:	f7fc fa76 	bl	8005480 <chSchRescheduleS>
 8008f94:	2500      	movs	r5, #0
 8008f96:	f385 8811 	msr	BASEPRI, r5
    test_wait_threads();
 8008f9a:	f7ff f8a1 	bl	80080e0 <test_wait_threads>
 8008f9e:	2320      	movs	r3, #32
 8008fa0:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 8008fa4:	68a0      	ldr	r0, [r4, #8]
 8008fa6:	4911      	ldr	r1, [pc, #68]	; (8008fec <rt_test_005_004_execute+0xac>)
 8008fa8:	f1a0 0001 	sub.w	r0, r0, #1
 8008fac:	fab0 f080 	clz	r0, r0
 8008fb0:	0940      	lsrs	r0, r0, #5
 8008fb2:	f7f7 fccd 	bl	8000950 <_test_assert>
 8008fb6:	b110      	cbz	r0, 8008fbe <rt_test_005_004_execute+0x7e>
 8008fb8:	f385 8811 	msr	BASEPRI, r5
}
 8008fbc:	bd70      	pop	{r4, r5, r6, pc}
 8008fbe:	f380 8811 	msr	BASEPRI, r0
    test_assert_sequence("A", "invalid sequence");
 8008fc2:	490b      	ldr	r1, [pc, #44]	; (8008ff0 <rt_test_005_004_execute+0xb0>)
 8008fc4:	4805      	ldr	r0, [pc, #20]	; (8008fdc <rt_test_005_004_execute+0x9c>)
}
 8008fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("A", "invalid sequence");
 8008fca:	f7f7 bdd9 	b.w	8000b80 <_test_assert_sequence>
 8008fce:	bf00      	nop
 8008fd0:	200010f0 	.word	0x200010f0
 8008fd4:	20001a7c 	.word	0x20001a7c
 8008fd8:	20001368 	.word	0x20001368
 8008fdc:	0800b470 	.word	0x0800b470
 8008fe0:	08004421 	.word	0x08004421
 8008fe4:	20001a94 	.word	0x20001a94
 8008fe8:	20001348 	.word	0x20001348
 8008fec:	0800b3bc 	.word	0x0800b3bc
 8008ff0:	0800b54c 	.word	0x0800b54c
	...

08009000 <rt_test_005_003_execute>:
  test_set_step(1);
 8009000:	2001      	movs	r0, #1
static void rt_test_005_003_execute(void) {
 8009002:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8009006:	4d4b      	ldr	r5, [pc, #300]	; (8009134 <rt_test_005_003_execute+0x134>)
 8009008:	2320      	movs	r3, #32
 800900a:	6028      	str	r0, [r5, #0]
 800900c:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8009010:	4c49      	ldr	r4, [pc, #292]	; (8009138 <rt_test_005_003_execute+0x138>)
 8009012:	68a3      	ldr	r3, [r4, #8]
 8009014:	3b01      	subs	r3, #1
 8009016:	bf5c      	itt	pl
 8009018:	60a3      	strpl	r3, [r4, #8]
 800901a:	2000      	movpl	r0, #0
 800901c:	2300      	movs	r3, #0
 800901e:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8009022:	4946      	ldr	r1, [pc, #280]	; (800913c <rt_test_005_003_execute+0x13c>)
 8009024:	f7f7 fc94 	bl	8000950 <_test_assert>
 8009028:	b108      	cbz	r0, 800902e <rt_test_005_003_execute+0x2e>
}
 800902a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return (bool)(tqp->next == (const thread_t *)tqp);
 800902e:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8009030:	4943      	ldr	r1, [pc, #268]	; (8009140 <rt_test_005_003_execute+0x140>)
 8009032:	1b00      	subs	r0, r0, r4
 8009034:	fab0 f080 	clz	r0, r0
 8009038:	0940      	lsrs	r0, r0, #5
 800903a:	f7f7 fc89 	bl	8000950 <_test_assert>
 800903e:	2800      	cmp	r0, #0
 8009040:	d1f3      	bne.n	800902a <rt_test_005_003_execute+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 8009042:	68a0      	ldr	r0, [r4, #8]
 8009044:	493f      	ldr	r1, [pc, #252]	; (8009144 <rt_test_005_003_execute+0x144>)
 8009046:	fab0 f080 	clz	r0, r0
 800904a:	0940      	lsrs	r0, r0, #5
 800904c:	f7f7 fc80 	bl	8000950 <_test_assert>
 8009050:	2800      	cmp	r0, #0
 8009052:	d1ea      	bne.n	800902a <rt_test_005_003_execute+0x2a>
  test_set_step(2);
 8009054:	2602      	movs	r6, #2
  return ch.rlist.current;
 8009056:	4a3c      	ldr	r2, [pc, #240]	; (8009148 <rt_test_005_003_execute+0x148>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8009058:	4603      	mov	r3, r0
  return chThdGetSelfX()->prio;
 800905a:	6991      	ldr	r1, [r2, #24]
 800905c:	483b      	ldr	r0, [pc, #236]	; (800914c <rt_test_005_003_execute+0x14c>)
 800905e:	6889      	ldr	r1, [r1, #8]
 8009060:	4a3b      	ldr	r2, [pc, #236]	; (8009150 <rt_test_005_003_execute+0x150>)
 8009062:	3901      	subs	r1, #1
  test_set_step(2);
 8009064:	602e      	str	r6, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8009066:	f7f9 ff73 	bl	8002f50 <chThdCreateStatic.constprop.103>
 800906a:	4b3a      	ldr	r3, [pc, #232]	; (8009154 <rt_test_005_003_execute+0x154>)
 800906c:	6018      	str	r0, [r3, #0]
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 800906e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009072:	f7fa f8cd 	bl	8003210 <chSemWaitTimeout.constprop.100>
 8009076:	4606      	mov	r6, r0
    test_wait_threads();
 8009078:	f7ff f832 	bl	80080e0 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 800907c:	fab6 f086 	clz	r0, r6
 8009080:	492e      	ldr	r1, [pc, #184]	; (800913c <rt_test_005_003_execute+0x13c>)
 8009082:	0940      	lsrs	r0, r0, #5
 8009084:	f7f7 fc64 	bl	8000950 <_test_assert>
 8009088:	2800      	cmp	r0, #0
 800908a:	d1ce      	bne.n	800902a <rt_test_005_003_execute+0x2a>
 800908c:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800908e:	492c      	ldr	r1, [pc, #176]	; (8009140 <rt_test_005_003_execute+0x140>)
 8009090:	1b00      	subs	r0, r0, r4
 8009092:	fab0 f080 	clz	r0, r0
 8009096:	0940      	lsrs	r0, r0, #5
 8009098:	f7f7 fc5a 	bl	8000950 <_test_assert>
 800909c:	2800      	cmp	r0, #0
 800909e:	d1c4      	bne.n	800902a <rt_test_005_003_execute+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 80090a0:	68a0      	ldr	r0, [r4, #8]
 80090a2:	4928      	ldr	r1, [pc, #160]	; (8009144 <rt_test_005_003_execute+0x144>)
 80090a4:	fab0 f080 	clz	r0, r0
 80090a8:	0940      	lsrs	r0, r0, #5
 80090aa:	f7f7 fc51 	bl	8000950 <_test_assert>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d1bb      	bne.n	800902a <rt_test_005_003_execute+0x2a>
  test_set_step(3);
 80090b2:	2303      	movs	r3, #3
 80090b4:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 80090b6:	f7fa fdf3 	bl	8003ca0 <test_wait_tick>
 80090ba:	2641      	movs	r6, #65	; 0x41
 80090bc:	4681      	mov	r9, r0
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80090be:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800913c <rt_test_005_003_execute+0x13c>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80090c2:	4f1f      	ldr	r7, [pc, #124]	; (8009140 <rt_test_005_003_execute+0x140>)
      test_assert(sem1.cnt == 0, "counter not zero");
 80090c4:	4d1f      	ldr	r5, [pc, #124]	; (8009144 <rt_test_005_003_execute+0x144>)
      test_emit_token('A' + i);
 80090c6:	4630      	mov	r0, r6
 80090c8:	f7f7 fce2 	bl	8000a90 <test_emit_token>
      msg = chSemWaitTimeout(&sem1, TIME_MS2I(50));
 80090cc:	2064      	movs	r0, #100	; 0x64
 80090ce:	f7fa f89f 	bl	8003210 <chSemWaitTimeout.constprop.100>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80090d2:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 80090d6:	fab0 f080 	clz	r0, r0
 80090da:	4641      	mov	r1, r8
 80090dc:	0940      	lsrs	r0, r0, #5
 80090de:	f7f7 fc37 	bl	8000950 <_test_assert>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	d1a1      	bne.n	800902a <rt_test_005_003_execute+0x2a>
 80090e6:	6820      	ldr	r0, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80090e8:	4639      	mov	r1, r7
 80090ea:	1b00      	subs	r0, r0, r4
 80090ec:	fab0 f080 	clz	r0, r0
 80090f0:	0940      	lsrs	r0, r0, #5
 80090f2:	f7f7 fc2d 	bl	8000950 <_test_assert>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d197      	bne.n	800902a <rt_test_005_003_execute+0x2a>
      test_assert(sem1.cnt == 0, "counter not zero");
 80090fa:	68a0      	ldr	r0, [r4, #8]
 80090fc:	4629      	mov	r1, r5
 80090fe:	fab0 f080 	clz	r0, r0
 8009102:	0940      	lsrs	r0, r0, #5
 8009104:	f7f7 fc24 	bl	8000950 <_test_assert>
 8009108:	3601      	adds	r6, #1
 800910a:	b2f6      	uxtb	r6, r6
 800910c:	2800      	cmp	r0, #0
 800910e:	d18c      	bne.n	800902a <rt_test_005_003_execute+0x2a>
    for (i = 0; i < 5; i++) {
 8009110:	2e46      	cmp	r6, #70	; 0x46
 8009112:	d1d8      	bne.n	80090c6 <rt_test_005_003_execute+0xc6>
    test_assert_sequence("ABCDE", "invalid sequence");
 8009114:	4910      	ldr	r1, [pc, #64]	; (8009158 <rt_test_005_003_execute+0x158>)
 8009116:	4811      	ldr	r0, [pc, #68]	; (800915c <rt_test_005_003_execute+0x15c>)
 8009118:	f7f7 fd32 	bl	8000b80 <_test_assert_sequence>
 800911c:	2800      	cmp	r0, #0
 800911e:	d184      	bne.n	800902a <rt_test_005_003_execute+0x2a>
 8009120:	f509 71fc 	add.w	r1, r9, #504	; 0x1f8
 8009124:	f509 70fa 	add.w	r0, r9, #500	; 0x1f4
    test_assert_time_window(target_time,
 8009128:	b289      	uxth	r1, r1
 800912a:	b280      	uxth	r0, r0
}
 800912c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert_time_window(target_time,
 8009130:	f7f7 ba1e 	b.w	8000570 <_test_assert_time_window.constprop.3>
 8009134:	20001a7c 	.word	0x20001a7c
 8009138:	20001348 	.word	0x20001348
 800913c:	0800a4a0 	.word	0x0800a4a0
 8009140:	0800b3dc 	.word	0x0800b3dc
 8009144:	0800b3ec 	.word	0x0800b3ec
 8009148:	200010f0 	.word	0x200010f0
 800914c:	20001368 	.word	0x20001368
 8009150:	08006041 	.word	0x08006041
 8009154:	20001a94 	.word	0x20001a94
 8009158:	0800b54c 	.word	0x0800b54c
 800915c:	0800b4e8 	.word	0x0800b4e8

08009160 <rt_test_005_002_execute>:
static void rt_test_005_002_execute(void) {
 8009160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8009164:	2501      	movs	r5, #1
  return ch.rlist.current;
 8009166:	4f2a      	ldr	r7, [pc, #168]	; (8009210 <rt_test_005_002_execute+0xb0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8009168:	4e2a      	ldr	r6, [pc, #168]	; (8009214 <rt_test_005_002_execute+0xb4>)
  return chThdGetSelfX()->prio;
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	4c2a      	ldr	r4, [pc, #168]	; (8009218 <rt_test_005_002_execute+0xb8>)
 800916e:	6899      	ldr	r1, [r3, #8]
  test_set_step(1);
 8009170:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8009240 <rt_test_005_002_execute+0xe0>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8009174:	4632      	mov	r2, r6
 8009176:	3105      	adds	r1, #5
 8009178:	4620      	mov	r0, r4
 800917a:	4b28      	ldr	r3, [pc, #160]	; (800921c <rt_test_005_002_execute+0xbc>)
  test_set_step(1);
 800917c:	f8c8 5000 	str.w	r5, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8009180:	f7f9 fee6 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	4d26      	ldr	r5, [pc, #152]	; (8009220 <rt_test_005_002_execute+0xc0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8009188:	6899      	ldr	r1, [r3, #8]
 800918a:	4632      	mov	r2, r6
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800918c:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 800918e:	3101      	adds	r1, #1
 8009190:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 8009194:	4b23      	ldr	r3, [pc, #140]	; (8009224 <rt_test_005_002_execute+0xc4>)
 8009196:	f7f9 fedb 	bl	8002f50 <chThdCreateStatic.constprop.103>
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 800919e:	6899      	ldr	r1, [r3, #8]
 80091a0:	4632      	mov	r2, r6
 80091a2:	3103      	adds	r1, #3
 80091a4:	f504 7024 	add.w	r0, r4, #656	; 0x290
 80091a8:	4b1f      	ldr	r3, [pc, #124]	; (8009228 <rt_test_005_002_execute+0xc8>)
 80091aa:	f7f9 fed1 	bl	8002f50 <chThdCreateStatic.constprop.103>
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80091b2:	6899      	ldr	r1, [r3, #8]
 80091b4:	4632      	mov	r2, r6
 80091b6:	3104      	adds	r1, #4
 80091b8:	f504 7076 	add.w	r0, r4, #984	; 0x3d8
 80091bc:	4b1b      	ldr	r3, [pc, #108]	; (800922c <rt_test_005_002_execute+0xcc>)
 80091be:	f7f9 fec7 	bl	8002f50 <chThdCreateStatic.constprop.103>
 80091c2:	69bb      	ldr	r3, [r7, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80091c4:	4632      	mov	r2, r6
 80091c6:	6899      	ldr	r1, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80091c8:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80091ca:	3102      	adds	r1, #2
 80091cc:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 80091d0:	4b17      	ldr	r3, [pc, #92]	; (8009230 <rt_test_005_002_execute+0xd0>)
 80091d2:	f7f9 febd 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(2);
 80091d6:	2302      	movs	r3, #2
    chSemSignal(&sem1);
 80091d8:	4c16      	ldr	r4, [pc, #88]	; (8009234 <rt_test_005_002_execute+0xd4>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80091da:	6128      	str	r0, [r5, #16]
    chSemSignal(&sem1);
 80091dc:	4620      	mov	r0, r4
  test_set_step(2);
 80091de:	f8c8 3000 	str.w	r3, [r8]
    chSemSignal(&sem1);
 80091e2:	f7f9 ff45 	bl	8003070 <chSemSignal>
    chSemSignal(&sem1);
 80091e6:	4620      	mov	r0, r4
 80091e8:	f7f9 ff42 	bl	8003070 <chSemSignal>
    chSemSignal(&sem1);
 80091ec:	4620      	mov	r0, r4
 80091ee:	f7f9 ff3f 	bl	8003070 <chSemSignal>
    chSemSignal(&sem1);
 80091f2:	4620      	mov	r0, r4
 80091f4:	f7f9 ff3c 	bl	8003070 <chSemSignal>
    chSemSignal(&sem1);
 80091f8:	4620      	mov	r0, r4
 80091fa:	f7f9 ff39 	bl	8003070 <chSemSignal>
    test_wait_threads();
 80091fe:	f7fe ff6f 	bl	80080e0 <test_wait_threads>
}
 8009202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8009206:	490c      	ldr	r1, [pc, #48]	; (8009238 <rt_test_005_002_execute+0xd8>)
 8009208:	480c      	ldr	r0, [pc, #48]	; (800923c <rt_test_005_002_execute+0xdc>)
 800920a:	f7f7 bcb9 	b.w	8000b80 <_test_assert_sequence>
 800920e:	bf00      	nop
 8009210:	200010f0 	.word	0x200010f0
 8009214:	08004421 	.word	0x08004421
 8009218:	20001368 	.word	0x20001368
 800921c:	0800b470 	.word	0x0800b470
 8009220:	20001a94 	.word	0x20001a94
 8009224:	0800b474 	.word	0x0800b474
 8009228:	0800b6ac 	.word	0x0800b6ac
 800922c:	0800c3fc 	.word	0x0800c3fc
 8009230:	0800b4ec 	.word	0x0800b4ec
 8009234:	20001348 	.word	0x20001348
 8009238:	0800b54c 	.word	0x0800b54c
 800923c:	0800b4e8 	.word	0x0800b4e8
 8009240:	20001a7c 	.word	0x20001a7c
	...

08009250 <rt_test_004_001_execute>:

static void rt_test_004_001_execute(void) {
 8009250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  msg_t msg;

  /* [4.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8009254:	2401      	movs	r4, #1
  return ch.rlist.current;
 8009256:	4d31      	ldr	r5, [pc, #196]	; (800931c <rt_test_004_001_execute+0xcc>)
 8009258:	4f31      	ldr	r7, [pc, #196]	; (8009320 <rt_test_004_001_execute+0xd0>)
  return chThdGetSelfX()->prio;
 800925a:	69aa      	ldr	r2, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 800925c:	4b31      	ldr	r3, [pc, #196]	; (8009324 <rt_test_004_001_execute+0xd4>)
 800925e:	6891      	ldr	r1, [r2, #8]
 8009260:	4831      	ldr	r0, [pc, #196]	; (8009328 <rt_test_004_001_execute+0xd8>)
 8009262:	4a32      	ldr	r2, [pc, #200]	; (800932c <rt_test_004_001_execute+0xdc>)
 8009264:	3901      	subs	r1, #1
  test_set_step(1);
 8009266:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8009268:	f7f9 fe72 	bl	8002f50 <chThdCreateStatic.constprop.103>
 800926c:	4b30      	ldr	r3, [pc, #192]	; (8009330 <rt_test_004_001_execute+0xe0>)
 800926e:	2620      	movs	r6, #32
 8009270:	6018      	str	r0, [r3, #0]
 8009272:	f386 8811 	msr	BASEPRI, r6
  *trp = tp;
 8009276:	4c2f      	ldr	r4, [pc, #188]	; (8009334 <rt_test_004_001_execute+0xe4>)
  return ch.rlist.current;
 8009278:	69ab      	ldr	r3, [r5, #24]
    chSchGoSleepS(newstate);
 800927a:	2003      	movs	r0, #3
  tp->u.wttrp = trp;
 800927c:	625c      	str	r4, [r3, #36]	; 0x24
  *trp = tp;
 800927e:	6023      	str	r3, [r4, #0]
 8009280:	f7f9 ff16 	bl	80030b0 <chSchGoSleepS>
  return currp->u.rdymsg;
 8009284:	69aa      	ldr	r2, [r5, #24]
 8009286:	2300      	movs	r3, #0
 8009288:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 800928c:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
 8009290:	6820      	ldr	r0, [r4, #0]
 8009292:	4929      	ldr	r1, [pc, #164]	; (8009338 <rt_test_004_001_execute+0xe8>)
 8009294:	fab0 f080 	clz	r0, r0
 8009298:	0940      	lsrs	r0, r0, #5
 800929a:	f7f7 fb59 	bl	8000950 <_test_assert>
 800929e:	b108      	cbz	r0, 80092a4 <rt_test_004_001_execute+0x54>
                            chTimeAddX(time, TIME_MS2I(1000) + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
}
 80092a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(MSG_OK == msg,"wrong returned message");
 80092a4:	fab8 f088 	clz	r0, r8
 80092a8:	4924      	ldr	r1, [pc, #144]	; (800933c <rt_test_004_001_execute+0xec>)
 80092aa:	0940      	lsrs	r0, r0, #5
 80092ac:	f7f7 fb50 	bl	8000950 <_test_assert>
 80092b0:	4680      	mov	r8, r0
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d1f4      	bne.n	80092a0 <rt_test_004_001_execute+0x50>
    test_wait_threads();
 80092b6:	f7fe ff13 	bl	80080e0 <test_wait_threads>
  test_set_step(2);
 80092ba:	2302      	movs	r3, #2
 80092bc:	603b      	str	r3, [r7, #0]
 80092be:	f386 8811 	msr	BASEPRI, r6
 80092c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80092c6:	69ab      	ldr	r3, [r5, #24]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80092c8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80092cc:	6a55      	ldr	r5, [r2, #36]	; 0x24
 80092ce:	2003      	movs	r0, #3
  tp->u.wttrp = trp;
 80092d0:	625c      	str	r4, [r3, #36]	; 0x24
  *trp = tp;
 80092d2:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80092d4:	f7f9 ff74 	bl	80031c0 <chSchGoSleepTimeoutS>
 80092d8:	b2ad      	uxth	r5, r5
 80092da:	4606      	mov	r6, r0
 80092dc:	f388 8811 	msr	BASEPRI, r8
 80092e0:	f205 71d3 	addw	r1, r5, #2003	; 0x7d3
 80092e4:	f505 60fa 	add.w	r0, r5, #2000	; 0x7d0
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(1000)),
 80092e8:	b289      	uxth	r1, r1
 80092ea:	b280      	uxth	r0, r0
 80092ec:	f7f7 f940 	bl	8000570 <_test_assert_time_window.constprop.3>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d1d5      	bne.n	80092a0 <rt_test_004_001_execute+0x50>
    test_assert(NULL == tr1, "not NULL");
 80092f4:	6820      	ldr	r0, [r4, #0]
 80092f6:	4910      	ldr	r1, [pc, #64]	; (8009338 <rt_test_004_001_execute+0xe8>)
 80092f8:	fab0 f080 	clz	r0, r0
 80092fc:	0940      	lsrs	r0, r0, #5
 80092fe:	f7f7 fb27 	bl	8000950 <_test_assert>
 8009302:	2800      	cmp	r0, #0
 8009304:	d1cc      	bne.n	80092a0 <rt_test_004_001_execute+0x50>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8009306:	f1a6 30ff 	sub.w	r0, r6, #4294967295	; 0xffffffff
 800930a:	fab0 f080 	clz	r0, r0
}
 800930e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8009312:	0940      	lsrs	r0, r0, #5
 8009314:	4909      	ldr	r1, [pc, #36]	; (800933c <rt_test_004_001_execute+0xec>)
 8009316:	f7f7 bb1b 	b.w	8000950 <_test_assert>
 800931a:	bf00      	nop
 800931c:	200010f0 	.word	0x200010f0
 8009320:	20001a7c 	.word	0x20001a7c
 8009324:	0800b470 	.word	0x0800b470
 8009328:	20001368 	.word	0x20001368
 800932c:	080060a1 	.word	0x080060a1
 8009330:	20001a94 	.word	0x20001a94
 8009334:	20001aa8 	.word	0x20001aa8
 8009338:	0800b344 	.word	0x0800b344
 800933c:	0800b350 	.word	0x0800b350

08009340 <rt_test_003_002_execute>:
 * - [3.2.3] Creating 5 threads with pseudo-random priority, execution
 *   sequence is tested.
 * .
 */

static void rt_test_003_002_execute(void) {
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* [3.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 8009342:	2401      	movs	r4, #1
 8009344:	4d53      	ldr	r5, [pc, #332]	; (8009494 <rt_test_003_002_execute+0x154>)
 8009346:	4e54      	ldr	r6, [pc, #336]	; (8009498 <rt_test_003_002_execute+0x158>)
  return chThdGetSelfX()->prio;
 8009348:	69aa      	ldr	r2, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800934a:	4b54      	ldr	r3, [pc, #336]	; (800949c <rt_test_003_002_execute+0x15c>)
 800934c:	6891      	ldr	r1, [r2, #8]
 800934e:	4854      	ldr	r0, [pc, #336]	; (80094a0 <rt_test_003_002_execute+0x160>)
 8009350:	4a54      	ldr	r2, [pc, #336]	; (80094a4 <rt_test_003_002_execute+0x164>)
 8009352:	3905      	subs	r1, #5
  test_set_step(1);
 8009354:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8009356:	f7f9 fdfb 	bl	8002f50 <chThdCreateStatic.constprop.103>
 800935a:	69ab      	ldr	r3, [r5, #24]
 800935c:	4c52      	ldr	r4, [pc, #328]	; (80094a8 <rt_test_003_002_execute+0x168>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800935e:	6899      	ldr	r1, [r3, #8]
 8009360:	4a50      	ldr	r2, [pc, #320]	; (80094a4 <rt_test_003_002_execute+0x164>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8009362:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8009364:	3904      	subs	r1, #4
 8009366:	4b51      	ldr	r3, [pc, #324]	; (80094ac <rt_test_003_002_execute+0x16c>)
 8009368:	4851      	ldr	r0, [pc, #324]	; (80094b0 <rt_test_003_002_execute+0x170>)
 800936a:	f7f9 fdf1 	bl	8002f50 <chThdCreateStatic.constprop.103>
 800936e:	69ab      	ldr	r3, [r5, #24]
 8009370:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8009372:	6899      	ldr	r1, [r3, #8]
 8009374:	4a4b      	ldr	r2, [pc, #300]	; (80094a4 <rt_test_003_002_execute+0x164>)
 8009376:	4b4f      	ldr	r3, [pc, #316]	; (80094b4 <rt_test_003_002_execute+0x174>)
 8009378:	3903      	subs	r1, #3
 800937a:	484f      	ldr	r0, [pc, #316]	; (80094b8 <rt_test_003_002_execute+0x178>)
 800937c:	f7f9 fde8 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8009380:	69ab      	ldr	r3, [r5, #24]
 8009382:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8009384:	6899      	ldr	r1, [r3, #8]
 8009386:	4a47      	ldr	r2, [pc, #284]	; (80094a4 <rt_test_003_002_execute+0x164>)
 8009388:	4b4c      	ldr	r3, [pc, #304]	; (80094bc <rt_test_003_002_execute+0x17c>)
 800938a:	3902      	subs	r1, #2
 800938c:	484c      	ldr	r0, [pc, #304]	; (80094c0 <rt_test_003_002_execute+0x180>)
 800938e:	f7f9 fddf 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8009392:	69ab      	ldr	r3, [r5, #24]
 8009394:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8009396:	6899      	ldr	r1, [r3, #8]
 8009398:	4a42      	ldr	r2, [pc, #264]	; (80094a4 <rt_test_003_002_execute+0x164>)
 800939a:	3901      	subs	r1, #1
 800939c:	4b49      	ldr	r3, [pc, #292]	; (80094c4 <rt_test_003_002_execute+0x184>)
 800939e:	484a      	ldr	r0, [pc, #296]	; (80094c8 <rt_test_003_002_execute+0x188>)
 80093a0:	f7f9 fdd6 	bl	8002f50 <chThdCreateStatic.constprop.103>
 80093a4:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 80093a6:	f7fe fe9b 	bl	80080e0 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 80093aa:	4948      	ldr	r1, [pc, #288]	; (80094cc <rt_test_003_002_execute+0x18c>)
 80093ac:	4848      	ldr	r0, [pc, #288]	; (80094d0 <rt_test_003_002_execute+0x190>)
 80093ae:	f7f7 fbe7 	bl	8000b80 <_test_assert_sequence>
 80093b2:	b100      	cbz	r0, 80093b6 <rt_test_003_002_execute+0x76>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
    test_wait_threads();
    test_assert_sequence("ABCDE", "invalid sequence");
  }
}
 80093b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 80093b6:	2702      	movs	r7, #2
 80093b8:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80093ba:	4b42      	ldr	r3, [pc, #264]	; (80094c4 <rt_test_003_002_execute+0x184>)
 80093bc:	6891      	ldr	r1, [r2, #8]
 80093be:	4842      	ldr	r0, [pc, #264]	; (80094c8 <rt_test_003_002_execute+0x188>)
 80093c0:	4a38      	ldr	r2, [pc, #224]	; (80094a4 <rt_test_003_002_execute+0x164>)
 80093c2:	3901      	subs	r1, #1
  test_set_step(2);
 80093c4:	6037      	str	r7, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80093c6:	f7f9 fdc3 	bl	8002f50 <chThdCreateStatic.constprop.103>
 80093ca:	69ab      	ldr	r3, [r5, #24]
 80093cc:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80093ce:	6899      	ldr	r1, [r3, #8]
 80093d0:	4a34      	ldr	r2, [pc, #208]	; (80094a4 <rt_test_003_002_execute+0x164>)
 80093d2:	4b3a      	ldr	r3, [pc, #232]	; (80094bc <rt_test_003_002_execute+0x17c>)
 80093d4:	3902      	subs	r1, #2
 80093d6:	483a      	ldr	r0, [pc, #232]	; (80094c0 <rt_test_003_002_execute+0x180>)
 80093d8:	f7f9 fdba 	bl	8002f50 <chThdCreateStatic.constprop.103>
 80093dc:	69ab      	ldr	r3, [r5, #24]
 80093de:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80093e0:	6899      	ldr	r1, [r3, #8]
 80093e2:	4a30      	ldr	r2, [pc, #192]	; (80094a4 <rt_test_003_002_execute+0x164>)
 80093e4:	4b33      	ldr	r3, [pc, #204]	; (80094b4 <rt_test_003_002_execute+0x174>)
 80093e6:	3903      	subs	r1, #3
 80093e8:	4833      	ldr	r0, [pc, #204]	; (80094b8 <rt_test_003_002_execute+0x178>)
 80093ea:	f7f9 fdb1 	bl	8002f50 <chThdCreateStatic.constprop.103>
 80093ee:	69ab      	ldr	r3, [r5, #24]
 80093f0:	60a0      	str	r0, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80093f2:	6899      	ldr	r1, [r3, #8]
 80093f4:	4a2b      	ldr	r2, [pc, #172]	; (80094a4 <rt_test_003_002_execute+0x164>)
 80093f6:	4b2d      	ldr	r3, [pc, #180]	; (80094ac <rt_test_003_002_execute+0x16c>)
 80093f8:	3904      	subs	r1, #4
 80093fa:	482d      	ldr	r0, [pc, #180]	; (80094b0 <rt_test_003_002_execute+0x170>)
 80093fc:	f7f9 fda8 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8009400:	69ab      	ldr	r3, [r5, #24]
 8009402:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8009404:	6899      	ldr	r1, [r3, #8]
 8009406:	4a27      	ldr	r2, [pc, #156]	; (80094a4 <rt_test_003_002_execute+0x164>)
 8009408:	3905      	subs	r1, #5
 800940a:	4b24      	ldr	r3, [pc, #144]	; (800949c <rt_test_003_002_execute+0x15c>)
 800940c:	4824      	ldr	r0, [pc, #144]	; (80094a0 <rt_test_003_002_execute+0x160>)
 800940e:	f7f9 fd9f 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8009412:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 8009414:	f7fe fe64 	bl	80080e0 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8009418:	492c      	ldr	r1, [pc, #176]	; (80094cc <rt_test_003_002_execute+0x18c>)
 800941a:	482d      	ldr	r0, [pc, #180]	; (80094d0 <rt_test_003_002_execute+0x190>)
 800941c:	f7f7 fbb0 	bl	8000b80 <_test_assert_sequence>
 8009420:	2800      	cmp	r0, #0
 8009422:	d1c7      	bne.n	80093b4 <rt_test_003_002_execute+0x74>
  test_set_step(3);
 8009424:	2003      	movs	r0, #3
 8009426:	69aa      	ldr	r2, [r5, #24]
 8009428:	6030      	str	r0, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800942a:	6891      	ldr	r1, [r2, #8]
 800942c:	4b1f      	ldr	r3, [pc, #124]	; (80094ac <rt_test_003_002_execute+0x16c>)
 800942e:	4a1d      	ldr	r2, [pc, #116]	; (80094a4 <rt_test_003_002_execute+0x164>)
 8009430:	3904      	subs	r1, #4
 8009432:	481f      	ldr	r0, [pc, #124]	; (80094b0 <rt_test_003_002_execute+0x170>)
 8009434:	f7f9 fd8c 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8009438:	69ab      	ldr	r3, [r5, #24]
 800943a:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800943c:	6899      	ldr	r1, [r3, #8]
 800943e:	4a19      	ldr	r2, [pc, #100]	; (80094a4 <rt_test_003_002_execute+0x164>)
 8009440:	4b16      	ldr	r3, [pc, #88]	; (800949c <rt_test_003_002_execute+0x15c>)
 8009442:	3905      	subs	r1, #5
 8009444:	4816      	ldr	r0, [pc, #88]	; (80094a0 <rt_test_003_002_execute+0x160>)
 8009446:	f7f9 fd83 	bl	8002f50 <chThdCreateStatic.constprop.103>
 800944a:	69ab      	ldr	r3, [r5, #24]
 800944c:	6020      	str	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800944e:	6899      	ldr	r1, [r3, #8]
 8009450:	4a14      	ldr	r2, [pc, #80]	; (80094a4 <rt_test_003_002_execute+0x164>)
 8009452:	4b1c      	ldr	r3, [pc, #112]	; (80094c4 <rt_test_003_002_execute+0x184>)
 8009454:	3901      	subs	r1, #1
 8009456:	481c      	ldr	r0, [pc, #112]	; (80094c8 <rt_test_003_002_execute+0x188>)
 8009458:	f7f9 fd7a 	bl	8002f50 <chThdCreateStatic.constprop.103>
 800945c:	69ab      	ldr	r3, [r5, #24]
 800945e:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8009460:	6899      	ldr	r1, [r3, #8]
 8009462:	4a10      	ldr	r2, [pc, #64]	; (80094a4 <rt_test_003_002_execute+0x164>)
 8009464:	4b15      	ldr	r3, [pc, #84]	; (80094bc <rt_test_003_002_execute+0x17c>)
 8009466:	3902      	subs	r1, #2
 8009468:	4815      	ldr	r0, [pc, #84]	; (80094c0 <rt_test_003_002_execute+0x180>)
 800946a:	f7f9 fd71 	bl	8002f50 <chThdCreateStatic.constprop.103>
 800946e:	69ab      	ldr	r3, [r5, #24]
 8009470:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8009472:	6899      	ldr	r1, [r3, #8]
 8009474:	4a0b      	ldr	r2, [pc, #44]	; (80094a4 <rt_test_003_002_execute+0x164>)
 8009476:	4b0f      	ldr	r3, [pc, #60]	; (80094b4 <rt_test_003_002_execute+0x174>)
 8009478:	3903      	subs	r1, #3
 800947a:	480f      	ldr	r0, [pc, #60]	; (80094b8 <rt_test_003_002_execute+0x178>)
 800947c:	f7f9 fd68 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8009480:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 8009482:	f7fe fe2d 	bl	80080e0 <test_wait_threads>
}
 8009486:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800948a:	4910      	ldr	r1, [pc, #64]	; (80094cc <rt_test_003_002_execute+0x18c>)
 800948c:	4810      	ldr	r0, [pc, #64]	; (80094d0 <rt_test_003_002_execute+0x190>)
 800948e:	f7f7 bb77 	b.w	8000b80 <_test_assert_sequence>
 8009492:	bf00      	nop
 8009494:	200010f0 	.word	0x200010f0
 8009498:	20001a7c 	.word	0x20001a7c
 800949c:	0800b4ec 	.word	0x0800b4ec
 80094a0:	20001368 	.word	0x20001368
 80094a4:	08000af1 	.word	0x08000af1
 80094a8:	20001a94 	.word	0x20001a94
 80094ac:	0800c3fc 	.word	0x0800c3fc
 80094b0:	200014b0 	.word	0x200014b0
 80094b4:	0800b6ac 	.word	0x0800b6ac
 80094b8:	200015f8 	.word	0x200015f8
 80094bc:	0800b474 	.word	0x0800b474
 80094c0:	20001740 	.word	0x20001740
 80094c4:	0800b470 	.word	0x0800b470
 80094c8:	20001888 	.word	0x20001888
 80094cc:	0800b54c 	.word	0x0800b54c
 80094d0:	0800b4e8 	.word	0x0800b4e8
	...

080094e0 <chSemReset>:
void chSemReset(semaphore_t *sp, cnt_t n) {
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	2320      	movs	r3, #32
 80094e4:	f383 8811 	msr	BASEPRI, r3
  cnt = sp->cnt;
 80094e8:	6884      	ldr	r4, [r0, #8]
  sp->cnt = n;
 80094ea:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 80094ec:	3401      	adds	r4, #1
 80094ee:	2c00      	cmp	r4, #0
 80094f0:	dc0c      	bgt.n	800950c <chSemReset+0x2c>
 80094f2:	4605      	mov	r5, r0
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 80094f4:	f06f 0601 	mvn.w	r6, #1
  thread_t *tp = tqp->prev;
 80094f8:	6868      	ldr	r0, [r5, #4]
  while (++cnt <= (cnt_t)0) {
 80094fa:	3401      	adds	r4, #1
  tqp->prev             = tp->queue.prev;
 80094fc:	6843      	ldr	r3, [r0, #4]
 80094fe:	606b      	str	r3, [r5, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 8009500:	601d      	str	r5, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8009502:	f7f8 fad5 	bl	8001ab0 <chSchReadyI>
  while (++cnt <= (cnt_t)0) {
 8009506:	2c01      	cmp	r4, #1
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8009508:	6246      	str	r6, [r0, #36]	; 0x24
  while (++cnt <= (cnt_t)0) {
 800950a:	d1f5      	bne.n	80094f8 <chSemReset+0x18>
  chSchRescheduleS();
 800950c:	f7fb ffb8 	bl	8005480 <chSchRescheduleS>
 8009510:	2300      	movs	r3, #0
 8009512:	f383 8811 	msr	BASEPRI, r3
}
 8009516:	bd70      	pop	{r4, r5, r6, pc}
	...

08009520 <rt_test_010_007_execute>:
static void rt_test_010_007_execute(void) {
 8009520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8009524:	2401      	movs	r4, #1
  return ch.rlist.current;
 8009526:	4d37      	ldr	r5, [pc, #220]	; (8009604 <rt_test_010_007_execute+0xe4>)
 8009528:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8009634 <rt_test_010_007_execute+0x114>
  return chThdGetSelfX()->prio;
 800952c:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800952e:	2300      	movs	r3, #0
 8009530:	6891      	ldr	r1, [r2, #8]
 8009532:	4835      	ldr	r0, [pc, #212]	; (8009608 <rt_test_010_007_execute+0xe8>)
 8009534:	4a35      	ldr	r2, [pc, #212]	; (800960c <rt_test_010_007_execute+0xec>)
 8009536:	3105      	adds	r1, #5
  test_set_step(1);
 8009538:	f8c8 4000 	str.w	r4, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800953c:	f7f9 fd08 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8009540:	69ab      	ldr	r3, [r5, #24]
 8009542:	4c33      	ldr	r4, [pc, #204]	; (8009610 <rt_test_010_007_execute+0xf0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8009544:	6899      	ldr	r1, [r3, #8]
 8009546:	4a31      	ldr	r2, [pc, #196]	; (800960c <rt_test_010_007_execute+0xec>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8009548:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800954a:	3104      	adds	r1, #4
 800954c:	2300      	movs	r3, #0
 800954e:	4831      	ldr	r0, [pc, #196]	; (8009614 <rt_test_010_007_execute+0xf4>)
 8009550:	f7f9 fcfe 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8009554:	69ab      	ldr	r3, [r5, #24]
 8009556:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8009558:	6899      	ldr	r1, [r3, #8]
 800955a:	4a2c      	ldr	r2, [pc, #176]	; (800960c <rt_test_010_007_execute+0xec>)
 800955c:	2300      	movs	r3, #0
 800955e:	3103      	adds	r1, #3
 8009560:	482d      	ldr	r0, [pc, #180]	; (8009618 <rt_test_010_007_execute+0xf8>)
 8009562:	f7f9 fcf5 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8009566:	69ab      	ldr	r3, [r5, #24]
 8009568:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800956a:	6899      	ldr	r1, [r3, #8]
 800956c:	4a27      	ldr	r2, [pc, #156]	; (800960c <rt_test_010_007_execute+0xec>)
 800956e:	2300      	movs	r3, #0
 8009570:	3102      	adds	r1, #2
 8009572:	482a      	ldr	r0, [pc, #168]	; (800961c <rt_test_010_007_execute+0xfc>)
 8009574:	f7f9 fcec 	bl	8002f50 <chThdCreateStatic.constprop.103>
 8009578:	69ab      	ldr	r3, [r5, #24]
 800957a:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800957c:	6899      	ldr	r1, [r3, #8]
 800957e:	4a23      	ldr	r2, [pc, #140]	; (800960c <rt_test_010_007_execute+0xec>)
 8009580:	2300      	movs	r3, #0
 8009582:	3101      	adds	r1, #1
 8009584:	4826      	ldr	r0, [pc, #152]	; (8009620 <rt_test_010_007_execute+0x100>)
 8009586:	f7f9 fce3 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(2);
 800958a:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800958c:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 800958e:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 8009592:	f7fa fb85 	bl	8003ca0 <test_wait_tick>
    n = 0;
 8009596:	f04f 0900 	mov.w	r9, #0
    start = test_wait_tick();
 800959a:	4605      	mov	r5, r0
 800959c:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 80095a0:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
 80095a4:	b2a4      	uxth	r4, r4
      chSemReset(&sem1, 0);
 80095a6:	4e1f      	ldr	r6, [pc, #124]	; (8009624 <rt_test_010_007_execute+0x104>)
 80095a8:	1a24      	subs	r4, r4, r0
 80095aa:	2100      	movs	r1, #0
 80095ac:	4630      	mov	r0, r6
 80095ae:	f7ff ff97 	bl	80094e0 <chSemReset>
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      n++;
 80095b4:	f109 0901 	add.w	r9, r9, #1
  return (bool)((time - start) < (end - start));
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	1b5b      	subs	r3, r3, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 80095bc:	429c      	cmp	r4, r3
 80095be:	dcf4      	bgt.n	80095aa <rt_test_010_007_execute+0x8a>
  test_set_step(3);
 80095c0:	2303      	movs	r3, #3
 80095c2:	f8c8 3000 	str.w	r3, [r8]
    test_terminate_threads();
 80095c6:	f7f7 fa03 	bl	80009d0 <test_terminate_threads>
    chSemReset(&sem1, 0);
 80095ca:	2100      	movs	r1, #0
 80095cc:	4815      	ldr	r0, [pc, #84]	; (8009624 <rt_test_010_007_execute+0x104>)
 80095ce:	f7ff ff87 	bl	80094e0 <chSemReset>
    test_wait_threads();
 80095d2:	f7fe fd85 	bl	80080e0 <test_wait_threads>
  test_set_step(4);
 80095d6:	2304      	movs	r3, #4
    test_print("--- Score : ");
 80095d8:	4813      	ldr	r0, [pc, #76]	; (8009628 <rt_test_010_007_execute+0x108>)
  test_set_step(4);
 80095da:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 80095de:	f7f7 fab7 	bl	8000b50 <test_print>
    test_printn(n);
 80095e2:	4648      	mov	r0, r9
 80095e4:	f7f7 fa44 	bl	8000a70 <test_printn>
    test_printn(n * 6);
 80095e8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
    test_print(" reschedules/S, ");
 80095ec:	480f      	ldr	r0, [pc, #60]	; (800962c <rt_test_010_007_execute+0x10c>)
 80095ee:	f7f7 faaf 	bl	8000b50 <test_print>
    test_printn(n * 6);
 80095f2:	ea4f 0049 	mov.w	r0, r9, lsl #1
 80095f6:	f7f7 fa3b 	bl	8000a70 <test_printn>
}
 80095fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" ctxswc/S");
 80095fe:	480c      	ldr	r0, [pc, #48]	; (8009630 <rt_test_010_007_execute+0x110>)
 8009600:	f7f7 ba86 	b.w	8000b10 <test_println>
 8009604:	200010f0 	.word	0x200010f0
 8009608:	20001368 	.word	0x20001368
 800960c:	080043d1 	.word	0x080043d1
 8009610:	20001a94 	.word	0x20001a94
 8009614:	200014b0 	.word	0x200014b0
 8009618:	200015f8 	.word	0x200015f8
 800961c:	20001740 	.word	0x20001740
 8009620:	20001888 	.word	0x20001888
 8009624:	20001354 	.word	0x20001354
 8009628:	0800b7e8 	.word	0x0800b7e8
 800962c:	0800b7a8 	.word	0x0800b7a8
 8009630:	0800b7cc 	.word	0x0800b7cc
 8009634:	20001a7c 	.word	0x20001a7c
	...

08009640 <rt_test_005_006_execute>:
}

static void rt_test_005_006_execute(void) {
 8009640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [5.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8009644:	2301      	movs	r3, #1
  sp->cnt = n;
 8009646:	2600      	movs	r6, #0
static void rt_test_005_006_execute(void) {
 8009648:	b084      	sub	sp, #16
  test_set_step(1);
 800964a:	4f5f      	ldr	r7, [pc, #380]	; (80097c8 <rt_test_005_006_execute+0x188>)
  tqp->next = (thread_t *)tqp;
 800964c:	ac01      	add	r4, sp, #4
 800964e:	603b      	str	r3, [r7, #0]
 8009650:	9603      	str	r6, [sp, #12]
  tqp->prev = (thread_t *)tqp;
 8009652:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8009656:	f04f 0820 	mov.w	r8, #32
 800965a:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 800965e:	9803      	ldr	r0, [sp, #12]
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8009660:	495a      	ldr	r1, [pc, #360]	; (80097cc <rt_test_005_006_execute+0x18c>)
 8009662:	42b0      	cmp	r0, r6
 8009664:	bfcc      	ite	gt
 8009666:	2000      	movgt	r0, #0
 8009668:	2001      	movle	r0, #1
 800966a:	f7f7 f971 	bl	8000950 <_test_assert>
 800966e:	b120      	cbz	r0, 800967a <rt_test_005_006_execute+0x3a>
 8009670:	f386 8811 	msr	BASEPRI, r6
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
}
 8009674:	b004      	add	sp, #16
 8009676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800967a:	4605      	mov	r5, r0
 800967c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8009680:	2302      	movs	r3, #2
  chSemReset(&bsp->sem, taken ? (cnt_t)0 : (cnt_t)1);
 8009682:	4601      	mov	r1, r0
 8009684:	4620      	mov	r0, r4
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	f7ff ff2a 	bl	80094e0 <chSemReset>
 800968c:	f388 8811 	msr	BASEPRI, r8
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8009690:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8009692:	494e      	ldr	r1, [pc, #312]	; (80097cc <rt_test_005_006_execute+0x18c>)
 8009694:	2800      	cmp	r0, #0
 8009696:	bfcc      	ite	gt
 8009698:	2000      	movgt	r0, #0
 800969a:	2001      	movle	r0, #1
 800969c:	f7f7 f958 	bl	8000950 <_test_assert>
 80096a0:	4606      	mov	r6, r0
 80096a2:	b120      	cbz	r0, 80096ae <rt_test_005_006_execute+0x6e>
 80096a4:	f385 8811 	msr	BASEPRI, r5
}
 80096a8:	b004      	add	sp, #16
 80096aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ae:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 80096b2:	2503      	movs	r5, #3
  return ch.rlist.current;
 80096b4:	4a46      	ldr	r2, [pc, #280]	; (80097d0 <rt_test_005_006_execute+0x190>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80096b6:	4623      	mov	r3, r4
  return chThdGetSelfX()->prio;
 80096b8:	6991      	ldr	r1, [r2, #24]
 80096ba:	4846      	ldr	r0, [pc, #280]	; (80097d4 <rt_test_005_006_execute+0x194>)
 80096bc:	6889      	ldr	r1, [r1, #8]
 80096be:	4a46      	ldr	r2, [pc, #280]	; (80097d8 <rt_test_005_006_execute+0x198>)
 80096c0:	3901      	subs	r1, #1
  test_set_step(3);
 80096c2:	603d      	str	r5, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80096c4:	f7f9 fc44 	bl	8002f50 <chThdCreateStatic.constprop.103>
  test_set_step(4);
 80096c8:	2204      	movs	r2, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80096ca:	4b44      	ldr	r3, [pc, #272]	; (80097dc <rt_test_005_006_execute+0x19c>)
  test_set_step(4);
 80096cc:	603a      	str	r2, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80096ce:	6018      	str	r0, [r3, #0]
  return chSemWait(&bsp->sem);
 80096d0:	4620      	mov	r0, r4
 80096d2:	f7fa fe0d 	bl	80042f0 <chSemWait>
 80096d6:	4605      	mov	r5, r0
 80096d8:	f388 8811 	msr	BASEPRI, r8
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 80096dc:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80096de:	493b      	ldr	r1, [pc, #236]	; (80097cc <rt_test_005_006_execute+0x18c>)
 80096e0:	2800      	cmp	r0, #0
 80096e2:	bfcc      	ite	gt
 80096e4:	2000      	movgt	r0, #0
 80096e6:	2001      	movle	r0, #1
 80096e8:	f7f7 f932 	bl	8000950 <_test_assert>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d1bf      	bne.n	8009670 <rt_test_005_006_execute+0x30>
 80096f0:	f380 8811 	msr	BASEPRI, r0
    test_assert(msg == MSG_OK, "unexpected message");
 80096f4:	fab5 f085 	clz	r0, r5
 80096f8:	4939      	ldr	r1, [pc, #228]	; (80097e0 <rt_test_005_006_execute+0x1a0>)
 80096fa:	0940      	lsrs	r0, r0, #5
 80096fc:	f7f7 f928 	bl	8000950 <_test_assert>
 8009700:	2800      	cmp	r0, #0
 8009702:	d1b7      	bne.n	8009674 <rt_test_005_006_execute+0x34>
  test_set_step(5);
 8009704:	2305      	movs	r3, #5
 8009706:	603b      	str	r3, [r7, #0]
 8009708:	f388 8811 	msr	BASEPRI, r8
  if (bsp->sem.cnt < (cnt_t)1) {
 800970c:	9b03      	ldr	r3, [sp, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	dd4e      	ble.n	80097b0 <rt_test_005_006_execute+0x170>
  chSchRescheduleS();
 8009712:	f7fb feb5 	bl	8005480 <chSchRescheduleS>
 8009716:	2500      	movs	r5, #0
 8009718:	f385 8811 	msr	BASEPRI, r5
 800971c:	f04f 0820 	mov.w	r8, #32
 8009720:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8009724:	9803      	ldr	r0, [sp, #12]
 8009726:	492f      	ldr	r1, [pc, #188]	; (80097e4 <rt_test_005_006_execute+0x1a4>)
 8009728:	42a8      	cmp	r0, r5
 800972a:	bfd4      	ite	le
 800972c:	2000      	movle	r0, #0
 800972e:	2001      	movgt	r0, #1
 8009730:	f7f7 f90e 	bl	8000950 <_test_assert>
 8009734:	4606      	mov	r6, r0
 8009736:	2800      	cmp	r0, #0
 8009738:	d1b4      	bne.n	80096a4 <rt_test_005_006_execute+0x64>
 800973a:	f380 8811 	msr	BASEPRI, r0
 800973e:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8009742:	9803      	ldr	r0, [sp, #12]
 8009744:	4928      	ldr	r1, [pc, #160]	; (80097e8 <rt_test_005_006_execute+0x1a8>)
 8009746:	f1a0 0001 	sub.w	r0, r0, #1
 800974a:	fab0 f080 	clz	r0, r0
 800974e:	0940      	lsrs	r0, r0, #5
 8009750:	f7f7 f8fe 	bl	8000950 <_test_assert>
 8009754:	2800      	cmp	r0, #0
 8009756:	d18b      	bne.n	8009670 <rt_test_005_006_execute+0x30>
 8009758:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 800975c:	2306      	movs	r3, #6
 800975e:	603b      	str	r3, [r7, #0]
 8009760:	f388 8811 	msr	BASEPRI, r8
  if (bsp->sem.cnt < (cnt_t)1) {
 8009764:	9b03      	ldr	r3, [sp, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	dd26      	ble.n	80097b8 <rt_test_005_006_execute+0x178>
  chSchRescheduleS();
 800976a:	f7fb fe89 	bl	8005480 <chSchRescheduleS>
 800976e:	2600      	movs	r6, #0
 8009770:	f386 8811 	msr	BASEPRI, r6
 8009774:	2520      	movs	r5, #32
 8009776:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 800977a:	9803      	ldr	r0, [sp, #12]
 800977c:	491b      	ldr	r1, [pc, #108]	; (80097ec <rt_test_005_006_execute+0x1ac>)
 800977e:	42b0      	cmp	r0, r6
 8009780:	bfd4      	ite	le
 8009782:	2000      	movle	r0, #0
 8009784:	2001      	movgt	r0, #1
 8009786:	f7f7 f8e3 	bl	8000950 <_test_assert>
 800978a:	4604      	mov	r4, r0
 800978c:	2800      	cmp	r0, #0
 800978e:	f47f af6f 	bne.w	8009670 <rt_test_005_006_execute+0x30>
 8009792:	f380 8811 	msr	BASEPRI, r0
 8009796:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 800979a:	9803      	ldr	r0, [sp, #12]
 800979c:	4912      	ldr	r1, [pc, #72]	; (80097e8 <rt_test_005_006_execute+0x1a8>)
 800979e:	1e43      	subs	r3, r0, #1
 80097a0:	4258      	negs	r0, r3
 80097a2:	4158      	adcs	r0, r3
 80097a4:	f7f7 f8d4 	bl	8000950 <_test_assert>
 80097a8:	b150      	cbz	r0, 80097c0 <rt_test_005_006_execute+0x180>
 80097aa:	f384 8811 	msr	BASEPRI, r4
 80097ae:	e761      	b.n	8009674 <rt_test_005_006_execute+0x34>
    chSemSignalI(&bsp->sem);
 80097b0:	4620      	mov	r0, r4
 80097b2:	f7f8 fb15 	bl	8001de0 <chSemSignalI>
 80097b6:	e7ac      	b.n	8009712 <rt_test_005_006_execute+0xd2>
 80097b8:	4620      	mov	r0, r4
 80097ba:	f7f8 fb11 	bl	8001de0 <chSemSignalI>
 80097be:	e7d4      	b.n	800976a <rt_test_005_006_execute+0x12a>
 80097c0:	f380 8811 	msr	BASEPRI, r0
 80097c4:	e756      	b.n	8009674 <rt_test_005_006_execute+0x34>
 80097c6:	bf00      	nop
 80097c8:	20001a7c 	.word	0x20001a7c
 80097cc:	0800b410 	.word	0x0800b410
 80097d0:	200010f0 	.word	0x200010f0
 80097d4:	20001368 	.word	0x20001368
 80097d8:	08006071 	.word	0x08006071
 80097dc:	20001a94 	.word	0x20001a94
 80097e0:	0800b41c 	.word	0x0800b41c
 80097e4:	0800b430 	.word	0x0800b430
 80097e8:	0800b43c 	.word	0x0800b43c
 80097ec:	0800b414 	.word	0x0800b414

080097f0 <rt_test_005_001_execute>:
static void rt_test_005_001_execute(void) {
 80097f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 80097f4:	2301      	movs	r3, #1
    msg = chSemWait(&sem1);
 80097f6:	4c29      	ldr	r4, [pc, #164]	; (800989c <rt_test_005_001_execute+0xac>)
  test_set_step(1);
 80097f8:	4e29      	ldr	r6, [pc, #164]	; (80098a0 <rt_test_005_001_execute+0xb0>)
    msg = chSemWait(&sem1);
 80097fa:	4620      	mov	r0, r4
  test_set_step(1);
 80097fc:	6033      	str	r3, [r6, #0]
    msg = chSemWait(&sem1);
 80097fe:	f7fa fd77 	bl	80042f0 <chSemWait>
 8009802:	2520      	movs	r5, #32
 8009804:	4607      	mov	r7, r0
 8009806:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 800980a:	68a0      	ldr	r0, [r4, #8]
 800980c:	4925      	ldr	r1, [pc, #148]	; (80098a4 <rt_test_005_001_execute+0xb4>)
 800980e:	fab0 f080 	clz	r0, r0
 8009812:	0940      	lsrs	r0, r0, #5
 8009814:	f7f7 f89c 	bl	8000950 <_test_assert>
 8009818:	b120      	cbz	r0, 8009824 <rt_test_005_001_execute+0x34>
 800981a:	2300      	movs	r3, #0
 800981c:	f383 8811 	msr	BASEPRI, r3
}
 8009820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009824:	f380 8811 	msr	BASEPRI, r0
    test_assert(MSG_OK == msg, "wrong returned message");
 8009828:	fab7 f087 	clz	r0, r7
 800982c:	491e      	ldr	r1, [pc, #120]	; (80098a8 <rt_test_005_001_execute+0xb8>)
 800982e:	0940      	lsrs	r0, r0, #5
 8009830:	f7f7 f88e 	bl	8000950 <_test_assert>
 8009834:	4607      	mov	r7, r0
 8009836:	2800      	cmp	r0, #0
 8009838:	d1f2      	bne.n	8009820 <rt_test_005_001_execute+0x30>
  test_set_step(2);
 800983a:	f04f 0902 	mov.w	r9, #2
    chSemSignal(&sem1);
 800983e:	4620      	mov	r0, r4
  test_set_step(2);
 8009840:	f8c6 9000 	str.w	r9, [r6]
    chSemSignal(&sem1);
 8009844:	f7f9 fc14 	bl	8003070 <chSemSignal>
 8009848:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 800984c:	68a0      	ldr	r0, [r4, #8]
 800984e:	4915      	ldr	r1, [pc, #84]	; (80098a4 <rt_test_005_001_execute+0xb4>)
 8009850:	f1a0 0001 	sub.w	r0, r0, #1
 8009854:	fab0 f080 	clz	r0, r0
 8009858:	0940      	lsrs	r0, r0, #5
 800985a:	f7f7 f879 	bl	8000950 <_test_assert>
 800985e:	4680      	mov	r8, r0
 8009860:	b110      	cbz	r0, 8009868 <rt_test_005_001_execute+0x78>
 8009862:	f387 8811 	msr	BASEPRI, r7
 8009866:	e7db      	b.n	8009820 <rt_test_005_001_execute+0x30>
 8009868:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 800986c:	2303      	movs	r3, #3
    chSemReset(&sem1, 2);
 800986e:	4649      	mov	r1, r9
 8009870:	4620      	mov	r0, r4
  test_set_step(3);
 8009872:	6033      	str	r3, [r6, #0]
    chSemReset(&sem1, 2);
 8009874:	f7ff fe34 	bl	80094e0 <chSemReset>
 8009878:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 800987c:	68a0      	ldr	r0, [r4, #8]
 800987e:	4909      	ldr	r1, [pc, #36]	; (80098a4 <rt_test_005_001_execute+0xb4>)
 8009880:	f1a0 0002 	sub.w	r0, r0, #2
 8009884:	fab0 f080 	clz	r0, r0
 8009888:	0940      	lsrs	r0, r0, #5
 800988a:	f7f7 f861 	bl	8000950 <_test_assert>
 800988e:	b910      	cbnz	r0, 8009896 <rt_test_005_001_execute+0xa6>
 8009890:	f380 8811 	msr	BASEPRI, r0
 8009894:	e7c4      	b.n	8009820 <rt_test_005_001_execute+0x30>
 8009896:	f388 8811 	msr	BASEPRI, r8
 800989a:	e7c1      	b.n	8009820 <rt_test_005_001_execute+0x30>
 800989c:	20001348 	.word	0x20001348
 80098a0:	20001a7c 	.word	0x20001a7c
 80098a4:	0800b378 	.word	0x0800b378
 80098a8:	0800b350 	.word	0x0800b350
 80098ac:	00000000 	.word	0x00000000

080098b0 <rt_test_005_001_teardown>:
  chSemReset(&sem1, 0);
 80098b0:	2100      	movs	r1, #0
 80098b2:	4801      	ldr	r0, [pc, #4]	; (80098b8 <rt_test_005_001_teardown+0x8>)
 80098b4:	f7ff be14 	b.w	80094e0 <chSemReset>
 80098b8:	20001348 	.word	0x20001348
 80098bc:	00000000 	.word	0x00000000

080098c0 <chThdSetPriority>:
tprio_t chThdSetPriority(tprio_t newprio) {
 80098c0:	b510      	push	{r4, lr}
 80098c2:	2320      	movs	r3, #32
 80098c4:	f383 8811 	msr	BASEPRI, r3
  oldprio = currp->realprio;
 80098c8:	4b08      	ldr	r3, [pc, #32]	; (80098ec <chThdSetPriority+0x2c>)
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 80098ce:	6899      	ldr	r1, [r3, #8]
 80098d0:	42a1      	cmp	r1, r4
 80098d2:	d001      	beq.n	80098d8 <chThdSetPriority+0x18>
 80098d4:	4281      	cmp	r1, r0
 80098d6:	d200      	bcs.n	80098da <chThdSetPriority+0x1a>
    currp->prio = newprio;
 80098d8:	6098      	str	r0, [r3, #8]
  currp->realprio = newprio;
 80098da:	63d8      	str	r0, [r3, #60]	; 0x3c
  chSchRescheduleS();
 80098dc:	f7fb fdd0 	bl	8005480 <chSchRescheduleS>
 80098e0:	2300      	movs	r3, #0
 80098e2:	f383 8811 	msr	BASEPRI, r3
}
 80098e6:	4620      	mov	r0, r4
 80098e8:	bd10      	pop	{r4, pc}
 80098ea:	bf00      	nop
 80098ec:	200010f0 	.word	0x200010f0

080098f0 <rt_test_003_004_execute>:
    test_assert(chThdGetPriorityX() == prio + 2, "unexpected priority level");
  }

  /* [3.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 80098f0:	2202      	movs	r2, #2
static void rt_test_003_004_execute(void) {
 80098f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80098f6:	4d2f      	ldr	r5, [pc, #188]	; (80099b4 <rt_test_003_004_execute+0xc4>)
  test_set_step(2);
 80098f8:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80099c8 <rt_test_003_004_execute+0xd8>
 80098fc:	69ab      	ldr	r3, [r5, #24]
 80098fe:	f8c8 2000 	str.w	r2, [r8]
  return chThdGetSelfX()->prio;
 8009902:	689c      	ldr	r4, [r3, #8]
    chThdGetSelfX()->prio += 2;
 8009904:	18a6      	adds	r6, r4, r2
  {
    p1 = chThdSetPriority(prio + 1);
 8009906:	1c67      	adds	r7, r4, #1
    chThdGetSelfX()->prio += 2;
 8009908:	609e      	str	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 800990a:	4638      	mov	r0, r7
 800990c:	f7ff ffd8 	bl	80098c0 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 8009910:	1b00      	subs	r0, r0, r4
 8009912:	fab0 f080 	clz	r0, r0
 8009916:	4928      	ldr	r1, [pc, #160]	; (80099b8 <rt_test_003_004_execute+0xc8>)
 8009918:	0940      	lsrs	r0, r0, #5
 800991a:	f7f7 f819 	bl	8000950 <_test_assert>
 800991e:	b108      	cbz	r0, 8009924 <rt_test_003_004_execute+0x34>
    chSysLock();
    chThdGetSelfX()->prio = prio;
    chThdGetSelfX()->realprio = prio;
    chSysUnlock();
  }
}
 8009920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
 8009924:	69ab      	ldr	r3, [r5, #24]
 8009926:	4925      	ldr	r1, [pc, #148]	; (80099bc <rt_test_003_004_execute+0xcc>)
 8009928:	6898      	ldr	r0, [r3, #8]
 800992a:	1b80      	subs	r0, r0, r6
 800992c:	fab0 f080 	clz	r0, r0
 8009930:	0940      	lsrs	r0, r0, #5
 8009932:	f7f7 f80d 	bl	8000950 <_test_assert>
 8009936:	2800      	cmp	r0, #0
 8009938:	d1f2      	bne.n	8009920 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 800993a:	69ab      	ldr	r3, [r5, #24]
 800993c:	4920      	ldr	r1, [pc, #128]	; (80099c0 <rt_test_003_004_execute+0xd0>)
 800993e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009940:	1bc0      	subs	r0, r0, r7
 8009942:	fab0 f080 	clz	r0, r0
 8009946:	0940      	lsrs	r0, r0, #5
 8009948:	f7f7 f802 	bl	8000950 <_test_assert>
 800994c:	2800      	cmp	r0, #0
 800994e:	d1e7      	bne.n	8009920 <rt_test_003_004_execute+0x30>
  test_set_step(3);
 8009950:	2303      	movs	r3, #3
    p1 = chThdSetPriority(prio + 3);
 8009952:	18e6      	adds	r6, r4, r3
 8009954:	4630      	mov	r0, r6
  test_set_step(3);
 8009956:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 3);
 800995a:	f7ff ffb1 	bl	80098c0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 800995e:	1a38      	subs	r0, r7, r0
 8009960:	fab0 f080 	clz	r0, r0
 8009964:	4914      	ldr	r1, [pc, #80]	; (80099b8 <rt_test_003_004_execute+0xc8>)
 8009966:	0940      	lsrs	r0, r0, #5
 8009968:	f7f6 fff2 	bl	8000950 <_test_assert>
 800996c:	2800      	cmp	r0, #0
 800996e:	d1d7      	bne.n	8009920 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
 8009970:	69ab      	ldr	r3, [r5, #24]
 8009972:	4912      	ldr	r1, [pc, #72]	; (80099bc <rt_test_003_004_execute+0xcc>)
 8009974:	6898      	ldr	r0, [r3, #8]
 8009976:	1b80      	subs	r0, r0, r6
 8009978:	fab0 f080 	clz	r0, r0
 800997c:	0940      	lsrs	r0, r0, #5
 800997e:	f7f6 ffe7 	bl	8000950 <_test_assert>
 8009982:	2800      	cmp	r0, #0
 8009984:	d1cc      	bne.n	8009920 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 8009986:	69ab      	ldr	r3, [r5, #24]
 8009988:	490e      	ldr	r1, [pc, #56]	; (80099c4 <rt_test_003_004_execute+0xd4>)
 800998a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800998c:	1b80      	subs	r0, r0, r6
 800998e:	fab0 f080 	clz	r0, r0
 8009992:	0940      	lsrs	r0, r0, #5
 8009994:	f7f6 ffdc 	bl	8000950 <_test_assert>
 8009998:	2800      	cmp	r0, #0
 800999a:	d1c1      	bne.n	8009920 <rt_test_003_004_execute+0x30>
  test_set_step(4);
 800999c:	2304      	movs	r3, #4
 800999e:	f8c8 3000 	str.w	r3, [r8]
 80099a2:	2320      	movs	r3, #32
 80099a4:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 80099a8:	69ab      	ldr	r3, [r5, #24]
    chThdGetSelfX()->prio = prio;
 80099aa:	609c      	str	r4, [r3, #8]
    chThdGetSelfX()->realprio = prio;
 80099ac:	63dc      	str	r4, [r3, #60]	; 0x3c
 80099ae:	f380 8811 	msr	BASEPRI, r0
 80099b2:	e7b5      	b.n	8009920 <rt_test_003_004_execute+0x30>
 80099b4:	200010f0 	.word	0x200010f0
 80099b8:	0800b2ac 	.word	0x0800b2ac
 80099bc:	0800b2d0 	.word	0x0800b2d0
 80099c0:	0800b2ec 	.word	0x0800b2ec
 80099c4:	0800b314 	.word	0x0800b314
 80099c8:	20001a7c 	.word	0x20001a7c
 80099cc:	00000000 	.word	0x00000000

080099d0 <rt_test_003_003_execute>:
  test_set_step(1);
 80099d0:	2201      	movs	r2, #1
static void rt_test_003_003_execute(void) {
 80099d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d6:	4e1c      	ldr	r6, [pc, #112]	; (8009a48 <rt_test_003_003_execute+0x78>)
  test_set_step(1);
 80099d8:	4f1c      	ldr	r7, [pc, #112]	; (8009a4c <rt_test_003_003_execute+0x7c>)
  return chThdGetSelfX()->prio;
 80099da:	69b3      	ldr	r3, [r6, #24]
 80099dc:	603a      	str	r2, [r7, #0]
 80099de:	689c      	ldr	r4, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 80099e0:	18a5      	adds	r5, r4, r2
 80099e2:	4628      	mov	r0, r5
 80099e4:	f7ff ff6c 	bl	80098c0 <chThdSetPriority>
 80099e8:	4680      	mov	r8, r0
    test_assert(p1 == prio, "unexpected returned priority level");
 80099ea:	1b00      	subs	r0, r0, r4
 80099ec:	fab0 f080 	clz	r0, r0
 80099f0:	4917      	ldr	r1, [pc, #92]	; (8009a50 <rt_test_003_003_execute+0x80>)
 80099f2:	0940      	lsrs	r0, r0, #5
 80099f4:	f7f6 ffac 	bl	8000950 <_test_assert>
 80099f8:	b108      	cbz	r0, 80099fe <rt_test_003_003_execute+0x2e>
}
 80099fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099fe:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 8009a00:	4914      	ldr	r1, [pc, #80]	; (8009a54 <rt_test_003_003_execute+0x84>)
 8009a02:	6898      	ldr	r0, [r3, #8]
 8009a04:	1b40      	subs	r0, r0, r5
 8009a06:	fab0 f080 	clz	r0, r0
 8009a0a:	0940      	lsrs	r0, r0, #5
 8009a0c:	f7f6 ffa0 	bl	8000950 <_test_assert>
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d1f2      	bne.n	80099fa <rt_test_003_003_execute+0x2a>
  test_set_step(2);
 8009a14:	2302      	movs	r3, #2
    p1 = chThdSetPriority(p1);
 8009a16:	4640      	mov	r0, r8
  test_set_step(2);
 8009a18:	603b      	str	r3, [r7, #0]
    p1 = chThdSetPriority(p1);
 8009a1a:	f7ff ff51 	bl	80098c0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8009a1e:	1a28      	subs	r0, r5, r0
 8009a20:	fab0 f080 	clz	r0, r0
 8009a24:	490a      	ldr	r1, [pc, #40]	; (8009a50 <rt_test_003_003_execute+0x80>)
 8009a26:	0940      	lsrs	r0, r0, #5
 8009a28:	f7f6 ff92 	bl	8000950 <_test_assert>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d1e4      	bne.n	80099fa <rt_test_003_003_execute+0x2a>
 8009a30:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8009a32:	4908      	ldr	r1, [pc, #32]	; (8009a54 <rt_test_003_003_execute+0x84>)
 8009a34:	6898      	ldr	r0, [r3, #8]
 8009a36:	1b00      	subs	r0, r0, r4
 8009a38:	fab0 f080 	clz	r0, r0
}
 8009a3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8009a40:	0940      	lsrs	r0, r0, #5
 8009a42:	f7f6 bf85 	b.w	8000950 <_test_assert>
 8009a46:	bf00      	nop
 8009a48:	200010f0 	.word	0x200010f0
 8009a4c:	20001a7c 	.word	0x20001a7c
 8009a50:	0800b2ac 	.word	0x0800b2ac
 8009a54:	0800b2d0 	.word	0x0800b2d0
	...

08009a60 <chSysRestoreStatusX.part.2>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8009a60:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a62:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8009a66:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8009a6a:	b11c      	cbz	r4, 8009a74 <chSysRestoreStatusX.part.2+0x14>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	f383 8811 	msr	BASEPRI, r3
    else {
      chSchRescheduleS();
      chSysUnlock();
    }
  }
}
 8009a72:	bd10      	pop	{r4, pc}
      chSchRescheduleS();
 8009a74:	f7fb fd04 	bl	8005480 <chSchRescheduleS>
 8009a78:	f384 8811 	msr	BASEPRI, r4
}
 8009a7c:	bd10      	pop	{r4, pc}
 8009a7e:	bf00      	nop

08009a80 <rt_test_002_002_execute>:
  test_set_step(1);
 8009a80:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 8009a82:	b510      	push	{r4, lr}
  test_set_step(1);
 8009a84:	4c30      	ldr	r4, [pc, #192]	; (8009b48 <rt_test_002_002_execute+0xc8>)
static void rt_test_002_002_execute(void) {
 8009a86:	b086      	sub	sp, #24
  test_set_step(1);
 8009a88:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a8a:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 8009a8e:	b91b      	cbnz	r3, 8009a98 <rt_test_002_002_execute+0x18>
 8009a90:	f7f8 fa86 	bl	8001fa0 <chSysGetStatusAndLockX.part.1>
 8009a94:	f7ff ffe4 	bl	8009a60 <chSysRestoreStatusX.part.2>
  test_set_step(2);
 8009a98:	2202      	movs	r2, #2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009a9a:	2320      	movs	r3, #32
 8009a9c:	6022      	str	r2, [r4, #0]
 8009a9e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009aa2:	f3ef 8311 	mrs	r3, BASEPRI
 8009aa6:	b91b      	cbnz	r3, 8009ab0 <rt_test_002_002_execute+0x30>
 8009aa8:	f7f8 fa7a 	bl	8001fa0 <chSysGetStatusAndLockX.part.1>
 8009aac:	f7ff ffd8 	bl	8009a60 <chSysRestoreStatusX.part.2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009aba:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8009abe:	b913      	cbnz	r3, 8009ac6 <rt_test_002_002_execute+0x46>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009ac0:	2320      	movs	r3, #32
 8009ac2:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ac6:	f3ef 8311 	mrs	r3, BASEPRI
 8009aca:	b913      	cbnz	r3, 8009ad2 <rt_test_002_002_execute+0x52>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009acc:	2320      	movs	r3, #32
 8009ace:	f383 8811 	msr	BASEPRI, r3
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8009ad8:	2104      	movs	r1, #4
 8009ada:	2220      	movs	r2, #32
 8009adc:	6021      	str	r1, [r4, #0]
 8009ade:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ae2:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8009ae6:	b10a      	cbz	r2, 8009aec <rt_test_002_002_execute+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009ae8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009aec:	f3ef 8311 	mrs	r3, BASEPRI
 8009af0:	b113      	cbz	r3, 8009af8 <rt_test_002_002_execute+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009af2:	2300      	movs	r3, #0
 8009af4:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 8009af8:	2205      	movs	r2, #5
  vtp->func = NULL;
 8009afa:	2300      	movs	r3, #0
 8009afc:	6022      	str	r2, [r4, #0]
 8009afe:	9304      	str	r3, [sp, #16]
 8009b00:	2320      	movs	r3, #32
 8009b02:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8009b06:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8009b08:	ac01      	add	r4, sp, #4
  if (chVTIsArmedI(vtp)) {
 8009b0a:	b113      	cbz	r3, 8009b12 <rt_test_002_002_execute+0x92>
    chVTDoResetI(vtp);
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f7f8 f997 	bl	8001e40 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8009b12:	4620      	mov	r0, r4
 8009b14:	2300      	movs	r3, #0
 8009b16:	4a0d      	ldr	r2, [pc, #52]	; (8009b4c <rt_test_002_002_execute+0xcc>)
 8009b18:	2101      	movs	r1, #1
 8009b1a:	f7f8 f9d9 	bl	8001ed0 <chVTDoSetI>
 8009b1e:	2400      	movs	r4, #0
 8009b20:	f384 8811 	msr	BASEPRI, r4
    chThdSleep(10);
 8009b24:	200a      	movs	r0, #10
 8009b26:	f7fa f81b 	bl	8003b60 <chThdSleep>
 8009b2a:	2320      	movs	r3, #32
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	9804      	ldr	r0, [sp, #16]
 8009b32:	f384 8811 	msr	BASEPRI, r4
    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 8009b36:	fab0 f080 	clz	r0, r0
 8009b3a:	4905      	ldr	r1, [pc, #20]	; (8009b50 <rt_test_002_002_execute+0xd0>)
 8009b3c:	0940      	lsrs	r0, r0, #5
 8009b3e:	f7f6 ff07 	bl	8000950 <_test_assert>
}
 8009b42:	b006      	add	sp, #24
 8009b44:	bd10      	pop	{r4, pc}
 8009b46:	bf00      	nop
 8009b48:	20001a7c 	.word	0x20001a7c
 8009b4c:	08009b61 	.word	0x08009b61
 8009b50:	0800b238 	.word	0x0800b238
	...

08009b60 <vtcb>:
static void vtcb(void *p) {
 8009b60:	b508      	push	{r3, lr}
 8009b62:	2320      	movs	r3, #32
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f382 8811 	msr	BASEPRI, r2
 8009b6e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b72:	f3ef 8311 	mrs	r3, BASEPRI
 8009b76:	b91b      	cbnz	r3, 8009b80 <vtcb+0x20>
 8009b78:	f7f8 fa12 	bl	8001fa0 <chSysGetStatusAndLockX.part.1>
 8009b7c:	f7ff ff70 	bl	8009a60 <chSysRestoreStatusX.part.2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009b80:	2300      	movs	r3, #0
 8009b82:	f383 8811 	msr	BASEPRI, r3
}
 8009b86:	bd08      	pop	{r3, pc}
	...

08009b90 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8009b90:	b4f0      	push	{r4, r5, r6, r7}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8009b92:	2700      	movs	r7, #0
 8009b94:	4e13      	ldr	r6, [pc, #76]	; (8009be4 <__init_ram_areas+0x54>)
void __init_ram_areas(void) {
 8009b96:	4d14      	ldr	r5, [pc, #80]	; (8009be8 <__init_ram_areas+0x58>)
 8009b98:	4c14      	ldr	r4, [pc, #80]	; (8009bec <__init_ram_areas+0x5c>)
 8009b9a:	4b15      	ldr	r3, [pc, #84]	; (8009bf0 <__init_ram_areas+0x60>)
 8009b9c:	4915      	ldr	r1, [pc, #84]	; (8009bf4 <__init_ram_areas+0x64>)
 8009b9e:	f106 0c70 	add.w	ip, r6, #112	; 0x70
    while (p < rap->clear_area) {
 8009ba2:	429c      	cmp	r4, r3
 8009ba4:	d911      	bls.n	8009bca <__init_ram_areas+0x3a>
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	3904      	subs	r1, #4
      *p = *tp;
 8009baa:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8009bae:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 8009bb2:	4294      	cmp	r4, r2
 8009bb4:	d8f9      	bhi.n	8009baa <__init_ram_areas+0x1a>
 8009bb6:	43da      	mvns	r2, r3
 8009bb8:	4414      	add	r4, r2
 8009bba:	f024 0403 	bic.w	r4, r4, #3
 8009bbe:	3404      	adds	r4, #4
 8009bc0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 8009bc2:	429d      	cmp	r5, r3
 8009bc4:	d903      	bls.n	8009bce <__init_ram_areas+0x3e>
      *p = 0;
 8009bc6:	f843 7b04 	str.w	r7, [r3], #4
    while (p < rap->no_init_area) {
 8009bca:	429d      	cmp	r5, r3
 8009bcc:	d8fb      	bhi.n	8009bc6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8009bce:	4566      	cmp	r6, ip
 8009bd0:	d005      	beq.n	8009bde <__init_ram_areas+0x4e>
 8009bd2:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
 8009bd6:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
 8009bda:	3610      	adds	r6, #16
 8009bdc:	e7e1      	b.n	8009ba2 <__init_ram_areas+0x12>
#endif
}
 8009bde:	bcf0      	pop	{r4, r5, r6, r7}
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	0800a724 	.word	0x0800a724
 8009be8:	20001ad4 	.word	0x20001ad4
 8009bec:	20001ad4 	.word	0x20001ad4
 8009bf0:	20001ad4 	.word	0x20001ad4
 8009bf4:	0800c7a0 	.word	0x0800c7a0
	...

08009c00 <__default_exit>:
void __default_exit(void) {
 8009c00:	e7fe      	b.n	8009c00 <__default_exit>
 8009c02:	bf00      	nop
	...

08009c10 <__late_init>:
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
	...

08009c20 <__core_init>:
}
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop

08009c24 <memset>:
 8009c24:	b4f0      	push	{r4, r5, r6, r7}
 8009c26:	0786      	lsls	r6, r0, #30
 8009c28:	d043      	beq.n	8009cb2 <memset+0x8e>
 8009c2a:	1e54      	subs	r4, r2, #1
 8009c2c:	2a00      	cmp	r2, #0
 8009c2e:	d03e      	beq.n	8009cae <memset+0x8a>
 8009c30:	b2ca      	uxtb	r2, r1
 8009c32:	4603      	mov	r3, r0
 8009c34:	e002      	b.n	8009c3c <memset+0x18>
 8009c36:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8009c3a:	d338      	bcc.n	8009cae <memset+0x8a>
 8009c3c:	f803 2b01 	strb.w	r2, [r3], #1
 8009c40:	079d      	lsls	r5, r3, #30
 8009c42:	d1f8      	bne.n	8009c36 <memset+0x12>
 8009c44:	2c03      	cmp	r4, #3
 8009c46:	d92b      	bls.n	8009ca0 <memset+0x7c>
 8009c48:	b2cd      	uxtb	r5, r1
 8009c4a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8009c4e:	2c0f      	cmp	r4, #15
 8009c50:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8009c54:	d916      	bls.n	8009c84 <memset+0x60>
 8009c56:	f1a4 0710 	sub.w	r7, r4, #16
 8009c5a:	093f      	lsrs	r7, r7, #4
 8009c5c:	f103 0620 	add.w	r6, r3, #32
 8009c60:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8009c64:	f103 0210 	add.w	r2, r3, #16
 8009c68:	e942 5504 	strd	r5, r5, [r2, #-16]
 8009c6c:	e942 5502 	strd	r5, r5, [r2, #-8]
 8009c70:	3210      	adds	r2, #16
 8009c72:	42b2      	cmp	r2, r6
 8009c74:	d1f8      	bne.n	8009c68 <memset+0x44>
 8009c76:	f004 040f 	and.w	r4, r4, #15
 8009c7a:	3701      	adds	r7, #1
 8009c7c:	2c03      	cmp	r4, #3
 8009c7e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8009c82:	d90d      	bls.n	8009ca0 <memset+0x7c>
 8009c84:	461e      	mov	r6, r3
 8009c86:	4622      	mov	r2, r4
 8009c88:	3a04      	subs	r2, #4
 8009c8a:	2a03      	cmp	r2, #3
 8009c8c:	f846 5b04 	str.w	r5, [r6], #4
 8009c90:	d8fa      	bhi.n	8009c88 <memset+0x64>
 8009c92:	1f22      	subs	r2, r4, #4
 8009c94:	f022 0203 	bic.w	r2, r2, #3
 8009c98:	3204      	adds	r2, #4
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f004 0403 	and.w	r4, r4, #3
 8009ca0:	b12c      	cbz	r4, 8009cae <memset+0x8a>
 8009ca2:	b2c9      	uxtb	r1, r1
 8009ca4:	441c      	add	r4, r3
 8009ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8009caa:	429c      	cmp	r4, r3
 8009cac:	d1fb      	bne.n	8009ca6 <memset+0x82>
 8009cae:	bcf0      	pop	{r4, r5, r6, r7}
 8009cb0:	4770      	bx	lr
 8009cb2:	4614      	mov	r4, r2
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	e7c5      	b.n	8009c44 <memset+0x20>

08009cb8 <strchr>:
 8009cb8:	b2c9      	uxtb	r1, r1
 8009cba:	f000 0303 	and.w	r3, r0, #3
 8009cbe:	2900      	cmp	r1, #0
 8009cc0:	d043      	beq.n	8009d4a <strchr+0x92>
 8009cc2:	b17b      	cbz	r3, 8009ce4 <strchr+0x2c>
 8009cc4:	7803      	ldrb	r3, [r0, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d067      	beq.n	8009d9a <strchr+0xe2>
 8009cca:	4299      	cmp	r1, r3
 8009ccc:	d03c      	beq.n	8009d48 <strchr+0x90>
 8009cce:	1c43      	adds	r3, r0, #1
 8009cd0:	e005      	b.n	8009cde <strchr+0x26>
 8009cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cd6:	2a00      	cmp	r2, #0
 8009cd8:	d05d      	beq.n	8009d96 <strchr+0xde>
 8009cda:	428a      	cmp	r2, r1
 8009cdc:	d034      	beq.n	8009d48 <strchr+0x90>
 8009cde:	079a      	lsls	r2, r3, #30
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	d1f6      	bne.n	8009cd2 <strchr+0x1a>
 8009ce4:	b470      	push	{r4, r5, r6}
 8009ce6:	6804      	ldr	r4, [r0, #0]
 8009ce8:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8009cec:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8009cf0:	ea86 0504 	eor.w	r5, r6, r4
 8009cf4:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 8009cf8:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8009cfc:	ea23 0305 	bic.w	r3, r3, r5
 8009d00:	ea22 0204 	bic.w	r2, r2, r4
 8009d04:	4313      	orrs	r3, r2
 8009d06:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8009d0a:	d10f      	bne.n	8009d2c <strchr+0x74>
 8009d0c:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8009d10:	ea84 0506 	eor.w	r5, r4, r6
 8009d14:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 8009d18:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 8009d1c:	ea22 0205 	bic.w	r2, r2, r5
 8009d20:	ea23 0304 	bic.w	r3, r3, r4
 8009d24:	4313      	orrs	r3, r2
 8009d26:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8009d2a:	d0ef      	beq.n	8009d0c <strchr+0x54>
 8009d2c:	7803      	ldrb	r3, [r0, #0]
 8009d2e:	b143      	cbz	r3, 8009d42 <strchr+0x8a>
 8009d30:	4299      	cmp	r1, r3
 8009d32:	d102      	bne.n	8009d3a <strchr+0x82>
 8009d34:	e006      	b.n	8009d44 <strchr+0x8c>
 8009d36:	428b      	cmp	r3, r1
 8009d38:	d004      	beq.n	8009d44 <strchr+0x8c>
 8009d3a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1f9      	bne.n	8009d36 <strchr+0x7e>
 8009d42:	4618      	mov	r0, r3
 8009d44:	bc70      	pop	{r4, r5, r6}
 8009d46:	4770      	bx	lr
 8009d48:	4770      	bx	lr
 8009d4a:	b15b      	cbz	r3, 8009d64 <strchr+0xac>
 8009d4c:	7803      	ldrb	r3, [r0, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0fa      	beq.n	8009d48 <strchr+0x90>
 8009d52:	1c43      	adds	r3, r0, #1
 8009d54:	e003      	b.n	8009d5e <strchr+0xa6>
 8009d56:	7802      	ldrb	r2, [r0, #0]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	2a00      	cmp	r2, #0
 8009d5c:	d0f4      	beq.n	8009d48 <strchr+0x90>
 8009d5e:	0799      	lsls	r1, r3, #30
 8009d60:	4618      	mov	r0, r3
 8009d62:	d1f8      	bne.n	8009d56 <strchr+0x9e>
 8009d64:	6802      	ldr	r2, [r0, #0]
 8009d66:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8009d6a:	ea23 0302 	bic.w	r3, r3, r2
 8009d6e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8009d72:	d108      	bne.n	8009d86 <strchr+0xce>
 8009d74:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8009d78:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8009d7c:	ea23 0302 	bic.w	r3, r3, r2
 8009d80:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8009d84:	d0f6      	beq.n	8009d74 <strchr+0xbc>
 8009d86:	7803      	ldrb	r3, [r0, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d0dd      	beq.n	8009d48 <strchr+0x90>
 8009d8c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1fb      	bne.n	8009d8c <strchr+0xd4>
 8009d94:	4770      	bx	lr
 8009d96:	4610      	mov	r0, r2
 8009d98:	4770      	bx	lr
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop

08009da0 <strncmp>:
 8009da0:	2a00      	cmp	r2, #0
 8009da2:	d03f      	beq.n	8009e24 <strncmp+0x84>
 8009da4:	ea40 0301 	orr.w	r3, r0, r1
 8009da8:	f013 0303 	ands.w	r3, r3, #3
 8009dac:	b4f0      	push	{r4, r5, r6, r7}
 8009dae:	d125      	bne.n	8009dfc <strncmp+0x5c>
 8009db0:	2a03      	cmp	r2, #3
 8009db2:	d923      	bls.n	8009dfc <strncmp+0x5c>
 8009db4:	6804      	ldr	r4, [r0, #0]
 8009db6:	680d      	ldr	r5, [r1, #0]
 8009db8:	42ac      	cmp	r4, r5
 8009dba:	d11f      	bne.n	8009dfc <strncmp+0x5c>
 8009dbc:	3a04      	subs	r2, #4
 8009dbe:	d033      	beq.n	8009e28 <strncmp+0x88>
 8009dc0:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8009dc4:	ea25 0404 	bic.w	r4, r5, r4
 8009dc8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8009dcc:	d12f      	bne.n	8009e2e <strncmp+0x8e>
 8009dce:	1d07      	adds	r7, r0, #4
 8009dd0:	1d0d      	adds	r5, r1, #4
 8009dd2:	e00d      	b.n	8009df0 <strncmp+0x50>
 8009dd4:	f857 3b04 	ldr.w	r3, [r7], #4
 8009dd8:	680e      	ldr	r6, [r1, #0]
 8009dda:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 8009dde:	42b3      	cmp	r3, r6
 8009de0:	ea24 0403 	bic.w	r4, r4, r3
 8009de4:	d10a      	bne.n	8009dfc <strncmp+0x5c>
 8009de6:	3a04      	subs	r2, #4
 8009de8:	d01e      	beq.n	8009e28 <strncmp+0x88>
 8009dea:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8009dee:	d11b      	bne.n	8009e28 <strncmp+0x88>
 8009df0:	2a03      	cmp	r2, #3
 8009df2:	4629      	mov	r1, r5
 8009df4:	4638      	mov	r0, r7
 8009df6:	f105 0504 	add.w	r5, r5, #4
 8009dfa:	d8eb      	bhi.n	8009dd4 <strncmp+0x34>
 8009dfc:	7803      	ldrb	r3, [r0, #0]
 8009dfe:	780c      	ldrb	r4, [r1, #0]
 8009e00:	3a01      	subs	r2, #1
 8009e02:	429c      	cmp	r4, r3
 8009e04:	d10b      	bne.n	8009e1e <strncmp+0x7e>
 8009e06:	b17a      	cbz	r2, 8009e28 <strncmp+0x88>
 8009e08:	b914      	cbnz	r4, 8009e10 <strncmp+0x70>
 8009e0a:	e00d      	b.n	8009e28 <strncmp+0x88>
 8009e0c:	b162      	cbz	r2, 8009e28 <strncmp+0x88>
 8009e0e:	b173      	cbz	r3, 8009e2e <strncmp+0x8e>
 8009e10:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8009e14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009e18:	3a01      	subs	r2, #1
 8009e1a:	42a3      	cmp	r3, r4
 8009e1c:	d0f6      	beq.n	8009e0c <strncmp+0x6c>
 8009e1e:	1b18      	subs	r0, r3, r4
 8009e20:	bcf0      	pop	{r4, r5, r6, r7}
 8009e22:	4770      	bx	lr
 8009e24:	4610      	mov	r0, r2
 8009e26:	4770      	bx	lr
 8009e28:	2000      	movs	r0, #0
 8009e2a:	bcf0      	pop	{r4, r5, r6, r7}
 8009e2c:	4770      	bx	lr
 8009e2e:	4618      	mov	r0, r3
 8009e30:	e7f6      	b.n	8009e20 <strncmp+0x80>
 8009e32:	bf00      	nop

08009e34 <strncpy>:
 8009e34:	ea40 0301 	orr.w	r3, r0, r1
 8009e38:	079b      	lsls	r3, r3, #30
 8009e3a:	b470      	push	{r4, r5, r6}
 8009e3c:	d12a      	bne.n	8009e94 <strncpy+0x60>
 8009e3e:	2a03      	cmp	r2, #3
 8009e40:	d928      	bls.n	8009e94 <strncpy+0x60>
 8009e42:	460c      	mov	r4, r1
 8009e44:	4603      	mov	r3, r0
 8009e46:	4621      	mov	r1, r4
 8009e48:	f854 6b04 	ldr.w	r6, [r4], #4
 8009e4c:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 8009e50:	ea25 0506 	bic.w	r5, r5, r6
 8009e54:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8009e58:	d106      	bne.n	8009e68 <strncpy+0x34>
 8009e5a:	3a04      	subs	r2, #4
 8009e5c:	2a03      	cmp	r2, #3
 8009e5e:	f843 6b04 	str.w	r6, [r3], #4
 8009e62:	4621      	mov	r1, r4
 8009e64:	d8ef      	bhi.n	8009e46 <strncpy+0x12>
 8009e66:	b19a      	cbz	r2, 8009e90 <strncpy+0x5c>
 8009e68:	780c      	ldrb	r4, [r1, #0]
 8009e6a:	3a01      	subs	r2, #1
 8009e6c:	701c      	strb	r4, [r3, #0]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	b13c      	cbz	r4, 8009e82 <strncpy+0x4e>
 8009e72:	b16a      	cbz	r2, 8009e90 <strncpy+0x5c>
 8009e74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009e78:	3a01      	subs	r2, #1
 8009e7a:	f803 4b01 	strb.w	r4, [r3], #1
 8009e7e:	2c00      	cmp	r4, #0
 8009e80:	d1f7      	bne.n	8009e72 <strncpy+0x3e>
 8009e82:	b12a      	cbz	r2, 8009e90 <strncpy+0x5c>
 8009e84:	2100      	movs	r1, #0
 8009e86:	441a      	add	r2, r3
 8009e88:	f803 1b01 	strb.w	r1, [r3], #1
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d1fb      	bne.n	8009e88 <strncpy+0x54>
 8009e90:	bc70      	pop	{r4, r5, r6}
 8009e92:	4770      	bx	lr
 8009e94:	4603      	mov	r3, r0
 8009e96:	e7e6      	b.n	8009e66 <strncpy+0x32>

08009e98 <strpbrk>:
 8009e98:	b430      	push	{r4, r5}
 8009e9a:	7804      	ldrb	r4, [r0, #0]
 8009e9c:	b1dc      	cbz	r4, 8009ed6 <strpbrk+0x3e>
 8009e9e:	780d      	ldrb	r5, [r1, #0]
 8009ea0:	b19d      	cbz	r5, 8009eca <strpbrk+0x32>
 8009ea2:	42ac      	cmp	r4, r5
 8009ea4:	d00f      	beq.n	8009ec6 <strpbrk+0x2e>
 8009ea6:	460a      	mov	r2, r1
 8009ea8:	e001      	b.n	8009eae <strpbrk+0x16>
 8009eaa:	429c      	cmp	r4, r3
 8009eac:	d00b      	beq.n	8009ec6 <strpbrk+0x2e>
 8009eae:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1f9      	bne.n	8009eaa <strpbrk+0x12>
 8009eb6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8009eba:	2c00      	cmp	r4, #0
 8009ebc:	d1f0      	bne.n	8009ea0 <strpbrk+0x8>
 8009ebe:	7813      	ldrb	r3, [r2, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	bf08      	it	eq
 8009ec4:	2000      	moveq	r0, #0
 8009ec6:	bc30      	pop	{r4, r5}
 8009ec8:	4770      	bx	lr
 8009eca:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8009ece:	460a      	mov	r2, r1
 8009ed0:	2c00      	cmp	r4, #0
 8009ed2:	d1e5      	bne.n	8009ea0 <strpbrk+0x8>
 8009ed4:	e7f3      	b.n	8009ebe <strpbrk+0x26>
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	e7f5      	b.n	8009ec6 <strpbrk+0x2e>
 8009eda:	bf00      	nop

08009edc <strspn>:
 8009edc:	b470      	push	{r4, r5, r6}
 8009ede:	7804      	ldrb	r4, [r0, #0]
 8009ee0:	b1a4      	cbz	r4, 8009f0c <strspn+0x30>
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	780d      	ldrb	r5, [r1, #0]
 8009ee6:	b14d      	cbz	r5, 8009efc <strspn+0x20>
 8009ee8:	42a5      	cmp	r5, r4
 8009eea:	d00a      	beq.n	8009f02 <strspn+0x26>
 8009eec:	460a      	mov	r2, r1
 8009eee:	e001      	b.n	8009ef4 <strspn+0x18>
 8009ef0:	42a3      	cmp	r3, r4
 8009ef2:	d006      	beq.n	8009f02 <strspn+0x26>
 8009ef4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1f9      	bne.n	8009ef0 <strspn+0x14>
 8009efc:	1b80      	subs	r0, r0, r6
 8009efe:	bc70      	pop	{r4, r5, r6}
 8009f00:	4770      	bx	lr
 8009f02:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8009f06:	2c00      	cmp	r4, #0
 8009f08:	d1ed      	bne.n	8009ee6 <strspn+0xa>
 8009f0a:	e7f7      	b.n	8009efc <strspn+0x20>
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	e7f6      	b.n	8009efe <strspn+0x22>
